
accel-example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c838  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800c9c8  0800c9c8  0001c9c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfe8  0800cfe8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfe8  0800cfe8  0001cfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cff0  0800cff0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cff0  0800cff0  0001cff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cff4  0800cff4  0001cff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800cff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c78  200001d8  0800d1d0  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001e50  0800d1d0  00021e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001facc  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040a2  00000000  00000000  0003fd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a68  00000000  00000000  00043dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001490  00000000  00000000  00045828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000287ad  00000000  00000000  00046cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df2a  00000000  00000000  0006f465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010223a  00000000  00000000  0008d38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008574  00000000  00000000  0018f5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00197b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c9b0 	.word	0x0800c9b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c9b0 	.word	0x0800c9b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <init_mpu>:
double accel_bias_x;
double accel_bias_y;
double accel_bias_z;


HAL_StatusTypeDef init_mpu(I2C_HandleTypeDef* i2c_handler, UART_HandleTypeDef* debug_handler) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	hi2c_mpu = i2c_handler;
 8000ffa:	4a41      	ldr	r2, [pc, #260]	; (8001100 <init_mpu+0x110>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]
	uart_debug_handler = debug_handler;
 8001000:	4a40      	ldr	r2, [pc, #256]	; (8001104 <init_mpu+0x114>)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef ret;
    // Write power management configuration
	uint8_t data = MPU_PWR_MGMT_1_DEFAULT_CONFIG;
 8001006:	2300      	movs	r3, #0
 8001008:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 800100a:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <init_mpu+0x110>)
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	2332      	movs	r3, #50	; 0x32
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2301      	movs	r3, #1
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	f107 030e 	add.w	r3, r7, #14
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	226b      	movs	r2, #107	; 0x6b
 8001020:	21d0      	movs	r1, #208	; 0xd0
 8001022:	f001 f98f 	bl	8002344 <HAL_I2C_Mem_Write>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d008      	beq.n	8001042 <init_mpu+0x52>
		DEBUG_PRINT("Failed to initialize power management configuration");
 8001030:	4b34      	ldr	r3, [pc, #208]	; (8001104 <init_mpu+0x114>)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	2332      	movs	r3, #50	; 0x32
 8001036:	2233      	movs	r2, #51	; 0x33
 8001038:	4933      	ldr	r1, [pc, #204]	; (8001108 <init_mpu+0x118>)
 800103a:	f003 fd55 	bl	8004ae8 <HAL_UART_Transmit>
		return ret;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	e05a      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write filter configuration
	data = MPU_FILTER_DELAY_5_MS;
 8001042:	2303      	movs	r3, #3
 8001044:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_FILTER_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <init_mpu+0x110>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	2332      	movs	r3, #50	; 0x32
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	2301      	movs	r3, #1
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	f107 030e 	add.w	r3, r7, #14
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	221a      	movs	r2, #26
 800105c:	21d0      	movs	r1, #208	; 0xd0
 800105e:	f001 f971 	bl	8002344 <HAL_I2C_Mem_Write>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d008      	beq.n	800107e <init_mpu+0x8e>
		DEBUG_PRINT("Failed to initialize DLPF configuration");
 800106c:	4b25      	ldr	r3, [pc, #148]	; (8001104 <init_mpu+0x114>)
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	2332      	movs	r3, #50	; 0x32
 8001072:	2227      	movs	r2, #39	; 0x27
 8001074:	4925      	ldr	r1, [pc, #148]	; (800110c <init_mpu+0x11c>)
 8001076:	f003 fd37 	bl	8004ae8 <HAL_UART_Transmit>
		return ret;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	e03c      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write gyroscope configuration
	data = MPU_GYRO_RANGE_500_DPS;
 800107e:	2308      	movs	r3, #8
 8001080:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <init_mpu+0x110>)
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	2332      	movs	r3, #50	; 0x32
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2301      	movs	r3, #1
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f107 030e 	add.w	r3, r7, #14
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	221b      	movs	r2, #27
 8001098:	21d0      	movs	r1, #208	; 0xd0
 800109a:	f001 f953 	bl	8002344 <HAL_I2C_Mem_Write>
 800109e:	4603      	mov	r3, r0
 80010a0:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <init_mpu+0xca>
		DEBUG_PRINT("Failed to initialize gyroscope configuration");
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <init_mpu+0x114>)
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	2332      	movs	r3, #50	; 0x32
 80010ae:	222c      	movs	r2, #44	; 0x2c
 80010b0:	4917      	ldr	r1, [pc, #92]	; (8001110 <init_mpu+0x120>)
 80010b2:	f003 fd19 	bl	8004ae8 <HAL_UART_Transmit>
		return ret;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	e01e      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write accelerometer configuration
	data = MPU_ACCEL_RANGE_8G;
 80010ba:	2310      	movs	r3, #16
 80010bc:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <init_mpu+0x110>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	2332      	movs	r3, #50	; 0x32
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	f107 030e 	add.w	r3, r7, #14
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	221c      	movs	r2, #28
 80010d4:	21d0      	movs	r1, #208	; 0xd0
 80010d6:	f001 f935 	bl	8002344 <HAL_I2C_Mem_Write>
 80010da:	4603      	mov	r3, r0
 80010dc:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <init_mpu+0x106>
		DEBUG_PRINT("Failed to initialize accelerometer configuration");
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <init_mpu+0x114>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	2332      	movs	r3, #50	; 0x32
 80010ea:	2230      	movs	r2, #48	; 0x30
 80010ec:	4909      	ldr	r1, [pc, #36]	; (8001114 <init_mpu+0x124>)
 80010ee:	f003 fcfb 	bl	8004ae8 <HAL_UART_Transmit>
		return ret;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	e000      	b.n	80010f8 <init_mpu+0x108>
	}
    return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200001f4 	.word	0x200001f4
 8001104:	200001f8 	.word	0x200001f8
 8001108:	0800c9c8 	.word	0x0800c9c8
 800110c:	0800c9fc 	.word	0x0800c9fc
 8001110:	0800ca24 	.word	0x0800ca24
 8001114:	0800ca54 	.word	0x0800ca54

08001118 <calibrate_mpu>:

HAL_StatusTypeDef calibrate_mpu() {
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b096      	sub	sp, #88	; 0x58
 800111c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	double target_vector[3] = {1, 0, 0};
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b4b      	ldr	r3, [pc, #300]	; (8001250 <calibrate_mpu+0x138>)
 8001124:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	f04f 0300 	mov.w	r3, #0
 8001130:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double measured_accel[3];
	double preliminary_bias[3];
	for (int i = 0; i < CALIBRATION_ITERATIONS; i++) {
 8001140:	2300      	movs	r3, #0
 8001142:	657b      	str	r3, [r7, #84]	; 0x54
 8001144:	e03a      	b.n	80011bc <calibrate_mpu+0xa4>
		ret = get_accel(measured_accel);
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f88c 	bl	8001268 <get_accel>
 8001150:	4603      	mov	r3, r0
 8001152:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (ret) {
 8001156:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800115a:	2b00      	cmp	r3, #0
 800115c:	d009      	beq.n	8001172 <calibrate_mpu+0x5a>
			DEBUG_PRINT("Failed to calibrate accelerometer");
 800115e:	4b3d      	ldr	r3, [pc, #244]	; (8001254 <calibrate_mpu+0x13c>)
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	2332      	movs	r3, #50	; 0x32
 8001164:	2221      	movs	r2, #33	; 0x21
 8001166:	493c      	ldr	r1, [pc, #240]	; (8001258 <calibrate_mpu+0x140>)
 8001168:	f003 fcbe 	bl	8004ae8 <HAL_UART_Transmit>
			return ret;
 800116c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001170:	e066      	b.n	8001240 <calibrate_mpu+0x128>
		}
		for (int j = 0; j < 3; j++) {
 8001172:	2300      	movs	r3, #0
 8001174:	653b      	str	r3, [r7, #80]	; 0x50
 8001176:	e01b      	b.n	80011b0 <calibrate_mpu+0x98>
			preliminary_bias[j] += measured_accel[j];
 8001178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	3358      	adds	r3, #88	; 0x58
 800117e:	443b      	add	r3, r7
 8001180:	3b58      	subs	r3, #88	; 0x58
 8001182:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	3358      	adds	r3, #88	; 0x58
 800118c:	443b      	add	r3, r7
 800118e:	3b40      	subs	r3, #64	; 0x40
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff f87a 	bl	800028c <__adddf3>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800119e:	00c9      	lsls	r1, r1, #3
 80011a0:	3158      	adds	r1, #88	; 0x58
 80011a2:	4439      	add	r1, r7
 80011a4:	3958      	subs	r1, #88	; 0x58
 80011a6:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++) {
 80011aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011ac:	3301      	adds	r3, #1
 80011ae:	653b      	str	r3, [r7, #80]	; 0x50
 80011b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	dde0      	ble.n	8001178 <calibrate_mpu+0x60>
	for (int i = 0; i < CALIBRATION_ITERATIONS; i++) {
 80011b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011b8:	3301      	adds	r3, #1
 80011ba:	657b      	str	r3, [r7, #84]	; 0x54
 80011bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011be:	f240 52db 	movw	r2, #1499	; 0x5db
 80011c2:	4293      	cmp	r3, r2
 80011c4:	ddbf      	ble.n	8001146 <calibrate_mpu+0x2e>
		}
	}
	accel_bias_x = target_vector[0] - (preliminary_bias[0] / CALIBRATION_ITERATIONS);
 80011c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80011ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011ce:	a31e      	add	r3, pc, #120	; (adr r3, 8001248 <calibrate_mpu+0x130>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7ff fb3a 	bl	800084c <__aeabi_ddiv>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4620      	mov	r0, r4
 80011de:	4629      	mov	r1, r5
 80011e0:	f7ff f852 	bl	8000288 <__aeabi_dsub>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	491c      	ldr	r1, [pc, #112]	; (800125c <calibrate_mpu+0x144>)
 80011ea:	e9c1 2300 	strd	r2, r3, [r1]
	accel_bias_y = target_vector[1] - (preliminary_bias[1] / CALIBRATION_ITERATIONS);
 80011ee:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80011f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011f6:	a314      	add	r3, pc, #80	; (adr r3, 8001248 <calibrate_mpu+0x130>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff fb26 	bl	800084c <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4620      	mov	r0, r4
 8001206:	4629      	mov	r1, r5
 8001208:	f7ff f83e 	bl	8000288 <__aeabi_dsub>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4913      	ldr	r1, [pc, #76]	; (8001260 <calibrate_mpu+0x148>)
 8001212:	e9c1 2300 	strd	r2, r3, [r1]
	accel_bias_z = target_vector[2] - (preliminary_bias[2] / CALIBRATION_ITERATIONS);
 8001216:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800121a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800121e:	a30a      	add	r3, pc, #40	; (adr r3, 8001248 <calibrate_mpu+0x130>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f7ff fb12 	bl	800084c <__aeabi_ddiv>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4620      	mov	r0, r4
 800122e:	4629      	mov	r1, r5
 8001230:	f7ff f82a 	bl	8000288 <__aeabi_dsub>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	490a      	ldr	r1, [pc, #40]	; (8001264 <calibrate_mpu+0x14c>)
 800123a:	e9c1 2300 	strd	r2, r3, [r1]
	return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3758      	adds	r7, #88	; 0x58
 8001244:	46bd      	mov	sp, r7
 8001246:	bdb0      	pop	{r4, r5, r7, pc}
 8001248:	00000000 	.word	0x00000000
 800124c:	40977000 	.word	0x40977000
 8001250:	3ff00000 	.word	0x3ff00000
 8001254:	200001f8 	.word	0x200001f8
 8001258:	0800ca88 	.word	0x0800ca88
 800125c:	20000200 	.word	0x20000200
 8001260:	20000208 	.word	0x20000208
 8001264:	20000210 	.word	0x20000210

08001268 <get_accel>:

HAL_StatusTypeDef get_accel(double accel[3]) {
 8001268:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 800126c:	b08b      	sub	sp, #44	; 0x2c
 800126e:	af04      	add	r7, sp, #16
 8001270:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t accel_buf[6];
	ret = HAL_I2C_Mem_Read(hi2c_mpu, MPU_ADDRESS, MPU_REG_ACEL_DATA, I2C_MEMADD_SIZE_8BIT, accel_buf, 6, I2C_DELAY);
 8001272:	4b43      	ldr	r3, [pc, #268]	; (8001380 <get_accel+0x118>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	2332      	movs	r3, #50	; 0x32
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	2306      	movs	r3, #6
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2301      	movs	r3, #1
 8001286:	223b      	movs	r2, #59	; 0x3b
 8001288:	21d0      	movs	r1, #208	; 0xd0
 800128a:	f001 f96f 	bl	800256c <HAL_I2C_Mem_Read>
 800128e:	4603      	mov	r3, r0
 8001290:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d008      	beq.n	80012aa <get_accel+0x42>
		DEBUG_PRINT("Failed to fetch accelerometer value");
 8001298:	4b3a      	ldr	r3, [pc, #232]	; (8001384 <get_accel+0x11c>)
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	2332      	movs	r3, #50	; 0x32
 800129e:	2223      	movs	r2, #35	; 0x23
 80012a0:	4939      	ldr	r1, [pc, #228]	; (8001388 <get_accel+0x120>)
 80012a2:	f003 fc21 	bl	8004ae8 <HAL_UART_Transmit>
		return ret;
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	e065      	b.n	8001376 <get_accel+0x10e>
	}
	int16_t accel_raw_x = (accel_buf[0] << 8) | accel_buf[1];
 80012aa:	7a3b      	ldrb	r3, [r7, #8]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	7a7b      	ldrb	r3, [r7, #9]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	82bb      	strh	r3, [r7, #20]
	int16_t accel_raw_y = (accel_buf[2] << 8) | accel_buf[3];
 80012b8:	7abb      	ldrb	r3, [r7, #10]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	7afb      	ldrb	r3, [r7, #11]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	827b      	strh	r3, [r7, #18]
	int16_t accel_raw_z = (accel_buf[4] << 8) | accel_buf[5];
 80012c6:	7b3b      	ldrb	r3, [r7, #12]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	7b7b      	ldrb	r3, [r7, #13]
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	823b      	strh	r3, [r7, #16]

	accel[0] = (double)accel_raw_x / MPU_ACCEL_RANGE_8G_LSB + accel_bias_x;
 80012d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f923 	bl	8000524 <__aeabi_i2d>
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b2a      	ldr	r3, [pc, #168]	; (800138c <get_accel+0x124>)
 80012e4:	f7ff fab2 	bl	800084c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <get_accel+0x128>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	f7fe ffc9 	bl	800028c <__adddf3>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	e9c1 2300 	strd	r2, r3, [r1]
	accel[1] = (double)accel_raw_y / MPU_ACCEL_RANGE_8G_LSB + accel_bias_y;
 8001304:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f90b 	bl	8000524 <__aeabi_i2d>
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b1e      	ldr	r3, [pc, #120]	; (800138c <get_accel+0x124>)
 8001314:	f7ff fa9a 	bl	800084c <__aeabi_ddiv>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4690      	mov	r8, r2
 800131e:	4699      	mov	r9, r3
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <get_accel+0x12c>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f101 0408 	add.w	r4, r1, #8
 800132c:	4640      	mov	r0, r8
 800132e:	4649      	mov	r1, r9
 8001330:	f7fe ffac 	bl	800028c <__adddf3>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	e9c4 2300 	strd	r2, r3, [r4]
	accel[2] = (double)accel_raw_z / MPU_ACCEL_RANGE_8G_LSB + accel_bias_z;
 800133c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f8ef 	bl	8000524 <__aeabi_i2d>
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <get_accel+0x124>)
 800134c:	f7ff fa7e 	bl	800084c <__aeabi_ddiv>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4690      	mov	r8, r2
 8001356:	4699      	mov	r9, r3
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <get_accel+0x130>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	f101 0410 	add.w	r4, r1, #16
 8001364:	4640      	mov	r0, r8
 8001366:	4649      	mov	r1, r9
 8001368:	f7fe ff90 	bl	800028c <__adddf3>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	e9c4 2300 	strd	r2, r3, [r4]
	return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	371c      	adds	r7, #28
 800137a:	46bd      	mov	sp, r7
 800137c:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 8001380:	200001f4 	.word	0x200001f4
 8001384:	200001f8 	.word	0x200001f8
 8001388:	0800caac 	.word	0x0800caac
 800138c:	40b00000 	.word	0x40b00000
 8001390:	20000200 	.word	0x20000200
 8001394:	20000208 	.word	0x20000208
 8001398:	20000210 	.word	0x20000210

0800139c <init_spatial>:

double current_acceleration[3] = {0.0, 0.0, 0.0};
double current_velocity[3] = {0.0, 0.0, 0.0};
double current_position[3] = {0.0, 0.0, 0.0};

HAL_StatusTypeDef init_spatial(I2C_HandleTypeDef* i2c_handler, UART_HandleTypeDef* debug_handler) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	ret = init_mpu(i2c_handler, debug_handler);
 80013a6:	6839      	ldr	r1, [r7, #0]
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff fe21 	bl	8000ff0 <init_mpu>
 80013ae:	4603      	mov	r3, r0
 80013b0:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <init_spatial+0x20>
//		DEBUG_PRINT("Failed hardware initialization");
		return ret;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	e009      	b.n	80013d0 <init_spatial+0x34>
	}
	ret = calibrate_mpu();
 80013bc:	f7ff feac 	bl	8001118 <calibrate_mpu>
 80013c0:	4603      	mov	r3, r0
 80013c2:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <init_spatial+0x32>
		return ret;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	e000      	b.n	80013d0 <init_spatial+0x34>
	}
	return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <update_acceleration>:

HAL_StatusTypeDef update_acceleration() {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	ret = get_accel(current_acceleration);
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <update_acceleration+0x24>)
 80013e0:	f7ff ff42 	bl	8001268 <get_accel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
	if (ret) {
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <update_acceleration+0x1a>
//		DEBUG_PRINT("Failed to update acceleration");
		return ret;
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	e000      	b.n	80013f4 <update_acceleration+0x1c>
	}
	return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000218 	.word	0x20000218

08001400 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 20);
 8001408:	1d39      	adds	r1, r7, #4
 800140a:	2314      	movs	r3, #20
 800140c:	2201      	movs	r2, #1
 800140e:	4804      	ldr	r0, [pc, #16]	; (8001420 <__io_putchar+0x20>)
 8001410:	f003 fb6a 	bl	8004ae8 <HAL_UART_Transmit>
	return ch;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000284 	.word	0x20000284

08001424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001428:	f000 fc0c 	bl	8001c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142c:	f000 f81e 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001430:	f000 f8de 	bl	80015f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001434:	f000 f8ac 	bl	8001590 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001438:	f000 f86a 	bl	8001510 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting kernel...\r\n");
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <main+0x38>)
 800143e:	f007 fe6f 	bl	8009120 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001442:	f004 f8ed 	bl	8005620 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001446:	4a06      	ldr	r2, [pc, #24]	; (8001460 <main+0x3c>)
 8001448:	2100      	movs	r1, #0
 800144a:	4806      	ldr	r0, [pc, #24]	; (8001464 <main+0x40>)
 800144c:	f004 f932 	bl	80056b4 <osThreadNew>
 8001450:	4603      	mov	r3, r0
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <main+0x44>)
 8001454:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001456:	f004 f907 	bl	8005668 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800145a:	e7fe      	b.n	800145a <main+0x36>
 800145c:	0800cadc 	.word	0x0800cadc
 8001460:	0800cb50 	.word	0x0800cb50
 8001464:	080016d9 	.word	0x080016d9
 8001468:	2000030c 	.word	0x2000030c

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b096      	sub	sp, #88	; 0x58
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	2244      	movs	r2, #68	; 0x44
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f007 ff50 	bl	8009320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	463b      	mov	r3, r7
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800148e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001492:	f001 fce3 	bl	8002e5c <HAL_PWREx_ControlVoltageScaling>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800149c:	f000 f954 	bl	8001748 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a0:	2302      	movs	r3, #2
 80014a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014aa:	2310      	movs	r3, #16
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ae:	2302      	movs	r3, #2
 80014b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b2:	2302      	movs	r3, #2
 80014b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014ba:	230a      	movs	r3, #10
 80014bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014be:	2307      	movs	r3, #7
 80014c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 fd1a 	bl	8002f08 <HAL_RCC_OscConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80014da:	f000 f935 	bl	8001748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014de:	230f      	movs	r3, #15
 80014e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e2:	2303      	movs	r3, #3
 80014e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014f2:	463b      	mov	r3, r7
 80014f4:	2104      	movs	r1, #4
 80014f6:	4618      	mov	r0, r3
 80014f8:	f002 f8e2 	bl	80036c0 <HAL_RCC_ClockConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001502:	f000 f921 	bl	8001748 <Error_Handler>
  }
}
 8001506:	bf00      	nop
 8001508:	3758      	adds	r7, #88	; 0x58
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <MX_I2C1_Init+0x74>)
 8001516:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <MX_I2C1_Init+0x78>)
 8001518:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_I2C1_Init+0x74>)
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <MX_I2C1_Init+0x7c>)
 800151e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <MX_I2C1_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_I2C1_Init+0x74>)
 8001528:	2201      	movs	r2, #1
 800152a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <MX_I2C1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_I2C1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <MX_I2C1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_I2C1_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_I2C1_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800154a:	480e      	ldr	r0, [pc, #56]	; (8001584 <MX_I2C1_Init+0x74>)
 800154c:	f000 fe5e 	bl	800220c <HAL_I2C_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001556:	f000 f8f7 	bl	8001748 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800155a:	2100      	movs	r1, #0
 800155c:	4809      	ldr	r0, [pc, #36]	; (8001584 <MX_I2C1_Init+0x74>)
 800155e:	f001 fbd7 	bl	8002d10 <HAL_I2CEx_ConfigAnalogFilter>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001568:	f000 f8ee 	bl	8001748 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_I2C1_Init+0x74>)
 8001570:	f001 fc19 	bl	8002da6 <HAL_I2CEx_ConfigDigitalFilter>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800157a:	f000 f8e5 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000230 	.word	0x20000230
 8001588:	40005400 	.word	0x40005400
 800158c:	10909cec 	.word	0x10909cec

08001590 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 8001596:	4a15      	ldr	r2, [pc, #84]	; (80015ec <MX_USART2_UART_Init+0x5c>)
 8001598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015d4:	f003 fa3a 	bl	8004a4c <HAL_UART_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015de:	f000 f8b3 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000284 	.word	0x20000284
 80015ec:	40004400 	.word	0x40004400

080015f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <MX_GPIO_Init+0xe0>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a31      	ldr	r2, [pc, #196]	; (80016d0 <MX_GPIO_Init+0xe0>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <MX_GPIO_Init+0xe0>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161e:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <MX_GPIO_Init+0xe0>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a2b      	ldr	r2, [pc, #172]	; (80016d0 <MX_GPIO_Init+0xe0>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <MX_GPIO_Init+0xe0>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <MX_GPIO_Init+0xe0>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4a25      	ldr	r2, [pc, #148]	; (80016d0 <MX_GPIO_Init+0xe0>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001642:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <MX_GPIO_Init+0xe0>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <MX_GPIO_Init+0xe0>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	4a1f      	ldr	r2, [pc, #124]	; (80016d0 <MX_GPIO_Init+0xe0>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <MX_GPIO_Init+0xe0>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2120      	movs	r1, #32
 800166a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166e:	f000 fdb5 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001678:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800167c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	4812      	ldr	r0, [pc, #72]	; (80016d4 <MX_GPIO_Init+0xe4>)
 800168a:	f000 fbfd 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800168e:	2320      	movs	r3, #32
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a8:	f000 fbee 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INT_Pin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 80016ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4804      	ldr	r0, [pc, #16]	; (80016d4 <MX_GPIO_Init+0xe4>)
 80016c4:	f000 fbe0 	bl	8001e88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	; 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	48000800 	.word	0x48000800

080016d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af04      	add	r7, sp, #16
 80016de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	init_spatial(&hi2c1, &huart2);
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <StartDefaultTask+0x3c>)
 80016e2:	480d      	ldr	r0, [pc, #52]	; (8001718 <StartDefaultTask+0x40>)
 80016e4:	f7ff fe5a 	bl	800139c <init_spatial>
  /* Infinite loop */
  for(;;)
  {
	  update_acceleration();
 80016e8:	f7ff fe76 	bl	80013d8 <update_acceleration>
	  printf("x: %.2f, y: %.2f, z: %.2f\r\n", current_acceleration[0], current_acceleration[1], current_acceleration[2]);
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <StartDefaultTask+0x44>)
 80016ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <StartDefaultTask+0x44>)
 80016f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016f8:	4908      	ldr	r1, [pc, #32]	; (800171c <StartDefaultTask+0x44>)
 80016fa:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80016fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001702:	e9cd 2300 	strd	r2, r3, [sp]
 8001706:	4622      	mov	r2, r4
 8001708:	462b      	mov	r3, r5
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <StartDefaultTask+0x48>)
 800170c:	f007 fca2 	bl	8009054 <iprintf>
  {
 8001710:	e7ea      	b.n	80016e8 <StartDefaultTask+0x10>
 8001712:	bf00      	nop
 8001714:	20000284 	.word	0x20000284
 8001718:	20000230 	.word	0x20000230
 800171c:	20000218 	.word	0x20000218
 8001720:	0800caf0 	.word	0x0800caf0

08001724 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001736:	f000 faa5 	bl	8001c84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40012c00 	.word	0x40012c00

08001748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
}
 800174e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001750:	e7fe      	b.n	8001750 <Error_Handler+0x8>
	...

08001754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_MspInit+0x4c>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175e:	4a10      	ldr	r2, [pc, #64]	; (80017a0 <HAL_MspInit+0x4c>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6613      	str	r3, [r2, #96]	; 0x60
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_MspInit+0x4c>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_MspInit+0x4c>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <HAL_MspInit+0x4c>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177c:	6593      	str	r3, [r2, #88]	; 0x58
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_MspInit+0x4c>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	210f      	movs	r1, #15
 800178e:	f06f 0001 	mvn.w	r0, #1
 8001792:	f000 fb4f 	bl	8001e34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000

080017a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0ac      	sub	sp, #176	; 0xb0
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2288      	movs	r2, #136	; 0x88
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f007 fdab 	bl	8009320 <memset>
  if(hi2c->Instance==I2C1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a21      	ldr	r2, [pc, #132]	; (8001854 <HAL_I2C_MspInit+0xb0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d13b      	bne.n	800184c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017d4:	2340      	movs	r3, #64	; 0x40
 80017d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017d8:	2300      	movs	r3, #0
 80017da:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 f9c3 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017ec:	f7ff ffac 	bl	8001748 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_I2C_MspInit+0xb4>)
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	4a18      	ldr	r2, [pc, #96]	; (8001858 <HAL_I2C_MspInit+0xb4>)
 80017f6:	f043 0302 	orr.w	r3, r3, #2
 80017fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_I2C_MspInit+0xb4>)
 80017fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ACCEL_SCL_Pin|ACCEL_SDA_Pin;
 8001808:	f44f 7340 	mov.w	r3, #768	; 0x300
 800180c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001810:	2312      	movs	r3, #18
 8001812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001822:	2304      	movs	r3, #4
 8001824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800182c:	4619      	mov	r1, r3
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <HAL_I2C_MspInit+0xb8>)
 8001830:	f000 fb2a 	bl	8001e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_I2C_MspInit+0xb4>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_I2C_MspInit+0xb4>)
 800183a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800183e:	6593      	str	r3, [r2, #88]	; 0x58
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_I2C_MspInit+0xb4>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800184c:	bf00      	nop
 800184e:	37b0      	adds	r7, #176	; 0xb0
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40005400 	.word	0x40005400
 8001858:	40021000 	.word	0x40021000
 800185c:	48000400 	.word	0x48000400

08001860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0ac      	sub	sp, #176	; 0xb0
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2288      	movs	r2, #136	; 0x88
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f007 fd4d 	bl	8009320 <memset>
  if(huart->Instance==USART2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a21      	ldr	r2, [pc, #132]	; (8001910 <HAL_UART_MspInit+0xb0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d13b      	bne.n	8001908 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001890:	2302      	movs	r3, #2
 8001892:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001894:	2300      	movs	r3, #0
 8001896:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4618      	mov	r0, r3
 800189e:	f002 f965 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018a8:	f7ff ff4e 	bl	8001748 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_UART_MspInit+0xb4>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	4a18      	ldr	r2, [pc, #96]	; (8001914 <HAL_UART_MspInit+0xb4>)
 80018b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b6:	6593      	str	r3, [r2, #88]	; 0x58
 80018b8:	4b16      	ldr	r3, [pc, #88]	; (8001914 <HAL_UART_MspInit+0xb4>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <HAL_UART_MspInit+0xb4>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	4a12      	ldr	r2, [pc, #72]	; (8001914 <HAL_UART_MspInit+0xb4>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d0:	4b10      	ldr	r3, [pc, #64]	; (8001914 <HAL_UART_MspInit+0xb4>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018dc:	230c      	movs	r3, #12
 80018de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f4:	2307      	movs	r3, #7
 80018f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018fe:	4619      	mov	r1, r3
 8001900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001904:	f000 fac0 	bl	8001e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001908:	bf00      	nop
 800190a:	37b0      	adds	r7, #176	; 0xb0
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40004400 	.word	0x40004400
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	; 0x30
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001926:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <HAL_InitTick+0xc8>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192a:	4a2d      	ldr	r2, [pc, #180]	; (80019e0 <HAL_InitTick+0xc8>)
 800192c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001930:	6613      	str	r3, [r2, #96]	; 0x60
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <HAL_InitTick+0xc8>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800193e:	f107 020c 	add.w	r2, r7, #12
 8001942:	f107 0310 	add.w	r3, r7, #16
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f002 f87d 	bl	8003a48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800194e:	f002 f865 	bl	8003a1c <HAL_RCC_GetPCLK2Freq>
 8001952:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001956:	4a23      	ldr	r2, [pc, #140]	; (80019e4 <HAL_InitTick+0xcc>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	0c9b      	lsrs	r3, r3, #18
 800195e:	3b01      	subs	r3, #1
 8001960:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <HAL_InitTick+0xd0>)
 8001964:	4a21      	ldr	r2, [pc, #132]	; (80019ec <HAL_InitTick+0xd4>)
 8001966:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001968:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <HAL_InitTick+0xd0>)
 800196a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800196e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001970:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_InitTick+0xd0>)
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_InitTick+0xd0>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_InitTick+0xd0>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_InitTick+0xd0>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001988:	4817      	ldr	r0, [pc, #92]	; (80019e8 <HAL_InitTick+0xd0>)
 800198a:	f002 fdab 	bl	80044e4 <HAL_TIM_Base_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001998:	2b00      	cmp	r3, #0
 800199a:	d11b      	bne.n	80019d4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800199c:	4812      	ldr	r0, [pc, #72]	; (80019e8 <HAL_InitTick+0xd0>)
 800199e:	f002 fe03 	bl	80045a8 <HAL_TIM_Base_Start_IT>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80019a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d111      	bne.n	80019d4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019b0:	2019      	movs	r0, #25
 80019b2:	f000 fa5b 	bl	8001e6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d808      	bhi.n	80019ce <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80019bc:	2200      	movs	r2, #0
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	2019      	movs	r0, #25
 80019c2:	f000 fa37 	bl	8001e34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <HAL_InitTick+0xd8>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	e002      	b.n	80019d4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80019d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3730      	adds	r7, #48	; 0x30
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000
 80019e4:	431bde83 	.word	0x431bde83
 80019e8:	20000310 	.word	0x20000310
 80019ec:	40012c00 	.word	0x40012c00
 80019f0:	20000004 	.word	0x20000004

080019f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <NMI_Handler+0x4>
	...

080019fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("ENCOUNTERED HARD FAULT, UNABLE TO CONTINUE!");
 8001a00:	4801      	ldr	r0, [pc, #4]	; (8001a08 <HardFault_Handler+0xc>)
 8001a02:	f007 fb27 	bl	8009054 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <HardFault_Handler+0xa>
 8001a08:	0800cb0c 	.word	0x0800cb0c

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <MemManage_Handler+0x4>

08001a12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <BusFault_Handler+0x4>

08001a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <UsageFault_Handler+0x4>

08001a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a32:	f002 fe29 	bl	8004688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000310 	.word	0x20000310

08001a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return 1;
 8001a44:	2301      	movs	r3, #1
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_kill>:

int _kill(int pid, int sig)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a5a:	f007 fd19 	bl	8009490 <__errno>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2216      	movs	r2, #22
 8001a62:	601a      	str	r2, [r3, #0]
  return -1;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_exit>:

void _exit (int status)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ffe7 	bl	8001a50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a82:	e7fe      	b.n	8001a82 <_exit+0x12>

08001a84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e00a      	b.n	8001aac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a96:	f3af 8000 	nop.w
 8001a9a:	4601      	mov	r1, r0
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	60ba      	str	r2, [r7, #8]
 8001aa2:	b2ca      	uxtb	r2, r1
 8001aa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf0      	blt.n	8001a96 <_read+0x12>
  }

  return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e009      	b.n	8001ae4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	60ba      	str	r2, [r7, #8]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fc91 	bl	8001400 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbf1      	blt.n	8001ad0 <_write+0x12>
  }
  return len;
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_close>:

int _close(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_isatty>:

int _isatty(int file)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <_sbrk+0x5c>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <_sbrk+0x60>)
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_sbrk+0x64>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <_sbrk+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d207      	bcs.n	8001ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b90:	f007 fc7e 	bl	8009490 <__errno>
 8001b94:	4603      	mov	r3, r0
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20018000 	.word	0x20018000
 8001bc0:	00000400 	.word	0x00000400
 8001bc4:	2000035c 	.word	0x2000035c
 8001bc8:	20001e50 	.word	0x20001e50

08001bcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <SystemInit+0x20>)
 8001bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <SystemInit+0x20>)
 8001bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bf4:	f7ff ffea 	bl	8001bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001bfa:	490d      	ldr	r1, [pc, #52]	; (8001c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <LoopForever+0xe>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c10:	4c0a      	ldr	r4, [pc, #40]	; (8001c3c <LoopForever+0x16>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f007 fc3d 	bl	800949c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c22:	f7ff fbff 	bl	8001424 <main>

08001c26 <LoopForever>:

LoopForever:
    b LoopForever
 8001c26:	e7fe      	b.n	8001c26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c30:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001c34:	0800cff8 	.word	0x0800cff8
  ldr r2, =_sbss
 8001c38:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001c3c:	20001e50 	.word	0x20001e50

08001c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC1_2_IRQHandler>
	...

08001c44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <HAL_Init+0x3c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <HAL_Init+0x3c>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	f000 f8df 	bl	8001e1e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c60:	200f      	movs	r0, #15
 8001c62:	f7ff fe59 	bl	8001918 <HAL_InitTick>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	e001      	b.n	8001c76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c72:	f7ff fd6f 	bl	8001754 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c76:	79fb      	ldrb	r3, [r7, #7]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40022000 	.word	0x40022000

08001c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	20000360 	.word	0x20000360

08001cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_GetTick+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000360 	.word	0x20000360

08001cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	60d3      	str	r3, [r2, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <__NVIC_GetPriorityGrouping+0x18>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	f003 0307 	and.w	r3, r3, #7
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	db0b      	blt.n	8001d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	f003 021f 	and.w	r2, r3, #31
 8001d40:	4907      	ldr	r1, [pc, #28]	; (8001d60 <__NVIC_EnableIRQ+0x38>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	2001      	movs	r0, #1
 8001d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	; (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	; (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
         );
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ff4c 	bl	8001cc4 <__NVIC_SetPriorityGrouping>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e46:	f7ff ff61 	bl	8001d0c <__NVIC_GetPriorityGrouping>
 8001e4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	6978      	ldr	r0, [r7, #20]
 8001e52:	f7ff ffb1 	bl	8001db8 <NVIC_EncodePriority>
 8001e56:	4602      	mov	r2, r0
 8001e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff80 	bl	8001d64 <__NVIC_SetPriority>
}
 8001e64:	bf00      	nop
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff54 	bl	8001d28 <__NVIC_EnableIRQ>
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e96:	e17f      	b.n	8002198 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8171 	beq.w	8002192 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d005      	beq.n	8001ec8 <HAL_GPIO_Init+0x40>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d130      	bne.n	8001f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001efe:	2201      	movs	r2, #1
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	f003 0201 	and.w	r2, r3, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d118      	bne.n	8001f68 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	f003 0201 	and.w	r2, r3, #1
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d017      	beq.n	8001fa4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d123      	bne.n	8001ff8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	08da      	lsrs	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3208      	adds	r2, #8
 8001fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	6939      	ldr	r1, [r7, #16]
 8001ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0203 	and.w	r2, r3, #3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80ac 	beq.w	8002192 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	4b5f      	ldr	r3, [pc, #380]	; (80021b8 <HAL_GPIO_Init+0x330>)
 800203c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203e:	4a5e      	ldr	r2, [pc, #376]	; (80021b8 <HAL_GPIO_Init+0x330>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6613      	str	r3, [r2, #96]	; 0x60
 8002046:	4b5c      	ldr	r3, [pc, #368]	; (80021b8 <HAL_GPIO_Init+0x330>)
 8002048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002052:	4a5a      	ldr	r2, [pc, #360]	; (80021bc <HAL_GPIO_Init+0x334>)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800207c:	d025      	beq.n	80020ca <HAL_GPIO_Init+0x242>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4f      	ldr	r2, [pc, #316]	; (80021c0 <HAL_GPIO_Init+0x338>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01f      	beq.n	80020c6 <HAL_GPIO_Init+0x23e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4e      	ldr	r2, [pc, #312]	; (80021c4 <HAL_GPIO_Init+0x33c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d019      	beq.n	80020c2 <HAL_GPIO_Init+0x23a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4d      	ldr	r2, [pc, #308]	; (80021c8 <HAL_GPIO_Init+0x340>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <HAL_GPIO_Init+0x236>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <HAL_GPIO_Init+0x344>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00d      	beq.n	80020ba <HAL_GPIO_Init+0x232>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <HAL_GPIO_Init+0x348>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <HAL_GPIO_Init+0x22e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4a      	ldr	r2, [pc, #296]	; (80021d4 <HAL_GPIO_Init+0x34c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_GPIO_Init+0x22a>
 80020ae:	2306      	movs	r3, #6
 80020b0:	e00c      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020b2:	2307      	movs	r3, #7
 80020b4:	e00a      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020b6:	2305      	movs	r3, #5
 80020b8:	e008      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020ba:	2304      	movs	r3, #4
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020be:	2303      	movs	r3, #3
 80020c0:	e004      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e002      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020ca:	2300      	movs	r3, #0
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	f002 0203 	and.w	r2, r2, #3
 80020d2:	0092      	lsls	r2, r2, #2
 80020d4:	4093      	lsls	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020dc:	4937      	ldr	r1, [pc, #220]	; (80021bc <HAL_GPIO_Init+0x334>)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <HAL_GPIO_Init+0x350>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800210e:	4a32      	ldr	r2, [pc, #200]	; (80021d8 <HAL_GPIO_Init+0x350>)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002114:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <HAL_GPIO_Init+0x350>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002138:	4a27      	ldr	r2, [pc, #156]	; (80021d8 <HAL_GPIO_Init+0x350>)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800213e:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <HAL_GPIO_Init+0x350>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002162:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <HAL_GPIO_Init+0x350>)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_GPIO_Init+0x350>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800218c:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <HAL_GPIO_Init+0x350>)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3301      	adds	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa22 f303 	lsr.w	r3, r2, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f47f ae78 	bne.w	8001e98 <HAL_GPIO_Init+0x10>
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40010000 	.word	0x40010000
 80021c0:	48000400 	.word	0x48000400
 80021c4:	48000800 	.word	0x48000800
 80021c8:	48000c00 	.word	0x48000c00
 80021cc:	48001000 	.word	0x48001000
 80021d0:	48001400 	.word	0x48001400
 80021d4:	48001800 	.word	0x48001800
 80021d8:	40010400 	.word	0x40010400

080021dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	807b      	strh	r3, [r7, #2]
 80021e8:	4613      	mov	r3, r2
 80021ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ec:	787b      	ldrb	r3, [r7, #1]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e08d      	b.n	800233a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff fab6 	bl	80017a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2224      	movs	r2, #36	; 0x24
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0201 	bic.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800225c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800226c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d107      	bne.n	8002286 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	e006      	b.n	8002294 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002292:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d108      	bne.n	80022ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	e007      	b.n	80022be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69d9      	ldr	r1, [r3, #28]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1a      	ldr	r2, [r3, #32]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	4608      	mov	r0, r1
 800234e:	4611      	mov	r1, r2
 8002350:	461a      	mov	r2, r3
 8002352:	4603      	mov	r3, r0
 8002354:	817b      	strh	r3, [r7, #10]
 8002356:	460b      	mov	r3, r1
 8002358:	813b      	strh	r3, [r7, #8]
 800235a:	4613      	mov	r3, r2
 800235c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b20      	cmp	r3, #32
 8002368:	f040 80f9 	bne.w	800255e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_I2C_Mem_Write+0x34>
 8002372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800237e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0ed      	b.n	8002560 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_I2C_Mem_Write+0x4e>
 800238e:	2302      	movs	r3, #2
 8002390:	e0e6      	b.n	8002560 <HAL_I2C_Mem_Write+0x21c>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800239a:	f7ff fc87 	bl	8001cac <HAL_GetTick>
 800239e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2319      	movs	r3, #25
 80023a6:	2201      	movs	r2, #1
 80023a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fac3 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0d1      	b.n	8002560 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2221      	movs	r2, #33	; 0x21
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2240      	movs	r2, #64	; 0x40
 80023c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a3a      	ldr	r2, [r7, #32]
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023e4:	88f8      	ldrh	r0, [r7, #6]
 80023e6:	893a      	ldrh	r2, [r7, #8]
 80023e8:	8979      	ldrh	r1, [r7, #10]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	4603      	mov	r3, r0
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f9d3 	bl	80027a0 <I2C_RequestMemoryWrite>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0a9      	b.n	8002560 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	2bff      	cmp	r3, #255	; 0xff
 8002414:	d90e      	bls.n	8002434 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	22ff      	movs	r2, #255	; 0xff
 800241a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	b2da      	uxtb	r2, r3
 8002422:	8979      	ldrh	r1, [r7, #10]
 8002424:	2300      	movs	r3, #0
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 fc3d 	bl	8002cac <I2C_TransferConfig>
 8002432:	e00f      	b.n	8002454 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002442:	b2da      	uxtb	r2, r3
 8002444:	8979      	ldrh	r1, [r7, #10]
 8002446:	2300      	movs	r3, #0
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fc2c 	bl	8002cac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fabc 	bl	80029d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e07b      	b.n	8002560 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	781a      	ldrb	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d034      	beq.n	800250c <HAL_I2C_Mem_Write+0x1c8>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d130      	bne.n	800250c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	2200      	movs	r2, #0
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fa3f 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e04d      	b.n	8002560 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2bff      	cmp	r3, #255	; 0xff
 80024cc:	d90e      	bls.n	80024ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	22ff      	movs	r2, #255	; 0xff
 80024d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	8979      	ldrh	r1, [r7, #10]
 80024dc:	2300      	movs	r3, #0
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 fbe1 	bl	8002cac <I2C_TransferConfig>
 80024ea:	e00f      	b.n	800250c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	8979      	ldrh	r1, [r7, #10]
 80024fe:	2300      	movs	r3, #0
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fbd0 	bl	8002cac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d19e      	bne.n	8002454 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 faa2 	bl	8002a64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e01a      	b.n	8002560 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2220      	movs	r2, #32
 8002530:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_I2C_Mem_Write+0x224>)
 800253e:	400b      	ands	r3, r1
 8002540:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800255e:	2302      	movs	r3, #2
  }
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	fe00e800 	.word	0xfe00e800

0800256c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	4608      	mov	r0, r1
 8002576:	4611      	mov	r1, r2
 8002578:	461a      	mov	r2, r3
 800257a:	4603      	mov	r3, r0
 800257c:	817b      	strh	r3, [r7, #10]
 800257e:	460b      	mov	r3, r1
 8002580:	813b      	strh	r3, [r7, #8]
 8002582:	4613      	mov	r3, r2
 8002584:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b20      	cmp	r3, #32
 8002590:	f040 80fd 	bne.w	800278e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_I2C_Mem_Read+0x34>
 800259a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800259c:	2b00      	cmp	r3, #0
 800259e:	d105      	bne.n	80025ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0f1      	b.n	8002790 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_I2C_Mem_Read+0x4e>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e0ea      	b.n	8002790 <HAL_I2C_Mem_Read+0x224>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025c2:	f7ff fb73 	bl	8001cac <HAL_GetTick>
 80025c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2319      	movs	r3, #25
 80025ce:	2201      	movs	r2, #1
 80025d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f9af 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0d5      	b.n	8002790 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2222      	movs	r2, #34	; 0x22
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2240      	movs	r2, #64	; 0x40
 80025f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a3a      	ldr	r2, [r7, #32]
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002604:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800260c:	88f8      	ldrh	r0, [r7, #6]
 800260e:	893a      	ldrh	r2, [r7, #8]
 8002610:	8979      	ldrh	r1, [r7, #10]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	4603      	mov	r3, r0
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f913 	bl	8002848 <I2C_RequestMemoryRead>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0ad      	b.n	8002790 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	2bff      	cmp	r3, #255	; 0xff
 800263c:	d90e      	bls.n	800265c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	22ff      	movs	r2, #255	; 0xff
 8002642:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	b2da      	uxtb	r2, r3
 800264a:	8979      	ldrh	r1, [r7, #10]
 800264c:	4b52      	ldr	r3, [pc, #328]	; (8002798 <HAL_I2C_Mem_Read+0x22c>)
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fb29 	bl	8002cac <I2C_TransferConfig>
 800265a:	e00f      	b.n	800267c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266a:	b2da      	uxtb	r2, r3
 800266c:	8979      	ldrh	r1, [r7, #10]
 800266e:	4b4a      	ldr	r3, [pc, #296]	; (8002798 <HAL_I2C_Mem_Read+0x22c>)
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fb18 	bl	8002cac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	2200      	movs	r2, #0
 8002684:	2104      	movs	r1, #4
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 f956 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e07c      	b.n	8002790 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d034      	beq.n	800273c <HAL_I2C_Mem_Read+0x1d0>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d130      	bne.n	800273c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	2200      	movs	r2, #0
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f927 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e04d      	b.n	8002790 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2bff      	cmp	r3, #255	; 0xff
 80026fc:	d90e      	bls.n	800271c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	22ff      	movs	r2, #255	; 0xff
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	b2da      	uxtb	r2, r3
 800270a:	8979      	ldrh	r1, [r7, #10]
 800270c:	2300      	movs	r3, #0
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fac9 	bl	8002cac <I2C_TransferConfig>
 800271a:	e00f      	b.n	800273c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	b2da      	uxtb	r2, r3
 800272c:	8979      	ldrh	r1, [r7, #10]
 800272e:	2300      	movs	r3, #0
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fab8 	bl	8002cac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d19a      	bne.n	800267c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f98a 	bl	8002a64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e01a      	b.n	8002790 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2220      	movs	r2, #32
 8002760:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_I2C_Mem_Read+0x230>)
 800276e:	400b      	ands	r3, r1
 8002770:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e000      	b.n	8002790 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800278e:	2302      	movs	r3, #2
  }
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	80002400 	.word	0x80002400
 800279c:	fe00e800 	.word	0xfe00e800

080027a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	4608      	mov	r0, r1
 80027aa:	4611      	mov	r1, r2
 80027ac:	461a      	mov	r2, r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	817b      	strh	r3, [r7, #10]
 80027b2:	460b      	mov	r3, r1
 80027b4:	813b      	strh	r3, [r7, #8]
 80027b6:	4613      	mov	r3, r2
 80027b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	8979      	ldrh	r1, [r7, #10]
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <I2C_RequestMemoryWrite+0xa4>)
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fa6f 	bl	8002cac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	69b9      	ldr	r1, [r7, #24]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f8ff 	bl	80029d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e02c      	b.n	800283c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d105      	bne.n	80027f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027e8:	893b      	ldrh	r3, [r7, #8]
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	629a      	str	r2, [r3, #40]	; 0x28
 80027f2:	e015      	b.n	8002820 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027f4:	893b      	ldrh	r3, [r7, #8]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	69b9      	ldr	r1, [r7, #24]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f8e5 	bl	80029d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e012      	b.n	800283c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002816:	893b      	ldrh	r3, [r7, #8]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2200      	movs	r2, #0
 8002828:	2180      	movs	r1, #128	; 0x80
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f884 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	80002000 	.word	0x80002000

08002848 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	4608      	mov	r0, r1
 8002852:	4611      	mov	r1, r2
 8002854:	461a      	mov	r2, r3
 8002856:	4603      	mov	r3, r0
 8002858:	817b      	strh	r3, [r7, #10]
 800285a:	460b      	mov	r3, r1
 800285c:	813b      	strh	r3, [r7, #8]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	8979      	ldrh	r1, [r7, #10]
 8002868:	4b20      	ldr	r3, [pc, #128]	; (80028ec <I2C_RequestMemoryRead+0xa4>)
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	2300      	movs	r3, #0
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fa1c 	bl	8002cac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	69b9      	ldr	r1, [r7, #24]
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f8ac 	bl	80029d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e02c      	b.n	80028e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d105      	bne.n	800289a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800288e:	893b      	ldrh	r3, [r7, #8]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	629a      	str	r2, [r3, #40]	; 0x28
 8002898:	e015      	b.n	80028c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800289a:	893b      	ldrh	r3, [r7, #8]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	b29b      	uxth	r3, r3
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	69b9      	ldr	r1, [r7, #24]
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f892 	bl	80029d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e012      	b.n	80028e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028bc:	893b      	ldrh	r3, [r7, #8]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2140      	movs	r1, #64	; 0x40
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f831 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	80002000 	.word	0x80002000

080028f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b02      	cmp	r3, #2
 8002904:	d103      	bne.n	800290e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d007      	beq.n	800292c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	619a      	str	r2, [r3, #24]
  }
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002948:	e031      	b.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002950:	d02d      	beq.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002952:	f7ff f9ab 	bl	8001cac <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d302      	bcc.n	8002968 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d122      	bne.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	4013      	ands	r3, r2
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	429a      	cmp	r2, r3
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	429a      	cmp	r2, r3
 8002984:	d113      	bne.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f043 0220 	orr.w	r2, r3, #32
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e00f      	b.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4013      	ands	r3, r2
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d0be      	beq.n	800294a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029e2:	e033      	b.n	8002a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f87f 	bl	8002aec <I2C_IsErrorOccurred>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e031      	b.n	8002a5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029fe:	d025      	beq.n	8002a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a00:	f7ff f954 	bl	8001cac <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d302      	bcc.n	8002a16 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d11a      	bne.n	8002a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d013      	beq.n	8002a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f043 0220 	orr.w	r2, r3, #32
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e007      	b.n	8002a5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d1c4      	bne.n	80029e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a70:	e02f      	b.n	8002ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f838 	bl	8002aec <I2C_IsErrorOccurred>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e02d      	b.n	8002ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7ff f911 	bl	8001cac <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d11a      	bne.n	8002ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d013      	beq.n	8002ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f043 0220 	orr.w	r2, r3, #32
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e007      	b.n	8002ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d1c8      	bne.n	8002a72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d068      	beq.n	8002bea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b20:	e049      	b.n	8002bb6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b28:	d045      	beq.n	8002bb6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b2a:	f7ff f8bf 	bl	8001cac <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d302      	bcc.n	8002b40 <I2C_IsErrorOccurred+0x54>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d13a      	bne.n	8002bb6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b52:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b62:	d121      	bne.n	8002ba8 <I2C_IsErrorOccurred+0xbc>
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b6a:	d01d      	beq.n	8002ba8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002b6c:	7cfb      	ldrb	r3, [r7, #19]
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d01a      	beq.n	8002ba8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b80:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b82:	f7ff f893 	bl	8001cac <HAL_GetTick>
 8002b86:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b88:	e00e      	b.n	8002ba8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b8a:	f7ff f88f 	bl	8001cac <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b19      	cmp	r3, #25
 8002b96:	d907      	bls.n	8002ba8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	f043 0320 	orr.w	r3, r3, #32
 8002b9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002ba6:	e006      	b.n	8002bb6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d1e9      	bne.n	8002b8a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d003      	beq.n	8002bcc <I2C_IsErrorOccurred+0xe0>
 8002bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0aa      	beq.n	8002b22 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d103      	bne.n	8002bdc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00b      	beq.n	8002c14 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00b      	beq.n	8002c36 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	f043 0308 	orr.w	r3, r3, #8
 8002c24:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00b      	beq.n	8002c58 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	f043 0302 	orr.w	r3, r3, #2
 8002c46:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01c      	beq.n	8002c9a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7ff fe45 	bl	80028f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <I2C_IsErrorOccurred+0x1bc>)
 8002c72:	400b      	ands	r3, r1
 8002c74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3728      	adds	r7, #40	; 0x28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	fe00e800 	.word	0xfe00e800

08002cac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	817b      	strh	r3, [r7, #10]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cbe:	897b      	ldrh	r3, [r7, #10]
 8002cc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cc4:	7a7b      	ldrb	r3, [r7, #9]
 8002cc6:	041b      	lsls	r3, r3, #16
 8002cc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ccc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cda:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	0d5b      	lsrs	r3, r3, #21
 8002ce6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <I2C_TransferConfig+0x60>)
 8002cec:	430b      	orrs	r3, r1
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	ea02 0103 	and.w	r1, r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	03ff63ff 	.word	0x03ff63ff

08002d10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d138      	bne.n	8002d98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e032      	b.n	8002d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2224      	movs	r2, #36	; 0x24
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6819      	ldr	r1, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d139      	bne.n	8002e30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e033      	b.n	8002e32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2224      	movs	r2, #36	; 0x24
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002df8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e000      	b.n	8002e32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e30:	2302      	movs	r3, #2
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40007000 	.word	0x40007000

08002e5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e6a:	d130      	bne.n	8002ece <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e6c:	4b23      	ldr	r3, [pc, #140]	; (8002efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e78:	d038      	beq.n	8002eec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e7a:	4b20      	ldr	r3, [pc, #128]	; (8002efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e82:	4a1e      	ldr	r2, [pc, #120]	; (8002efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2232      	movs	r2, #50	; 0x32
 8002e90:	fb02 f303 	mul.w	r3, r2, r3
 8002e94:	4a1b      	ldr	r2, [pc, #108]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	0c9b      	lsrs	r3, r3, #18
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ea0:	e002      	b.n	8002ea8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ea8:	4b14      	ldr	r3, [pc, #80]	; (8002efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb4:	d102      	bne.n	8002ebc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f2      	bne.n	8002ea2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec8:	d110      	bne.n	8002eec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e00f      	b.n	8002eee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eda:	d007      	beq.n	8002eec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002edc:	4b07      	ldr	r3, [pc, #28]	; (8002efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ee4:	4a05      	ldr	r2, [pc, #20]	; (8002efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40007000 	.word	0x40007000
 8002f00:	20000000 	.word	0x20000000
 8002f04:	431bde83 	.word	0x431bde83

08002f08 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e3ca      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1a:	4b97      	ldr	r3, [pc, #604]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f24:	4b94      	ldr	r3, [pc, #592]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80e4 	beq.w	8003104 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <HAL_RCC_OscConfig+0x4a>
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b0c      	cmp	r3, #12
 8002f46:	f040 808b 	bne.w	8003060 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	f040 8087 	bne.w	8003060 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f52:	4b89      	ldr	r3, [pc, #548]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_RCC_OscConfig+0x62>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e3a2      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1a      	ldr	r2, [r3, #32]
 8002f6e:	4b82      	ldr	r3, [pc, #520]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d004      	beq.n	8002f84 <HAL_RCC_OscConfig+0x7c>
 8002f7a:	4b7f      	ldr	r3, [pc, #508]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f82:	e005      	b.n	8002f90 <HAL_RCC_OscConfig+0x88>
 8002f84:	4b7c      	ldr	r3, [pc, #496]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8a:	091b      	lsrs	r3, r3, #4
 8002f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d223      	bcs.n	8002fdc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fd87 	bl	8003aac <RCC_SetFlashLatencyFromMSIRange>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e383      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fa8:	4b73      	ldr	r3, [pc, #460]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a72      	ldr	r2, [pc, #456]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fae:	f043 0308 	orr.w	r3, r3, #8
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	4b70      	ldr	r3, [pc, #448]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	496d      	ldr	r1, [pc, #436]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fc6:	4b6c      	ldr	r3, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	4968      	ldr	r1, [pc, #416]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]
 8002fda:	e025      	b.n	8003028 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fdc:	4b66      	ldr	r3, [pc, #408]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a65      	ldr	r2, [pc, #404]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	f043 0308 	orr.w	r3, r3, #8
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b63      	ldr	r3, [pc, #396]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4960      	ldr	r1, [pc, #384]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	021b      	lsls	r3, r3, #8
 8003008:	495b      	ldr	r1, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 800300a:	4313      	orrs	r3, r2
 800300c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d109      	bne.n	8003028 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fd47 	bl	8003aac <RCC_SetFlashLatencyFromMSIRange>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e343      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003028:	f000 fc4a 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 800302c:	4602      	mov	r2, r0
 800302e:	4b52      	ldr	r3, [pc, #328]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	4950      	ldr	r1, [pc, #320]	; (800317c <HAL_RCC_OscConfig+0x274>)
 800303a:	5ccb      	ldrb	r3, [r1, r3]
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
 8003044:	4a4e      	ldr	r2, [pc, #312]	; (8003180 <HAL_RCC_OscConfig+0x278>)
 8003046:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003048:	4b4e      	ldr	r3, [pc, #312]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe fc63 	bl	8001918 <HAL_InitTick>
 8003052:	4603      	mov	r3, r0
 8003054:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d052      	beq.n	8003102 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	e327      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d032      	beq.n	80030ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003068:	4b43      	ldr	r3, [pc, #268]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a42      	ldr	r2, [pc, #264]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003074:	f7fe fe1a 	bl	8001cac <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800307c:	f7fe fe16 	bl	8001cac <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e310      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800308e:	4b3a      	ldr	r3, [pc, #232]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800309a:	4b37      	ldr	r3, [pc, #220]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a36      	ldr	r2, [pc, #216]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 80030a0:	f043 0308 	orr.w	r3, r3, #8
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	4b34      	ldr	r3, [pc, #208]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	4931      	ldr	r1, [pc, #196]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b8:	4b2f      	ldr	r3, [pc, #188]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	492c      	ldr	r1, [pc, #176]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
 80030cc:	e01a      	b.n	8003104 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a29      	ldr	r2, [pc, #164]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030da:	f7fe fde7 	bl	8001cac <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030e2:	f7fe fde3 	bl	8001cac <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e2dd      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030f4:	4b20      	ldr	r3, [pc, #128]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f0      	bne.n	80030e2 <HAL_RCC_OscConfig+0x1da>
 8003100:	e000      	b.n	8003104 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003102:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d074      	beq.n	80031fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b08      	cmp	r3, #8
 8003114:	d005      	beq.n	8003122 <HAL_RCC_OscConfig+0x21a>
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b0c      	cmp	r3, #12
 800311a:	d10e      	bne.n	800313a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b03      	cmp	r3, #3
 8003120:	d10b      	bne.n	800313a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003122:	4b15      	ldr	r3, [pc, #84]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d064      	beq.n	80031f8 <HAL_RCC_OscConfig+0x2f0>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d160      	bne.n	80031f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e2ba      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x24a>
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a0b      	ldr	r2, [pc, #44]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 800314a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	e026      	b.n	80031a0 <HAL_RCC_OscConfig+0x298>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800315a:	d115      	bne.n	8003188 <HAL_RCC_OscConfig+0x280>
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a05      	ldr	r2, [pc, #20]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8003162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a02      	ldr	r2, [pc, #8]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 800316e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	e014      	b.n	80031a0 <HAL_RCC_OscConfig+0x298>
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	0800cb74 	.word	0x0800cb74
 8003180:	20000000 	.word	0x20000000
 8003184:	20000004 	.word	0x20000004
 8003188:	4ba0      	ldr	r3, [pc, #640]	; (800340c <HAL_RCC_OscConfig+0x504>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a9f      	ldr	r2, [pc, #636]	; (800340c <HAL_RCC_OscConfig+0x504>)
 800318e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b9d      	ldr	r3, [pc, #628]	; (800340c <HAL_RCC_OscConfig+0x504>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a9c      	ldr	r2, [pc, #624]	; (800340c <HAL_RCC_OscConfig+0x504>)
 800319a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d013      	beq.n	80031d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe fd80 	bl	8001cac <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b0:	f7fe fd7c 	bl	8001cac <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e276      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c2:	4b92      	ldr	r3, [pc, #584]	; (800340c <HAL_RCC_OscConfig+0x504>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x2a8>
 80031ce:	e014      	b.n	80031fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe fd6c 	bl	8001cac <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d8:	f7fe fd68 	bl	8001cac <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	; 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e262      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ea:	4b88      	ldr	r3, [pc, #544]	; (800340c <HAL_RCC_OscConfig+0x504>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x2d0>
 80031f6:	e000      	b.n	80031fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d060      	beq.n	80032c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b04      	cmp	r3, #4
 800320a:	d005      	beq.n	8003218 <HAL_RCC_OscConfig+0x310>
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d119      	bne.n	8003246 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d116      	bne.n	8003246 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003218:	4b7c      	ldr	r3, [pc, #496]	; (800340c <HAL_RCC_OscConfig+0x504>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_RCC_OscConfig+0x328>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e23f      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003230:	4b76      	ldr	r3, [pc, #472]	; (800340c <HAL_RCC_OscConfig+0x504>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	061b      	lsls	r3, r3, #24
 800323e:	4973      	ldr	r1, [pc, #460]	; (800340c <HAL_RCC_OscConfig+0x504>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003244:	e040      	b.n	80032c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d023      	beq.n	8003296 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800324e:	4b6f      	ldr	r3, [pc, #444]	; (800340c <HAL_RCC_OscConfig+0x504>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6e      	ldr	r2, [pc, #440]	; (800340c <HAL_RCC_OscConfig+0x504>)
 8003254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325a:	f7fe fd27 	bl	8001cac <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003262:	f7fe fd23 	bl	8001cac <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e21d      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003274:	4b65      	ldr	r3, [pc, #404]	; (800340c <HAL_RCC_OscConfig+0x504>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003280:	4b62      	ldr	r3, [pc, #392]	; (800340c <HAL_RCC_OscConfig+0x504>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	495f      	ldr	r1, [pc, #380]	; (800340c <HAL_RCC_OscConfig+0x504>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
 8003294:	e018      	b.n	80032c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003296:	4b5d      	ldr	r3, [pc, #372]	; (800340c <HAL_RCC_OscConfig+0x504>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a5c      	ldr	r2, [pc, #368]	; (800340c <HAL_RCC_OscConfig+0x504>)
 800329c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fe fd03 	bl	8001cac <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032aa:	f7fe fcff 	bl	8001cac <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e1f9      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032bc:	4b53      	ldr	r3, [pc, #332]	; (800340c <HAL_RCC_OscConfig+0x504>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f0      	bne.n	80032aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d03c      	beq.n	800334e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01c      	beq.n	8003316 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032dc:	4b4b      	ldr	r3, [pc, #300]	; (800340c <HAL_RCC_OscConfig+0x504>)
 80032de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e2:	4a4a      	ldr	r2, [pc, #296]	; (800340c <HAL_RCC_OscConfig+0x504>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fe fcde 	bl	8001cac <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f4:	f7fe fcda 	bl	8001cac <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1d4      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003306:	4b41      	ldr	r3, [pc, #260]	; (800340c <HAL_RCC_OscConfig+0x504>)
 8003308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0ef      	beq.n	80032f4 <HAL_RCC_OscConfig+0x3ec>
 8003314:	e01b      	b.n	800334e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003316:	4b3d      	ldr	r3, [pc, #244]	; (800340c <HAL_RCC_OscConfig+0x504>)
 8003318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331c:	4a3b      	ldr	r2, [pc, #236]	; (800340c <HAL_RCC_OscConfig+0x504>)
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003326:	f7fe fcc1 	bl	8001cac <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800332e:	f7fe fcbd 	bl	8001cac <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e1b7      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003340:	4b32      	ldr	r3, [pc, #200]	; (800340c <HAL_RCC_OscConfig+0x504>)
 8003342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1ef      	bne.n	800332e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 80a6 	beq.w	80034a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335c:	2300      	movs	r3, #0
 800335e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003360:	4b2a      	ldr	r3, [pc, #168]	; (800340c <HAL_RCC_OscConfig+0x504>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10d      	bne.n	8003388 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800336c:	4b27      	ldr	r3, [pc, #156]	; (800340c <HAL_RCC_OscConfig+0x504>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003370:	4a26      	ldr	r2, [pc, #152]	; (800340c <HAL_RCC_OscConfig+0x504>)
 8003372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003376:	6593      	str	r3, [r2, #88]	; 0x58
 8003378:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_RCC_OscConfig+0x504>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003384:	2301      	movs	r3, #1
 8003386:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003388:	4b21      	ldr	r3, [pc, #132]	; (8003410 <HAL_RCC_OscConfig+0x508>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d118      	bne.n	80033c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003394:	4b1e      	ldr	r3, [pc, #120]	; (8003410 <HAL_RCC_OscConfig+0x508>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a1d      	ldr	r2, [pc, #116]	; (8003410 <HAL_RCC_OscConfig+0x508>)
 800339a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a0:	f7fe fc84 	bl	8001cac <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a8:	f7fe fc80 	bl	8001cac <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e17a      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_RCC_OscConfig+0x508>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d108      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4d8>
 80033ce:	4b0f      	ldr	r3, [pc, #60]	; (800340c <HAL_RCC_OscConfig+0x504>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	4a0d      	ldr	r2, [pc, #52]	; (800340c <HAL_RCC_OscConfig+0x504>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033de:	e029      	b.n	8003434 <HAL_RCC_OscConfig+0x52c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b05      	cmp	r3, #5
 80033e6:	d115      	bne.n	8003414 <HAL_RCC_OscConfig+0x50c>
 80033e8:	4b08      	ldr	r3, [pc, #32]	; (800340c <HAL_RCC_OscConfig+0x504>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ee:	4a07      	ldr	r2, [pc, #28]	; (800340c <HAL_RCC_OscConfig+0x504>)
 80033f0:	f043 0304 	orr.w	r3, r3, #4
 80033f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <HAL_RCC_OscConfig+0x504>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	4a03      	ldr	r2, [pc, #12]	; (800340c <HAL_RCC_OscConfig+0x504>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003408:	e014      	b.n	8003434 <HAL_RCC_OscConfig+0x52c>
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	40007000 	.word	0x40007000
 8003414:	4b9c      	ldr	r3, [pc, #624]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	4a9b      	ldr	r2, [pc, #620]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003424:	4b98      	ldr	r3, [pc, #608]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	4a97      	ldr	r2, [pc, #604]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 800342c:	f023 0304 	bic.w	r3, r3, #4
 8003430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d016      	beq.n	800346a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fe fc36 	bl	8001cac <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003442:	e00a      	b.n	800345a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003444:	f7fe fc32 	bl	8001cac <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e12a      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345a:	4b8b      	ldr	r3, [pc, #556]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0ed      	beq.n	8003444 <HAL_RCC_OscConfig+0x53c>
 8003468:	e015      	b.n	8003496 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346a:	f7fe fc1f 	bl	8001cac <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003470:	e00a      	b.n	8003488 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003472:	f7fe fc1b 	bl	8001cac <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003480:	4293      	cmp	r3, r2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e113      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003488:	4b7f      	ldr	r3, [pc, #508]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1ed      	bne.n	8003472 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003496:	7ffb      	ldrb	r3, [r7, #31]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d105      	bne.n	80034a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800349c:	4b7a      	ldr	r3, [pc, #488]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a0:	4a79      	ldr	r2, [pc, #484]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 80034a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80fe 	beq.w	80036ae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	f040 80d0 	bne.w	800365c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034bc:	4b72      	ldr	r3, [pc, #456]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f003 0203 	and.w	r2, r3, #3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d130      	bne.n	8003532 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	3b01      	subs	r3, #1
 80034dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d127      	bne.n	8003532 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d11f      	bne.n	8003532 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034fc:	2a07      	cmp	r2, #7
 80034fe:	bf14      	ite	ne
 8003500:	2201      	movne	r2, #1
 8003502:	2200      	moveq	r2, #0
 8003504:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003506:	4293      	cmp	r3, r2
 8003508:	d113      	bne.n	8003532 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	3b01      	subs	r3, #1
 8003518:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d109      	bne.n	8003532 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	3b01      	subs	r3, #1
 800352c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d06e      	beq.n	8003610 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b0c      	cmp	r3, #12
 8003536:	d069      	beq.n	800360c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003538:	4b53      	ldr	r3, [pc, #332]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d105      	bne.n	8003550 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003544:	4b50      	ldr	r3, [pc, #320]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0ad      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003554:	4b4c      	ldr	r3, [pc, #304]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a4b      	ldr	r2, [pc, #300]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 800355a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800355e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003560:	f7fe fba4 	bl	8001cac <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003568:	f7fe fba0 	bl	8001cac <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e09a      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800357a:	4b43      	ldr	r3, [pc, #268]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003586:	4b40      	ldr	r3, [pc, #256]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	4b40      	ldr	r3, [pc, #256]	; (800368c <HAL_RCC_OscConfig+0x784>)
 800358c:	4013      	ands	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003596:	3a01      	subs	r2, #1
 8003598:	0112      	lsls	r2, r2, #4
 800359a:	4311      	orrs	r1, r2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035a0:	0212      	lsls	r2, r2, #8
 80035a2:	4311      	orrs	r1, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035a8:	0852      	lsrs	r2, r2, #1
 80035aa:	3a01      	subs	r2, #1
 80035ac:	0552      	lsls	r2, r2, #21
 80035ae:	4311      	orrs	r1, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035b4:	0852      	lsrs	r2, r2, #1
 80035b6:	3a01      	subs	r2, #1
 80035b8:	0652      	lsls	r2, r2, #25
 80035ba:	4311      	orrs	r1, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035c0:	0912      	lsrs	r2, r2, #4
 80035c2:	0452      	lsls	r2, r2, #17
 80035c4:	430a      	orrs	r2, r1
 80035c6:	4930      	ldr	r1, [pc, #192]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035cc:	4b2e      	ldr	r3, [pc, #184]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a2d      	ldr	r2, [pc, #180]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 80035d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035d8:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4a2a      	ldr	r2, [pc, #168]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 80035de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035e4:	f7fe fb62 	bl	8001cac <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fe fb5e 	bl	8001cac <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e058      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fe:	4b22      	ldr	r3, [pc, #136]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800360a:	e050      	b.n	80036ae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e04f      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003610:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d148      	bne.n	80036ae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800361c:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a19      	ldr	r2, [pc, #100]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 8003622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003626:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003628:	4b17      	ldr	r3, [pc, #92]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a16      	ldr	r2, [pc, #88]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 800362e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003632:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003634:	f7fe fb3a 	bl	8001cac <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363c:	f7fe fb36 	bl	8001cac <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e030      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x734>
 800365a:	e028      	b.n	80036ae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d023      	beq.n	80036aa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a08      	ldr	r2, [pc, #32]	; (8003688 <HAL_RCC_OscConfig+0x780>)
 8003668:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800366c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366e:	f7fe fb1d 	bl	8001cac <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003674:	e00c      	b.n	8003690 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003676:	f7fe fb19 	bl	8001cac <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d905      	bls.n	8003690 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e013      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
 8003688:	40021000 	.word	0x40021000
 800368c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_RCC_OscConfig+0x7b0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ec      	bne.n	8003676 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_RCC_OscConfig+0x7b0>)
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	4905      	ldr	r1, [pc, #20]	; (80036b8 <HAL_RCC_OscConfig+0x7b0>)
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_RCC_OscConfig+0x7b4>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	60cb      	str	r3, [r1, #12]
 80036a8:	e001      	b.n	80036ae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3720      	adds	r7, #32
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000
 80036bc:	feeefffc 	.word	0xfeeefffc

080036c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0e7      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d4:	4b75      	ldr	r3, [pc, #468]	; (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d910      	bls.n	8003704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b72      	ldr	r3, [pc, #456]	; (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 0207 	bic.w	r2, r3, #7
 80036ea:	4970      	ldr	r1, [pc, #448]	; (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	4b6e      	ldr	r3, [pc, #440]	; (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0cf      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d010      	beq.n	8003732 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	4b66      	ldr	r3, [pc, #408]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800371c:	429a      	cmp	r2, r3
 800371e:	d908      	bls.n	8003732 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003720:	4b63      	ldr	r3, [pc, #396]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4960      	ldr	r1, [pc, #384]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d04c      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b03      	cmp	r3, #3
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	4b5a      	ldr	r3, [pc, #360]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d121      	bne.n	8003796 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0a6      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800375e:	4b54      	ldr	r3, [pc, #336]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d115      	bne.n	8003796 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e09a      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003776:	4b4e      	ldr	r3, [pc, #312]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e08e      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003786:	4b4a      	ldr	r3, [pc, #296]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e086      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003796:	4b46      	ldr	r3, [pc, #280]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f023 0203 	bic.w	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4943      	ldr	r1, [pc, #268]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a8:	f7fe fa80 	bl	8001cac <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b0:	f7fe fa7c 	bl	8001cac <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e06e      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	4b3a      	ldr	r3, [pc, #232]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 020c 	and.w	r2, r3, #12
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d1eb      	bne.n	80037b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d010      	beq.n	8003806 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	4b31      	ldr	r3, [pc, #196]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d208      	bcs.n	8003806 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b2e      	ldr	r3, [pc, #184]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	492b      	ldr	r1, [pc, #172]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003806:	4b29      	ldr	r3, [pc, #164]	; (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d210      	bcs.n	8003836 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003814:	4b25      	ldr	r3, [pc, #148]	; (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f023 0207 	bic.w	r2, r3, #7
 800381c:	4923      	ldr	r1, [pc, #140]	; (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003824:	4b21      	ldr	r3, [pc, #132]	; (80038ac <HAL_RCC_ClockConfig+0x1ec>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d001      	beq.n	8003836 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e036      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003842:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	4918      	ldr	r1, [pc, #96]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003850:	4313      	orrs	r3, r2
 8003852:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d009      	beq.n	8003874 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4910      	ldr	r1, [pc, #64]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003874:	f000 f824 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <HAL_RCC_ClockConfig+0x1f0>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	490b      	ldr	r1, [pc, #44]	; (80038b4 <HAL_RCC_ClockConfig+0x1f4>)
 8003886:	5ccb      	ldrb	r3, [r1, r3]
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
 8003890:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003892:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003894:	4b09      	ldr	r3, [pc, #36]	; (80038bc <HAL_RCC_ClockConfig+0x1fc>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7fe f83d 	bl	8001918 <HAL_InitTick>
 800389e:	4603      	mov	r3, r0
 80038a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80038a2:	7afb      	ldrb	r3, [r7, #11]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40022000 	.word	0x40022000
 80038b0:	40021000 	.word	0x40021000
 80038b4:	0800cb74 	.word	0x0800cb74
 80038b8:	20000000 	.word	0x20000000
 80038bc:	20000004 	.word	0x20000004

080038c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	; 0x24
 80038c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ce:	4b3e      	ldr	r3, [pc, #248]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d8:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x34>
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b0c      	cmp	r3, #12
 80038ec:	d121      	bne.n	8003932 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d11e      	bne.n	8003932 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038f4:	4b34      	ldr	r3, [pc, #208]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d107      	bne.n	8003910 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003900:	4b31      	ldr	r3, [pc, #196]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003906:	0a1b      	lsrs	r3, r3, #8
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	e005      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003910:	4b2d      	ldr	r3, [pc, #180]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800391c:	4a2b      	ldr	r2, [pc, #172]	; (80039cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003924:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10d      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b04      	cmp	r3, #4
 8003936:	d102      	bne.n	800393e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003938:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	e004      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d101      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003944:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003946:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2b0c      	cmp	r3, #12
 800394c:	d134      	bne.n	80039b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800394e:	4b1e      	ldr	r3, [pc, #120]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d003      	beq.n	8003966 <HAL_RCC_GetSysClockFreq+0xa6>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b03      	cmp	r3, #3
 8003962:	d003      	beq.n	800396c <HAL_RCC_GetSysClockFreq+0xac>
 8003964:	e005      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003966:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003968:	617b      	str	r3, [r7, #20]
      break;
 800396a:	e005      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800396c:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800396e:	617b      	str	r3, [r7, #20]
      break;
 8003970:	e002      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	617b      	str	r3, [r7, #20]
      break;
 8003976:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003978:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	3301      	adds	r3, #1
 8003984:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003986:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	0a1b      	lsrs	r3, r3, #8
 800398c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	fb03 f202 	mul.w	r2, r3, r2
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	0e5b      	lsrs	r3, r3, #25
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	3301      	adds	r3, #1
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039b8:	69bb      	ldr	r3, [r7, #24]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3724      	adds	r7, #36	; 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	0800cb8c 	.word	0x0800cb8c
 80039d0:	00f42400 	.word	0x00f42400
 80039d4:	007a1200 	.word	0x007a1200

080039d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039dc:	4b03      	ldr	r3, [pc, #12]	; (80039ec <HAL_RCC_GetHCLKFreq+0x14>)
 80039de:	681b      	ldr	r3, [r3, #0]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000000 	.word	0x20000000

080039f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039f4:	f7ff fff0 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	4904      	ldr	r1, [pc, #16]	; (8003a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a06:	5ccb      	ldrb	r3, [r1, r3]
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000
 8003a18:	0800cb84 	.word	0x0800cb84

08003a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a20:	f7ff ffda 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	0adb      	lsrs	r3, r3, #11
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	4904      	ldr	r1, [pc, #16]	; (8003a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a32:	5ccb      	ldrb	r3, [r1, r3]
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40021000 	.word	0x40021000
 8003a44:	0800cb84 	.word	0x0800cb84

08003a48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	220f      	movs	r2, #15
 8003a56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a58:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0203 	and.w	r2, r3, #3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a64:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a70:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a7c:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	08db      	lsrs	r3, r3, #3
 8003a82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <HAL_RCC_GetClockConfig+0x60>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0207 	and.w	r2, r3, #7
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	601a      	str	r2, [r3, #0]
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40022000 	.word	0x40022000

08003aac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ab8:	4b2a      	ldr	r3, [pc, #168]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ac4:	f7ff f9bc 	bl	8002e40 <HAL_PWREx_GetVoltageRange>
 8003ac8:	6178      	str	r0, [r7, #20]
 8003aca:	e014      	b.n	8003af6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003acc:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	4a24      	ldr	r2, [pc, #144]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad8:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ae4:	f7ff f9ac 	bl	8002e40 <HAL_PWREx_GetVoltageRange>
 8003ae8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003aea:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aee:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afc:	d10b      	bne.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b80      	cmp	r3, #128	; 0x80
 8003b02:	d919      	bls.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2ba0      	cmp	r3, #160	; 0xa0
 8003b08:	d902      	bls.n	8003b10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	e013      	b.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b10:	2301      	movs	r3, #1
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	e010      	b.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b80      	cmp	r3, #128	; 0x80
 8003b1a:	d902      	bls.n	8003b22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	e00a      	b.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b80      	cmp	r3, #128	; 0x80
 8003b26:	d102      	bne.n	8003b2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b28:	2302      	movs	r3, #2
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	e004      	b.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b70      	cmp	r3, #112	; 0x70
 8003b32:	d101      	bne.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b34:	2301      	movs	r3, #1
 8003b36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 0207 	bic.w	r2, r3, #7
 8003b40:	4909      	ldr	r1, [pc, #36]	; (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b48:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d001      	beq.n	8003b5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40022000 	.word	0x40022000

08003b6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b74:	2300      	movs	r3, #0
 8003b76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b78:	2300      	movs	r3, #0
 8003b7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d041      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b90:	d02a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b96:	d824      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b9c:	d008      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ba2:	d81e      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bac:	d010      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bae:	e018      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bb0:	4b86      	ldr	r3, [pc, #536]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4a85      	ldr	r2, [pc, #532]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bbc:	e015      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fabb 	bl	8004140 <RCCEx_PLLSAI1_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bce:	e00c      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3320      	adds	r3, #32
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fba6 	bl	8004328 <RCCEx_PLLSAI2_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003be0:	e003      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	74fb      	strb	r3, [r7, #19]
      break;
 8003be6:	e000      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003be8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bea:	7cfb      	ldrb	r3, [r7, #19]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10b      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bf0:	4b76      	ldr	r3, [pc, #472]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bfe:	4973      	ldr	r1, [pc, #460]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c06:	e001      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d041      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c20:	d02a      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c26:	d824      	bhi.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c2c:	d008      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c32:	d81e      	bhi.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c3c:	d010      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c3e:	e018      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c40:	4b62      	ldr	r3, [pc, #392]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4a61      	ldr	r2, [pc, #388]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c4c:	e015      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3304      	adds	r3, #4
 8003c52:	2100      	movs	r1, #0
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fa73 	bl	8004140 <RCCEx_PLLSAI1_Config>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c5e:	e00c      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3320      	adds	r3, #32
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fb5e 	bl	8004328 <RCCEx_PLLSAI2_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c70:	e003      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	74fb      	strb	r3, [r7, #19]
      break;
 8003c76:	e000      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c7a:	7cfb      	ldrb	r3, [r7, #19]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10b      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c80:	4b52      	ldr	r3, [pc, #328]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c8e:	494f      	ldr	r1, [pc, #316]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c96:	e001      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c98:	7cfb      	ldrb	r3, [r7, #19]
 8003c9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80a0 	beq.w	8003dea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003caa:	2300      	movs	r3, #0
 8003cac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cae:	4b47      	ldr	r3, [pc, #284]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc4:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	4a40      	ldr	r2, [pc, #256]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cce:	6593      	str	r3, [r2, #88]	; 0x58
 8003cd0:	4b3e      	ldr	r3, [pc, #248]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce0:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a3a      	ldr	r2, [pc, #232]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cec:	f7fd ffde 	bl	8001cac <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cf2:	e009      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf4:	f7fd ffda 	bl	8001cac <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d902      	bls.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	74fb      	strb	r3, [r7, #19]
        break;
 8003d06:	e005      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d08:	4b31      	ldr	r3, [pc, #196]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ef      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d15c      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d1a:	4b2c      	ldr	r3, [pc, #176]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01f      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d019      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d38:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d44:	4b21      	ldr	r3, [pc, #132]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	4a20      	ldr	r2, [pc, #128]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d54:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d64:	4a19      	ldr	r2, [pc, #100]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d016      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7fd ff99 	bl	8001cac <HAL_GetTick>
 8003d7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7c:	e00b      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7e:	f7fd ff95 	bl	8001cac <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d902      	bls.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	74fb      	strb	r3, [r7, #19]
            break;
 8003d94:	e006      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ec      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003da4:	7cfb      	ldrb	r3, [r7, #19]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dba:	4904      	ldr	r1, [pc, #16]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dc2:	e009      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dc4:	7cfb      	ldrb	r3, [r7, #19]
 8003dc6:	74bb      	strb	r3, [r7, #18]
 8003dc8:	e006      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dd8:	7c7b      	ldrb	r3, [r7, #17]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d105      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dde:	4b9e      	ldr	r3, [pc, #632]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	4a9d      	ldr	r2, [pc, #628]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003df6:	4b98      	ldr	r3, [pc, #608]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f023 0203 	bic.w	r2, r3, #3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	4994      	ldr	r1, [pc, #592]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e18:	4b8f      	ldr	r3, [pc, #572]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f023 020c 	bic.w	r2, r3, #12
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e26:	498c      	ldr	r1, [pc, #560]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e3a:	4b87      	ldr	r3, [pc, #540]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	4983      	ldr	r1, [pc, #524]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e5c:	4b7e      	ldr	r3, [pc, #504]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	497b      	ldr	r1, [pc, #492]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e7e:	4b76      	ldr	r3, [pc, #472]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8c:	4972      	ldr	r1, [pc, #456]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ea0:	4b6d      	ldr	r3, [pc, #436]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eae:	496a      	ldr	r1, [pc, #424]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ec2:	4b65      	ldr	r3, [pc, #404]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	4961      	ldr	r1, [pc, #388]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ee4:	4b5c      	ldr	r3, [pc, #368]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef2:	4959      	ldr	r1, [pc, #356]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f06:	4b54      	ldr	r3, [pc, #336]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f14:	4950      	ldr	r1, [pc, #320]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f28:	4b4b      	ldr	r3, [pc, #300]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f36:	4948      	ldr	r1, [pc, #288]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f4a:	4b43      	ldr	r3, [pc, #268]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	493f      	ldr	r1, [pc, #252]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d028      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f6c:	4b3a      	ldr	r3, [pc, #232]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f7a:	4937      	ldr	r1, [pc, #220]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f8a:	d106      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f8c:	4b32      	ldr	r3, [pc, #200]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4a31      	ldr	r2, [pc, #196]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f96:	60d3      	str	r3, [r2, #12]
 8003f98:	e011      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fa2:	d10c      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	2101      	movs	r1, #1
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f8c8 	bl	8004140 <RCCEx_PLLSAI1_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fb4:	7cfb      	ldrb	r3, [r7, #19]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fba:	7cfb      	ldrb	r3, [r7, #19]
 8003fbc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d028      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fca:	4b23      	ldr	r3, [pc, #140]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	491f      	ldr	r1, [pc, #124]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe8:	d106      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fea:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	4a1a      	ldr	r2, [pc, #104]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ff4:	60d3      	str	r3, [r2, #12]
 8003ff6:	e011      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004000:	d10c      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3304      	adds	r3, #4
 8004006:	2101      	movs	r1, #1
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f899 	bl	8004140 <RCCEx_PLLSAI1_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004012:	7cfb      	ldrb	r3, [r7, #19]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004018:	7cfb      	ldrb	r3, [r7, #19]
 800401a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d02b      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004036:	4908      	ldr	r1, [pc, #32]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004046:	d109      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004048:	4b03      	ldr	r3, [pc, #12]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4a02      	ldr	r2, [pc, #8]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004052:	60d3      	str	r3, [r2, #12]
 8004054:	e014      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004060:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004064:	d10c      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3304      	adds	r3, #4
 800406a:	2101      	movs	r1, #1
 800406c:	4618      	mov	r0, r3
 800406e:	f000 f867 	bl	8004140 <RCCEx_PLLSAI1_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004076:	7cfb      	ldrb	r3, [r7, #19]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800407c:	7cfb      	ldrb	r3, [r7, #19]
 800407e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d02f      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800408c:	4b2b      	ldr	r3, [pc, #172]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004092:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800409a:	4928      	ldr	r1, [pc, #160]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040aa:	d10d      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3304      	adds	r3, #4
 80040b0:	2102      	movs	r1, #2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f844 	bl	8004140 <RCCEx_PLLSAI1_Config>
 80040b8:	4603      	mov	r3, r0
 80040ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d014      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
 80040c4:	74bb      	strb	r3, [r7, #18]
 80040c6:	e011      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d0:	d10c      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3320      	adds	r3, #32
 80040d6:	2102      	movs	r1, #2
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 f925 	bl	8004328 <RCCEx_PLLSAI2_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040e8:	7cfb      	ldrb	r3, [r7, #19]
 80040ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040f8:	4b10      	ldr	r3, [pc, #64]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004106:	490d      	ldr	r1, [pc, #52]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004120:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800412a:	4904      	ldr	r1, [pc, #16]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004132:	7cbb      	ldrb	r3, [r7, #18]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40021000 	.word	0x40021000

08004140 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800414e:	4b75      	ldr	r3, [pc, #468]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d018      	beq.n	800418c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800415a:	4b72      	ldr	r3, [pc, #456]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f003 0203 	and.w	r2, r3, #3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d10d      	bne.n	8004186 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
       ||
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004172:	4b6c      	ldr	r3, [pc, #432]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	091b      	lsrs	r3, r3, #4
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
       ||
 8004182:	429a      	cmp	r2, r3
 8004184:	d047      	beq.n	8004216 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
 800418a:	e044      	b.n	8004216 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d018      	beq.n	80041c6 <RCCEx_PLLSAI1_Config+0x86>
 8004194:	2b03      	cmp	r3, #3
 8004196:	d825      	bhi.n	80041e4 <RCCEx_PLLSAI1_Config+0xa4>
 8004198:	2b01      	cmp	r3, #1
 800419a:	d002      	beq.n	80041a2 <RCCEx_PLLSAI1_Config+0x62>
 800419c:	2b02      	cmp	r3, #2
 800419e:	d009      	beq.n	80041b4 <RCCEx_PLLSAI1_Config+0x74>
 80041a0:	e020      	b.n	80041e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041a2:	4b60      	ldr	r3, [pc, #384]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d11d      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b2:	e01a      	b.n	80041ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041b4:	4b5b      	ldr	r3, [pc, #364]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d116      	bne.n	80041ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c4:	e013      	b.n	80041ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041c6:	4b57      	ldr	r3, [pc, #348]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041d2:	4b54      	ldr	r3, [pc, #336]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041e2:	e006      	b.n	80041f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
      break;
 80041e8:	e004      	b.n	80041f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ea:	bf00      	nop
 80041ec:	e002      	b.n	80041f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ee:	bf00      	nop
 80041f0:	e000      	b.n	80041f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10d      	bne.n	8004216 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041fa:	4b4a      	ldr	r3, [pc, #296]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6819      	ldr	r1, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	3b01      	subs	r3, #1
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	430b      	orrs	r3, r1
 8004210:	4944      	ldr	r1, [pc, #272]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004212:	4313      	orrs	r3, r2
 8004214:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d17d      	bne.n	8004318 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800421c:	4b41      	ldr	r3, [pc, #260]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a40      	ldr	r2, [pc, #256]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004222:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004228:	f7fd fd40 	bl	8001cac <HAL_GetTick>
 800422c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800422e:	e009      	b.n	8004244 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004230:	f7fd fd3c 	bl	8001cac <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d902      	bls.n	8004244 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	73fb      	strb	r3, [r7, #15]
        break;
 8004242:	e005      	b.n	8004250 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004244:	4b37      	ldr	r3, [pc, #220]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1ef      	bne.n	8004230 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d160      	bne.n	8004318 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d111      	bne.n	8004280 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800425c:	4b31      	ldr	r3, [pc, #196]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6892      	ldr	r2, [r2, #8]
 800426c:	0211      	lsls	r1, r2, #8
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68d2      	ldr	r2, [r2, #12]
 8004272:	0912      	lsrs	r2, r2, #4
 8004274:	0452      	lsls	r2, r2, #17
 8004276:	430a      	orrs	r2, r1
 8004278:	492a      	ldr	r1, [pc, #168]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427a:	4313      	orrs	r3, r2
 800427c:	610b      	str	r3, [r1, #16]
 800427e:	e027      	b.n	80042d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d112      	bne.n	80042ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004286:	4b27      	ldr	r3, [pc, #156]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800428e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6892      	ldr	r2, [r2, #8]
 8004296:	0211      	lsls	r1, r2, #8
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6912      	ldr	r2, [r2, #16]
 800429c:	0852      	lsrs	r2, r2, #1
 800429e:	3a01      	subs	r2, #1
 80042a0:	0552      	lsls	r2, r2, #21
 80042a2:	430a      	orrs	r2, r1
 80042a4:	491f      	ldr	r1, [pc, #124]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	610b      	str	r3, [r1, #16]
 80042aa:	e011      	b.n	80042d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6892      	ldr	r2, [r2, #8]
 80042bc:	0211      	lsls	r1, r2, #8
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6952      	ldr	r2, [r2, #20]
 80042c2:	0852      	lsrs	r2, r2, #1
 80042c4:	3a01      	subs	r2, #1
 80042c6:	0652      	lsls	r2, r2, #25
 80042c8:	430a      	orrs	r2, r1
 80042ca:	4916      	ldr	r1, [pc, #88]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a13      	ldr	r2, [pc, #76]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042dc:	f7fd fce6 	bl	8001cac <HAL_GetTick>
 80042e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042e2:	e009      	b.n	80042f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042e4:	f7fd fce2 	bl	8001cac <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d902      	bls.n	80042f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	73fb      	strb	r3, [r7, #15]
          break;
 80042f6:	e005      	b.n	8004304 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ef      	beq.n	80042e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	4904      	ldr	r1, [pc, #16]	; (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004314:	4313      	orrs	r3, r2
 8004316:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000

08004328 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004336:	4b6a      	ldr	r3, [pc, #424]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d018      	beq.n	8004374 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004342:	4b67      	ldr	r3, [pc, #412]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0203 	and.w	r2, r3, #3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d10d      	bne.n	800436e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
       ||
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800435a:	4b61      	ldr	r3, [pc, #388]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
       ||
 800436a:	429a      	cmp	r2, r3
 800436c:	d047      	beq.n	80043fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	e044      	b.n	80043fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d018      	beq.n	80043ae <RCCEx_PLLSAI2_Config+0x86>
 800437c:	2b03      	cmp	r3, #3
 800437e:	d825      	bhi.n	80043cc <RCCEx_PLLSAI2_Config+0xa4>
 8004380:	2b01      	cmp	r3, #1
 8004382:	d002      	beq.n	800438a <RCCEx_PLLSAI2_Config+0x62>
 8004384:	2b02      	cmp	r3, #2
 8004386:	d009      	beq.n	800439c <RCCEx_PLLSAI2_Config+0x74>
 8004388:	e020      	b.n	80043cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800438a:	4b55      	ldr	r3, [pc, #340]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d11d      	bne.n	80043d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800439a:	e01a      	b.n	80043d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800439c:	4b50      	ldr	r3, [pc, #320]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d116      	bne.n	80043d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ac:	e013      	b.n	80043d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043ae:	4b4c      	ldr	r3, [pc, #304]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10f      	bne.n	80043da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043ba:	4b49      	ldr	r3, [pc, #292]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043ca:	e006      	b.n	80043da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
      break;
 80043d0:	e004      	b.n	80043dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043d2:	bf00      	nop
 80043d4:	e002      	b.n	80043dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043da:	bf00      	nop
    }

    if(status == HAL_OK)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10d      	bne.n	80043fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043e2:	4b3f      	ldr	r3, [pc, #252]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6819      	ldr	r1, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	430b      	orrs	r3, r1
 80043f8:	4939      	ldr	r1, [pc, #228]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d167      	bne.n	80044d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004404:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a35      	ldr	r2, [pc, #212]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800440a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800440e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004410:	f7fd fc4c 	bl	8001cac <HAL_GetTick>
 8004414:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004416:	e009      	b.n	800442c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004418:	f7fd fc48 	bl	8001cac <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d902      	bls.n	800442c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	73fb      	strb	r3, [r7, #15]
        break;
 800442a:	e005      	b.n	8004438 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800442c:	4b2c      	ldr	r3, [pc, #176]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1ef      	bne.n	8004418 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d14a      	bne.n	80044d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d111      	bne.n	8004468 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004444:	4b26      	ldr	r3, [pc, #152]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800444c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6892      	ldr	r2, [r2, #8]
 8004454:	0211      	lsls	r1, r2, #8
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68d2      	ldr	r2, [r2, #12]
 800445a:	0912      	lsrs	r2, r2, #4
 800445c:	0452      	lsls	r2, r2, #17
 800445e:	430a      	orrs	r2, r1
 8004460:	491f      	ldr	r1, [pc, #124]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004462:	4313      	orrs	r3, r2
 8004464:	614b      	str	r3, [r1, #20]
 8004466:	e011      	b.n	800448c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004468:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004470:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6892      	ldr	r2, [r2, #8]
 8004478:	0211      	lsls	r1, r2, #8
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6912      	ldr	r2, [r2, #16]
 800447e:	0852      	lsrs	r2, r2, #1
 8004480:	3a01      	subs	r2, #1
 8004482:	0652      	lsls	r2, r2, #25
 8004484:	430a      	orrs	r2, r1
 8004486:	4916      	ldr	r1, [pc, #88]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004488:	4313      	orrs	r3, r2
 800448a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800448c:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a13      	ldr	r2, [pc, #76]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004496:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004498:	f7fd fc08 	bl	8001cac <HAL_GetTick>
 800449c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800449e:	e009      	b.n	80044b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044a0:	f7fd fc04 	bl	8001cac <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d902      	bls.n	80044b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	73fb      	strb	r3, [r7, #15]
          break;
 80044b2:	e005      	b.n	80044c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044b4:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ef      	beq.n	80044a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	4904      	ldr	r1, [pc, #16]	; (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000

080044e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e049      	b.n	800458a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f841 	bl	8004592 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3304      	adds	r3, #4
 8004520:	4619      	mov	r1, r3
 8004522:	4610      	mov	r0, r2
 8004524:	f000 f9da 	bl	80048dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d001      	beq.n	80045c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e04f      	b.n	8004660 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a23      	ldr	r2, [pc, #140]	; (800466c <HAL_TIM_Base_Start_IT+0xc4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01d      	beq.n	800461e <HAL_TIM_Base_Start_IT+0x76>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ea:	d018      	beq.n	800461e <HAL_TIM_Base_Start_IT+0x76>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <HAL_TIM_Base_Start_IT+0xc8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_TIM_Base_Start_IT+0x76>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <HAL_TIM_Base_Start_IT+0xcc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_TIM_Base_Start_IT+0x76>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1c      	ldr	r2, [pc, #112]	; (8004678 <HAL_TIM_Base_Start_IT+0xd0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_TIM_Base_Start_IT+0x76>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1b      	ldr	r2, [pc, #108]	; (800467c <HAL_TIM_Base_Start_IT+0xd4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_TIM_Base_Start_IT+0x76>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a19      	ldr	r2, [pc, #100]	; (8004680 <HAL_TIM_Base_Start_IT+0xd8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d115      	bne.n	800464a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	4b17      	ldr	r3, [pc, #92]	; (8004684 <HAL_TIM_Base_Start_IT+0xdc>)
 8004626:	4013      	ands	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b06      	cmp	r3, #6
 800462e:	d015      	beq.n	800465c <HAL_TIM_Base_Start_IT+0xb4>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004636:	d011      	beq.n	800465c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004648:	e008      	b.n	800465c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0201 	orr.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e000      	b.n	800465e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	40012c00 	.word	0x40012c00
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800
 8004678:	40000c00 	.word	0x40000c00
 800467c:	40013400 	.word	0x40013400
 8004680:	40014000 	.word	0x40014000
 8004684:	00010007 	.word	0x00010007

08004688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d020      	beq.n	80046ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01b      	beq.n	80046ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0202 	mvn.w	r2, #2
 80046bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f8e4 	bl	80048a0 <HAL_TIM_IC_CaptureCallback>
 80046d8:	e005      	b.n	80046e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f8d6 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f8e7 	bl	80048b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d020      	beq.n	8004738 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0204 	mvn.w	r2, #4
 8004708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f8be 	bl	80048a0 <HAL_TIM_IC_CaptureCallback>
 8004724:	e005      	b.n	8004732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f8b0 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f8c1 	bl	80048b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d020      	beq.n	8004784 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01b      	beq.n	8004784 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0208 	mvn.w	r2, #8
 8004754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2204      	movs	r2, #4
 800475a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f898 	bl	80048a0 <HAL_TIM_IC_CaptureCallback>
 8004770:	e005      	b.n	800477e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f88a 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f89b 	bl	80048b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b00      	cmp	r3, #0
 800478c:	d020      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01b      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0210 	mvn.w	r2, #16
 80047a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2208      	movs	r2, #8
 80047a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f872 	bl	80048a0 <HAL_TIM_IC_CaptureCallback>
 80047bc:	e005      	b.n	80047ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f864 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f875 	bl	80048b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00c      	beq.n	80047f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0201 	mvn.w	r2, #1
 80047ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc ff98 	bl	8001724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00c      	beq.n	8004818 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f906 	bl	8004a24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00c      	beq.n	800483c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f8fe 	bl	8004a38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00c      	beq.n	8004860 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d007      	beq.n	8004860 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f834 	bl	80048c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00c      	beq.n	8004884 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b00      	cmp	r3, #0
 8004872:	d007      	beq.n	8004884 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0220 	mvn.w	r2, #32
 800487c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f8c6 	bl	8004a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a40      	ldr	r2, [pc, #256]	; (80049f0 <TIM_Base_SetConfig+0x114>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d013      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fa:	d00f      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3d      	ldr	r2, [pc, #244]	; (80049f4 <TIM_Base_SetConfig+0x118>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00b      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3c      	ldr	r2, [pc, #240]	; (80049f8 <TIM_Base_SetConfig+0x11c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d007      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3b      	ldr	r2, [pc, #236]	; (80049fc <TIM_Base_SetConfig+0x120>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a3a      	ldr	r2, [pc, #232]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d108      	bne.n	800492e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2f      	ldr	r2, [pc, #188]	; (80049f0 <TIM_Base_SetConfig+0x114>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01f      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d01b      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2c      	ldr	r2, [pc, #176]	; (80049f4 <TIM_Base_SetConfig+0x118>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d017      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2b      	ldr	r2, [pc, #172]	; (80049f8 <TIM_Base_SetConfig+0x11c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d013      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2a      	ldr	r2, [pc, #168]	; (80049fc <TIM_Base_SetConfig+0x120>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00f      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a29      	ldr	r2, [pc, #164]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00b      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a28      	ldr	r2, [pc, #160]	; (8004a04 <TIM_Base_SetConfig+0x128>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d007      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a27      	ldr	r2, [pc, #156]	; (8004a08 <TIM_Base_SetConfig+0x12c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a26      	ldr	r2, [pc, #152]	; (8004a0c <TIM_Base_SetConfig+0x130>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d108      	bne.n	8004988 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a10      	ldr	r2, [pc, #64]	; (80049f0 <TIM_Base_SetConfig+0x114>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00f      	beq.n	80049d4 <TIM_Base_SetConfig+0xf8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a12      	ldr	r2, [pc, #72]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00b      	beq.n	80049d4 <TIM_Base_SetConfig+0xf8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a11      	ldr	r2, [pc, #68]	; (8004a04 <TIM_Base_SetConfig+0x128>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d007      	beq.n	80049d4 <TIM_Base_SetConfig+0xf8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a10      	ldr	r2, [pc, #64]	; (8004a08 <TIM_Base_SetConfig+0x12c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d003      	beq.n	80049d4 <TIM_Base_SetConfig+0xf8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a0f      	ldr	r2, [pc, #60]	; (8004a0c <TIM_Base_SetConfig+0x130>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d103      	bne.n	80049dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	615a      	str	r2, [r3, #20]
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40013400 	.word	0x40013400
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	40014800 	.word	0x40014800

08004a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e040      	b.n	8004ae0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fc fef6 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2224      	movs	r2, #36	; 0x24
 8004a78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0201 	bic.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fb6a 	bl	800516c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f8af 	bl	8004bfc <UART_SetConfig>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e01b      	b.n	8004ae0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fbe9 	bl	80052b0 <UART_CheckIdleState>
 8004ade:	4603      	mov	r3, r0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	; 0x28
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	d178      	bne.n	8004bf2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_UART_Transmit+0x24>
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e071      	b.n	8004bf4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2221      	movs	r2, #33	; 0x21
 8004b1c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b1e:	f7fd f8c5 	bl	8001cac <HAL_GetTick>
 8004b22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	88fa      	ldrh	r2, [r7, #6]
 8004b28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3c:	d108      	bne.n	8004b50 <HAL_UART_Transmit+0x68>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d104      	bne.n	8004b50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	61bb      	str	r3, [r7, #24]
 8004b4e:	e003      	b.n	8004b58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b58:	e030      	b.n	8004bbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2200      	movs	r2, #0
 8004b62:	2180      	movs	r1, #128	; 0x80
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 fc4b 	bl	8005400 <UART_WaitOnFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d004      	beq.n	8004b7a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e03c      	b.n	8004bf4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10b      	bne.n	8004b98 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	881a      	ldrh	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b8c:	b292      	uxth	r2, r2
 8004b8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	3302      	adds	r3, #2
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	e008      	b.n	8004baa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	781a      	ldrb	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	b292      	uxth	r2, r2
 8004ba2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1c8      	bne.n	8004b5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2140      	movs	r1, #64	; 0x40
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 fc14 	bl	8005400 <UART_WaitOnFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d004      	beq.n	8004be8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e005      	b.n	8004bf4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e000      	b.n	8004bf4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004bf2:	2302      	movs	r3, #2
  }
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3720      	adds	r7, #32
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c00:	b08a      	sub	sp, #40	; 0x28
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4ba4      	ldr	r3, [pc, #656]	; (8004ebc <UART_SetConfig+0x2c0>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c34:	430b      	orrs	r3, r1
 8004c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a99      	ldr	r2, [pc, #612]	; (8004ec0 <UART_SetConfig+0x2c4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c64:	4313      	orrs	r3, r2
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a90      	ldr	r2, [pc, #576]	; (8004ec4 <UART_SetConfig+0x2c8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d126      	bne.n	8004cd4 <UART_SetConfig+0xd8>
 8004c86:	4b90      	ldr	r3, [pc, #576]	; (8004ec8 <UART_SetConfig+0x2cc>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d81b      	bhi.n	8004ccc <UART_SetConfig+0xd0>
 8004c94:	a201      	add	r2, pc, #4	; (adr r2, 8004c9c <UART_SetConfig+0xa0>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004cad 	.word	0x08004cad
 8004ca0:	08004cbd 	.word	0x08004cbd
 8004ca4:	08004cb5 	.word	0x08004cb5
 8004ca8:	08004cc5 	.word	0x08004cc5
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb2:	e116      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cba:	e112      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e10e      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e10a      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e106      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a7c      	ldr	r2, [pc, #496]	; (8004ecc <UART_SetConfig+0x2d0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d138      	bne.n	8004d50 <UART_SetConfig+0x154>
 8004cde:	4b7a      	ldr	r3, [pc, #488]	; (8004ec8 <UART_SetConfig+0x2cc>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	2b0c      	cmp	r3, #12
 8004cea:	d82d      	bhi.n	8004d48 <UART_SetConfig+0x14c>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <UART_SetConfig+0xf8>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d29 	.word	0x08004d29
 8004cf8:	08004d49 	.word	0x08004d49
 8004cfc:	08004d49 	.word	0x08004d49
 8004d00:	08004d49 	.word	0x08004d49
 8004d04:	08004d39 	.word	0x08004d39
 8004d08:	08004d49 	.word	0x08004d49
 8004d0c:	08004d49 	.word	0x08004d49
 8004d10:	08004d49 	.word	0x08004d49
 8004d14:	08004d31 	.word	0x08004d31
 8004d18:	08004d49 	.word	0x08004d49
 8004d1c:	08004d49 	.word	0x08004d49
 8004d20:	08004d49 	.word	0x08004d49
 8004d24:	08004d41 	.word	0x08004d41
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2e:	e0d8      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004d30:	2302      	movs	r3, #2
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d36:	e0d4      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3e:	e0d0      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004d40:	2308      	movs	r3, #8
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d46:	e0cc      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004d48:	2310      	movs	r3, #16
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4e:	e0c8      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a5e      	ldr	r2, [pc, #376]	; (8004ed0 <UART_SetConfig+0x2d4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d125      	bne.n	8004da6 <UART_SetConfig+0x1aa>
 8004d5a:	4b5b      	ldr	r3, [pc, #364]	; (8004ec8 <UART_SetConfig+0x2cc>)
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d64:	2b30      	cmp	r3, #48	; 0x30
 8004d66:	d016      	beq.n	8004d96 <UART_SetConfig+0x19a>
 8004d68:	2b30      	cmp	r3, #48	; 0x30
 8004d6a:	d818      	bhi.n	8004d9e <UART_SetConfig+0x1a2>
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d00a      	beq.n	8004d86 <UART_SetConfig+0x18a>
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d814      	bhi.n	8004d9e <UART_SetConfig+0x1a2>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <UART_SetConfig+0x182>
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d008      	beq.n	8004d8e <UART_SetConfig+0x192>
 8004d7c:	e00f      	b.n	8004d9e <UART_SetConfig+0x1a2>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d84:	e0ad      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004d86:	2302      	movs	r3, #2
 8004d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8c:	e0a9      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004d8e:	2304      	movs	r3, #4
 8004d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d94:	e0a5      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004d96:	2308      	movs	r3, #8
 8004d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9c:	e0a1      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004d9e:	2310      	movs	r3, #16
 8004da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da4:	e09d      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a4a      	ldr	r2, [pc, #296]	; (8004ed4 <UART_SetConfig+0x2d8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d125      	bne.n	8004dfc <UART_SetConfig+0x200>
 8004db0:	4b45      	ldr	r3, [pc, #276]	; (8004ec8 <UART_SetConfig+0x2cc>)
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dba:	2bc0      	cmp	r3, #192	; 0xc0
 8004dbc:	d016      	beq.n	8004dec <UART_SetConfig+0x1f0>
 8004dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8004dc0:	d818      	bhi.n	8004df4 <UART_SetConfig+0x1f8>
 8004dc2:	2b80      	cmp	r3, #128	; 0x80
 8004dc4:	d00a      	beq.n	8004ddc <UART_SetConfig+0x1e0>
 8004dc6:	2b80      	cmp	r3, #128	; 0x80
 8004dc8:	d814      	bhi.n	8004df4 <UART_SetConfig+0x1f8>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <UART_SetConfig+0x1d8>
 8004dce:	2b40      	cmp	r3, #64	; 0x40
 8004dd0:	d008      	beq.n	8004de4 <UART_SetConfig+0x1e8>
 8004dd2:	e00f      	b.n	8004df4 <UART_SetConfig+0x1f8>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dda:	e082      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de2:	e07e      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004de4:	2304      	movs	r3, #4
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dea:	e07a      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004dec:	2308      	movs	r3, #8
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df2:	e076      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004df4:	2310      	movs	r3, #16
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfa:	e072      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a35      	ldr	r2, [pc, #212]	; (8004ed8 <UART_SetConfig+0x2dc>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d12a      	bne.n	8004e5c <UART_SetConfig+0x260>
 8004e06:	4b30      	ldr	r3, [pc, #192]	; (8004ec8 <UART_SetConfig+0x2cc>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e14:	d01a      	beq.n	8004e4c <UART_SetConfig+0x250>
 8004e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e1a:	d81b      	bhi.n	8004e54 <UART_SetConfig+0x258>
 8004e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e20:	d00c      	beq.n	8004e3c <UART_SetConfig+0x240>
 8004e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e26:	d815      	bhi.n	8004e54 <UART_SetConfig+0x258>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <UART_SetConfig+0x238>
 8004e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e30:	d008      	beq.n	8004e44 <UART_SetConfig+0x248>
 8004e32:	e00f      	b.n	8004e54 <UART_SetConfig+0x258>
 8004e34:	2300      	movs	r3, #0
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3a:	e052      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e42:	e04e      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004e44:	2304      	movs	r3, #4
 8004e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4a:	e04a      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e52:	e046      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004e54:	2310      	movs	r3, #16
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5a:	e042      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <UART_SetConfig+0x2c4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d13a      	bne.n	8004edc <UART_SetConfig+0x2e0>
 8004e66:	4b18      	ldr	r3, [pc, #96]	; (8004ec8 <UART_SetConfig+0x2cc>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e74:	d01a      	beq.n	8004eac <UART_SetConfig+0x2b0>
 8004e76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e7a:	d81b      	bhi.n	8004eb4 <UART_SetConfig+0x2b8>
 8004e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e80:	d00c      	beq.n	8004e9c <UART_SetConfig+0x2a0>
 8004e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e86:	d815      	bhi.n	8004eb4 <UART_SetConfig+0x2b8>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <UART_SetConfig+0x298>
 8004e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e90:	d008      	beq.n	8004ea4 <UART_SetConfig+0x2a8>
 8004e92:	e00f      	b.n	8004eb4 <UART_SetConfig+0x2b8>
 8004e94:	2300      	movs	r3, #0
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9a:	e022      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea2:	e01e      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eaa:	e01a      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004eac:	2308      	movs	r3, #8
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb2:	e016      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eba:	e012      	b.n	8004ee2 <UART_SetConfig+0x2e6>
 8004ebc:	efff69f3 	.word	0xefff69f3
 8004ec0:	40008000 	.word	0x40008000
 8004ec4:	40013800 	.word	0x40013800
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	40004400 	.word	0x40004400
 8004ed0:	40004800 	.word	0x40004800
 8004ed4:	40004c00 	.word	0x40004c00
 8004ed8:	40005000 	.word	0x40005000
 8004edc:	2310      	movs	r3, #16
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a9f      	ldr	r2, [pc, #636]	; (8005164 <UART_SetConfig+0x568>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d17a      	bne.n	8004fe2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004eec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d824      	bhi.n	8004f3e <UART_SetConfig+0x342>
 8004ef4:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <UART_SetConfig+0x300>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08004f21 	.word	0x08004f21
 8004f00:	08004f3f 	.word	0x08004f3f
 8004f04:	08004f29 	.word	0x08004f29
 8004f08:	08004f3f 	.word	0x08004f3f
 8004f0c:	08004f2f 	.word	0x08004f2f
 8004f10:	08004f3f 	.word	0x08004f3f
 8004f14:	08004f3f 	.word	0x08004f3f
 8004f18:	08004f3f 	.word	0x08004f3f
 8004f1c:	08004f37 	.word	0x08004f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f20:	f7fe fd66 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 8004f24:	61f8      	str	r0, [r7, #28]
        break;
 8004f26:	e010      	b.n	8004f4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f28:	4b8f      	ldr	r3, [pc, #572]	; (8005168 <UART_SetConfig+0x56c>)
 8004f2a:	61fb      	str	r3, [r7, #28]
        break;
 8004f2c:	e00d      	b.n	8004f4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f2e:	f7fe fcc7 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 8004f32:	61f8      	str	r0, [r7, #28]
        break;
 8004f34:	e009      	b.n	8004f4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f3a:	61fb      	str	r3, [r7, #28]
        break;
 8004f3c:	e005      	b.n	8004f4a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 80fb 	beq.w	8005148 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	4413      	add	r3, r2
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d305      	bcc.n	8004f6e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d903      	bls.n	8004f76 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f74:	e0e8      	b.n	8005148 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	461c      	mov	r4, r3
 8004f7c:	4615      	mov	r5, r2
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	022b      	lsls	r3, r5, #8
 8004f88:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f8c:	0222      	lsls	r2, r4, #8
 8004f8e:	68f9      	ldr	r1, [r7, #12]
 8004f90:	6849      	ldr	r1, [r1, #4]
 8004f92:	0849      	lsrs	r1, r1, #1
 8004f94:	2000      	movs	r0, #0
 8004f96:	4688      	mov	r8, r1
 8004f98:	4681      	mov	r9, r0
 8004f9a:	eb12 0a08 	adds.w	sl, r2, r8
 8004f9e:	eb43 0b09 	adc.w	fp, r3, r9
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	603b      	str	r3, [r7, #0]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fb0:	4650      	mov	r0, sl
 8004fb2:	4659      	mov	r1, fp
 8004fb4:	f7fb fe68 	bl	8000c88 <__aeabi_uldivmod>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fc6:	d308      	bcc.n	8004fda <UART_SetConfig+0x3de>
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fce:	d204      	bcs.n	8004fda <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	60da      	str	r2, [r3, #12]
 8004fd8:	e0b6      	b.n	8005148 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fe0:	e0b2      	b.n	8005148 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fea:	d15e      	bne.n	80050aa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004fec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d828      	bhi.n	8005046 <UART_SetConfig+0x44a>
 8004ff4:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <UART_SetConfig+0x400>)
 8004ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffa:	bf00      	nop
 8004ffc:	08005021 	.word	0x08005021
 8005000:	08005029 	.word	0x08005029
 8005004:	08005031 	.word	0x08005031
 8005008:	08005047 	.word	0x08005047
 800500c:	08005037 	.word	0x08005037
 8005010:	08005047 	.word	0x08005047
 8005014:	08005047 	.word	0x08005047
 8005018:	08005047 	.word	0x08005047
 800501c:	0800503f 	.word	0x0800503f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005020:	f7fe fce6 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 8005024:	61f8      	str	r0, [r7, #28]
        break;
 8005026:	e014      	b.n	8005052 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005028:	f7fe fcf8 	bl	8003a1c <HAL_RCC_GetPCLK2Freq>
 800502c:	61f8      	str	r0, [r7, #28]
        break;
 800502e:	e010      	b.n	8005052 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005030:	4b4d      	ldr	r3, [pc, #308]	; (8005168 <UART_SetConfig+0x56c>)
 8005032:	61fb      	str	r3, [r7, #28]
        break;
 8005034:	e00d      	b.n	8005052 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005036:	f7fe fc43 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 800503a:	61f8      	str	r0, [r7, #28]
        break;
 800503c:	e009      	b.n	8005052 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800503e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005042:	61fb      	str	r3, [r7, #28]
        break;
 8005044:	e005      	b.n	8005052 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005050:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d077      	beq.n	8005148 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	005a      	lsls	r2, r3, #1
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	441a      	add	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b0f      	cmp	r3, #15
 8005072:	d916      	bls.n	80050a2 <UART_SetConfig+0x4a6>
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507a:	d212      	bcs.n	80050a2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	b29b      	uxth	r3, r3
 8005080:	f023 030f 	bic.w	r3, r3, #15
 8005084:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	085b      	lsrs	r3, r3, #1
 800508a:	b29b      	uxth	r3, r3
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	b29a      	uxth	r2, r3
 8005092:	8afb      	ldrh	r3, [r7, #22]
 8005094:	4313      	orrs	r3, r2
 8005096:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	8afa      	ldrh	r2, [r7, #22]
 800509e:	60da      	str	r2, [r3, #12]
 80050a0:	e052      	b.n	8005148 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050a8:	e04e      	b.n	8005148 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d827      	bhi.n	8005102 <UART_SetConfig+0x506>
 80050b2:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0x4bc>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	080050dd 	.word	0x080050dd
 80050bc:	080050e5 	.word	0x080050e5
 80050c0:	080050ed 	.word	0x080050ed
 80050c4:	08005103 	.word	0x08005103
 80050c8:	080050f3 	.word	0x080050f3
 80050cc:	08005103 	.word	0x08005103
 80050d0:	08005103 	.word	0x08005103
 80050d4:	08005103 	.word	0x08005103
 80050d8:	080050fb 	.word	0x080050fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050dc:	f7fe fc88 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 80050e0:	61f8      	str	r0, [r7, #28]
        break;
 80050e2:	e014      	b.n	800510e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e4:	f7fe fc9a 	bl	8003a1c <HAL_RCC_GetPCLK2Freq>
 80050e8:	61f8      	str	r0, [r7, #28]
        break;
 80050ea:	e010      	b.n	800510e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050ec:	4b1e      	ldr	r3, [pc, #120]	; (8005168 <UART_SetConfig+0x56c>)
 80050ee:	61fb      	str	r3, [r7, #28]
        break;
 80050f0:	e00d      	b.n	800510e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050f2:	f7fe fbe5 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 80050f6:	61f8      	str	r0, [r7, #28]
        break;
 80050f8:	e009      	b.n	800510e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050fe:	61fb      	str	r3, [r7, #28]
        break;
 8005100:	e005      	b.n	800510e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800510c:	bf00      	nop
    }

    if (pclk != 0U)
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d019      	beq.n	8005148 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	085a      	lsrs	r2, r3, #1
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	441a      	add	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	fbb2 f3f3 	udiv	r3, r2, r3
 8005126:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b0f      	cmp	r3, #15
 800512c:	d909      	bls.n	8005142 <UART_SetConfig+0x546>
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005134:	d205      	bcs.n	8005142 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60da      	str	r2, [r3, #12]
 8005140:	e002      	b.n	8005148 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005154:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005158:	4618      	mov	r0, r3
 800515a:	3728      	adds	r7, #40	; 0x28
 800515c:	46bd      	mov	sp, r7
 800515e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005162:	bf00      	nop
 8005164:	40008000 	.word	0x40008000
 8005168:	00f42400 	.word	0x00f42400

0800516c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01a      	beq.n	8005282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526a:	d10a      	bne.n	8005282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	605a      	str	r2, [r3, #4]
  }
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b098      	sub	sp, #96	; 0x60
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052c0:	f7fc fcf4 	bl	8001cac <HAL_GetTick>
 80052c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d12e      	bne.n	8005332 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052dc:	2200      	movs	r2, #0
 80052de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f88c 	bl	8005400 <UART_WaitOnFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d021      	beq.n	8005332 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005302:	653b      	str	r3, [r7, #80]	; 0x50
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800530c:	647b      	str	r3, [r7, #68]	; 0x44
 800530e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800531a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e6      	bne.n	80052ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e062      	b.n	80053f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b04      	cmp	r3, #4
 800533e:	d149      	bne.n	80053d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005348:	2200      	movs	r2, #0
 800534a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f856 	bl	8005400 <UART_WaitOnFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d03c      	beq.n	80053d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	623b      	str	r3, [r7, #32]
   return(result);
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800536e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005378:	633b      	str	r3, [r7, #48]	; 0x30
 800537a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800537e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e6      	bne.n	800535a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3308      	adds	r3, #8
 8005392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	60fb      	str	r3, [r7, #12]
   return(result);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0301 	bic.w	r3, r3, #1
 80053a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3308      	adds	r3, #8
 80053aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053ac:	61fa      	str	r2, [r7, #28]
 80053ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	69b9      	ldr	r1, [r7, #24]
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	617b      	str	r3, [r7, #20]
   return(result);
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e5      	bne.n	800538c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e011      	b.n	80053f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3758      	adds	r7, #88	; 0x58
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	4613      	mov	r3, r2
 800540e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005410:	e049      	b.n	80054a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005418:	d045      	beq.n	80054a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541a:	f7fc fc47 	bl	8001cac <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	429a      	cmp	r2, r3
 8005428:	d302      	bcc.n	8005430 <UART_WaitOnFlagUntilTimeout+0x30>
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e048      	b.n	80054c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d031      	beq.n	80054a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b08      	cmp	r3, #8
 800544e:	d110      	bne.n	8005472 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2208      	movs	r2, #8
 8005456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f838 	bl	80054ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2208      	movs	r2, #8
 8005462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e029      	b.n	80054c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800547c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005480:	d111      	bne.n	80054a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800548a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f81e 	bl	80054ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2220      	movs	r2, #32
 8005496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e00f      	b.n	80054c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4013      	ands	r3, r2
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	bf0c      	ite	eq
 80054b6:	2301      	moveq	r3, #1
 80054b8:	2300      	movne	r3, #0
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	79fb      	ldrb	r3, [r7, #7]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d0a6      	beq.n	8005412 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b095      	sub	sp, #84	; 0x54
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054de:	e853 3f00 	ldrex	r3, [r3]
 80054e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f4:	643b      	str	r3, [r7, #64]	; 0x40
 80054f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e6      	bne.n	80054d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3308      	adds	r3, #8
 800550e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	61fb      	str	r3, [r7, #28]
   return(result);
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	f023 0301 	bic.w	r3, r3, #1
 800551e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3308      	adds	r3, #8
 8005526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800552a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800552e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e5      	bne.n	8005508 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005540:	2b01      	cmp	r3, #1
 8005542:	d118      	bne.n	8005576 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	60bb      	str	r3, [r7, #8]
   return(result);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f023 0310 	bic.w	r3, r3, #16
 8005558:	647b      	str	r3, [r7, #68]	; 0x44
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005562:	61bb      	str	r3, [r7, #24]
 8005564:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6979      	ldr	r1, [r7, #20]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	613b      	str	r3, [r7, #16]
   return(result);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e6      	bne.n	8005544 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	669a      	str	r2, [r3, #104]	; 0x68
}
 800558a:	bf00      	nop
 800558c:	3754      	adds	r7, #84	; 0x54
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <__NVIC_SetPriority>:
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	6039      	str	r1, [r7, #0]
 80055a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	db0a      	blt.n	80055c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	490c      	ldr	r1, [pc, #48]	; (80055e4 <__NVIC_SetPriority+0x4c>)
 80055b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b6:	0112      	lsls	r2, r2, #4
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	440b      	add	r3, r1
 80055bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80055c0:	e00a      	b.n	80055d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	4908      	ldr	r1, [pc, #32]	; (80055e8 <__NVIC_SetPriority+0x50>)
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	3b04      	subs	r3, #4
 80055d0:	0112      	lsls	r2, r2, #4
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	440b      	add	r3, r1
 80055d6:	761a      	strb	r2, [r3, #24]
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	e000e100 	.word	0xe000e100
 80055e8:	e000ed00 	.word	0xe000ed00

080055ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80055f0:	4b05      	ldr	r3, [pc, #20]	; (8005608 <SysTick_Handler+0x1c>)
 80055f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80055f4:	f001 fcd8 	bl	8006fa8 <xTaskGetSchedulerState>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d001      	beq.n	8005602 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80055fe:	f002 fac3 	bl	8007b88 <xPortSysTickHandler>
  }
}
 8005602:	bf00      	nop
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	e000e010 	.word	0xe000e010

0800560c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005610:	2100      	movs	r1, #0
 8005612:	f06f 0004 	mvn.w	r0, #4
 8005616:	f7ff ffbf 	bl	8005598 <__NVIC_SetPriority>
#endif
}
 800561a:	bf00      	nop
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005626:	f3ef 8305 	mrs	r3, IPSR
 800562a:	603b      	str	r3, [r7, #0]
  return(result);
 800562c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005632:	f06f 0305 	mvn.w	r3, #5
 8005636:	607b      	str	r3, [r7, #4]
 8005638:	e00c      	b.n	8005654 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800563a:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <osKernelInitialize+0x44>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d105      	bne.n	800564e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005642:	4b08      	ldr	r3, [pc, #32]	; (8005664 <osKernelInitialize+0x44>)
 8005644:	2201      	movs	r2, #1
 8005646:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005648:	2300      	movs	r3, #0
 800564a:	607b      	str	r3, [r7, #4]
 800564c:	e002      	b.n	8005654 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800564e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005652:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005654:	687b      	ldr	r3, [r7, #4]
}
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20000364 	.word	0x20000364

08005668 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800566e:	f3ef 8305 	mrs	r3, IPSR
 8005672:	603b      	str	r3, [r7, #0]
  return(result);
 8005674:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <osKernelStart+0x1a>
    stat = osErrorISR;
 800567a:	f06f 0305 	mvn.w	r3, #5
 800567e:	607b      	str	r3, [r7, #4]
 8005680:	e010      	b.n	80056a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005682:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <osKernelStart+0x48>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d109      	bne.n	800569e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800568a:	f7ff ffbf 	bl	800560c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800568e:	4b08      	ldr	r3, [pc, #32]	; (80056b0 <osKernelStart+0x48>)
 8005690:	2202      	movs	r2, #2
 8005692:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005694:	f001 f82c 	bl	80066f0 <vTaskStartScheduler>
      stat = osOK;
 8005698:	2300      	movs	r3, #0
 800569a:	607b      	str	r3, [r7, #4]
 800569c:	e002      	b.n	80056a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800569e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056a4:	687b      	ldr	r3, [r7, #4]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000364 	.word	0x20000364

080056b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08e      	sub	sp, #56	; 0x38
 80056b8:	af04      	add	r7, sp, #16
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056c4:	f3ef 8305 	mrs	r3, IPSR
 80056c8:	617b      	str	r3, [r7, #20]
  return(result);
 80056ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d17e      	bne.n	80057ce <osThreadNew+0x11a>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d07b      	beq.n	80057ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80056d6:	2380      	movs	r3, #128	; 0x80
 80056d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80056da:	2318      	movs	r3, #24
 80056dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80056e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d045      	beq.n	800577a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <osThreadNew+0x48>
        name = attr->name;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <osThreadNew+0x6e>
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b38      	cmp	r3, #56	; 0x38
 8005714:	d805      	bhi.n	8005722 <osThreadNew+0x6e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <osThreadNew+0x72>
        return (NULL);
 8005722:	2300      	movs	r3, #0
 8005724:	e054      	b.n	80057d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	089b      	lsrs	r3, r3, #2
 8005734:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00e      	beq.n	800575c <osThreadNew+0xa8>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	2ba7      	cmp	r3, #167	; 0xa7
 8005744:	d90a      	bls.n	800575c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800574a:	2b00      	cmp	r3, #0
 800574c:	d006      	beq.n	800575c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <osThreadNew+0xa8>
        mem = 1;
 8005756:	2301      	movs	r3, #1
 8005758:	61bb      	str	r3, [r7, #24]
 800575a:	e010      	b.n	800577e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10c      	bne.n	800577e <osThreadNew+0xca>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d108      	bne.n	800577e <osThreadNew+0xca>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d104      	bne.n	800577e <osThreadNew+0xca>
          mem = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	e001      	b.n	800577e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800577a:	2300      	movs	r3, #0
 800577c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d110      	bne.n	80057a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800578c:	9202      	str	r2, [sp, #8]
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	6a3a      	ldr	r2, [r7, #32]
 8005798:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fdf0 	bl	8006380 <xTaskCreateStatic>
 80057a0:	4603      	mov	r3, r0
 80057a2:	613b      	str	r3, [r7, #16]
 80057a4:	e013      	b.n	80057ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d110      	bne.n	80057ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	f107 0310 	add.w	r3, r7, #16
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fe3b 	bl	800643a <xTaskCreate>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d001      	beq.n	80057ce <osThreadNew+0x11a>
            hTask = NULL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057ce:	693b      	ldr	r3, [r7, #16]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3728      	adds	r7, #40	; 0x28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4a07      	ldr	r2, [pc, #28]	; (8005804 <vApplicationGetIdleTaskMemory+0x2c>)
 80057e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	4a06      	ldr	r2, [pc, #24]	; (8005808 <vApplicationGetIdleTaskMemory+0x30>)
 80057ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2280      	movs	r2, #128	; 0x80
 80057f4:	601a      	str	r2, [r3, #0]
}
 80057f6:	bf00      	nop
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20000368 	.word	0x20000368
 8005808:	20000410 	.word	0x20000410

0800580c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4a07      	ldr	r2, [pc, #28]	; (8005838 <vApplicationGetTimerTaskMemory+0x2c>)
 800581c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4a06      	ldr	r2, [pc, #24]	; (800583c <vApplicationGetTimerTaskMemory+0x30>)
 8005822:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800582a:	601a      	str	r2, [r3, #0]
}
 800582c:	bf00      	nop
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	20000610 	.word	0x20000610
 800583c:	200006b8 	.word	0x200006b8

08005840 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f103 0208 	add.w	r2, r3, #8
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005858:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f103 0208 	add.w	r2, r3, #8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f103 0208 	add.w	r2, r3, #8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	601a      	str	r2, [r3, #0]
}
 80058d6:	bf00      	nop
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058f8:	d103      	bne.n	8005902 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	e00c      	b.n	800591c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3308      	adds	r3, #8
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e002      	b.n	8005910 <vListInsert+0x2e>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	429a      	cmp	r2, r3
 800591a:	d2f6      	bcs.n	800590a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	601a      	str	r2, [r3, #0]
}
 8005948:	bf00      	nop
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6892      	ldr	r2, [r2, #8]
 800596a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6852      	ldr	r2, [r2, #4]
 8005974:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	429a      	cmp	r2, r3
 800597e:	d103      	bne.n	8005988 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	1e5a      	subs	r2, r3, #1
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80059d2:	f002 f847 	bl	8007a64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059de:	68f9      	ldr	r1, [r7, #12]
 80059e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059e2:	fb01 f303 	mul.w	r3, r1, r3
 80059e6:	441a      	add	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	3b01      	subs	r3, #1
 8005a04:	68f9      	ldr	r1, [r7, #12]
 8005a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a08:	fb01 f303 	mul.w	r3, r1, r3
 8005a0c:	441a      	add	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	22ff      	movs	r2, #255	; 0xff
 8005a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	22ff      	movs	r2, #255	; 0xff
 8005a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d114      	bne.n	8005a52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01a      	beq.n	8005a66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3310      	adds	r3, #16
 8005a34:	4618      	mov	r0, r3
 8005a36:	f001 f8f5 	bl	8006c24 <xTaskRemoveFromEventList>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d012      	beq.n	8005a66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a40:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <xQueueGenericReset+0xcc>)
 8005a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	e009      	b.n	8005a66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3310      	adds	r3, #16
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff fef2 	bl	8005840 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3324      	adds	r3, #36	; 0x24
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff feed 	bl	8005840 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a66:	f002 f82d 	bl	8007ac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a6a:	2301      	movs	r3, #1
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08e      	sub	sp, #56	; 0x38
 8005a7c:	af02      	add	r7, sp, #8
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a9e:	bf00      	nop
 8005aa0:	e7fe      	b.n	8005aa0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <xQueueGenericCreateStatic+0x52>
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <xQueueGenericCreateStatic+0x56>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <xQueueGenericCreateStatic+0x58>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10a      	bne.n	8005aea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	623b      	str	r3, [r7, #32]
}
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <xQueueGenericCreateStatic+0x7e>
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <xQueueGenericCreateStatic+0x82>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <xQueueGenericCreateStatic+0x84>
 8005afa:	2300      	movs	r3, #0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10a      	bne.n	8005b16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	61fb      	str	r3, [r7, #28]
}
 8005b12:	bf00      	nop
 8005b14:	e7fe      	b.n	8005b14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b16:	2350      	movs	r3, #80	; 0x50
 8005b18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b50      	cmp	r3, #80	; 0x50
 8005b1e:	d00a      	beq.n	8005b36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	61bb      	str	r3, [r7, #24]
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00d      	beq.n	8005b5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	4613      	mov	r3, r2
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f805 	bl	8005b68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3730      	adds	r7, #48	; 0x30
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d103      	bne.n	8005b84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	e002      	b.n	8005b8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b96:	2101      	movs	r1, #1
 8005b98:	69b8      	ldr	r0, [r7, #24]
 8005b9a:	f7ff ff05 	bl	80059a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	78fa      	ldrb	r2, [r7, #3]
 8005ba2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ba6:	bf00      	nop
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08e      	sub	sp, #56	; 0x38
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <xQueueGenericSend+0x32>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d103      	bne.n	8005bf0 <xQueueGenericSend+0x40>
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <xQueueGenericSend+0x44>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e000      	b.n	8005bf6 <xQueueGenericSend+0x46>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10a      	bne.n	8005c10 <xQueueGenericSend+0x60>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c0c:	bf00      	nop
 8005c0e:	e7fe      	b.n	8005c0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d103      	bne.n	8005c1e <xQueueGenericSend+0x6e>
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <xQueueGenericSend+0x72>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <xQueueGenericSend+0x74>
 8005c22:	2300      	movs	r3, #0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <xQueueGenericSend+0x8e>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	623b      	str	r3, [r7, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c3e:	f001 f9b3 	bl	8006fa8 <xTaskGetSchedulerState>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d102      	bne.n	8005c4e <xQueueGenericSend+0x9e>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <xQueueGenericSend+0xa2>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <xQueueGenericSend+0xa4>
 8005c52:	2300      	movs	r3, #0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10a      	bne.n	8005c6e <xQueueGenericSend+0xbe>
	__asm volatile
 8005c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	61fb      	str	r3, [r7, #28]
}
 8005c6a:	bf00      	nop
 8005c6c:	e7fe      	b.n	8005c6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c6e:	f001 fef9 	bl	8007a64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d302      	bcc.n	8005c84 <xQueueGenericSend+0xd4>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d129      	bne.n	8005cd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c8a:	f000 fa0b 	bl	80060a4 <prvCopyDataToQueue>
 8005c8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d010      	beq.n	8005cba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	3324      	adds	r3, #36	; 0x24
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 ffc1 	bl	8006c24 <xTaskRemoveFromEventList>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d013      	beq.n	8005cd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ca8:	4b3f      	ldr	r3, [pc, #252]	; (8005da8 <xQueueGenericSend+0x1f8>)
 8005caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	e00a      	b.n	8005cd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d007      	beq.n	8005cd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005cc0:	4b39      	ldr	r3, [pc, #228]	; (8005da8 <xQueueGenericSend+0x1f8>)
 8005cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005cd0:	f001 fef8 	bl	8007ac4 <vPortExitCritical>
				return pdPASS;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e063      	b.n	8005da0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d103      	bne.n	8005ce6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cde:	f001 fef1 	bl	8007ac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e05c      	b.n	8005da0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d106      	bne.n	8005cfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cec:	f107 0314 	add.w	r3, r7, #20
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fffb 	bl	8006cec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cfa:	f001 fee3 	bl	8007ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cfe:	f000 fd67 	bl	80067d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d02:	f001 feaf 	bl	8007a64 <vPortEnterCritical>
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d0c:	b25b      	sxtb	r3, r3
 8005d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d12:	d103      	bne.n	8005d1c <xQueueGenericSend+0x16c>
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d22:	b25b      	sxtb	r3, r3
 8005d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d28:	d103      	bne.n	8005d32 <xQueueGenericSend+0x182>
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d32:	f001 fec7 	bl	8007ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d36:	1d3a      	adds	r2, r7, #4
 8005d38:	f107 0314 	add.w	r3, r7, #20
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 ffea 	bl	8006d18 <xTaskCheckForTimeOut>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d124      	bne.n	8005d94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d4c:	f000 faa2 	bl	8006294 <prvIsQueueFull>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d018      	beq.n	8005d88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	3310      	adds	r3, #16
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 ff10 	bl	8006b84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d66:	f000 fa2d 	bl	80061c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d6a:	f000 fd3f 	bl	80067ec <xTaskResumeAll>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f47f af7c 	bne.w	8005c6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005d76:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <xQueueGenericSend+0x1f8>)
 8005d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	e772      	b.n	8005c6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d8a:	f000 fa1b 	bl	80061c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d8e:	f000 fd2d 	bl	80067ec <xTaskResumeAll>
 8005d92:	e76c      	b.n	8005c6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d96:	f000 fa15 	bl	80061c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d9a:	f000 fd27 	bl	80067ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3738      	adds	r7, #56	; 0x38
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	e000ed04 	.word	0xe000ed04

08005dac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b090      	sub	sp, #64	; 0x40
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d103      	bne.n	8005de8 <xQueueGenericSendFromISR+0x3c>
 8005de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <xQueueGenericSendFromISR+0x40>
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <xQueueGenericSendFromISR+0x42>
 8005dec:	2300      	movs	r3, #0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e04:	bf00      	nop
 8005e06:	e7fe      	b.n	8005e06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d103      	bne.n	8005e16 <xQueueGenericSendFromISR+0x6a>
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <xQueueGenericSendFromISR+0x6e>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <xQueueGenericSendFromISR+0x70>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10a      	bne.n	8005e36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	623b      	str	r3, [r7, #32]
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e36:	f001 fef7 	bl	8007c28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e3a:	f3ef 8211 	mrs	r2, BASEPRI
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	61fa      	str	r2, [r7, #28]
 8005e50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d302      	bcc.n	8005e68 <xQueueGenericSendFromISR+0xbc>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d12f      	bne.n	8005ec8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e7e:	f000 f911 	bl	80060a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e8a:	d112      	bne.n	8005eb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d016      	beq.n	8005ec2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e96:	3324      	adds	r3, #36	; 0x24
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fec3 	bl	8006c24 <xTaskRemoveFromEventList>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00e      	beq.n	8005ec2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	e007      	b.n	8005ec2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005eb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	b25a      	sxtb	r2, r3
 8005ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005ec6:	e001      	b.n	8005ecc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ece:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ed6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3740      	adds	r7, #64	; 0x40
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08c      	sub	sp, #48	; 0x30
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <xQueueReceive+0x30>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	623b      	str	r3, [r7, #32]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <xQueueReceive+0x3e>
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <xQueueReceive+0x42>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <xQueueReceive+0x44>
 8005f26:	2300      	movs	r3, #0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <xQueueReceive+0x5e>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	61fb      	str	r3, [r7, #28]
}
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f42:	f001 f831 	bl	8006fa8 <xTaskGetSchedulerState>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d102      	bne.n	8005f52 <xQueueReceive+0x6e>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <xQueueReceive+0x72>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <xQueueReceive+0x74>
 8005f56:	2300      	movs	r3, #0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <xQueueReceive+0x8e>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	61bb      	str	r3, [r7, #24]
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f72:	f001 fd77 	bl	8007a64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d01f      	beq.n	8005fc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f82:	68b9      	ldr	r1, [r7, #8]
 8005f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f86:	f000 f8f7 	bl	8006178 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	1e5a      	subs	r2, r3, #1
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00f      	beq.n	8005fba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	3310      	adds	r3, #16
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fe40 	bl	8006c24 <xTaskRemoveFromEventList>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d007      	beq.n	8005fba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005faa:	4b3d      	ldr	r3, [pc, #244]	; (80060a0 <xQueueReceive+0x1bc>)
 8005fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fba:	f001 fd83 	bl	8007ac4 <vPortExitCritical>
				return pdPASS;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e069      	b.n	8006096 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d103      	bne.n	8005fd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fc8:	f001 fd7c 	bl	8007ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	e062      	b.n	8006096 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d106      	bne.n	8005fe4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fd6:	f107 0310 	add.w	r3, r7, #16
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fe86 	bl	8006cec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fe4:	f001 fd6e 	bl	8007ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fe8:	f000 fbf2 	bl	80067d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fec:	f001 fd3a 	bl	8007a64 <vPortEnterCritical>
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ff6:	b25b      	sxtb	r3, r3
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ffc:	d103      	bne.n	8006006 <xQueueReceive+0x122>
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800600c:	b25b      	sxtb	r3, r3
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006012:	d103      	bne.n	800601c <xQueueReceive+0x138>
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800601c:	f001 fd52 	bl	8007ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006020:	1d3a      	adds	r2, r7, #4
 8006022:	f107 0310 	add.w	r3, r7, #16
 8006026:	4611      	mov	r1, r2
 8006028:	4618      	mov	r0, r3
 800602a:	f000 fe75 	bl	8006d18 <xTaskCheckForTimeOut>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d123      	bne.n	800607c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006036:	f000 f917 	bl	8006268 <prvIsQueueEmpty>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d017      	beq.n	8006070 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	3324      	adds	r3, #36	; 0x24
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	4611      	mov	r1, r2
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fd9b 	bl	8006b84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800604e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006050:	f000 f8b8 	bl	80061c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006054:	f000 fbca 	bl	80067ec <xTaskResumeAll>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d189      	bne.n	8005f72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800605e:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <xQueueReceive+0x1bc>)
 8006060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	e780      	b.n	8005f72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006072:	f000 f8a7 	bl	80061c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006076:	f000 fbb9 	bl	80067ec <xTaskResumeAll>
 800607a:	e77a      	b.n	8005f72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800607c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800607e:	f000 f8a1 	bl	80061c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006082:	f000 fbb3 	bl	80067ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006088:	f000 f8ee 	bl	8006268 <prvIsQueueEmpty>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	f43f af6f 	beq.w	8005f72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006094:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006096:	4618      	mov	r0, r3
 8006098:	3730      	adds	r7, #48	; 0x30
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	e000ed04 	.word	0xe000ed04

080060a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10d      	bne.n	80060de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d14d      	bne.n	8006166 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 ff88 	bl	8006fe4 <xTaskPriorityDisinherit>
 80060d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	609a      	str	r2, [r3, #8]
 80060dc:	e043      	b.n	8006166 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d119      	bne.n	8006118 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6858      	ldr	r0, [r3, #4]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	461a      	mov	r2, r3
 80060ee:	68b9      	ldr	r1, [r7, #8]
 80060f0:	f003 f9fb 	bl	80094ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	441a      	add	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	429a      	cmp	r2, r3
 800610c:	d32b      	bcc.n	8006166 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	605a      	str	r2, [r3, #4]
 8006116:	e026      	b.n	8006166 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68d8      	ldr	r0, [r3, #12]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	461a      	mov	r2, r3
 8006122:	68b9      	ldr	r1, [r7, #8]
 8006124:	f003 f9e1 	bl	80094ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006130:	425b      	negs	r3, r3
 8006132:	441a      	add	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d207      	bcs.n	8006154 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	425b      	negs	r3, r3
 800614e:	441a      	add	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d105      	bne.n	8006166 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	3b01      	subs	r3, #1
 8006164:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800616e:	697b      	ldr	r3, [r7, #20]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	2b00      	cmp	r3, #0
 8006188:	d018      	beq.n	80061bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	441a      	add	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68da      	ldr	r2, [r3, #12]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d303      	bcc.n	80061ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68d9      	ldr	r1, [r3, #12]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	461a      	mov	r2, r3
 80061b6:	6838      	ldr	r0, [r7, #0]
 80061b8:	f003 f997 	bl	80094ea <memcpy>
	}
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80061cc:	f001 fc4a 	bl	8007a64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061d8:	e011      	b.n	80061fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d012      	beq.n	8006208 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3324      	adds	r3, #36	; 0x24
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fd1c 	bl	8006c24 <xTaskRemoveFromEventList>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80061f2:	f000 fdf3 	bl	8006ddc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006202:	2b00      	cmp	r3, #0
 8006204:	dce9      	bgt.n	80061da <prvUnlockQueue+0x16>
 8006206:	e000      	b.n	800620a <prvUnlockQueue+0x46>
					break;
 8006208:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	22ff      	movs	r2, #255	; 0xff
 800620e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006212:	f001 fc57 	bl	8007ac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006216:	f001 fc25 	bl	8007a64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006220:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006222:	e011      	b.n	8006248 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d012      	beq.n	8006252 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3310      	adds	r3, #16
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fcf7 	bl	8006c24 <xTaskRemoveFromEventList>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800623c:	f000 fdce 	bl	8006ddc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006240:	7bbb      	ldrb	r3, [r7, #14]
 8006242:	3b01      	subs	r3, #1
 8006244:	b2db      	uxtb	r3, r3
 8006246:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800624c:	2b00      	cmp	r3, #0
 800624e:	dce9      	bgt.n	8006224 <prvUnlockQueue+0x60>
 8006250:	e000      	b.n	8006254 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006252:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	22ff      	movs	r2, #255	; 0xff
 8006258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800625c:	f001 fc32 	bl	8007ac4 <vPortExitCritical>
}
 8006260:	bf00      	nop
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006270:	f001 fbf8 	bl	8007a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	2b00      	cmp	r3, #0
 800627a:	d102      	bne.n	8006282 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800627c:	2301      	movs	r3, #1
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	e001      	b.n	8006286 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006286:	f001 fc1d 	bl	8007ac4 <vPortExitCritical>

	return xReturn;
 800628a:	68fb      	ldr	r3, [r7, #12]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800629c:	f001 fbe2 	bl	8007a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d102      	bne.n	80062b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80062ac:	2301      	movs	r3, #1
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	e001      	b.n	80062b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062b6:	f001 fc05 	bl	8007ac4 <vPortExitCritical>

	return xReturn;
 80062ba:	68fb      	ldr	r3, [r7, #12]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	e014      	b.n	80062fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80062d4:	4a0f      	ldr	r2, [pc, #60]	; (8006314 <vQueueAddToRegistry+0x50>)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10b      	bne.n	80062f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80062e0:	490c      	ldr	r1, [pc, #48]	; (8006314 <vQueueAddToRegistry+0x50>)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80062ea:	4a0a      	ldr	r2, [pc, #40]	; (8006314 <vQueueAddToRegistry+0x50>)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	4413      	add	r3, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80062f6:	e006      	b.n	8006306 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3301      	adds	r3, #1
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b07      	cmp	r3, #7
 8006302:	d9e7      	bls.n	80062d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	20000ab8 	.word	0x20000ab8

08006318 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006328:	f001 fb9c 	bl	8007a64 <vPortEnterCritical>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006332:	b25b      	sxtb	r3, r3
 8006334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006338:	d103      	bne.n	8006342 <vQueueWaitForMessageRestricted+0x2a>
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006348:	b25b      	sxtb	r3, r3
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800634e:	d103      	bne.n	8006358 <vQueueWaitForMessageRestricted+0x40>
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006358:	f001 fbb4 	bl	8007ac4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	2b00      	cmp	r3, #0
 8006362:	d106      	bne.n	8006372 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	3324      	adds	r3, #36	; 0x24
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	4618      	mov	r0, r3
 800636e:	f000 fc2d 	bl	8006bcc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006372:	6978      	ldr	r0, [r7, #20]
 8006374:	f7ff ff26 	bl	80061c4 <prvUnlockQueue>
	}
 8006378:	bf00      	nop
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08e      	sub	sp, #56	; 0x38
 8006384:	af04      	add	r7, sp, #16
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800638e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	623b      	str	r3, [r7, #32]
}
 80063a6:	bf00      	nop
 80063a8:	e7fe      	b.n	80063a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	61fb      	str	r3, [r7, #28]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063c6:	23a8      	movs	r3, #168	; 0xa8
 80063c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2ba8      	cmp	r3, #168	; 0xa8
 80063ce:	d00a      	beq.n	80063e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	61bb      	str	r3, [r7, #24]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80063e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d01e      	beq.n	800642c <xTaskCreateStatic+0xac>
 80063ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01b      	beq.n	800642c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	2202      	movs	r2, #2
 8006402:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006406:	2300      	movs	r3, #0
 8006408:	9303      	str	r3, [sp, #12]
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	9302      	str	r3, [sp, #8]
 800640e:	f107 0314 	add.w	r3, r7, #20
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 f850 	bl	80064c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006424:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006426:	f000 f8f3 	bl	8006610 <prvAddNewTaskToReadyList>
 800642a:	e001      	b.n	8006430 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800642c:	2300      	movs	r3, #0
 800642e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006430:	697b      	ldr	r3, [r7, #20]
	}
 8006432:	4618      	mov	r0, r3
 8006434:	3728      	adds	r7, #40	; 0x28
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800643a:	b580      	push	{r7, lr}
 800643c:	b08c      	sub	sp, #48	; 0x30
 800643e:	af04      	add	r7, sp, #16
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	603b      	str	r3, [r7, #0]
 8006446:	4613      	mov	r3, r2
 8006448:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4618      	mov	r0, r3
 8006450:	f001 fc2a 	bl	8007ca8 <pvPortMalloc>
 8006454:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00e      	beq.n	800647a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800645c:	20a8      	movs	r0, #168	; 0xa8
 800645e:	f001 fc23 	bl	8007ca8 <pvPortMalloc>
 8006462:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	631a      	str	r2, [r3, #48]	; 0x30
 8006470:	e005      	b.n	800647e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006472:	6978      	ldr	r0, [r7, #20]
 8006474:	f001 fce4 	bl	8007e40 <vPortFree>
 8006478:	e001      	b.n	800647e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d017      	beq.n	80064b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800648c:	88fa      	ldrh	r2, [r7, #6]
 800648e:	2300      	movs	r3, #0
 8006490:	9303      	str	r3, [sp, #12]
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	9302      	str	r3, [sp, #8]
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68b9      	ldr	r1, [r7, #8]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 f80e 	bl	80064c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064a8:	69f8      	ldr	r0, [r7, #28]
 80064aa:	f000 f8b1 	bl	8006610 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064ae:	2301      	movs	r3, #1
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	e002      	b.n	80064ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064ba:	69bb      	ldr	r3, [r7, #24]
	}
 80064bc:	4618      	mov	r0, r3
 80064be:	3720      	adds	r7, #32
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	461a      	mov	r2, r3
 80064dc:	21a5      	movs	r1, #165	; 0xa5
 80064de:	f002 ff1f 	bl	8009320 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064ec:	3b01      	subs	r3, #1
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	f023 0307 	bic.w	r3, r3, #7
 80064fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	617b      	str	r3, [r7, #20]
}
 8006518:	bf00      	nop
 800651a:	e7fe      	b.n	800651a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d01f      	beq.n	8006562 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006522:	2300      	movs	r3, #0
 8006524:	61fb      	str	r3, [r7, #28]
 8006526:	e012      	b.n	800654e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	4413      	add	r3, r2
 800652e:	7819      	ldrb	r1, [r3, #0]
 8006530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	4413      	add	r3, r2
 8006536:	3334      	adds	r3, #52	; 0x34
 8006538:	460a      	mov	r2, r1
 800653a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	4413      	add	r3, r2
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d006      	beq.n	8006556 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	3301      	adds	r3, #1
 800654c:	61fb      	str	r3, [r7, #28]
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	2b0f      	cmp	r3, #15
 8006552:	d9e9      	bls.n	8006528 <prvInitialiseNewTask+0x64>
 8006554:	e000      	b.n	8006558 <prvInitialiseNewTask+0x94>
			{
				break;
 8006556:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006560:	e003      	b.n	800656a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	2b37      	cmp	r3, #55	; 0x37
 800656e:	d901      	bls.n	8006574 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006570:	2337      	movs	r3, #55	; 0x37
 8006572:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006578:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800657e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	2200      	movs	r2, #0
 8006584:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	3304      	adds	r3, #4
 800658a:	4618      	mov	r0, r3
 800658c:	f7ff f978 	bl	8005880 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006592:	3318      	adds	r3, #24
 8006594:	4618      	mov	r0, r3
 8006596:	f7ff f973 	bl	8005880 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800659e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	3354      	adds	r3, #84	; 0x54
 80065c4:	224c      	movs	r2, #76	; 0x4c
 80065c6:	2100      	movs	r1, #0
 80065c8:	4618      	mov	r0, r3
 80065ca:	f002 fea9 	bl	8009320 <memset>
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	4a0c      	ldr	r2, [pc, #48]	; (8006604 <prvInitialiseNewTask+0x140>)
 80065d2:	659a      	str	r2, [r3, #88]	; 0x58
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	4a0c      	ldr	r2, [pc, #48]	; (8006608 <prvInitialiseNewTask+0x144>)
 80065d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	4a0b      	ldr	r2, [pc, #44]	; (800660c <prvInitialiseNewTask+0x148>)
 80065de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	68f9      	ldr	r1, [r7, #12]
 80065e4:	69b8      	ldr	r0, [r7, #24]
 80065e6:	f001 f90d 	bl	8007804 <pxPortInitialiseStack>
 80065ea:	4602      	mov	r2, r0
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065fc:	bf00      	nop
 80065fe:	3720      	adds	r7, #32
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20001d0c 	.word	0x20001d0c
 8006608:	20001d74 	.word	0x20001d74
 800660c:	20001ddc 	.word	0x20001ddc

08006610 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006618:	f001 fa24 	bl	8007a64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800661c:	4b2d      	ldr	r3, [pc, #180]	; (80066d4 <prvAddNewTaskToReadyList+0xc4>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3301      	adds	r3, #1
 8006622:	4a2c      	ldr	r2, [pc, #176]	; (80066d4 <prvAddNewTaskToReadyList+0xc4>)
 8006624:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006626:	4b2c      	ldr	r3, [pc, #176]	; (80066d8 <prvAddNewTaskToReadyList+0xc8>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d109      	bne.n	8006642 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800662e:	4a2a      	ldr	r2, [pc, #168]	; (80066d8 <prvAddNewTaskToReadyList+0xc8>)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006634:	4b27      	ldr	r3, [pc, #156]	; (80066d4 <prvAddNewTaskToReadyList+0xc4>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d110      	bne.n	800665e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800663c:	f000 fbf2 	bl	8006e24 <prvInitialiseTaskLists>
 8006640:	e00d      	b.n	800665e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006642:	4b26      	ldr	r3, [pc, #152]	; (80066dc <prvAddNewTaskToReadyList+0xcc>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d109      	bne.n	800665e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800664a:	4b23      	ldr	r3, [pc, #140]	; (80066d8 <prvAddNewTaskToReadyList+0xc8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	429a      	cmp	r2, r3
 8006656:	d802      	bhi.n	800665e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006658:	4a1f      	ldr	r2, [pc, #124]	; (80066d8 <prvAddNewTaskToReadyList+0xc8>)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800665e:	4b20      	ldr	r3, [pc, #128]	; (80066e0 <prvAddNewTaskToReadyList+0xd0>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3301      	adds	r3, #1
 8006664:	4a1e      	ldr	r2, [pc, #120]	; (80066e0 <prvAddNewTaskToReadyList+0xd0>)
 8006666:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006668:	4b1d      	ldr	r3, [pc, #116]	; (80066e0 <prvAddNewTaskToReadyList+0xd0>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006674:	4b1b      	ldr	r3, [pc, #108]	; (80066e4 <prvAddNewTaskToReadyList+0xd4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	429a      	cmp	r2, r3
 800667a:	d903      	bls.n	8006684 <prvAddNewTaskToReadyList+0x74>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006680:	4a18      	ldr	r2, [pc, #96]	; (80066e4 <prvAddNewTaskToReadyList+0xd4>)
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4a15      	ldr	r2, [pc, #84]	; (80066e8 <prvAddNewTaskToReadyList+0xd8>)
 8006692:	441a      	add	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3304      	adds	r3, #4
 8006698:	4619      	mov	r1, r3
 800669a:	4610      	mov	r0, r2
 800669c:	f7ff f8fd 	bl	800589a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066a0:	f001 fa10 	bl	8007ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066a4:	4b0d      	ldr	r3, [pc, #52]	; (80066dc <prvAddNewTaskToReadyList+0xcc>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00e      	beq.n	80066ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <prvAddNewTaskToReadyList+0xc8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d207      	bcs.n	80066ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066ba:	4b0c      	ldr	r3, [pc, #48]	; (80066ec <prvAddNewTaskToReadyList+0xdc>)
 80066bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066ca:	bf00      	nop
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000fcc 	.word	0x20000fcc
 80066d8:	20000af8 	.word	0x20000af8
 80066dc:	20000fd8 	.word	0x20000fd8
 80066e0:	20000fe8 	.word	0x20000fe8
 80066e4:	20000fd4 	.word	0x20000fd4
 80066e8:	20000afc 	.word	0x20000afc
 80066ec:	e000ed04 	.word	0xe000ed04

080066f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08a      	sub	sp, #40	; 0x28
 80066f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066fe:	463a      	mov	r2, r7
 8006700:	1d39      	adds	r1, r7, #4
 8006702:	f107 0308 	add.w	r3, r7, #8
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff f866 	bl	80057d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	9202      	str	r2, [sp, #8]
 8006714:	9301      	str	r3, [sp, #4]
 8006716:	2300      	movs	r3, #0
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	2300      	movs	r3, #0
 800671c:	460a      	mov	r2, r1
 800671e:	4924      	ldr	r1, [pc, #144]	; (80067b0 <vTaskStartScheduler+0xc0>)
 8006720:	4824      	ldr	r0, [pc, #144]	; (80067b4 <vTaskStartScheduler+0xc4>)
 8006722:	f7ff fe2d 	bl	8006380 <xTaskCreateStatic>
 8006726:	4603      	mov	r3, r0
 8006728:	4a23      	ldr	r2, [pc, #140]	; (80067b8 <vTaskStartScheduler+0xc8>)
 800672a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800672c:	4b22      	ldr	r3, [pc, #136]	; (80067b8 <vTaskStartScheduler+0xc8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006734:	2301      	movs	r3, #1
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	e001      	b.n	800673e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d102      	bne.n	800674a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006744:	f000 fd10 	bl	8007168 <xTimerCreateTimerTask>
 8006748:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d11b      	bne.n	8006788 <vTaskStartScheduler+0x98>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	613b      	str	r3, [r7, #16]
}
 8006762:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006764:	4b15      	ldr	r3, [pc, #84]	; (80067bc <vTaskStartScheduler+0xcc>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3354      	adds	r3, #84	; 0x54
 800676a:	4a15      	ldr	r2, [pc, #84]	; (80067c0 <vTaskStartScheduler+0xd0>)
 800676c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800676e:	4b15      	ldr	r3, [pc, #84]	; (80067c4 <vTaskStartScheduler+0xd4>)
 8006770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006774:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006776:	4b14      	ldr	r3, [pc, #80]	; (80067c8 <vTaskStartScheduler+0xd8>)
 8006778:	2201      	movs	r2, #1
 800677a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800677c:	4b13      	ldr	r3, [pc, #76]	; (80067cc <vTaskStartScheduler+0xdc>)
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006782:	f001 f8cd 	bl	8007920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006786:	e00e      	b.n	80067a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800678e:	d10a      	bne.n	80067a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	60fb      	str	r3, [r7, #12]
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <vTaskStartScheduler+0xb4>
}
 80067a6:	bf00      	nop
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	0800cb38 	.word	0x0800cb38
 80067b4:	08006df5 	.word	0x08006df5
 80067b8:	20000ff0 	.word	0x20000ff0
 80067bc:	20000af8 	.word	0x20000af8
 80067c0:	20000068 	.word	0x20000068
 80067c4:	20000fec 	.word	0x20000fec
 80067c8:	20000fd8 	.word	0x20000fd8
 80067cc:	20000fd0 	.word	0x20000fd0

080067d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80067d4:	4b04      	ldr	r3, [pc, #16]	; (80067e8 <vTaskSuspendAll+0x18>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3301      	adds	r3, #1
 80067da:	4a03      	ldr	r2, [pc, #12]	; (80067e8 <vTaskSuspendAll+0x18>)
 80067dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80067de:	bf00      	nop
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	20000ff4 	.word	0x20000ff4

080067ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067fa:	4b42      	ldr	r3, [pc, #264]	; (8006904 <xTaskResumeAll+0x118>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <xTaskResumeAll+0x2c>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	603b      	str	r3, [r7, #0]
}
 8006814:	bf00      	nop
 8006816:	e7fe      	b.n	8006816 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006818:	f001 f924 	bl	8007a64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800681c:	4b39      	ldr	r3, [pc, #228]	; (8006904 <xTaskResumeAll+0x118>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3b01      	subs	r3, #1
 8006822:	4a38      	ldr	r2, [pc, #224]	; (8006904 <xTaskResumeAll+0x118>)
 8006824:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006826:	4b37      	ldr	r3, [pc, #220]	; (8006904 <xTaskResumeAll+0x118>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d162      	bne.n	80068f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800682e:	4b36      	ldr	r3, [pc, #216]	; (8006908 <xTaskResumeAll+0x11c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d05e      	beq.n	80068f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006836:	e02f      	b.n	8006898 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006838:	4b34      	ldr	r3, [pc, #208]	; (800690c <xTaskResumeAll+0x120>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3318      	adds	r3, #24
 8006844:	4618      	mov	r0, r3
 8006846:	f7ff f885 	bl	8005954 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3304      	adds	r3, #4
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff f880 	bl	8005954 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006858:	4b2d      	ldr	r3, [pc, #180]	; (8006910 <xTaskResumeAll+0x124>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	429a      	cmp	r2, r3
 800685e:	d903      	bls.n	8006868 <xTaskResumeAll+0x7c>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	4a2a      	ldr	r2, [pc, #168]	; (8006910 <xTaskResumeAll+0x124>)
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4a27      	ldr	r2, [pc, #156]	; (8006914 <xTaskResumeAll+0x128>)
 8006876:	441a      	add	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3304      	adds	r3, #4
 800687c:	4619      	mov	r1, r3
 800687e:	4610      	mov	r0, r2
 8006880:	f7ff f80b 	bl	800589a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006888:	4b23      	ldr	r3, [pc, #140]	; (8006918 <xTaskResumeAll+0x12c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688e:	429a      	cmp	r2, r3
 8006890:	d302      	bcc.n	8006898 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006892:	4b22      	ldr	r3, [pc, #136]	; (800691c <xTaskResumeAll+0x130>)
 8006894:	2201      	movs	r2, #1
 8006896:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006898:	4b1c      	ldr	r3, [pc, #112]	; (800690c <xTaskResumeAll+0x120>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1cb      	bne.n	8006838 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068a6:	f000 fb5f 	bl	8006f68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068aa:	4b1d      	ldr	r3, [pc, #116]	; (8006920 <xTaskResumeAll+0x134>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d010      	beq.n	80068d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068b6:	f000 f847 	bl	8006948 <xTaskIncrementTick>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80068c0:	4b16      	ldr	r3, [pc, #88]	; (800691c <xTaskResumeAll+0x130>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1f1      	bne.n	80068b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80068d2:	4b13      	ldr	r3, [pc, #76]	; (8006920 <xTaskResumeAll+0x134>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068d8:	4b10      	ldr	r3, [pc, #64]	; (800691c <xTaskResumeAll+0x130>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d009      	beq.n	80068f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068e0:	2301      	movs	r3, #1
 80068e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068e4:	4b0f      	ldr	r3, [pc, #60]	; (8006924 <xTaskResumeAll+0x138>)
 80068e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068f4:	f001 f8e6 	bl	8007ac4 <vPortExitCritical>

	return xAlreadyYielded;
 80068f8:	68bb      	ldr	r3, [r7, #8]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20000ff4 	.word	0x20000ff4
 8006908:	20000fcc 	.word	0x20000fcc
 800690c:	20000f8c 	.word	0x20000f8c
 8006910:	20000fd4 	.word	0x20000fd4
 8006914:	20000afc 	.word	0x20000afc
 8006918:	20000af8 	.word	0x20000af8
 800691c:	20000fe0 	.word	0x20000fe0
 8006920:	20000fdc 	.word	0x20000fdc
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <xTaskGetTickCount+0x1c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006934:	687b      	ldr	r3, [r7, #4]
}
 8006936:	4618      	mov	r0, r3
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	20000fd0 	.word	0x20000fd0

08006948 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800694e:	2300      	movs	r3, #0
 8006950:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006952:	4b4f      	ldr	r3, [pc, #316]	; (8006a90 <xTaskIncrementTick+0x148>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f040 808f 	bne.w	8006a7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800695c:	4b4d      	ldr	r3, [pc, #308]	; (8006a94 <xTaskIncrementTick+0x14c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3301      	adds	r3, #1
 8006962:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006964:	4a4b      	ldr	r2, [pc, #300]	; (8006a94 <xTaskIncrementTick+0x14c>)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d120      	bne.n	80069b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006970:	4b49      	ldr	r3, [pc, #292]	; (8006a98 <xTaskIncrementTick+0x150>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <xTaskIncrementTick+0x48>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	603b      	str	r3, [r7, #0]
}
 800698c:	bf00      	nop
 800698e:	e7fe      	b.n	800698e <xTaskIncrementTick+0x46>
 8006990:	4b41      	ldr	r3, [pc, #260]	; (8006a98 <xTaskIncrementTick+0x150>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	4b41      	ldr	r3, [pc, #260]	; (8006a9c <xTaskIncrementTick+0x154>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a3f      	ldr	r2, [pc, #252]	; (8006a98 <xTaskIncrementTick+0x150>)
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	4a3f      	ldr	r2, [pc, #252]	; (8006a9c <xTaskIncrementTick+0x154>)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	4b3e      	ldr	r3, [pc, #248]	; (8006aa0 <xTaskIncrementTick+0x158>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3301      	adds	r3, #1
 80069aa:	4a3d      	ldr	r2, [pc, #244]	; (8006aa0 <xTaskIncrementTick+0x158>)
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	f000 fadb 	bl	8006f68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069b2:	4b3c      	ldr	r3, [pc, #240]	; (8006aa4 <xTaskIncrementTick+0x15c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d349      	bcc.n	8006a50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069bc:	4b36      	ldr	r3, [pc, #216]	; (8006a98 <xTaskIncrementTick+0x150>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d104      	bne.n	80069d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069c6:	4b37      	ldr	r3, [pc, #220]	; (8006aa4 <xTaskIncrementTick+0x15c>)
 80069c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069cc:	601a      	str	r2, [r3, #0]
					break;
 80069ce:	e03f      	b.n	8006a50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d0:	4b31      	ldr	r3, [pc, #196]	; (8006a98 <xTaskIncrementTick+0x150>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d203      	bcs.n	80069f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069e8:	4a2e      	ldr	r2, [pc, #184]	; (8006aa4 <xTaskIncrementTick+0x15c>)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069ee:	e02f      	b.n	8006a50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	3304      	adds	r3, #4
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe ffad 	bl	8005954 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d004      	beq.n	8006a0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	3318      	adds	r3, #24
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe ffa4 	bl	8005954 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a10:	4b25      	ldr	r3, [pc, #148]	; (8006aa8 <xTaskIncrementTick+0x160>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d903      	bls.n	8006a20 <xTaskIncrementTick+0xd8>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	4a22      	ldr	r2, [pc, #136]	; (8006aa8 <xTaskIncrementTick+0x160>)
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4a1f      	ldr	r2, [pc, #124]	; (8006aac <xTaskIncrementTick+0x164>)
 8006a2e:	441a      	add	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	3304      	adds	r3, #4
 8006a34:	4619      	mov	r1, r3
 8006a36:	4610      	mov	r0, r2
 8006a38:	f7fe ff2f 	bl	800589a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a40:	4b1b      	ldr	r3, [pc, #108]	; (8006ab0 <xTaskIncrementTick+0x168>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d3b8      	bcc.n	80069bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a4e:	e7b5      	b.n	80069bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a50:	4b17      	ldr	r3, [pc, #92]	; (8006ab0 <xTaskIncrementTick+0x168>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a56:	4915      	ldr	r1, [pc, #84]	; (8006aac <xTaskIncrementTick+0x164>)
 8006a58:	4613      	mov	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	440b      	add	r3, r1
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d901      	bls.n	8006a6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a6c:	4b11      	ldr	r3, [pc, #68]	; (8006ab4 <xTaskIncrementTick+0x16c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006a74:	2301      	movs	r3, #1
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	e004      	b.n	8006a84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a7a:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <xTaskIncrementTick+0x170>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	4a0d      	ldr	r2, [pc, #52]	; (8006ab8 <xTaskIncrementTick+0x170>)
 8006a82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a84:	697b      	ldr	r3, [r7, #20]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000ff4 	.word	0x20000ff4
 8006a94:	20000fd0 	.word	0x20000fd0
 8006a98:	20000f84 	.word	0x20000f84
 8006a9c:	20000f88 	.word	0x20000f88
 8006aa0:	20000fe4 	.word	0x20000fe4
 8006aa4:	20000fec 	.word	0x20000fec
 8006aa8:	20000fd4 	.word	0x20000fd4
 8006aac:	20000afc 	.word	0x20000afc
 8006ab0:	20000af8 	.word	0x20000af8
 8006ab4:	20000fe0 	.word	0x20000fe0
 8006ab8:	20000fdc 	.word	0x20000fdc

08006abc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ac2:	4b2a      	ldr	r3, [pc, #168]	; (8006b6c <vTaskSwitchContext+0xb0>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006aca:	4b29      	ldr	r3, [pc, #164]	; (8006b70 <vTaskSwitchContext+0xb4>)
 8006acc:	2201      	movs	r2, #1
 8006ace:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ad0:	e046      	b.n	8006b60 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006ad2:	4b27      	ldr	r3, [pc, #156]	; (8006b70 <vTaskSwitchContext+0xb4>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad8:	4b26      	ldr	r3, [pc, #152]	; (8006b74 <vTaskSwitchContext+0xb8>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	e010      	b.n	8006b02 <vTaskSwitchContext+0x46>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10a      	bne.n	8006afc <vTaskSwitchContext+0x40>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	607b      	str	r3, [r7, #4]
}
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <vTaskSwitchContext+0x3e>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	491d      	ldr	r1, [pc, #116]	; (8006b78 <vTaskSwitchContext+0xbc>)
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	440b      	add	r3, r1
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0e4      	beq.n	8006ae0 <vTaskSwitchContext+0x24>
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4a15      	ldr	r2, [pc, #84]	; (8006b78 <vTaskSwitchContext+0xbc>)
 8006b22:	4413      	add	r3, r2
 8006b24:	60bb      	str	r3, [r7, #8]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	605a      	str	r2, [r3, #4]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	3308      	adds	r3, #8
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d104      	bne.n	8006b46 <vTaskSwitchContext+0x8a>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	605a      	str	r2, [r3, #4]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	4a0b      	ldr	r2, [pc, #44]	; (8006b7c <vTaskSwitchContext+0xc0>)
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	4a08      	ldr	r2, [pc, #32]	; (8006b74 <vTaskSwitchContext+0xb8>)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b56:	4b09      	ldr	r3, [pc, #36]	; (8006b7c <vTaskSwitchContext+0xc0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3354      	adds	r3, #84	; 0x54
 8006b5c:	4a08      	ldr	r2, [pc, #32]	; (8006b80 <vTaskSwitchContext+0xc4>)
 8006b5e:	6013      	str	r3, [r2, #0]
}
 8006b60:	bf00      	nop
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	20000ff4 	.word	0x20000ff4
 8006b70:	20000fe0 	.word	0x20000fe0
 8006b74:	20000fd4 	.word	0x20000fd4
 8006b78:	20000afc 	.word	0x20000afc
 8006b7c:	20000af8 	.word	0x20000af8
 8006b80:	20000068 	.word	0x20000068

08006b84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10a      	bne.n	8006baa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	60fb      	str	r3, [r7, #12]
}
 8006ba6:	bf00      	nop
 8006ba8:	e7fe      	b.n	8006ba8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006baa:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <vTaskPlaceOnEventList+0x44>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3318      	adds	r3, #24
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7fe fe95 	bl	80058e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bb8:	2101      	movs	r1, #1
 8006bba:	6838      	ldr	r0, [r7, #0]
 8006bbc:	f000 fa80 	bl	80070c0 <prvAddCurrentTaskToDelayedList>
}
 8006bc0:	bf00      	nop
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	20000af8 	.word	0x20000af8

08006bcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10a      	bne.n	8006bf4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	617b      	str	r3, [r7, #20]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bf4:	4b0a      	ldr	r3, [pc, #40]	; (8006c20 <vTaskPlaceOnEventListRestricted+0x54>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3318      	adds	r3, #24
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7fe fe4c 	bl	800589a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	68b8      	ldr	r0, [r7, #8]
 8006c12:	f000 fa55 	bl	80070c0 <prvAddCurrentTaskToDelayedList>
	}
 8006c16:	bf00      	nop
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20000af8 	.word	0x20000af8

08006c24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	60fb      	str	r3, [r7, #12]
}
 8006c4c:	bf00      	nop
 8006c4e:	e7fe      	b.n	8006c4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	3318      	adds	r3, #24
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe fe7d 	bl	8005954 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c5a:	4b1e      	ldr	r3, [pc, #120]	; (8006cd4 <xTaskRemoveFromEventList+0xb0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d11d      	bne.n	8006c9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	3304      	adds	r3, #4
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe fe74 	bl	8005954 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	4b19      	ldr	r3, [pc, #100]	; (8006cd8 <xTaskRemoveFromEventList+0xb4>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d903      	bls.n	8006c80 <xTaskRemoveFromEventList+0x5c>
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	4a16      	ldr	r2, [pc, #88]	; (8006cd8 <xTaskRemoveFromEventList+0xb4>)
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4a13      	ldr	r2, [pc, #76]	; (8006cdc <xTaskRemoveFromEventList+0xb8>)
 8006c8e:	441a      	add	r2, r3
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	3304      	adds	r3, #4
 8006c94:	4619      	mov	r1, r3
 8006c96:	4610      	mov	r0, r2
 8006c98:	f7fe fdff 	bl	800589a <vListInsertEnd>
 8006c9c:	e005      	b.n	8006caa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	3318      	adds	r3, #24
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	480e      	ldr	r0, [pc, #56]	; (8006ce0 <xTaskRemoveFromEventList+0xbc>)
 8006ca6:	f7fe fdf8 	bl	800589a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cae:	4b0d      	ldr	r3, [pc, #52]	; (8006ce4 <xTaskRemoveFromEventList+0xc0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d905      	bls.n	8006cc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <xTaskRemoveFromEventList+0xc4>)
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	e001      	b.n	8006cc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006cc8:	697b      	ldr	r3, [r7, #20]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000ff4 	.word	0x20000ff4
 8006cd8:	20000fd4 	.word	0x20000fd4
 8006cdc:	20000afc 	.word	0x20000afc
 8006ce0:	20000f8c 	.word	0x20000f8c
 8006ce4:	20000af8 	.word	0x20000af8
 8006ce8:	20000fe0 	.word	0x20000fe0

08006cec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cf4:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <vTaskInternalSetTimeOutState+0x24>)
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006cfc:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <vTaskInternalSetTimeOutState+0x28>)
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	605a      	str	r2, [r3, #4]
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	20000fe4 	.word	0x20000fe4
 8006d14:	20000fd0 	.word	0x20000fd0

08006d18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b088      	sub	sp, #32
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10a      	bne.n	8006d3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	613b      	str	r3, [r7, #16]
}
 8006d3a:	bf00      	nop
 8006d3c:	e7fe      	b.n	8006d3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	60fb      	str	r3, [r7, #12]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006d5a:	f000 fe83 	bl	8007a64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d5e:	4b1d      	ldr	r3, [pc, #116]	; (8006dd4 <xTaskCheckForTimeOut+0xbc>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d76:	d102      	bne.n	8006d7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61fb      	str	r3, [r7, #28]
 8006d7c:	e023      	b.n	8006dc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	4b15      	ldr	r3, [pc, #84]	; (8006dd8 <xTaskCheckForTimeOut+0xc0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d007      	beq.n	8006d9a <xTaskCheckForTimeOut+0x82>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d302      	bcc.n	8006d9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d94:	2301      	movs	r3, #1
 8006d96:	61fb      	str	r3, [r7, #28]
 8006d98:	e015      	b.n	8006dc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d20b      	bcs.n	8006dbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	1ad2      	subs	r2, r2, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff ff9b 	bl	8006cec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006db6:	2300      	movs	r3, #0
 8006db8:	61fb      	str	r3, [r7, #28]
 8006dba:	e004      	b.n	8006dc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dc6:	f000 fe7d 	bl	8007ac4 <vPortExitCritical>

	return xReturn;
 8006dca:	69fb      	ldr	r3, [r7, #28]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3720      	adds	r7, #32
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20000fd0 	.word	0x20000fd0
 8006dd8:	20000fe4 	.word	0x20000fe4

08006ddc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006de0:	4b03      	ldr	r3, [pc, #12]	; (8006df0 <vTaskMissedYield+0x14>)
 8006de2:	2201      	movs	r2, #1
 8006de4:	601a      	str	r2, [r3, #0]
}
 8006de6:	bf00      	nop
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	20000fe0 	.word	0x20000fe0

08006df4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006dfc:	f000 f852 	bl	8006ea4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e00:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <prvIdleTask+0x28>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d9f9      	bls.n	8006dfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e08:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <prvIdleTask+0x2c>)
 8006e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e18:	e7f0      	b.n	8006dfc <prvIdleTask+0x8>
 8006e1a:	bf00      	nop
 8006e1c:	20000afc 	.word	0x20000afc
 8006e20:	e000ed04 	.word	0xe000ed04

08006e24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	607b      	str	r3, [r7, #4]
 8006e2e:	e00c      	b.n	8006e4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	4613      	mov	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4a12      	ldr	r2, [pc, #72]	; (8006e84 <prvInitialiseTaskLists+0x60>)
 8006e3c:	4413      	add	r3, r2
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fe fcfe 	bl	8005840 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3301      	adds	r3, #1
 8006e48:	607b      	str	r3, [r7, #4]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b37      	cmp	r3, #55	; 0x37
 8006e4e:	d9ef      	bls.n	8006e30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e50:	480d      	ldr	r0, [pc, #52]	; (8006e88 <prvInitialiseTaskLists+0x64>)
 8006e52:	f7fe fcf5 	bl	8005840 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e56:	480d      	ldr	r0, [pc, #52]	; (8006e8c <prvInitialiseTaskLists+0x68>)
 8006e58:	f7fe fcf2 	bl	8005840 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e5c:	480c      	ldr	r0, [pc, #48]	; (8006e90 <prvInitialiseTaskLists+0x6c>)
 8006e5e:	f7fe fcef 	bl	8005840 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e62:	480c      	ldr	r0, [pc, #48]	; (8006e94 <prvInitialiseTaskLists+0x70>)
 8006e64:	f7fe fcec 	bl	8005840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e68:	480b      	ldr	r0, [pc, #44]	; (8006e98 <prvInitialiseTaskLists+0x74>)
 8006e6a:	f7fe fce9 	bl	8005840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e6e:	4b0b      	ldr	r3, [pc, #44]	; (8006e9c <prvInitialiseTaskLists+0x78>)
 8006e70:	4a05      	ldr	r2, [pc, #20]	; (8006e88 <prvInitialiseTaskLists+0x64>)
 8006e72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e74:	4b0a      	ldr	r3, [pc, #40]	; (8006ea0 <prvInitialiseTaskLists+0x7c>)
 8006e76:	4a05      	ldr	r2, [pc, #20]	; (8006e8c <prvInitialiseTaskLists+0x68>)
 8006e78:	601a      	str	r2, [r3, #0]
}
 8006e7a:	bf00      	nop
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20000afc 	.word	0x20000afc
 8006e88:	20000f5c 	.word	0x20000f5c
 8006e8c:	20000f70 	.word	0x20000f70
 8006e90:	20000f8c 	.word	0x20000f8c
 8006e94:	20000fa0 	.word	0x20000fa0
 8006e98:	20000fb8 	.word	0x20000fb8
 8006e9c:	20000f84 	.word	0x20000f84
 8006ea0:	20000f88 	.word	0x20000f88

08006ea4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eaa:	e019      	b.n	8006ee0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006eac:	f000 fdda 	bl	8007a64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb0:	4b10      	ldr	r3, [pc, #64]	; (8006ef4 <prvCheckTasksWaitingTermination+0x50>)
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	3304      	adds	r3, #4
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fe fd49 	bl	8005954 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ec2:	4b0d      	ldr	r3, [pc, #52]	; (8006ef8 <prvCheckTasksWaitingTermination+0x54>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	4a0b      	ldr	r2, [pc, #44]	; (8006ef8 <prvCheckTasksWaitingTermination+0x54>)
 8006eca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ecc:	4b0b      	ldr	r3, [pc, #44]	; (8006efc <prvCheckTasksWaitingTermination+0x58>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	4a0a      	ldr	r2, [pc, #40]	; (8006efc <prvCheckTasksWaitingTermination+0x58>)
 8006ed4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ed6:	f000 fdf5 	bl	8007ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f810 	bl	8006f00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ee0:	4b06      	ldr	r3, [pc, #24]	; (8006efc <prvCheckTasksWaitingTermination+0x58>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e1      	bne.n	8006eac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ee8:	bf00      	nop
 8006eea:	bf00      	nop
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20000fa0 	.word	0x20000fa0
 8006ef8:	20000fcc 	.word	0x20000fcc
 8006efc:	20000fb4 	.word	0x20000fb4

08006f00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3354      	adds	r3, #84	; 0x54
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f002 fa23 	bl	8009358 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d108      	bne.n	8006f2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 ff8d 	bl	8007e40 <vPortFree>
				vPortFree( pxTCB );
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 ff8a 	bl	8007e40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f2c:	e018      	b.n	8006f60 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d103      	bne.n	8006f40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 ff81 	bl	8007e40 <vPortFree>
	}
 8006f3e:	e00f      	b.n	8006f60 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d00a      	beq.n	8006f60 <prvDeleteTCB+0x60>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	60fb      	str	r3, [r7, #12]
}
 8006f5c:	bf00      	nop
 8006f5e:	e7fe      	b.n	8006f5e <prvDeleteTCB+0x5e>
	}
 8006f60:	bf00      	nop
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <prvResetNextTaskUnblockTime+0x38>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d104      	bne.n	8006f82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f78:	4b0a      	ldr	r3, [pc, #40]	; (8006fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8006f7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f80:	e008      	b.n	8006f94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f82:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <prvResetNextTaskUnblockTime+0x38>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	4a04      	ldr	r2, [pc, #16]	; (8006fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8006f92:	6013      	str	r3, [r2, #0]
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	20000f84 	.word	0x20000f84
 8006fa4:	20000fec 	.word	0x20000fec

08006fa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fae:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <xTaskGetSchedulerState+0x34>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	607b      	str	r3, [r7, #4]
 8006fba:	e008      	b.n	8006fce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fbc:	4b08      	ldr	r3, [pc, #32]	; (8006fe0 <xTaskGetSchedulerState+0x38>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d102      	bne.n	8006fca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	607b      	str	r3, [r7, #4]
 8006fc8:	e001      	b.n	8006fce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fce:	687b      	ldr	r3, [r7, #4]
	}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	20000fd8 	.word	0x20000fd8
 8006fe0:	20000ff4 	.word	0x20000ff4

08006fe4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d056      	beq.n	80070a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ffa:	4b2e      	ldr	r3, [pc, #184]	; (80070b4 <xTaskPriorityDisinherit+0xd0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	429a      	cmp	r2, r3
 8007002:	d00a      	beq.n	800701a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	60fb      	str	r3, [r7, #12]
}
 8007016:	bf00      	nop
 8007018:	e7fe      	b.n	8007018 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10a      	bne.n	8007038 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	60bb      	str	r3, [r7, #8]
}
 8007034:	bf00      	nop
 8007036:	e7fe      	b.n	8007036 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703c:	1e5a      	subs	r2, r3, #1
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800704a:	429a      	cmp	r2, r3
 800704c:	d02c      	beq.n	80070a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007052:	2b00      	cmp	r3, #0
 8007054:	d128      	bne.n	80070a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	3304      	adds	r3, #4
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe fc7a 	bl	8005954 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007078:	4b0f      	ldr	r3, [pc, #60]	; (80070b8 <xTaskPriorityDisinherit+0xd4>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	429a      	cmp	r2, r3
 800707e:	d903      	bls.n	8007088 <xTaskPriorityDisinherit+0xa4>
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007084:	4a0c      	ldr	r2, [pc, #48]	; (80070b8 <xTaskPriorityDisinherit+0xd4>)
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4a09      	ldr	r2, [pc, #36]	; (80070bc <xTaskPriorityDisinherit+0xd8>)
 8007096:	441a      	add	r2, r3
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	3304      	adds	r3, #4
 800709c:	4619      	mov	r1, r3
 800709e:	4610      	mov	r0, r2
 80070a0:	f7fe fbfb 	bl	800589a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070a4:	2301      	movs	r3, #1
 80070a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070a8:	697b      	ldr	r3, [r7, #20]
	}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000af8 	.word	0x20000af8
 80070b8:	20000fd4 	.word	0x20000fd4
 80070bc:	20000afc 	.word	0x20000afc

080070c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070ca:	4b21      	ldr	r3, [pc, #132]	; (8007150 <prvAddCurrentTaskToDelayedList+0x90>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070d0:	4b20      	ldr	r3, [pc, #128]	; (8007154 <prvAddCurrentTaskToDelayedList+0x94>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3304      	adds	r3, #4
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fe fc3c 	bl	8005954 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070e2:	d10a      	bne.n	80070fa <prvAddCurrentTaskToDelayedList+0x3a>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d007      	beq.n	80070fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070ea:	4b1a      	ldr	r3, [pc, #104]	; (8007154 <prvAddCurrentTaskToDelayedList+0x94>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3304      	adds	r3, #4
 80070f0:	4619      	mov	r1, r3
 80070f2:	4819      	ldr	r0, [pc, #100]	; (8007158 <prvAddCurrentTaskToDelayedList+0x98>)
 80070f4:	f7fe fbd1 	bl	800589a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070f8:	e026      	b.n	8007148 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4413      	add	r3, r2
 8007100:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007102:	4b14      	ldr	r3, [pc, #80]	; (8007154 <prvAddCurrentTaskToDelayedList+0x94>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	429a      	cmp	r2, r3
 8007110:	d209      	bcs.n	8007126 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007112:	4b12      	ldr	r3, [pc, #72]	; (800715c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	4b0f      	ldr	r3, [pc, #60]	; (8007154 <prvAddCurrentTaskToDelayedList+0x94>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3304      	adds	r3, #4
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f7fe fbdf 	bl	80058e2 <vListInsert>
}
 8007124:	e010      	b.n	8007148 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007126:	4b0e      	ldr	r3, [pc, #56]	; (8007160 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	4b0a      	ldr	r3, [pc, #40]	; (8007154 <prvAddCurrentTaskToDelayedList+0x94>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3304      	adds	r3, #4
 8007130:	4619      	mov	r1, r3
 8007132:	4610      	mov	r0, r2
 8007134:	f7fe fbd5 	bl	80058e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007138:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <prvAddCurrentTaskToDelayedList+0xa4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	429a      	cmp	r2, r3
 8007140:	d202      	bcs.n	8007148 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007142:	4a08      	ldr	r2, [pc, #32]	; (8007164 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	6013      	str	r3, [r2, #0]
}
 8007148:	bf00      	nop
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20000fd0 	.word	0x20000fd0
 8007154:	20000af8 	.word	0x20000af8
 8007158:	20000fb8 	.word	0x20000fb8
 800715c:	20000f88 	.word	0x20000f88
 8007160:	20000f84 	.word	0x20000f84
 8007164:	20000fec 	.word	0x20000fec

08007168 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08a      	sub	sp, #40	; 0x28
 800716c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800716e:	2300      	movs	r3, #0
 8007170:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007172:	f000 fb07 	bl	8007784 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007176:	4b1c      	ldr	r3, [pc, #112]	; (80071e8 <xTimerCreateTimerTask+0x80>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d021      	beq.n	80071c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007182:	2300      	movs	r3, #0
 8007184:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007186:	1d3a      	adds	r2, r7, #4
 8007188:	f107 0108 	add.w	r1, r7, #8
 800718c:	f107 030c 	add.w	r3, r7, #12
 8007190:	4618      	mov	r0, r3
 8007192:	f7fe fb3b 	bl	800580c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	9202      	str	r2, [sp, #8]
 800719e:	9301      	str	r3, [sp, #4]
 80071a0:	2302      	movs	r3, #2
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	2300      	movs	r3, #0
 80071a6:	460a      	mov	r2, r1
 80071a8:	4910      	ldr	r1, [pc, #64]	; (80071ec <xTimerCreateTimerTask+0x84>)
 80071aa:	4811      	ldr	r0, [pc, #68]	; (80071f0 <xTimerCreateTimerTask+0x88>)
 80071ac:	f7ff f8e8 	bl	8006380 <xTaskCreateStatic>
 80071b0:	4603      	mov	r3, r0
 80071b2:	4a10      	ldr	r2, [pc, #64]	; (80071f4 <xTimerCreateTimerTask+0x8c>)
 80071b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071b6:	4b0f      	ldr	r3, [pc, #60]	; (80071f4 <xTimerCreateTimerTask+0x8c>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071be:	2301      	movs	r3, #1
 80071c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10a      	bne.n	80071de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	613b      	str	r3, [r7, #16]
}
 80071da:	bf00      	nop
 80071dc:	e7fe      	b.n	80071dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80071de:	697b      	ldr	r3, [r7, #20]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20001028 	.word	0x20001028
 80071ec:	0800cb40 	.word	0x0800cb40
 80071f0:	0800732d 	.word	0x0800732d
 80071f4:	2000102c 	.word	0x2000102c

080071f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08a      	sub	sp, #40	; 0x28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007206:	2300      	movs	r3, #0
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	623b      	str	r3, [r7, #32]
}
 8007222:	bf00      	nop
 8007224:	e7fe      	b.n	8007224 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007226:	4b1a      	ldr	r3, [pc, #104]	; (8007290 <xTimerGenericCommand+0x98>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d02a      	beq.n	8007284 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b05      	cmp	r3, #5
 800723e:	dc18      	bgt.n	8007272 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007240:	f7ff feb2 	bl	8006fa8 <xTaskGetSchedulerState>
 8007244:	4603      	mov	r3, r0
 8007246:	2b02      	cmp	r3, #2
 8007248:	d109      	bne.n	800725e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800724a:	4b11      	ldr	r3, [pc, #68]	; (8007290 <xTimerGenericCommand+0x98>)
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	f107 0110 	add.w	r1, r7, #16
 8007252:	2300      	movs	r3, #0
 8007254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007256:	f7fe fcab 	bl	8005bb0 <xQueueGenericSend>
 800725a:	6278      	str	r0, [r7, #36]	; 0x24
 800725c:	e012      	b.n	8007284 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800725e:	4b0c      	ldr	r3, [pc, #48]	; (8007290 <xTimerGenericCommand+0x98>)
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	f107 0110 	add.w	r1, r7, #16
 8007266:	2300      	movs	r3, #0
 8007268:	2200      	movs	r2, #0
 800726a:	f7fe fca1 	bl	8005bb0 <xQueueGenericSend>
 800726e:	6278      	str	r0, [r7, #36]	; 0x24
 8007270:	e008      	b.n	8007284 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007272:	4b07      	ldr	r3, [pc, #28]	; (8007290 <xTimerGenericCommand+0x98>)
 8007274:	6818      	ldr	r0, [r3, #0]
 8007276:	f107 0110 	add.w	r1, r7, #16
 800727a:	2300      	movs	r3, #0
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	f7fe fd95 	bl	8005dac <xQueueGenericSendFromISR>
 8007282:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007286:	4618      	mov	r0, r3
 8007288:	3728      	adds	r7, #40	; 0x28
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20001028 	.word	0x20001028

08007294 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af02      	add	r7, sp, #8
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800729e:	4b22      	ldr	r3, [pc, #136]	; (8007328 <prvProcessExpiredTimer+0x94>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	3304      	adds	r3, #4
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe fb51 	bl	8005954 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d022      	beq.n	8007306 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	699a      	ldr	r2, [r3, #24]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	18d1      	adds	r1, r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	6978      	ldr	r0, [r7, #20]
 80072ce:	f000 f8d1 	bl	8007474 <prvInsertTimerInActiveList>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01f      	beq.n	8007318 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072d8:	2300      	movs	r3, #0
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	2300      	movs	r3, #0
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	2100      	movs	r1, #0
 80072e2:	6978      	ldr	r0, [r7, #20]
 80072e4:	f7ff ff88 	bl	80071f8 <xTimerGenericCommand>
 80072e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d113      	bne.n	8007318 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	60fb      	str	r3, [r7, #12]
}
 8007302:	bf00      	nop
 8007304:	e7fe      	b.n	8007304 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800730c:	f023 0301 	bic.w	r3, r3, #1
 8007310:	b2da      	uxtb	r2, r3
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	6978      	ldr	r0, [r7, #20]
 800731e:	4798      	blx	r3
}
 8007320:	bf00      	nop
 8007322:	3718      	adds	r7, #24
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20001020 	.word	0x20001020

0800732c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007334:	f107 0308 	add.w	r3, r7, #8
 8007338:	4618      	mov	r0, r3
 800733a:	f000 f857 	bl	80073ec <prvGetNextExpireTime>
 800733e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	4619      	mov	r1, r3
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 f803 	bl	8007350 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800734a:	f000 f8d5 	bl	80074f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800734e:	e7f1      	b.n	8007334 <prvTimerTask+0x8>

08007350 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800735a:	f7ff fa39 	bl	80067d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800735e:	f107 0308 	add.w	r3, r7, #8
 8007362:	4618      	mov	r0, r3
 8007364:	f000 f866 	bl	8007434 <prvSampleTimeNow>
 8007368:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d130      	bne.n	80073d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <prvProcessTimerOrBlockTask+0x3c>
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	429a      	cmp	r2, r3
 800737c:	d806      	bhi.n	800738c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800737e:	f7ff fa35 	bl	80067ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007382:	68f9      	ldr	r1, [r7, #12]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff ff85 	bl	8007294 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800738a:	e024      	b.n	80073d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d008      	beq.n	80073a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007392:	4b13      	ldr	r3, [pc, #76]	; (80073e0 <prvProcessTimerOrBlockTask+0x90>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <prvProcessTimerOrBlockTask+0x50>
 800739c:	2301      	movs	r3, #1
 800739e:	e000      	b.n	80073a2 <prvProcessTimerOrBlockTask+0x52>
 80073a0:	2300      	movs	r3, #0
 80073a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073a4:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <prvProcessTimerOrBlockTask+0x94>)
 80073a6:	6818      	ldr	r0, [r3, #0]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	4619      	mov	r1, r3
 80073b2:	f7fe ffb1 	bl	8006318 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073b6:	f7ff fa19 	bl	80067ec <xTaskResumeAll>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80073c0:	4b09      	ldr	r3, [pc, #36]	; (80073e8 <prvProcessTimerOrBlockTask+0x98>)
 80073c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	f3bf 8f6f 	isb	sy
}
 80073d0:	e001      	b.n	80073d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80073d2:	f7ff fa0b 	bl	80067ec <xTaskResumeAll>
}
 80073d6:	bf00      	nop
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20001024 	.word	0x20001024
 80073e4:	20001028 	.word	0x20001028
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073f4:	4b0e      	ldr	r3, [pc, #56]	; (8007430 <prvGetNextExpireTime+0x44>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <prvGetNextExpireTime+0x16>
 80073fe:	2201      	movs	r2, #1
 8007400:	e000      	b.n	8007404 <prvGetNextExpireTime+0x18>
 8007402:	2200      	movs	r2, #0
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d105      	bne.n	800741c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <prvGetNextExpireTime+0x44>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	e001      	b.n	8007420 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007420:	68fb      	ldr	r3, [r7, #12]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	20001020 	.word	0x20001020

08007434 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800743c:	f7ff fa74 	bl	8006928 <xTaskGetTickCount>
 8007440:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007442:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <prvSampleTimeNow+0x3c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	429a      	cmp	r2, r3
 800744a:	d205      	bcs.n	8007458 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800744c:	f000 f936 	bl	80076bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	e002      	b.n	800745e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800745e:	4a04      	ldr	r2, [pc, #16]	; (8007470 <prvSampleTimeNow+0x3c>)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007464:	68fb      	ldr	r3, [r7, #12]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	20001030 	.word	0x20001030

08007474 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007482:	2300      	movs	r3, #0
 8007484:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	429a      	cmp	r2, r3
 8007498:	d812      	bhi.n	80074c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	1ad2      	subs	r2, r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d302      	bcc.n	80074ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074a8:	2301      	movs	r3, #1
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	e01b      	b.n	80074e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074ae:	4b10      	ldr	r3, [pc, #64]	; (80074f0 <prvInsertTimerInActiveList+0x7c>)
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3304      	adds	r3, #4
 80074b6:	4619      	mov	r1, r3
 80074b8:	4610      	mov	r0, r2
 80074ba:	f7fe fa12 	bl	80058e2 <vListInsert>
 80074be:	e012      	b.n	80074e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d206      	bcs.n	80074d6 <prvInsertTimerInActiveList+0x62>
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d302      	bcc.n	80074d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80074d0:	2301      	movs	r3, #1
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	e007      	b.n	80074e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074d6:	4b07      	ldr	r3, [pc, #28]	; (80074f4 <prvInsertTimerInActiveList+0x80>)
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3304      	adds	r3, #4
 80074de:	4619      	mov	r1, r3
 80074e0:	4610      	mov	r0, r2
 80074e2:	f7fe f9fe 	bl	80058e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80074e6:	697b      	ldr	r3, [r7, #20]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	20001024 	.word	0x20001024
 80074f4:	20001020 	.word	0x20001020

080074f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08e      	sub	sp, #56	; 0x38
 80074fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074fe:	e0ca      	b.n	8007696 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	da18      	bge.n	8007538 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007506:	1d3b      	adds	r3, r7, #4
 8007508:	3304      	adds	r3, #4
 800750a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800750c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10a      	bne.n	8007528 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	61fb      	str	r3, [r7, #28]
}
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800752e:	6850      	ldr	r0, [r2, #4]
 8007530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007532:	6892      	ldr	r2, [r2, #8]
 8007534:	4611      	mov	r1, r2
 8007536:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	f2c0 80ab 	blt.w	8007696 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d004      	beq.n	8007556 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	3304      	adds	r3, #4
 8007550:	4618      	mov	r0, r3
 8007552:	f7fe f9ff 	bl	8005954 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007556:	463b      	mov	r3, r7
 8007558:	4618      	mov	r0, r3
 800755a:	f7ff ff6b 	bl	8007434 <prvSampleTimeNow>
 800755e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b09      	cmp	r3, #9
 8007564:	f200 8096 	bhi.w	8007694 <prvProcessReceivedCommands+0x19c>
 8007568:	a201      	add	r2, pc, #4	; (adr r2, 8007570 <prvProcessReceivedCommands+0x78>)
 800756a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756e:	bf00      	nop
 8007570:	08007599 	.word	0x08007599
 8007574:	08007599 	.word	0x08007599
 8007578:	08007599 	.word	0x08007599
 800757c:	0800760d 	.word	0x0800760d
 8007580:	08007621 	.word	0x08007621
 8007584:	0800766b 	.word	0x0800766b
 8007588:	08007599 	.word	0x08007599
 800758c:	08007599 	.word	0x08007599
 8007590:	0800760d 	.word	0x0800760d
 8007594:	08007621 	.word	0x08007621
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800759e:	f043 0301 	orr.w	r3, r3, #1
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	18d1      	adds	r1, r2, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075b8:	f7ff ff5c 	bl	8007474 <prvInsertTimerInActiveList>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d069      	beq.n	8007696 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075d0:	f003 0304 	and.w	r3, r3, #4
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d05e      	beq.n	8007696 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	441a      	add	r2, r3
 80075e0:	2300      	movs	r3, #0
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	2300      	movs	r3, #0
 80075e6:	2100      	movs	r1, #0
 80075e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ea:	f7ff fe05 	bl	80071f8 <xTimerGenericCommand>
 80075ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d14f      	bne.n	8007696 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	61bb      	str	r3, [r7, #24]
}
 8007608:	bf00      	nop
 800760a:	e7fe      	b.n	800760a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007612:	f023 0301 	bic.w	r3, r3, #1
 8007616:	b2da      	uxtb	r2, r3
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800761e:	e03a      	b.n	8007696 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007626:	f043 0301 	orr.w	r3, r3, #1
 800762a:	b2da      	uxtb	r2, r3
 800762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10a      	bne.n	8007656 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	617b      	str	r3, [r7, #20]
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	699a      	ldr	r2, [r3, #24]
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	18d1      	adds	r1, r2, r3
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007664:	f7ff ff06 	bl	8007474 <prvInsertTimerInActiveList>
					break;
 8007668:	e015      	b.n	8007696 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d103      	bne.n	8007680 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800767a:	f000 fbe1 	bl	8007e40 <vPortFree>
 800767e:	e00a      	b.n	8007696 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007686:	f023 0301 	bic.w	r3, r3, #1
 800768a:	b2da      	uxtb	r2, r3
 800768c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007692:	e000      	b.n	8007696 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007694:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007696:	4b08      	ldr	r3, [pc, #32]	; (80076b8 <prvProcessReceivedCommands+0x1c0>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	1d39      	adds	r1, r7, #4
 800769c:	2200      	movs	r2, #0
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fc20 	bl	8005ee4 <xQueueReceive>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f47f af2a 	bne.w	8007500 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80076ac:	bf00      	nop
 80076ae:	bf00      	nop
 80076b0:	3730      	adds	r7, #48	; 0x30
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20001028 	.word	0x20001028

080076bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076c2:	e048      	b.n	8007756 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076c4:	4b2d      	ldr	r3, [pc, #180]	; (800777c <prvSwitchTimerLists+0xc0>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ce:	4b2b      	ldr	r3, [pc, #172]	; (800777c <prvSwitchTimerLists+0xc0>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3304      	adds	r3, #4
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fe f939 	bl	8005954 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d02e      	beq.n	8007756 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	4413      	add	r3, r2
 8007700:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	429a      	cmp	r2, r3
 8007708:	d90e      	bls.n	8007728 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007716:	4b19      	ldr	r3, [pc, #100]	; (800777c <prvSwitchTimerLists+0xc0>)
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3304      	adds	r3, #4
 800771e:	4619      	mov	r1, r3
 8007720:	4610      	mov	r0, r2
 8007722:	f7fe f8de 	bl	80058e2 <vListInsert>
 8007726:	e016      	b.n	8007756 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007728:	2300      	movs	r3, #0
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	2300      	movs	r3, #0
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	2100      	movs	r1, #0
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7ff fd60 	bl	80071f8 <xTimerGenericCommand>
 8007738:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10a      	bne.n	8007756 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	603b      	str	r3, [r7, #0]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <prvSwitchTimerLists+0xc0>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1b1      	bne.n	80076c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007760:	4b06      	ldr	r3, [pc, #24]	; (800777c <prvSwitchTimerLists+0xc0>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007766:	4b06      	ldr	r3, [pc, #24]	; (8007780 <prvSwitchTimerLists+0xc4>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a04      	ldr	r2, [pc, #16]	; (800777c <prvSwitchTimerLists+0xc0>)
 800776c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800776e:	4a04      	ldr	r2, [pc, #16]	; (8007780 <prvSwitchTimerLists+0xc4>)
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	6013      	str	r3, [r2, #0]
}
 8007774:	bf00      	nop
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20001020 	.word	0x20001020
 8007780:	20001024 	.word	0x20001024

08007784 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800778a:	f000 f96b 	bl	8007a64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800778e:	4b15      	ldr	r3, [pc, #84]	; (80077e4 <prvCheckForValidListAndQueue+0x60>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d120      	bne.n	80077d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007796:	4814      	ldr	r0, [pc, #80]	; (80077e8 <prvCheckForValidListAndQueue+0x64>)
 8007798:	f7fe f852 	bl	8005840 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800779c:	4813      	ldr	r0, [pc, #76]	; (80077ec <prvCheckForValidListAndQueue+0x68>)
 800779e:	f7fe f84f 	bl	8005840 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077a2:	4b13      	ldr	r3, [pc, #76]	; (80077f0 <prvCheckForValidListAndQueue+0x6c>)
 80077a4:	4a10      	ldr	r2, [pc, #64]	; (80077e8 <prvCheckForValidListAndQueue+0x64>)
 80077a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077a8:	4b12      	ldr	r3, [pc, #72]	; (80077f4 <prvCheckForValidListAndQueue+0x70>)
 80077aa:	4a10      	ldr	r2, [pc, #64]	; (80077ec <prvCheckForValidListAndQueue+0x68>)
 80077ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077ae:	2300      	movs	r3, #0
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	4b11      	ldr	r3, [pc, #68]	; (80077f8 <prvCheckForValidListAndQueue+0x74>)
 80077b4:	4a11      	ldr	r2, [pc, #68]	; (80077fc <prvCheckForValidListAndQueue+0x78>)
 80077b6:	2110      	movs	r1, #16
 80077b8:	200a      	movs	r0, #10
 80077ba:	f7fe f95d 	bl	8005a78 <xQueueGenericCreateStatic>
 80077be:	4603      	mov	r3, r0
 80077c0:	4a08      	ldr	r2, [pc, #32]	; (80077e4 <prvCheckForValidListAndQueue+0x60>)
 80077c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077c4:	4b07      	ldr	r3, [pc, #28]	; (80077e4 <prvCheckForValidListAndQueue+0x60>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d005      	beq.n	80077d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077cc:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <prvCheckForValidListAndQueue+0x60>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	490b      	ldr	r1, [pc, #44]	; (8007800 <prvCheckForValidListAndQueue+0x7c>)
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fe fd76 	bl	80062c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077d8:	f000 f974 	bl	8007ac4 <vPortExitCritical>
}
 80077dc:	bf00      	nop
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20001028 	.word	0x20001028
 80077e8:	20000ff8 	.word	0x20000ff8
 80077ec:	2000100c 	.word	0x2000100c
 80077f0:	20001020 	.word	0x20001020
 80077f4:	20001024 	.word	0x20001024
 80077f8:	200010d4 	.word	0x200010d4
 80077fc:	20001034 	.word	0x20001034
 8007800:	0800cb48 	.word	0x0800cb48

08007804 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3b04      	subs	r3, #4
 8007814:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800781c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3b04      	subs	r3, #4
 8007822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f023 0201 	bic.w	r2, r3, #1
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3b04      	subs	r3, #4
 8007832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007834:	4a0c      	ldr	r2, [pc, #48]	; (8007868 <pxPortInitialiseStack+0x64>)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3b14      	subs	r3, #20
 800783e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3b04      	subs	r3, #4
 800784a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f06f 0202 	mvn.w	r2, #2
 8007852:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3b20      	subs	r3, #32
 8007858:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800785a:	68fb      	ldr	r3, [r7, #12]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	0800786d 	.word	0x0800786d

0800786c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007872:	2300      	movs	r3, #0
 8007874:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007876:	4b12      	ldr	r3, [pc, #72]	; (80078c0 <prvTaskExitError+0x54>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800787e:	d00a      	beq.n	8007896 <prvTaskExitError+0x2a>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	60fb      	str	r3, [r7, #12]
}
 8007892:	bf00      	nop
 8007894:	e7fe      	b.n	8007894 <prvTaskExitError+0x28>
	__asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	60bb      	str	r3, [r7, #8]
}
 80078a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078aa:	bf00      	nop
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d0fc      	beq.n	80078ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078b2:	bf00      	nop
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	2000000c 	.word	0x2000000c
	...

080078d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078d0:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <pxCurrentTCBConst2>)
 80078d2:	6819      	ldr	r1, [r3, #0]
 80078d4:	6808      	ldr	r0, [r1, #0]
 80078d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078da:	f380 8809 	msr	PSP, r0
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f04f 0000 	mov.w	r0, #0
 80078e6:	f380 8811 	msr	BASEPRI, r0
 80078ea:	4770      	bx	lr
 80078ec:	f3af 8000 	nop.w

080078f0 <pxCurrentTCBConst2>:
 80078f0:	20000af8 	.word	0x20000af8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop

080078f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078f8:	4808      	ldr	r0, [pc, #32]	; (800791c <prvPortStartFirstTask+0x24>)
 80078fa:	6800      	ldr	r0, [r0, #0]
 80078fc:	6800      	ldr	r0, [r0, #0]
 80078fe:	f380 8808 	msr	MSP, r0
 8007902:	f04f 0000 	mov.w	r0, #0
 8007906:	f380 8814 	msr	CONTROL, r0
 800790a:	b662      	cpsie	i
 800790c:	b661      	cpsie	f
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	df00      	svc	0
 8007918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800791a:	bf00      	nop
 800791c:	e000ed08 	.word	0xe000ed08

08007920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007926:	4b46      	ldr	r3, [pc, #280]	; (8007a40 <xPortStartScheduler+0x120>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a46      	ldr	r2, [pc, #280]	; (8007a44 <xPortStartScheduler+0x124>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d10a      	bne.n	8007946 <xPortStartScheduler+0x26>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	613b      	str	r3, [r7, #16]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007946:	4b3e      	ldr	r3, [pc, #248]	; (8007a40 <xPortStartScheduler+0x120>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a3f      	ldr	r2, [pc, #252]	; (8007a48 <xPortStartScheduler+0x128>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d10a      	bne.n	8007966 <xPortStartScheduler+0x46>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	60fb      	str	r3, [r7, #12]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007966:	4b39      	ldr	r3, [pc, #228]	; (8007a4c <xPortStartScheduler+0x12c>)
 8007968:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	22ff      	movs	r2, #255	; 0xff
 8007976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	b2db      	uxtb	r3, r3
 8007984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007988:	b2da      	uxtb	r2, r3
 800798a:	4b31      	ldr	r3, [pc, #196]	; (8007a50 <xPortStartScheduler+0x130>)
 800798c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800798e:	4b31      	ldr	r3, [pc, #196]	; (8007a54 <xPortStartScheduler+0x134>)
 8007990:	2207      	movs	r2, #7
 8007992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007994:	e009      	b.n	80079aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007996:	4b2f      	ldr	r3, [pc, #188]	; (8007a54 <xPortStartScheduler+0x134>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3b01      	subs	r3, #1
 800799c:	4a2d      	ldr	r2, [pc, #180]	; (8007a54 <xPortStartScheduler+0x134>)
 800799e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079aa:	78fb      	ldrb	r3, [r7, #3]
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b2:	2b80      	cmp	r3, #128	; 0x80
 80079b4:	d0ef      	beq.n	8007996 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079b6:	4b27      	ldr	r3, [pc, #156]	; (8007a54 <xPortStartScheduler+0x134>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f1c3 0307 	rsb	r3, r3, #7
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d00a      	beq.n	80079d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	60bb      	str	r3, [r7, #8]
}
 80079d4:	bf00      	nop
 80079d6:	e7fe      	b.n	80079d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079d8:	4b1e      	ldr	r3, [pc, #120]	; (8007a54 <xPortStartScheduler+0x134>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	4a1d      	ldr	r2, [pc, #116]	; (8007a54 <xPortStartScheduler+0x134>)
 80079e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079e2:	4b1c      	ldr	r3, [pc, #112]	; (8007a54 <xPortStartScheduler+0x134>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079ea:	4a1a      	ldr	r2, [pc, #104]	; (8007a54 <xPortStartScheduler+0x134>)
 80079ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079f6:	4b18      	ldr	r3, [pc, #96]	; (8007a58 <xPortStartScheduler+0x138>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a17      	ldr	r2, [pc, #92]	; (8007a58 <xPortStartScheduler+0x138>)
 80079fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a02:	4b15      	ldr	r3, [pc, #84]	; (8007a58 <xPortStartScheduler+0x138>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a14      	ldr	r2, [pc, #80]	; (8007a58 <xPortStartScheduler+0x138>)
 8007a08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a0e:	f000 f8dd 	bl	8007bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a12:	4b12      	ldr	r3, [pc, #72]	; (8007a5c <xPortStartScheduler+0x13c>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a18:	f000 f8fc 	bl	8007c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a1c:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <xPortStartScheduler+0x140>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a0f      	ldr	r2, [pc, #60]	; (8007a60 <xPortStartScheduler+0x140>)
 8007a22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a28:	f7ff ff66 	bl	80078f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a2c:	f7ff f846 	bl	8006abc <vTaskSwitchContext>
	prvTaskExitError();
 8007a30:	f7ff ff1c 	bl	800786c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	e000ed00 	.word	0xe000ed00
 8007a44:	410fc271 	.word	0x410fc271
 8007a48:	410fc270 	.word	0x410fc270
 8007a4c:	e000e400 	.word	0xe000e400
 8007a50:	20001124 	.word	0x20001124
 8007a54:	20001128 	.word	0x20001128
 8007a58:	e000ed20 	.word	0xe000ed20
 8007a5c:	2000000c 	.word	0x2000000c
 8007a60:	e000ef34 	.word	0xe000ef34

08007a64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	607b      	str	r3, [r7, #4]
}
 8007a7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a7e:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <vPortEnterCritical+0x58>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3301      	adds	r3, #1
 8007a84:	4a0d      	ldr	r2, [pc, #52]	; (8007abc <vPortEnterCritical+0x58>)
 8007a86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a88:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <vPortEnterCritical+0x58>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d10f      	bne.n	8007ab0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a90:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <vPortEnterCritical+0x5c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	603b      	str	r3, [r7, #0]
}
 8007aac:	bf00      	nop
 8007aae:	e7fe      	b.n	8007aae <vPortEnterCritical+0x4a>
	}
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	2000000c 	.word	0x2000000c
 8007ac0:	e000ed04 	.word	0xe000ed04

08007ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007aca:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <vPortExitCritical+0x50>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10a      	bne.n	8007ae8 <vPortExitCritical+0x24>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	607b      	str	r3, [r7, #4]
}
 8007ae4:	bf00      	nop
 8007ae6:	e7fe      	b.n	8007ae6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ae8:	4b0a      	ldr	r3, [pc, #40]	; (8007b14 <vPortExitCritical+0x50>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	4a09      	ldr	r2, [pc, #36]	; (8007b14 <vPortExitCritical+0x50>)
 8007af0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007af2:	4b08      	ldr	r3, [pc, #32]	; (8007b14 <vPortExitCritical+0x50>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d105      	bne.n	8007b06 <vPortExitCritical+0x42>
 8007afa:	2300      	movs	r3, #0
 8007afc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	f383 8811 	msr	BASEPRI, r3
}
 8007b04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	2000000c 	.word	0x2000000c
	...

08007b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b20:	f3ef 8009 	mrs	r0, PSP
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	4b15      	ldr	r3, [pc, #84]	; (8007b80 <pxCurrentTCBConst>)
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	f01e 0f10 	tst.w	lr, #16
 8007b30:	bf08      	it	eq
 8007b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3a:	6010      	str	r0, [r2, #0]
 8007b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b44:	f380 8811 	msr	BASEPRI, r0
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f7fe ffb4 	bl	8006abc <vTaskSwitchContext>
 8007b54:	f04f 0000 	mov.w	r0, #0
 8007b58:	f380 8811 	msr	BASEPRI, r0
 8007b5c:	bc09      	pop	{r0, r3}
 8007b5e:	6819      	ldr	r1, [r3, #0]
 8007b60:	6808      	ldr	r0, [r1, #0]
 8007b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b66:	f01e 0f10 	tst.w	lr, #16
 8007b6a:	bf08      	it	eq
 8007b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b70:	f380 8809 	msr	PSP, r0
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	f3af 8000 	nop.w

08007b80 <pxCurrentTCBConst>:
 8007b80:	20000af8 	.word	0x20000af8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop

08007b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	607b      	str	r3, [r7, #4]
}
 8007ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ba2:	f7fe fed1 	bl	8006948 <xTaskIncrementTick>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bac:	4b06      	ldr	r3, [pc, #24]	; (8007bc8 <xPortSysTickHandler+0x40>)
 8007bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	f383 8811 	msr	BASEPRI, r3
}
 8007bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bc0:	bf00      	nop
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	e000ed04 	.word	0xe000ed04

08007bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bd0:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <vPortSetupTimerInterrupt+0x34>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bd6:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <vPortSetupTimerInterrupt+0x38>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bdc:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <vPortSetupTimerInterrupt+0x3c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a0a      	ldr	r2, [pc, #40]	; (8007c0c <vPortSetupTimerInterrupt+0x40>)
 8007be2:	fba2 2303 	umull	r2, r3, r2, r3
 8007be6:	099b      	lsrs	r3, r3, #6
 8007be8:	4a09      	ldr	r2, [pc, #36]	; (8007c10 <vPortSetupTimerInterrupt+0x44>)
 8007bea:	3b01      	subs	r3, #1
 8007bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bee:	4b04      	ldr	r3, [pc, #16]	; (8007c00 <vPortSetupTimerInterrupt+0x34>)
 8007bf0:	2207      	movs	r2, #7
 8007bf2:	601a      	str	r2, [r3, #0]
}
 8007bf4:	bf00      	nop
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	e000e010 	.word	0xe000e010
 8007c04:	e000e018 	.word	0xe000e018
 8007c08:	20000000 	.word	0x20000000
 8007c0c:	10624dd3 	.word	0x10624dd3
 8007c10:	e000e014 	.word	0xe000e014

08007c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c24 <vPortEnableVFP+0x10>
 8007c18:	6801      	ldr	r1, [r0, #0]
 8007c1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c1e:	6001      	str	r1, [r0, #0]
 8007c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c22:	bf00      	nop
 8007c24:	e000ed88 	.word	0xe000ed88

08007c28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c2e:	f3ef 8305 	mrs	r3, IPSR
 8007c32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2b0f      	cmp	r3, #15
 8007c38:	d914      	bls.n	8007c64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c3a:	4a17      	ldr	r2, [pc, #92]	; (8007c98 <vPortValidateInterruptPriority+0x70>)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c44:	4b15      	ldr	r3, [pc, #84]	; (8007c9c <vPortValidateInterruptPriority+0x74>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	7afa      	ldrb	r2, [r7, #11]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d20a      	bcs.n	8007c64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	607b      	str	r3, [r7, #4]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c64:	4b0e      	ldr	r3, [pc, #56]	; (8007ca0 <vPortValidateInterruptPriority+0x78>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ca4 <vPortValidateInterruptPriority+0x7c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d90a      	bls.n	8007c8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	603b      	str	r3, [r7, #0]
}
 8007c86:	bf00      	nop
 8007c88:	e7fe      	b.n	8007c88 <vPortValidateInterruptPriority+0x60>
	}
 8007c8a:	bf00      	nop
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	e000e3f0 	.word	0xe000e3f0
 8007c9c:	20001124 	.word	0x20001124
 8007ca0:	e000ed0c 	.word	0xe000ed0c
 8007ca4:	20001128 	.word	0x20001128

08007ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	; 0x28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cb4:	f7fe fd8c 	bl	80067d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cb8:	4b5b      	ldr	r3, [pc, #364]	; (8007e28 <pvPortMalloc+0x180>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cc0:	f000 f920 	bl	8007f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cc4:	4b59      	ldr	r3, [pc, #356]	; (8007e2c <pvPortMalloc+0x184>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4013      	ands	r3, r2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f040 8093 	bne.w	8007df8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d01d      	beq.n	8007d14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007cd8:	2208      	movs	r2, #8
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4413      	add	r3, r2
 8007cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d014      	beq.n	8007d14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f023 0307 	bic.w	r3, r3, #7
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <pvPortMalloc+0x6c>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	617b      	str	r3, [r7, #20]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d06e      	beq.n	8007df8 <pvPortMalloc+0x150>
 8007d1a:	4b45      	ldr	r3, [pc, #276]	; (8007e30 <pvPortMalloc+0x188>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d869      	bhi.n	8007df8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d24:	4b43      	ldr	r3, [pc, #268]	; (8007e34 <pvPortMalloc+0x18c>)
 8007d26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d28:	4b42      	ldr	r3, [pc, #264]	; (8007e34 <pvPortMalloc+0x18c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d2e:	e004      	b.n	8007d3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d903      	bls.n	8007d4c <pvPortMalloc+0xa4>
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1f1      	bne.n	8007d30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d4c:	4b36      	ldr	r3, [pc, #216]	; (8007e28 <pvPortMalloc+0x180>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d050      	beq.n	8007df8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2208      	movs	r2, #8
 8007d5c:	4413      	add	r3, r2
 8007d5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	1ad2      	subs	r2, r2, r3
 8007d70:	2308      	movs	r3, #8
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d91f      	bls.n	8007db8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	f003 0307 	and.w	r3, r3, #7
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <pvPortMalloc+0xf8>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	613b      	str	r3, [r7, #16]
}
 8007d9c:	bf00      	nop
 8007d9e:	e7fe      	b.n	8007d9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	1ad2      	subs	r2, r2, r3
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007db2:	69b8      	ldr	r0, [r7, #24]
 8007db4:	f000 f908 	bl	8007fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007db8:	4b1d      	ldr	r3, [pc, #116]	; (8007e30 <pvPortMalloc+0x188>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	4a1b      	ldr	r2, [pc, #108]	; (8007e30 <pvPortMalloc+0x188>)
 8007dc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dc6:	4b1a      	ldr	r3, [pc, #104]	; (8007e30 <pvPortMalloc+0x188>)
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	4b1b      	ldr	r3, [pc, #108]	; (8007e38 <pvPortMalloc+0x190>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d203      	bcs.n	8007dda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007dd2:	4b17      	ldr	r3, [pc, #92]	; (8007e30 <pvPortMalloc+0x188>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a18      	ldr	r2, [pc, #96]	; (8007e38 <pvPortMalloc+0x190>)
 8007dd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	4b13      	ldr	r3, [pc, #76]	; (8007e2c <pvPortMalloc+0x184>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	431a      	orrs	r2, r3
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dee:	4b13      	ldr	r3, [pc, #76]	; (8007e3c <pvPortMalloc+0x194>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3301      	adds	r3, #1
 8007df4:	4a11      	ldr	r2, [pc, #68]	; (8007e3c <pvPortMalloc+0x194>)
 8007df6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007df8:	f7fe fcf8 	bl	80067ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	f003 0307 	and.w	r3, r3, #7
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00a      	beq.n	8007e1c <pvPortMalloc+0x174>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	60fb      	str	r3, [r7, #12]
}
 8007e18:	bf00      	nop
 8007e1a:	e7fe      	b.n	8007e1a <pvPortMalloc+0x172>
	return pvReturn;
 8007e1c:	69fb      	ldr	r3, [r7, #28]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3728      	adds	r7, #40	; 0x28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20001cec 	.word	0x20001cec
 8007e2c:	20001d00 	.word	0x20001d00
 8007e30:	20001cf0 	.word	0x20001cf0
 8007e34:	20001ce4 	.word	0x20001ce4
 8007e38:	20001cf4 	.word	0x20001cf4
 8007e3c:	20001cf8 	.word	0x20001cf8

08007e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d04d      	beq.n	8007eee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e52:	2308      	movs	r3, #8
 8007e54:	425b      	negs	r3, r3
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	4413      	add	r3, r2
 8007e5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	4b24      	ldr	r3, [pc, #144]	; (8007ef8 <vPortFree+0xb8>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10a      	bne.n	8007e84 <vPortFree+0x44>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	60fb      	str	r3, [r7, #12]
}
 8007e80:	bf00      	nop
 8007e82:	e7fe      	b.n	8007e82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00a      	beq.n	8007ea2 <vPortFree+0x62>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	60bb      	str	r3, [r7, #8]
}
 8007e9e:	bf00      	nop
 8007ea0:	e7fe      	b.n	8007ea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	4b14      	ldr	r3, [pc, #80]	; (8007ef8 <vPortFree+0xb8>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d01e      	beq.n	8007eee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d11a      	bne.n	8007eee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	4b0e      	ldr	r3, [pc, #56]	; (8007ef8 <vPortFree+0xb8>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	401a      	ands	r2, r3
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ec8:	f7fe fc82 	bl	80067d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <vPortFree+0xbc>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	4a09      	ldr	r2, [pc, #36]	; (8007efc <vPortFree+0xbc>)
 8007ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eda:	6938      	ldr	r0, [r7, #16]
 8007edc:	f000 f874 	bl	8007fc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ee0:	4b07      	ldr	r3, [pc, #28]	; (8007f00 <vPortFree+0xc0>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	4a06      	ldr	r2, [pc, #24]	; (8007f00 <vPortFree+0xc0>)
 8007ee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007eea:	f7fe fc7f 	bl	80067ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007eee:	bf00      	nop
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20001d00 	.word	0x20001d00
 8007efc:	20001cf0 	.word	0x20001cf0
 8007f00:	20001cfc 	.word	0x20001cfc

08007f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f10:	4b27      	ldr	r3, [pc, #156]	; (8007fb0 <prvHeapInit+0xac>)
 8007f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00c      	beq.n	8007f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3307      	adds	r3, #7
 8007f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0307 	bic.w	r3, r3, #7
 8007f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	4a1f      	ldr	r2, [pc, #124]	; (8007fb0 <prvHeapInit+0xac>)
 8007f34:	4413      	add	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f3c:	4a1d      	ldr	r2, [pc, #116]	; (8007fb4 <prvHeapInit+0xb0>)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f42:	4b1c      	ldr	r3, [pc, #112]	; (8007fb4 <prvHeapInit+0xb0>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f50:	2208      	movs	r2, #8
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 0307 	bic.w	r3, r3, #7
 8007f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4a15      	ldr	r2, [pc, #84]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f66:	4b14      	ldr	r3, [pc, #80]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f6e:	4b12      	ldr	r3, [pc, #72]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	1ad2      	subs	r2, r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f84:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <prvHeapInit+0xb4>)
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	4a0a      	ldr	r2, [pc, #40]	; (8007fbc <prvHeapInit+0xb8>)
 8007f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	4a09      	ldr	r2, [pc, #36]	; (8007fc0 <prvHeapInit+0xbc>)
 8007f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f9c:	4b09      	ldr	r3, [pc, #36]	; (8007fc4 <prvHeapInit+0xc0>)
 8007f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fa2:	601a      	str	r2, [r3, #0]
}
 8007fa4:	bf00      	nop
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	2000112c 	.word	0x2000112c
 8007fb4:	20001ce4 	.word	0x20001ce4
 8007fb8:	20001cec 	.word	0x20001cec
 8007fbc:	20001cf4 	.word	0x20001cf4
 8007fc0:	20001cf0 	.word	0x20001cf0
 8007fc4:	20001d00 	.word	0x20001d00

08007fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fd0:	4b28      	ldr	r3, [pc, #160]	; (8008074 <prvInsertBlockIntoFreeList+0xac>)
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	e002      	b.n	8007fdc <prvInsertBlockIntoFreeList+0x14>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d8f7      	bhi.n	8007fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d108      	bne.n	800800a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	441a      	add	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	441a      	add	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d118      	bne.n	8008050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4b15      	ldr	r3, [pc, #84]	; (8008078 <prvInsertBlockIntoFreeList+0xb0>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d00d      	beq.n	8008046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	441a      	add	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	e008      	b.n	8008058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008046:	4b0c      	ldr	r3, [pc, #48]	; (8008078 <prvInsertBlockIntoFreeList+0xb0>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	e003      	b.n	8008058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	429a      	cmp	r2, r3
 800805e:	d002      	beq.n	8008066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008066:	bf00      	nop
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20001ce4 	.word	0x20001ce4
 8008078:	20001cec 	.word	0x20001cec

0800807c <malloc>:
 800807c:	4b02      	ldr	r3, [pc, #8]	; (8008088 <malloc+0xc>)
 800807e:	4601      	mov	r1, r0
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	f000 b823 	b.w	80080cc <_malloc_r>
 8008086:	bf00      	nop
 8008088:	20000068 	.word	0x20000068

0800808c <sbrk_aligned>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	4e0e      	ldr	r6, [pc, #56]	; (80080c8 <sbrk_aligned+0x3c>)
 8008090:	460c      	mov	r4, r1
 8008092:	6831      	ldr	r1, [r6, #0]
 8008094:	4605      	mov	r5, r0
 8008096:	b911      	cbnz	r1, 800809e <sbrk_aligned+0x12>
 8008098:	f001 f9d8 	bl	800944c <_sbrk_r>
 800809c:	6030      	str	r0, [r6, #0]
 800809e:	4621      	mov	r1, r4
 80080a0:	4628      	mov	r0, r5
 80080a2:	f001 f9d3 	bl	800944c <_sbrk_r>
 80080a6:	1c43      	adds	r3, r0, #1
 80080a8:	d00a      	beq.n	80080c0 <sbrk_aligned+0x34>
 80080aa:	1cc4      	adds	r4, r0, #3
 80080ac:	f024 0403 	bic.w	r4, r4, #3
 80080b0:	42a0      	cmp	r0, r4
 80080b2:	d007      	beq.n	80080c4 <sbrk_aligned+0x38>
 80080b4:	1a21      	subs	r1, r4, r0
 80080b6:	4628      	mov	r0, r5
 80080b8:	f001 f9c8 	bl	800944c <_sbrk_r>
 80080bc:	3001      	adds	r0, #1
 80080be:	d101      	bne.n	80080c4 <sbrk_aligned+0x38>
 80080c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80080c4:	4620      	mov	r0, r4
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
 80080c8:	20001d08 	.word	0x20001d08

080080cc <_malloc_r>:
 80080cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080d0:	1ccd      	adds	r5, r1, #3
 80080d2:	f025 0503 	bic.w	r5, r5, #3
 80080d6:	3508      	adds	r5, #8
 80080d8:	2d0c      	cmp	r5, #12
 80080da:	bf38      	it	cc
 80080dc:	250c      	movcc	r5, #12
 80080de:	2d00      	cmp	r5, #0
 80080e0:	4607      	mov	r7, r0
 80080e2:	db01      	blt.n	80080e8 <_malloc_r+0x1c>
 80080e4:	42a9      	cmp	r1, r5
 80080e6:	d905      	bls.n	80080f4 <_malloc_r+0x28>
 80080e8:	230c      	movs	r3, #12
 80080ea:	603b      	str	r3, [r7, #0]
 80080ec:	2600      	movs	r6, #0
 80080ee:	4630      	mov	r0, r6
 80080f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80081c8 <_malloc_r+0xfc>
 80080f8:	f000 f868 	bl	80081cc <__malloc_lock>
 80080fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008100:	461c      	mov	r4, r3
 8008102:	bb5c      	cbnz	r4, 800815c <_malloc_r+0x90>
 8008104:	4629      	mov	r1, r5
 8008106:	4638      	mov	r0, r7
 8008108:	f7ff ffc0 	bl	800808c <sbrk_aligned>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	4604      	mov	r4, r0
 8008110:	d155      	bne.n	80081be <_malloc_r+0xf2>
 8008112:	f8d8 4000 	ldr.w	r4, [r8]
 8008116:	4626      	mov	r6, r4
 8008118:	2e00      	cmp	r6, #0
 800811a:	d145      	bne.n	80081a8 <_malloc_r+0xdc>
 800811c:	2c00      	cmp	r4, #0
 800811e:	d048      	beq.n	80081b2 <_malloc_r+0xe6>
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	4631      	mov	r1, r6
 8008124:	4638      	mov	r0, r7
 8008126:	eb04 0903 	add.w	r9, r4, r3
 800812a:	f001 f98f 	bl	800944c <_sbrk_r>
 800812e:	4581      	cmp	r9, r0
 8008130:	d13f      	bne.n	80081b2 <_malloc_r+0xe6>
 8008132:	6821      	ldr	r1, [r4, #0]
 8008134:	1a6d      	subs	r5, r5, r1
 8008136:	4629      	mov	r1, r5
 8008138:	4638      	mov	r0, r7
 800813a:	f7ff ffa7 	bl	800808c <sbrk_aligned>
 800813e:	3001      	adds	r0, #1
 8008140:	d037      	beq.n	80081b2 <_malloc_r+0xe6>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	442b      	add	r3, r5
 8008146:	6023      	str	r3, [r4, #0]
 8008148:	f8d8 3000 	ldr.w	r3, [r8]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d038      	beq.n	80081c2 <_malloc_r+0xf6>
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	42a2      	cmp	r2, r4
 8008154:	d12b      	bne.n	80081ae <_malloc_r+0xe2>
 8008156:	2200      	movs	r2, #0
 8008158:	605a      	str	r2, [r3, #4]
 800815a:	e00f      	b.n	800817c <_malloc_r+0xb0>
 800815c:	6822      	ldr	r2, [r4, #0]
 800815e:	1b52      	subs	r2, r2, r5
 8008160:	d41f      	bmi.n	80081a2 <_malloc_r+0xd6>
 8008162:	2a0b      	cmp	r2, #11
 8008164:	d917      	bls.n	8008196 <_malloc_r+0xca>
 8008166:	1961      	adds	r1, r4, r5
 8008168:	42a3      	cmp	r3, r4
 800816a:	6025      	str	r5, [r4, #0]
 800816c:	bf18      	it	ne
 800816e:	6059      	strne	r1, [r3, #4]
 8008170:	6863      	ldr	r3, [r4, #4]
 8008172:	bf08      	it	eq
 8008174:	f8c8 1000 	streq.w	r1, [r8]
 8008178:	5162      	str	r2, [r4, r5]
 800817a:	604b      	str	r3, [r1, #4]
 800817c:	4638      	mov	r0, r7
 800817e:	f104 060b 	add.w	r6, r4, #11
 8008182:	f000 f829 	bl	80081d8 <__malloc_unlock>
 8008186:	f026 0607 	bic.w	r6, r6, #7
 800818a:	1d23      	adds	r3, r4, #4
 800818c:	1af2      	subs	r2, r6, r3
 800818e:	d0ae      	beq.n	80080ee <_malloc_r+0x22>
 8008190:	1b9b      	subs	r3, r3, r6
 8008192:	50a3      	str	r3, [r4, r2]
 8008194:	e7ab      	b.n	80080ee <_malloc_r+0x22>
 8008196:	42a3      	cmp	r3, r4
 8008198:	6862      	ldr	r2, [r4, #4]
 800819a:	d1dd      	bne.n	8008158 <_malloc_r+0x8c>
 800819c:	f8c8 2000 	str.w	r2, [r8]
 80081a0:	e7ec      	b.n	800817c <_malloc_r+0xb0>
 80081a2:	4623      	mov	r3, r4
 80081a4:	6864      	ldr	r4, [r4, #4]
 80081a6:	e7ac      	b.n	8008102 <_malloc_r+0x36>
 80081a8:	4634      	mov	r4, r6
 80081aa:	6876      	ldr	r6, [r6, #4]
 80081ac:	e7b4      	b.n	8008118 <_malloc_r+0x4c>
 80081ae:	4613      	mov	r3, r2
 80081b0:	e7cc      	b.n	800814c <_malloc_r+0x80>
 80081b2:	230c      	movs	r3, #12
 80081b4:	603b      	str	r3, [r7, #0]
 80081b6:	4638      	mov	r0, r7
 80081b8:	f000 f80e 	bl	80081d8 <__malloc_unlock>
 80081bc:	e797      	b.n	80080ee <_malloc_r+0x22>
 80081be:	6025      	str	r5, [r4, #0]
 80081c0:	e7dc      	b.n	800817c <_malloc_r+0xb0>
 80081c2:	605b      	str	r3, [r3, #4]
 80081c4:	deff      	udf	#255	; 0xff
 80081c6:	bf00      	nop
 80081c8:	20001d04 	.word	0x20001d04

080081cc <__malloc_lock>:
 80081cc:	4801      	ldr	r0, [pc, #4]	; (80081d4 <__malloc_lock+0x8>)
 80081ce:	f001 b98a 	b.w	80094e6 <__retarget_lock_acquire_recursive>
 80081d2:	bf00      	nop
 80081d4:	20001e4c 	.word	0x20001e4c

080081d8 <__malloc_unlock>:
 80081d8:	4801      	ldr	r0, [pc, #4]	; (80081e0 <__malloc_unlock+0x8>)
 80081da:	f001 b985 	b.w	80094e8 <__retarget_lock_release_recursive>
 80081de:	bf00      	nop
 80081e0:	20001e4c 	.word	0x20001e4c

080081e4 <__cvt>:
 80081e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081e8:	ec55 4b10 	vmov	r4, r5, d0
 80081ec:	2d00      	cmp	r5, #0
 80081ee:	460e      	mov	r6, r1
 80081f0:	4619      	mov	r1, r3
 80081f2:	462b      	mov	r3, r5
 80081f4:	bfbb      	ittet	lt
 80081f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80081fa:	461d      	movlt	r5, r3
 80081fc:	2300      	movge	r3, #0
 80081fe:	232d      	movlt	r3, #45	; 0x2d
 8008200:	700b      	strb	r3, [r1, #0]
 8008202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008204:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008208:	4691      	mov	r9, r2
 800820a:	f023 0820 	bic.w	r8, r3, #32
 800820e:	bfbc      	itt	lt
 8008210:	4622      	movlt	r2, r4
 8008212:	4614      	movlt	r4, r2
 8008214:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008218:	d005      	beq.n	8008226 <__cvt+0x42>
 800821a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800821e:	d100      	bne.n	8008222 <__cvt+0x3e>
 8008220:	3601      	adds	r6, #1
 8008222:	2102      	movs	r1, #2
 8008224:	e000      	b.n	8008228 <__cvt+0x44>
 8008226:	2103      	movs	r1, #3
 8008228:	ab03      	add	r3, sp, #12
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	ab02      	add	r3, sp, #8
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	ec45 4b10 	vmov	d0, r4, r5
 8008234:	4653      	mov	r3, sl
 8008236:	4632      	mov	r2, r6
 8008238:	f001 f9f6 	bl	8009628 <_dtoa_r>
 800823c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008240:	4607      	mov	r7, r0
 8008242:	d102      	bne.n	800824a <__cvt+0x66>
 8008244:	f019 0f01 	tst.w	r9, #1
 8008248:	d022      	beq.n	8008290 <__cvt+0xac>
 800824a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800824e:	eb07 0906 	add.w	r9, r7, r6
 8008252:	d110      	bne.n	8008276 <__cvt+0x92>
 8008254:	783b      	ldrb	r3, [r7, #0]
 8008256:	2b30      	cmp	r3, #48	; 0x30
 8008258:	d10a      	bne.n	8008270 <__cvt+0x8c>
 800825a:	2200      	movs	r2, #0
 800825c:	2300      	movs	r3, #0
 800825e:	4620      	mov	r0, r4
 8008260:	4629      	mov	r1, r5
 8008262:	f7f8 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 8008266:	b918      	cbnz	r0, 8008270 <__cvt+0x8c>
 8008268:	f1c6 0601 	rsb	r6, r6, #1
 800826c:	f8ca 6000 	str.w	r6, [sl]
 8008270:	f8da 3000 	ldr.w	r3, [sl]
 8008274:	4499      	add	r9, r3
 8008276:	2200      	movs	r2, #0
 8008278:	2300      	movs	r3, #0
 800827a:	4620      	mov	r0, r4
 800827c:	4629      	mov	r1, r5
 800827e:	f7f8 fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 8008282:	b108      	cbz	r0, 8008288 <__cvt+0xa4>
 8008284:	f8cd 900c 	str.w	r9, [sp, #12]
 8008288:	2230      	movs	r2, #48	; 0x30
 800828a:	9b03      	ldr	r3, [sp, #12]
 800828c:	454b      	cmp	r3, r9
 800828e:	d307      	bcc.n	80082a0 <__cvt+0xbc>
 8008290:	9b03      	ldr	r3, [sp, #12]
 8008292:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008294:	1bdb      	subs	r3, r3, r7
 8008296:	4638      	mov	r0, r7
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	b004      	add	sp, #16
 800829c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a0:	1c59      	adds	r1, r3, #1
 80082a2:	9103      	str	r1, [sp, #12]
 80082a4:	701a      	strb	r2, [r3, #0]
 80082a6:	e7f0      	b.n	800828a <__cvt+0xa6>

080082a8 <__exponent>:
 80082a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082aa:	4603      	mov	r3, r0
 80082ac:	2900      	cmp	r1, #0
 80082ae:	bfb8      	it	lt
 80082b0:	4249      	neglt	r1, r1
 80082b2:	f803 2b02 	strb.w	r2, [r3], #2
 80082b6:	bfb4      	ite	lt
 80082b8:	222d      	movlt	r2, #45	; 0x2d
 80082ba:	222b      	movge	r2, #43	; 0x2b
 80082bc:	2909      	cmp	r1, #9
 80082be:	7042      	strb	r2, [r0, #1]
 80082c0:	dd2a      	ble.n	8008318 <__exponent+0x70>
 80082c2:	f10d 0207 	add.w	r2, sp, #7
 80082c6:	4617      	mov	r7, r2
 80082c8:	260a      	movs	r6, #10
 80082ca:	4694      	mov	ip, r2
 80082cc:	fb91 f5f6 	sdiv	r5, r1, r6
 80082d0:	fb06 1415 	mls	r4, r6, r5, r1
 80082d4:	3430      	adds	r4, #48	; 0x30
 80082d6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80082da:	460c      	mov	r4, r1
 80082dc:	2c63      	cmp	r4, #99	; 0x63
 80082de:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80082e2:	4629      	mov	r1, r5
 80082e4:	dcf1      	bgt.n	80082ca <__exponent+0x22>
 80082e6:	3130      	adds	r1, #48	; 0x30
 80082e8:	f1ac 0402 	sub.w	r4, ip, #2
 80082ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 80082f0:	1c41      	adds	r1, r0, #1
 80082f2:	4622      	mov	r2, r4
 80082f4:	42ba      	cmp	r2, r7
 80082f6:	d30a      	bcc.n	800830e <__exponent+0x66>
 80082f8:	f10d 0209 	add.w	r2, sp, #9
 80082fc:	eba2 020c 	sub.w	r2, r2, ip
 8008300:	42bc      	cmp	r4, r7
 8008302:	bf88      	it	hi
 8008304:	2200      	movhi	r2, #0
 8008306:	4413      	add	r3, r2
 8008308:	1a18      	subs	r0, r3, r0
 800830a:	b003      	add	sp, #12
 800830c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800830e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008312:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008316:	e7ed      	b.n	80082f4 <__exponent+0x4c>
 8008318:	2330      	movs	r3, #48	; 0x30
 800831a:	3130      	adds	r1, #48	; 0x30
 800831c:	7083      	strb	r3, [r0, #2]
 800831e:	70c1      	strb	r1, [r0, #3]
 8008320:	1d03      	adds	r3, r0, #4
 8008322:	e7f1      	b.n	8008308 <__exponent+0x60>

08008324 <_printf_float>:
 8008324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008328:	ed2d 8b02 	vpush	{d8}
 800832c:	b08d      	sub	sp, #52	; 0x34
 800832e:	460c      	mov	r4, r1
 8008330:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008334:	4616      	mov	r6, r2
 8008336:	461f      	mov	r7, r3
 8008338:	4605      	mov	r5, r0
 800833a:	f000 fff9 	bl	8009330 <_localeconv_r>
 800833e:	f8d0 a000 	ldr.w	sl, [r0]
 8008342:	4650      	mov	r0, sl
 8008344:	f7f7 ff94 	bl	8000270 <strlen>
 8008348:	2300      	movs	r3, #0
 800834a:	930a      	str	r3, [sp, #40]	; 0x28
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	9305      	str	r3, [sp, #20]
 8008350:	f8d8 3000 	ldr.w	r3, [r8]
 8008354:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008358:	3307      	adds	r3, #7
 800835a:	f023 0307 	bic.w	r3, r3, #7
 800835e:	f103 0208 	add.w	r2, r3, #8
 8008362:	f8c8 2000 	str.w	r2, [r8]
 8008366:	e9d3 8900 	ldrd	r8, r9, [r3]
 800836a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800836e:	9307      	str	r3, [sp, #28]
 8008370:	f8cd 8018 	str.w	r8, [sp, #24]
 8008374:	ee08 0a10 	vmov	s16, r0
 8008378:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800837c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008380:	4b9e      	ldr	r3, [pc, #632]	; (80085fc <_printf_float+0x2d8>)
 8008382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008386:	f7f8 fbd1 	bl	8000b2c <__aeabi_dcmpun>
 800838a:	bb88      	cbnz	r0, 80083f0 <_printf_float+0xcc>
 800838c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008390:	4b9a      	ldr	r3, [pc, #616]	; (80085fc <_printf_float+0x2d8>)
 8008392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008396:	f7f8 fbab 	bl	8000af0 <__aeabi_dcmple>
 800839a:	bb48      	cbnz	r0, 80083f0 <_printf_float+0xcc>
 800839c:	2200      	movs	r2, #0
 800839e:	2300      	movs	r3, #0
 80083a0:	4640      	mov	r0, r8
 80083a2:	4649      	mov	r1, r9
 80083a4:	f7f8 fb9a 	bl	8000adc <__aeabi_dcmplt>
 80083a8:	b110      	cbz	r0, 80083b0 <_printf_float+0x8c>
 80083aa:	232d      	movs	r3, #45	; 0x2d
 80083ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083b0:	4a93      	ldr	r2, [pc, #588]	; (8008600 <_printf_float+0x2dc>)
 80083b2:	4b94      	ldr	r3, [pc, #592]	; (8008604 <_printf_float+0x2e0>)
 80083b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80083b8:	bf94      	ite	ls
 80083ba:	4690      	movls	r8, r2
 80083bc:	4698      	movhi	r8, r3
 80083be:	2303      	movs	r3, #3
 80083c0:	6123      	str	r3, [r4, #16]
 80083c2:	9b05      	ldr	r3, [sp, #20]
 80083c4:	f023 0304 	bic.w	r3, r3, #4
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	f04f 0900 	mov.w	r9, #0
 80083ce:	9700      	str	r7, [sp, #0]
 80083d0:	4633      	mov	r3, r6
 80083d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80083d4:	4621      	mov	r1, r4
 80083d6:	4628      	mov	r0, r5
 80083d8:	f000 f9da 	bl	8008790 <_printf_common>
 80083dc:	3001      	adds	r0, #1
 80083de:	f040 8090 	bne.w	8008502 <_printf_float+0x1de>
 80083e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083e6:	b00d      	add	sp, #52	; 0x34
 80083e8:	ecbd 8b02 	vpop	{d8}
 80083ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f0:	4642      	mov	r2, r8
 80083f2:	464b      	mov	r3, r9
 80083f4:	4640      	mov	r0, r8
 80083f6:	4649      	mov	r1, r9
 80083f8:	f7f8 fb98 	bl	8000b2c <__aeabi_dcmpun>
 80083fc:	b140      	cbz	r0, 8008410 <_printf_float+0xec>
 80083fe:	464b      	mov	r3, r9
 8008400:	2b00      	cmp	r3, #0
 8008402:	bfbc      	itt	lt
 8008404:	232d      	movlt	r3, #45	; 0x2d
 8008406:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800840a:	4a7f      	ldr	r2, [pc, #508]	; (8008608 <_printf_float+0x2e4>)
 800840c:	4b7f      	ldr	r3, [pc, #508]	; (800860c <_printf_float+0x2e8>)
 800840e:	e7d1      	b.n	80083b4 <_printf_float+0x90>
 8008410:	6863      	ldr	r3, [r4, #4]
 8008412:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008416:	9206      	str	r2, [sp, #24]
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	d13f      	bne.n	800849c <_printf_float+0x178>
 800841c:	2306      	movs	r3, #6
 800841e:	6063      	str	r3, [r4, #4]
 8008420:	9b05      	ldr	r3, [sp, #20]
 8008422:	6861      	ldr	r1, [r4, #4]
 8008424:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008428:	2300      	movs	r3, #0
 800842a:	9303      	str	r3, [sp, #12]
 800842c:	ab0a      	add	r3, sp, #40	; 0x28
 800842e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008432:	ab09      	add	r3, sp, #36	; 0x24
 8008434:	ec49 8b10 	vmov	d0, r8, r9
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	6022      	str	r2, [r4, #0]
 800843c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008440:	4628      	mov	r0, r5
 8008442:	f7ff fecf 	bl	80081e4 <__cvt>
 8008446:	9b06      	ldr	r3, [sp, #24]
 8008448:	9909      	ldr	r1, [sp, #36]	; 0x24
 800844a:	2b47      	cmp	r3, #71	; 0x47
 800844c:	4680      	mov	r8, r0
 800844e:	d108      	bne.n	8008462 <_printf_float+0x13e>
 8008450:	1cc8      	adds	r0, r1, #3
 8008452:	db02      	blt.n	800845a <_printf_float+0x136>
 8008454:	6863      	ldr	r3, [r4, #4]
 8008456:	4299      	cmp	r1, r3
 8008458:	dd41      	ble.n	80084de <_printf_float+0x1ba>
 800845a:	f1ab 0302 	sub.w	r3, fp, #2
 800845e:	fa5f fb83 	uxtb.w	fp, r3
 8008462:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008466:	d820      	bhi.n	80084aa <_printf_float+0x186>
 8008468:	3901      	subs	r1, #1
 800846a:	465a      	mov	r2, fp
 800846c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008470:	9109      	str	r1, [sp, #36]	; 0x24
 8008472:	f7ff ff19 	bl	80082a8 <__exponent>
 8008476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008478:	1813      	adds	r3, r2, r0
 800847a:	2a01      	cmp	r2, #1
 800847c:	4681      	mov	r9, r0
 800847e:	6123      	str	r3, [r4, #16]
 8008480:	dc02      	bgt.n	8008488 <_printf_float+0x164>
 8008482:	6822      	ldr	r2, [r4, #0]
 8008484:	07d2      	lsls	r2, r2, #31
 8008486:	d501      	bpl.n	800848c <_printf_float+0x168>
 8008488:	3301      	adds	r3, #1
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008490:	2b00      	cmp	r3, #0
 8008492:	d09c      	beq.n	80083ce <_printf_float+0xaa>
 8008494:	232d      	movs	r3, #45	; 0x2d
 8008496:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800849a:	e798      	b.n	80083ce <_printf_float+0xaa>
 800849c:	9a06      	ldr	r2, [sp, #24]
 800849e:	2a47      	cmp	r2, #71	; 0x47
 80084a0:	d1be      	bne.n	8008420 <_printf_float+0xfc>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1bc      	bne.n	8008420 <_printf_float+0xfc>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e7b9      	b.n	800841e <_printf_float+0xfa>
 80084aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80084ae:	d118      	bne.n	80084e2 <_printf_float+0x1be>
 80084b0:	2900      	cmp	r1, #0
 80084b2:	6863      	ldr	r3, [r4, #4]
 80084b4:	dd0b      	ble.n	80084ce <_printf_float+0x1aa>
 80084b6:	6121      	str	r1, [r4, #16]
 80084b8:	b913      	cbnz	r3, 80084c0 <_printf_float+0x19c>
 80084ba:	6822      	ldr	r2, [r4, #0]
 80084bc:	07d0      	lsls	r0, r2, #31
 80084be:	d502      	bpl.n	80084c6 <_printf_float+0x1a2>
 80084c0:	3301      	adds	r3, #1
 80084c2:	440b      	add	r3, r1
 80084c4:	6123      	str	r3, [r4, #16]
 80084c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80084c8:	f04f 0900 	mov.w	r9, #0
 80084cc:	e7de      	b.n	800848c <_printf_float+0x168>
 80084ce:	b913      	cbnz	r3, 80084d6 <_printf_float+0x1b2>
 80084d0:	6822      	ldr	r2, [r4, #0]
 80084d2:	07d2      	lsls	r2, r2, #31
 80084d4:	d501      	bpl.n	80084da <_printf_float+0x1b6>
 80084d6:	3302      	adds	r3, #2
 80084d8:	e7f4      	b.n	80084c4 <_printf_float+0x1a0>
 80084da:	2301      	movs	r3, #1
 80084dc:	e7f2      	b.n	80084c4 <_printf_float+0x1a0>
 80084de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084e4:	4299      	cmp	r1, r3
 80084e6:	db05      	blt.n	80084f4 <_printf_float+0x1d0>
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	6121      	str	r1, [r4, #16]
 80084ec:	07d8      	lsls	r0, r3, #31
 80084ee:	d5ea      	bpl.n	80084c6 <_printf_float+0x1a2>
 80084f0:	1c4b      	adds	r3, r1, #1
 80084f2:	e7e7      	b.n	80084c4 <_printf_float+0x1a0>
 80084f4:	2900      	cmp	r1, #0
 80084f6:	bfd4      	ite	le
 80084f8:	f1c1 0202 	rsble	r2, r1, #2
 80084fc:	2201      	movgt	r2, #1
 80084fe:	4413      	add	r3, r2
 8008500:	e7e0      	b.n	80084c4 <_printf_float+0x1a0>
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	055a      	lsls	r2, r3, #21
 8008506:	d407      	bmi.n	8008518 <_printf_float+0x1f4>
 8008508:	6923      	ldr	r3, [r4, #16]
 800850a:	4642      	mov	r2, r8
 800850c:	4631      	mov	r1, r6
 800850e:	4628      	mov	r0, r5
 8008510:	47b8      	blx	r7
 8008512:	3001      	adds	r0, #1
 8008514:	d12c      	bne.n	8008570 <_printf_float+0x24c>
 8008516:	e764      	b.n	80083e2 <_printf_float+0xbe>
 8008518:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800851c:	f240 80e0 	bls.w	80086e0 <_printf_float+0x3bc>
 8008520:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008524:	2200      	movs	r2, #0
 8008526:	2300      	movs	r3, #0
 8008528:	f7f8 face 	bl	8000ac8 <__aeabi_dcmpeq>
 800852c:	2800      	cmp	r0, #0
 800852e:	d034      	beq.n	800859a <_printf_float+0x276>
 8008530:	4a37      	ldr	r2, [pc, #220]	; (8008610 <_printf_float+0x2ec>)
 8008532:	2301      	movs	r3, #1
 8008534:	4631      	mov	r1, r6
 8008536:	4628      	mov	r0, r5
 8008538:	47b8      	blx	r7
 800853a:	3001      	adds	r0, #1
 800853c:	f43f af51 	beq.w	80083e2 <_printf_float+0xbe>
 8008540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008544:	429a      	cmp	r2, r3
 8008546:	db02      	blt.n	800854e <_printf_float+0x22a>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	07d8      	lsls	r0, r3, #31
 800854c:	d510      	bpl.n	8008570 <_printf_float+0x24c>
 800854e:	ee18 3a10 	vmov	r3, s16
 8008552:	4652      	mov	r2, sl
 8008554:	4631      	mov	r1, r6
 8008556:	4628      	mov	r0, r5
 8008558:	47b8      	blx	r7
 800855a:	3001      	adds	r0, #1
 800855c:	f43f af41 	beq.w	80083e2 <_printf_float+0xbe>
 8008560:	f04f 0800 	mov.w	r8, #0
 8008564:	f104 091a 	add.w	r9, r4, #26
 8008568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800856a:	3b01      	subs	r3, #1
 800856c:	4543      	cmp	r3, r8
 800856e:	dc09      	bgt.n	8008584 <_printf_float+0x260>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	079b      	lsls	r3, r3, #30
 8008574:	f100 8107 	bmi.w	8008786 <_printf_float+0x462>
 8008578:	68e0      	ldr	r0, [r4, #12]
 800857a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800857c:	4298      	cmp	r0, r3
 800857e:	bfb8      	it	lt
 8008580:	4618      	movlt	r0, r3
 8008582:	e730      	b.n	80083e6 <_printf_float+0xc2>
 8008584:	2301      	movs	r3, #1
 8008586:	464a      	mov	r2, r9
 8008588:	4631      	mov	r1, r6
 800858a:	4628      	mov	r0, r5
 800858c:	47b8      	blx	r7
 800858e:	3001      	adds	r0, #1
 8008590:	f43f af27 	beq.w	80083e2 <_printf_float+0xbe>
 8008594:	f108 0801 	add.w	r8, r8, #1
 8008598:	e7e6      	b.n	8008568 <_printf_float+0x244>
 800859a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800859c:	2b00      	cmp	r3, #0
 800859e:	dc39      	bgt.n	8008614 <_printf_float+0x2f0>
 80085a0:	4a1b      	ldr	r2, [pc, #108]	; (8008610 <_printf_float+0x2ec>)
 80085a2:	2301      	movs	r3, #1
 80085a4:	4631      	mov	r1, r6
 80085a6:	4628      	mov	r0, r5
 80085a8:	47b8      	blx	r7
 80085aa:	3001      	adds	r0, #1
 80085ac:	f43f af19 	beq.w	80083e2 <_printf_float+0xbe>
 80085b0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80085b4:	4313      	orrs	r3, r2
 80085b6:	d102      	bne.n	80085be <_printf_float+0x29a>
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	07d9      	lsls	r1, r3, #31
 80085bc:	d5d8      	bpl.n	8008570 <_printf_float+0x24c>
 80085be:	ee18 3a10 	vmov	r3, s16
 80085c2:	4652      	mov	r2, sl
 80085c4:	4631      	mov	r1, r6
 80085c6:	4628      	mov	r0, r5
 80085c8:	47b8      	blx	r7
 80085ca:	3001      	adds	r0, #1
 80085cc:	f43f af09 	beq.w	80083e2 <_printf_float+0xbe>
 80085d0:	f04f 0900 	mov.w	r9, #0
 80085d4:	f104 0a1a 	add.w	sl, r4, #26
 80085d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085da:	425b      	negs	r3, r3
 80085dc:	454b      	cmp	r3, r9
 80085de:	dc01      	bgt.n	80085e4 <_printf_float+0x2c0>
 80085e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e2:	e792      	b.n	800850a <_printf_float+0x1e6>
 80085e4:	2301      	movs	r3, #1
 80085e6:	4652      	mov	r2, sl
 80085e8:	4631      	mov	r1, r6
 80085ea:	4628      	mov	r0, r5
 80085ec:	47b8      	blx	r7
 80085ee:	3001      	adds	r0, #1
 80085f0:	f43f aef7 	beq.w	80083e2 <_printf_float+0xbe>
 80085f4:	f109 0901 	add.w	r9, r9, #1
 80085f8:	e7ee      	b.n	80085d8 <_printf_float+0x2b4>
 80085fa:	bf00      	nop
 80085fc:	7fefffff 	.word	0x7fefffff
 8008600:	0800cbbc 	.word	0x0800cbbc
 8008604:	0800cbc0 	.word	0x0800cbc0
 8008608:	0800cbc4 	.word	0x0800cbc4
 800860c:	0800cbc8 	.word	0x0800cbc8
 8008610:	0800cbcc 	.word	0x0800cbcc
 8008614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008616:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008618:	429a      	cmp	r2, r3
 800861a:	bfa8      	it	ge
 800861c:	461a      	movge	r2, r3
 800861e:	2a00      	cmp	r2, #0
 8008620:	4691      	mov	r9, r2
 8008622:	dc37      	bgt.n	8008694 <_printf_float+0x370>
 8008624:	f04f 0b00 	mov.w	fp, #0
 8008628:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800862c:	f104 021a 	add.w	r2, r4, #26
 8008630:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008632:	9305      	str	r3, [sp, #20]
 8008634:	eba3 0309 	sub.w	r3, r3, r9
 8008638:	455b      	cmp	r3, fp
 800863a:	dc33      	bgt.n	80086a4 <_printf_float+0x380>
 800863c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008640:	429a      	cmp	r2, r3
 8008642:	db3b      	blt.n	80086bc <_printf_float+0x398>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	07da      	lsls	r2, r3, #31
 8008648:	d438      	bmi.n	80086bc <_printf_float+0x398>
 800864a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800864e:	eba2 0903 	sub.w	r9, r2, r3
 8008652:	9b05      	ldr	r3, [sp, #20]
 8008654:	1ad2      	subs	r2, r2, r3
 8008656:	4591      	cmp	r9, r2
 8008658:	bfa8      	it	ge
 800865a:	4691      	movge	r9, r2
 800865c:	f1b9 0f00 	cmp.w	r9, #0
 8008660:	dc35      	bgt.n	80086ce <_printf_float+0x3aa>
 8008662:	f04f 0800 	mov.w	r8, #0
 8008666:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800866a:	f104 0a1a 	add.w	sl, r4, #26
 800866e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008672:	1a9b      	subs	r3, r3, r2
 8008674:	eba3 0309 	sub.w	r3, r3, r9
 8008678:	4543      	cmp	r3, r8
 800867a:	f77f af79 	ble.w	8008570 <_printf_float+0x24c>
 800867e:	2301      	movs	r3, #1
 8008680:	4652      	mov	r2, sl
 8008682:	4631      	mov	r1, r6
 8008684:	4628      	mov	r0, r5
 8008686:	47b8      	blx	r7
 8008688:	3001      	adds	r0, #1
 800868a:	f43f aeaa 	beq.w	80083e2 <_printf_float+0xbe>
 800868e:	f108 0801 	add.w	r8, r8, #1
 8008692:	e7ec      	b.n	800866e <_printf_float+0x34a>
 8008694:	4613      	mov	r3, r2
 8008696:	4631      	mov	r1, r6
 8008698:	4642      	mov	r2, r8
 800869a:	4628      	mov	r0, r5
 800869c:	47b8      	blx	r7
 800869e:	3001      	adds	r0, #1
 80086a0:	d1c0      	bne.n	8008624 <_printf_float+0x300>
 80086a2:	e69e      	b.n	80083e2 <_printf_float+0xbe>
 80086a4:	2301      	movs	r3, #1
 80086a6:	4631      	mov	r1, r6
 80086a8:	4628      	mov	r0, r5
 80086aa:	9205      	str	r2, [sp, #20]
 80086ac:	47b8      	blx	r7
 80086ae:	3001      	adds	r0, #1
 80086b0:	f43f ae97 	beq.w	80083e2 <_printf_float+0xbe>
 80086b4:	9a05      	ldr	r2, [sp, #20]
 80086b6:	f10b 0b01 	add.w	fp, fp, #1
 80086ba:	e7b9      	b.n	8008630 <_printf_float+0x30c>
 80086bc:	ee18 3a10 	vmov	r3, s16
 80086c0:	4652      	mov	r2, sl
 80086c2:	4631      	mov	r1, r6
 80086c4:	4628      	mov	r0, r5
 80086c6:	47b8      	blx	r7
 80086c8:	3001      	adds	r0, #1
 80086ca:	d1be      	bne.n	800864a <_printf_float+0x326>
 80086cc:	e689      	b.n	80083e2 <_printf_float+0xbe>
 80086ce:	9a05      	ldr	r2, [sp, #20]
 80086d0:	464b      	mov	r3, r9
 80086d2:	4442      	add	r2, r8
 80086d4:	4631      	mov	r1, r6
 80086d6:	4628      	mov	r0, r5
 80086d8:	47b8      	blx	r7
 80086da:	3001      	adds	r0, #1
 80086dc:	d1c1      	bne.n	8008662 <_printf_float+0x33e>
 80086de:	e680      	b.n	80083e2 <_printf_float+0xbe>
 80086e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086e2:	2a01      	cmp	r2, #1
 80086e4:	dc01      	bgt.n	80086ea <_printf_float+0x3c6>
 80086e6:	07db      	lsls	r3, r3, #31
 80086e8:	d53a      	bpl.n	8008760 <_printf_float+0x43c>
 80086ea:	2301      	movs	r3, #1
 80086ec:	4642      	mov	r2, r8
 80086ee:	4631      	mov	r1, r6
 80086f0:	4628      	mov	r0, r5
 80086f2:	47b8      	blx	r7
 80086f4:	3001      	adds	r0, #1
 80086f6:	f43f ae74 	beq.w	80083e2 <_printf_float+0xbe>
 80086fa:	ee18 3a10 	vmov	r3, s16
 80086fe:	4652      	mov	r2, sl
 8008700:	4631      	mov	r1, r6
 8008702:	4628      	mov	r0, r5
 8008704:	47b8      	blx	r7
 8008706:	3001      	adds	r0, #1
 8008708:	f43f ae6b 	beq.w	80083e2 <_printf_float+0xbe>
 800870c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008710:	2200      	movs	r2, #0
 8008712:	2300      	movs	r3, #0
 8008714:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008718:	f7f8 f9d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800871c:	b9d8      	cbnz	r0, 8008756 <_printf_float+0x432>
 800871e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008722:	f108 0201 	add.w	r2, r8, #1
 8008726:	4631      	mov	r1, r6
 8008728:	4628      	mov	r0, r5
 800872a:	47b8      	blx	r7
 800872c:	3001      	adds	r0, #1
 800872e:	d10e      	bne.n	800874e <_printf_float+0x42a>
 8008730:	e657      	b.n	80083e2 <_printf_float+0xbe>
 8008732:	2301      	movs	r3, #1
 8008734:	4652      	mov	r2, sl
 8008736:	4631      	mov	r1, r6
 8008738:	4628      	mov	r0, r5
 800873a:	47b8      	blx	r7
 800873c:	3001      	adds	r0, #1
 800873e:	f43f ae50 	beq.w	80083e2 <_printf_float+0xbe>
 8008742:	f108 0801 	add.w	r8, r8, #1
 8008746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008748:	3b01      	subs	r3, #1
 800874a:	4543      	cmp	r3, r8
 800874c:	dcf1      	bgt.n	8008732 <_printf_float+0x40e>
 800874e:	464b      	mov	r3, r9
 8008750:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008754:	e6da      	b.n	800850c <_printf_float+0x1e8>
 8008756:	f04f 0800 	mov.w	r8, #0
 800875a:	f104 0a1a 	add.w	sl, r4, #26
 800875e:	e7f2      	b.n	8008746 <_printf_float+0x422>
 8008760:	2301      	movs	r3, #1
 8008762:	4642      	mov	r2, r8
 8008764:	e7df      	b.n	8008726 <_printf_float+0x402>
 8008766:	2301      	movs	r3, #1
 8008768:	464a      	mov	r2, r9
 800876a:	4631      	mov	r1, r6
 800876c:	4628      	mov	r0, r5
 800876e:	47b8      	blx	r7
 8008770:	3001      	adds	r0, #1
 8008772:	f43f ae36 	beq.w	80083e2 <_printf_float+0xbe>
 8008776:	f108 0801 	add.w	r8, r8, #1
 800877a:	68e3      	ldr	r3, [r4, #12]
 800877c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800877e:	1a5b      	subs	r3, r3, r1
 8008780:	4543      	cmp	r3, r8
 8008782:	dcf0      	bgt.n	8008766 <_printf_float+0x442>
 8008784:	e6f8      	b.n	8008578 <_printf_float+0x254>
 8008786:	f04f 0800 	mov.w	r8, #0
 800878a:	f104 0919 	add.w	r9, r4, #25
 800878e:	e7f4      	b.n	800877a <_printf_float+0x456>

08008790 <_printf_common>:
 8008790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008794:	4616      	mov	r6, r2
 8008796:	4699      	mov	r9, r3
 8008798:	688a      	ldr	r2, [r1, #8]
 800879a:	690b      	ldr	r3, [r1, #16]
 800879c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087a0:	4293      	cmp	r3, r2
 80087a2:	bfb8      	it	lt
 80087a4:	4613      	movlt	r3, r2
 80087a6:	6033      	str	r3, [r6, #0]
 80087a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087ac:	4607      	mov	r7, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	b10a      	cbz	r2, 80087b6 <_printf_common+0x26>
 80087b2:	3301      	adds	r3, #1
 80087b4:	6033      	str	r3, [r6, #0]
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	0699      	lsls	r1, r3, #26
 80087ba:	bf42      	ittt	mi
 80087bc:	6833      	ldrmi	r3, [r6, #0]
 80087be:	3302      	addmi	r3, #2
 80087c0:	6033      	strmi	r3, [r6, #0]
 80087c2:	6825      	ldr	r5, [r4, #0]
 80087c4:	f015 0506 	ands.w	r5, r5, #6
 80087c8:	d106      	bne.n	80087d8 <_printf_common+0x48>
 80087ca:	f104 0a19 	add.w	sl, r4, #25
 80087ce:	68e3      	ldr	r3, [r4, #12]
 80087d0:	6832      	ldr	r2, [r6, #0]
 80087d2:	1a9b      	subs	r3, r3, r2
 80087d4:	42ab      	cmp	r3, r5
 80087d6:	dc26      	bgt.n	8008826 <_printf_common+0x96>
 80087d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087dc:	1e13      	subs	r3, r2, #0
 80087de:	6822      	ldr	r2, [r4, #0]
 80087e0:	bf18      	it	ne
 80087e2:	2301      	movne	r3, #1
 80087e4:	0692      	lsls	r2, r2, #26
 80087e6:	d42b      	bmi.n	8008840 <_printf_common+0xb0>
 80087e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087ec:	4649      	mov	r1, r9
 80087ee:	4638      	mov	r0, r7
 80087f0:	47c0      	blx	r8
 80087f2:	3001      	adds	r0, #1
 80087f4:	d01e      	beq.n	8008834 <_printf_common+0xa4>
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	6922      	ldr	r2, [r4, #16]
 80087fa:	f003 0306 	and.w	r3, r3, #6
 80087fe:	2b04      	cmp	r3, #4
 8008800:	bf02      	ittt	eq
 8008802:	68e5      	ldreq	r5, [r4, #12]
 8008804:	6833      	ldreq	r3, [r6, #0]
 8008806:	1aed      	subeq	r5, r5, r3
 8008808:	68a3      	ldr	r3, [r4, #8]
 800880a:	bf0c      	ite	eq
 800880c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008810:	2500      	movne	r5, #0
 8008812:	4293      	cmp	r3, r2
 8008814:	bfc4      	itt	gt
 8008816:	1a9b      	subgt	r3, r3, r2
 8008818:	18ed      	addgt	r5, r5, r3
 800881a:	2600      	movs	r6, #0
 800881c:	341a      	adds	r4, #26
 800881e:	42b5      	cmp	r5, r6
 8008820:	d11a      	bne.n	8008858 <_printf_common+0xc8>
 8008822:	2000      	movs	r0, #0
 8008824:	e008      	b.n	8008838 <_printf_common+0xa8>
 8008826:	2301      	movs	r3, #1
 8008828:	4652      	mov	r2, sl
 800882a:	4649      	mov	r1, r9
 800882c:	4638      	mov	r0, r7
 800882e:	47c0      	blx	r8
 8008830:	3001      	adds	r0, #1
 8008832:	d103      	bne.n	800883c <_printf_common+0xac>
 8008834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800883c:	3501      	adds	r5, #1
 800883e:	e7c6      	b.n	80087ce <_printf_common+0x3e>
 8008840:	18e1      	adds	r1, r4, r3
 8008842:	1c5a      	adds	r2, r3, #1
 8008844:	2030      	movs	r0, #48	; 0x30
 8008846:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800884a:	4422      	add	r2, r4
 800884c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008850:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008854:	3302      	adds	r3, #2
 8008856:	e7c7      	b.n	80087e8 <_printf_common+0x58>
 8008858:	2301      	movs	r3, #1
 800885a:	4622      	mov	r2, r4
 800885c:	4649      	mov	r1, r9
 800885e:	4638      	mov	r0, r7
 8008860:	47c0      	blx	r8
 8008862:	3001      	adds	r0, #1
 8008864:	d0e6      	beq.n	8008834 <_printf_common+0xa4>
 8008866:	3601      	adds	r6, #1
 8008868:	e7d9      	b.n	800881e <_printf_common+0x8e>
	...

0800886c <_printf_i>:
 800886c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008870:	7e0f      	ldrb	r7, [r1, #24]
 8008872:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008874:	2f78      	cmp	r7, #120	; 0x78
 8008876:	4691      	mov	r9, r2
 8008878:	4680      	mov	r8, r0
 800887a:	460c      	mov	r4, r1
 800887c:	469a      	mov	sl, r3
 800887e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008882:	d807      	bhi.n	8008894 <_printf_i+0x28>
 8008884:	2f62      	cmp	r7, #98	; 0x62
 8008886:	d80a      	bhi.n	800889e <_printf_i+0x32>
 8008888:	2f00      	cmp	r7, #0
 800888a:	f000 80d4 	beq.w	8008a36 <_printf_i+0x1ca>
 800888e:	2f58      	cmp	r7, #88	; 0x58
 8008890:	f000 80c0 	beq.w	8008a14 <_printf_i+0x1a8>
 8008894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008898:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800889c:	e03a      	b.n	8008914 <_printf_i+0xa8>
 800889e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088a2:	2b15      	cmp	r3, #21
 80088a4:	d8f6      	bhi.n	8008894 <_printf_i+0x28>
 80088a6:	a101      	add	r1, pc, #4	; (adr r1, 80088ac <_printf_i+0x40>)
 80088a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088ac:	08008905 	.word	0x08008905
 80088b0:	08008919 	.word	0x08008919
 80088b4:	08008895 	.word	0x08008895
 80088b8:	08008895 	.word	0x08008895
 80088bc:	08008895 	.word	0x08008895
 80088c0:	08008895 	.word	0x08008895
 80088c4:	08008919 	.word	0x08008919
 80088c8:	08008895 	.word	0x08008895
 80088cc:	08008895 	.word	0x08008895
 80088d0:	08008895 	.word	0x08008895
 80088d4:	08008895 	.word	0x08008895
 80088d8:	08008a1d 	.word	0x08008a1d
 80088dc:	08008945 	.word	0x08008945
 80088e0:	080089d7 	.word	0x080089d7
 80088e4:	08008895 	.word	0x08008895
 80088e8:	08008895 	.word	0x08008895
 80088ec:	08008a3f 	.word	0x08008a3f
 80088f0:	08008895 	.word	0x08008895
 80088f4:	08008945 	.word	0x08008945
 80088f8:	08008895 	.word	0x08008895
 80088fc:	08008895 	.word	0x08008895
 8008900:	080089df 	.word	0x080089df
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	1d1a      	adds	r2, r3, #4
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	602a      	str	r2, [r5, #0]
 800890c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008914:	2301      	movs	r3, #1
 8008916:	e09f      	b.n	8008a58 <_printf_i+0x1ec>
 8008918:	6820      	ldr	r0, [r4, #0]
 800891a:	682b      	ldr	r3, [r5, #0]
 800891c:	0607      	lsls	r7, r0, #24
 800891e:	f103 0104 	add.w	r1, r3, #4
 8008922:	6029      	str	r1, [r5, #0]
 8008924:	d501      	bpl.n	800892a <_printf_i+0xbe>
 8008926:	681e      	ldr	r6, [r3, #0]
 8008928:	e003      	b.n	8008932 <_printf_i+0xc6>
 800892a:	0646      	lsls	r6, r0, #25
 800892c:	d5fb      	bpl.n	8008926 <_printf_i+0xba>
 800892e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008932:	2e00      	cmp	r6, #0
 8008934:	da03      	bge.n	800893e <_printf_i+0xd2>
 8008936:	232d      	movs	r3, #45	; 0x2d
 8008938:	4276      	negs	r6, r6
 800893a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800893e:	485a      	ldr	r0, [pc, #360]	; (8008aa8 <_printf_i+0x23c>)
 8008940:	230a      	movs	r3, #10
 8008942:	e012      	b.n	800896a <_printf_i+0xfe>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	6820      	ldr	r0, [r4, #0]
 8008948:	1d19      	adds	r1, r3, #4
 800894a:	6029      	str	r1, [r5, #0]
 800894c:	0605      	lsls	r5, r0, #24
 800894e:	d501      	bpl.n	8008954 <_printf_i+0xe8>
 8008950:	681e      	ldr	r6, [r3, #0]
 8008952:	e002      	b.n	800895a <_printf_i+0xee>
 8008954:	0641      	lsls	r1, r0, #25
 8008956:	d5fb      	bpl.n	8008950 <_printf_i+0xe4>
 8008958:	881e      	ldrh	r6, [r3, #0]
 800895a:	4853      	ldr	r0, [pc, #332]	; (8008aa8 <_printf_i+0x23c>)
 800895c:	2f6f      	cmp	r7, #111	; 0x6f
 800895e:	bf0c      	ite	eq
 8008960:	2308      	moveq	r3, #8
 8008962:	230a      	movne	r3, #10
 8008964:	2100      	movs	r1, #0
 8008966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800896a:	6865      	ldr	r5, [r4, #4]
 800896c:	60a5      	str	r5, [r4, #8]
 800896e:	2d00      	cmp	r5, #0
 8008970:	bfa2      	ittt	ge
 8008972:	6821      	ldrge	r1, [r4, #0]
 8008974:	f021 0104 	bicge.w	r1, r1, #4
 8008978:	6021      	strge	r1, [r4, #0]
 800897a:	b90e      	cbnz	r6, 8008980 <_printf_i+0x114>
 800897c:	2d00      	cmp	r5, #0
 800897e:	d04b      	beq.n	8008a18 <_printf_i+0x1ac>
 8008980:	4615      	mov	r5, r2
 8008982:	fbb6 f1f3 	udiv	r1, r6, r3
 8008986:	fb03 6711 	mls	r7, r3, r1, r6
 800898a:	5dc7      	ldrb	r7, [r0, r7]
 800898c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008990:	4637      	mov	r7, r6
 8008992:	42bb      	cmp	r3, r7
 8008994:	460e      	mov	r6, r1
 8008996:	d9f4      	bls.n	8008982 <_printf_i+0x116>
 8008998:	2b08      	cmp	r3, #8
 800899a:	d10b      	bne.n	80089b4 <_printf_i+0x148>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	07de      	lsls	r6, r3, #31
 80089a0:	d508      	bpl.n	80089b4 <_printf_i+0x148>
 80089a2:	6923      	ldr	r3, [r4, #16]
 80089a4:	6861      	ldr	r1, [r4, #4]
 80089a6:	4299      	cmp	r1, r3
 80089a8:	bfde      	ittt	le
 80089aa:	2330      	movle	r3, #48	; 0x30
 80089ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80089b4:	1b52      	subs	r2, r2, r5
 80089b6:	6122      	str	r2, [r4, #16]
 80089b8:	f8cd a000 	str.w	sl, [sp]
 80089bc:	464b      	mov	r3, r9
 80089be:	aa03      	add	r2, sp, #12
 80089c0:	4621      	mov	r1, r4
 80089c2:	4640      	mov	r0, r8
 80089c4:	f7ff fee4 	bl	8008790 <_printf_common>
 80089c8:	3001      	adds	r0, #1
 80089ca:	d14a      	bne.n	8008a62 <_printf_i+0x1f6>
 80089cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089d0:	b004      	add	sp, #16
 80089d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	f043 0320 	orr.w	r3, r3, #32
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	4833      	ldr	r0, [pc, #204]	; (8008aac <_printf_i+0x240>)
 80089e0:	2778      	movs	r7, #120	; 0x78
 80089e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	6829      	ldr	r1, [r5, #0]
 80089ea:	061f      	lsls	r7, r3, #24
 80089ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80089f0:	d402      	bmi.n	80089f8 <_printf_i+0x18c>
 80089f2:	065f      	lsls	r7, r3, #25
 80089f4:	bf48      	it	mi
 80089f6:	b2b6      	uxthmi	r6, r6
 80089f8:	07df      	lsls	r7, r3, #31
 80089fa:	bf48      	it	mi
 80089fc:	f043 0320 	orrmi.w	r3, r3, #32
 8008a00:	6029      	str	r1, [r5, #0]
 8008a02:	bf48      	it	mi
 8008a04:	6023      	strmi	r3, [r4, #0]
 8008a06:	b91e      	cbnz	r6, 8008a10 <_printf_i+0x1a4>
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	f023 0320 	bic.w	r3, r3, #32
 8008a0e:	6023      	str	r3, [r4, #0]
 8008a10:	2310      	movs	r3, #16
 8008a12:	e7a7      	b.n	8008964 <_printf_i+0xf8>
 8008a14:	4824      	ldr	r0, [pc, #144]	; (8008aa8 <_printf_i+0x23c>)
 8008a16:	e7e4      	b.n	80089e2 <_printf_i+0x176>
 8008a18:	4615      	mov	r5, r2
 8008a1a:	e7bd      	b.n	8008998 <_printf_i+0x12c>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	6826      	ldr	r6, [r4, #0]
 8008a20:	6961      	ldr	r1, [r4, #20]
 8008a22:	1d18      	adds	r0, r3, #4
 8008a24:	6028      	str	r0, [r5, #0]
 8008a26:	0635      	lsls	r5, r6, #24
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	d501      	bpl.n	8008a30 <_printf_i+0x1c4>
 8008a2c:	6019      	str	r1, [r3, #0]
 8008a2e:	e002      	b.n	8008a36 <_printf_i+0x1ca>
 8008a30:	0670      	lsls	r0, r6, #25
 8008a32:	d5fb      	bpl.n	8008a2c <_printf_i+0x1c0>
 8008a34:	8019      	strh	r1, [r3, #0]
 8008a36:	2300      	movs	r3, #0
 8008a38:	6123      	str	r3, [r4, #16]
 8008a3a:	4615      	mov	r5, r2
 8008a3c:	e7bc      	b.n	80089b8 <_printf_i+0x14c>
 8008a3e:	682b      	ldr	r3, [r5, #0]
 8008a40:	1d1a      	adds	r2, r3, #4
 8008a42:	602a      	str	r2, [r5, #0]
 8008a44:	681d      	ldr	r5, [r3, #0]
 8008a46:	6862      	ldr	r2, [r4, #4]
 8008a48:	2100      	movs	r1, #0
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	f7f7 fbc0 	bl	80001d0 <memchr>
 8008a50:	b108      	cbz	r0, 8008a56 <_printf_i+0x1ea>
 8008a52:	1b40      	subs	r0, r0, r5
 8008a54:	6060      	str	r0, [r4, #4]
 8008a56:	6863      	ldr	r3, [r4, #4]
 8008a58:	6123      	str	r3, [r4, #16]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a60:	e7aa      	b.n	80089b8 <_printf_i+0x14c>
 8008a62:	6923      	ldr	r3, [r4, #16]
 8008a64:	462a      	mov	r2, r5
 8008a66:	4649      	mov	r1, r9
 8008a68:	4640      	mov	r0, r8
 8008a6a:	47d0      	blx	sl
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	d0ad      	beq.n	80089cc <_printf_i+0x160>
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	079b      	lsls	r3, r3, #30
 8008a74:	d413      	bmi.n	8008a9e <_printf_i+0x232>
 8008a76:	68e0      	ldr	r0, [r4, #12]
 8008a78:	9b03      	ldr	r3, [sp, #12]
 8008a7a:	4298      	cmp	r0, r3
 8008a7c:	bfb8      	it	lt
 8008a7e:	4618      	movlt	r0, r3
 8008a80:	e7a6      	b.n	80089d0 <_printf_i+0x164>
 8008a82:	2301      	movs	r3, #1
 8008a84:	4632      	mov	r2, r6
 8008a86:	4649      	mov	r1, r9
 8008a88:	4640      	mov	r0, r8
 8008a8a:	47d0      	blx	sl
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d09d      	beq.n	80089cc <_printf_i+0x160>
 8008a90:	3501      	adds	r5, #1
 8008a92:	68e3      	ldr	r3, [r4, #12]
 8008a94:	9903      	ldr	r1, [sp, #12]
 8008a96:	1a5b      	subs	r3, r3, r1
 8008a98:	42ab      	cmp	r3, r5
 8008a9a:	dcf2      	bgt.n	8008a82 <_printf_i+0x216>
 8008a9c:	e7eb      	b.n	8008a76 <_printf_i+0x20a>
 8008a9e:	2500      	movs	r5, #0
 8008aa0:	f104 0619 	add.w	r6, r4, #25
 8008aa4:	e7f5      	b.n	8008a92 <_printf_i+0x226>
 8008aa6:	bf00      	nop
 8008aa8:	0800cbce 	.word	0x0800cbce
 8008aac:	0800cbdf 	.word	0x0800cbdf

08008ab0 <_scanf_float>:
 8008ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	b087      	sub	sp, #28
 8008ab6:	4617      	mov	r7, r2
 8008ab8:	9303      	str	r3, [sp, #12]
 8008aba:	688b      	ldr	r3, [r1, #8]
 8008abc:	1e5a      	subs	r2, r3, #1
 8008abe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008ac2:	bf83      	ittte	hi
 8008ac4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008ac8:	195b      	addhi	r3, r3, r5
 8008aca:	9302      	strhi	r3, [sp, #8]
 8008acc:	2300      	movls	r3, #0
 8008ace:	bf86      	itte	hi
 8008ad0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ad4:	608b      	strhi	r3, [r1, #8]
 8008ad6:	9302      	strls	r3, [sp, #8]
 8008ad8:	680b      	ldr	r3, [r1, #0]
 8008ada:	468b      	mov	fp, r1
 8008adc:	2500      	movs	r5, #0
 8008ade:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008ae2:	f84b 3b1c 	str.w	r3, [fp], #28
 8008ae6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008aea:	4680      	mov	r8, r0
 8008aec:	460c      	mov	r4, r1
 8008aee:	465e      	mov	r6, fp
 8008af0:	46aa      	mov	sl, r5
 8008af2:	46a9      	mov	r9, r5
 8008af4:	9501      	str	r5, [sp, #4]
 8008af6:	68a2      	ldr	r2, [r4, #8]
 8008af8:	b152      	cbz	r2, 8008b10 <_scanf_float+0x60>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b4e      	cmp	r3, #78	; 0x4e
 8008b00:	d864      	bhi.n	8008bcc <_scanf_float+0x11c>
 8008b02:	2b40      	cmp	r3, #64	; 0x40
 8008b04:	d83c      	bhi.n	8008b80 <_scanf_float+0xd0>
 8008b06:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008b0a:	b2c8      	uxtb	r0, r1
 8008b0c:	280e      	cmp	r0, #14
 8008b0e:	d93a      	bls.n	8008b86 <_scanf_float+0xd6>
 8008b10:	f1b9 0f00 	cmp.w	r9, #0
 8008b14:	d003      	beq.n	8008b1e <_scanf_float+0x6e>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008b22:	f1ba 0f01 	cmp.w	sl, #1
 8008b26:	f200 8113 	bhi.w	8008d50 <_scanf_float+0x2a0>
 8008b2a:	455e      	cmp	r6, fp
 8008b2c:	f200 8105 	bhi.w	8008d3a <_scanf_float+0x28a>
 8008b30:	2501      	movs	r5, #1
 8008b32:	4628      	mov	r0, r5
 8008b34:	b007      	add	sp, #28
 8008b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008b3e:	2a0d      	cmp	r2, #13
 8008b40:	d8e6      	bhi.n	8008b10 <_scanf_float+0x60>
 8008b42:	a101      	add	r1, pc, #4	; (adr r1, 8008b48 <_scanf_float+0x98>)
 8008b44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b48:	08008c87 	.word	0x08008c87
 8008b4c:	08008b11 	.word	0x08008b11
 8008b50:	08008b11 	.word	0x08008b11
 8008b54:	08008b11 	.word	0x08008b11
 8008b58:	08008ce7 	.word	0x08008ce7
 8008b5c:	08008cbf 	.word	0x08008cbf
 8008b60:	08008b11 	.word	0x08008b11
 8008b64:	08008b11 	.word	0x08008b11
 8008b68:	08008c95 	.word	0x08008c95
 8008b6c:	08008b11 	.word	0x08008b11
 8008b70:	08008b11 	.word	0x08008b11
 8008b74:	08008b11 	.word	0x08008b11
 8008b78:	08008b11 	.word	0x08008b11
 8008b7c:	08008c4d 	.word	0x08008c4d
 8008b80:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008b84:	e7db      	b.n	8008b3e <_scanf_float+0x8e>
 8008b86:	290e      	cmp	r1, #14
 8008b88:	d8c2      	bhi.n	8008b10 <_scanf_float+0x60>
 8008b8a:	a001      	add	r0, pc, #4	; (adr r0, 8008b90 <_scanf_float+0xe0>)
 8008b8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008b90:	08008c3f 	.word	0x08008c3f
 8008b94:	08008b11 	.word	0x08008b11
 8008b98:	08008c3f 	.word	0x08008c3f
 8008b9c:	08008cd3 	.word	0x08008cd3
 8008ba0:	08008b11 	.word	0x08008b11
 8008ba4:	08008bed 	.word	0x08008bed
 8008ba8:	08008c29 	.word	0x08008c29
 8008bac:	08008c29 	.word	0x08008c29
 8008bb0:	08008c29 	.word	0x08008c29
 8008bb4:	08008c29 	.word	0x08008c29
 8008bb8:	08008c29 	.word	0x08008c29
 8008bbc:	08008c29 	.word	0x08008c29
 8008bc0:	08008c29 	.word	0x08008c29
 8008bc4:	08008c29 	.word	0x08008c29
 8008bc8:	08008c29 	.word	0x08008c29
 8008bcc:	2b6e      	cmp	r3, #110	; 0x6e
 8008bce:	d809      	bhi.n	8008be4 <_scanf_float+0x134>
 8008bd0:	2b60      	cmp	r3, #96	; 0x60
 8008bd2:	d8b2      	bhi.n	8008b3a <_scanf_float+0x8a>
 8008bd4:	2b54      	cmp	r3, #84	; 0x54
 8008bd6:	d077      	beq.n	8008cc8 <_scanf_float+0x218>
 8008bd8:	2b59      	cmp	r3, #89	; 0x59
 8008bda:	d199      	bne.n	8008b10 <_scanf_float+0x60>
 8008bdc:	2d07      	cmp	r5, #7
 8008bde:	d197      	bne.n	8008b10 <_scanf_float+0x60>
 8008be0:	2508      	movs	r5, #8
 8008be2:	e029      	b.n	8008c38 <_scanf_float+0x188>
 8008be4:	2b74      	cmp	r3, #116	; 0x74
 8008be6:	d06f      	beq.n	8008cc8 <_scanf_float+0x218>
 8008be8:	2b79      	cmp	r3, #121	; 0x79
 8008bea:	e7f6      	b.n	8008bda <_scanf_float+0x12a>
 8008bec:	6821      	ldr	r1, [r4, #0]
 8008bee:	05c8      	lsls	r0, r1, #23
 8008bf0:	d51a      	bpl.n	8008c28 <_scanf_float+0x178>
 8008bf2:	9b02      	ldr	r3, [sp, #8]
 8008bf4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008bf8:	6021      	str	r1, [r4, #0]
 8008bfa:	f109 0901 	add.w	r9, r9, #1
 8008bfe:	b11b      	cbz	r3, 8008c08 <_scanf_float+0x158>
 8008c00:	3b01      	subs	r3, #1
 8008c02:	3201      	adds	r2, #1
 8008c04:	9302      	str	r3, [sp, #8]
 8008c06:	60a2      	str	r2, [r4, #8]
 8008c08:	68a3      	ldr	r3, [r4, #8]
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	60a3      	str	r3, [r4, #8]
 8008c0e:	6923      	ldr	r3, [r4, #16]
 8008c10:	3301      	adds	r3, #1
 8008c12:	6123      	str	r3, [r4, #16]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3b01      	subs	r3, #1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	607b      	str	r3, [r7, #4]
 8008c1c:	f340 8084 	ble.w	8008d28 <_scanf_float+0x278>
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	3301      	adds	r3, #1
 8008c24:	603b      	str	r3, [r7, #0]
 8008c26:	e766      	b.n	8008af6 <_scanf_float+0x46>
 8008c28:	eb1a 0f05 	cmn.w	sl, r5
 8008c2c:	f47f af70 	bne.w	8008b10 <_scanf_float+0x60>
 8008c30:	6822      	ldr	r2, [r4, #0]
 8008c32:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008c36:	6022      	str	r2, [r4, #0]
 8008c38:	f806 3b01 	strb.w	r3, [r6], #1
 8008c3c:	e7e4      	b.n	8008c08 <_scanf_float+0x158>
 8008c3e:	6822      	ldr	r2, [r4, #0]
 8008c40:	0610      	lsls	r0, r2, #24
 8008c42:	f57f af65 	bpl.w	8008b10 <_scanf_float+0x60>
 8008c46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c4a:	e7f4      	b.n	8008c36 <_scanf_float+0x186>
 8008c4c:	f1ba 0f00 	cmp.w	sl, #0
 8008c50:	d10e      	bne.n	8008c70 <_scanf_float+0x1c0>
 8008c52:	f1b9 0f00 	cmp.w	r9, #0
 8008c56:	d10e      	bne.n	8008c76 <_scanf_float+0x1c6>
 8008c58:	6822      	ldr	r2, [r4, #0]
 8008c5a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008c5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008c62:	d108      	bne.n	8008c76 <_scanf_float+0x1c6>
 8008c64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008c68:	6022      	str	r2, [r4, #0]
 8008c6a:	f04f 0a01 	mov.w	sl, #1
 8008c6e:	e7e3      	b.n	8008c38 <_scanf_float+0x188>
 8008c70:	f1ba 0f02 	cmp.w	sl, #2
 8008c74:	d055      	beq.n	8008d22 <_scanf_float+0x272>
 8008c76:	2d01      	cmp	r5, #1
 8008c78:	d002      	beq.n	8008c80 <_scanf_float+0x1d0>
 8008c7a:	2d04      	cmp	r5, #4
 8008c7c:	f47f af48 	bne.w	8008b10 <_scanf_float+0x60>
 8008c80:	3501      	adds	r5, #1
 8008c82:	b2ed      	uxtb	r5, r5
 8008c84:	e7d8      	b.n	8008c38 <_scanf_float+0x188>
 8008c86:	f1ba 0f01 	cmp.w	sl, #1
 8008c8a:	f47f af41 	bne.w	8008b10 <_scanf_float+0x60>
 8008c8e:	f04f 0a02 	mov.w	sl, #2
 8008c92:	e7d1      	b.n	8008c38 <_scanf_float+0x188>
 8008c94:	b97d      	cbnz	r5, 8008cb6 <_scanf_float+0x206>
 8008c96:	f1b9 0f00 	cmp.w	r9, #0
 8008c9a:	f47f af3c 	bne.w	8008b16 <_scanf_float+0x66>
 8008c9e:	6822      	ldr	r2, [r4, #0]
 8008ca0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008ca4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008ca8:	f47f af39 	bne.w	8008b1e <_scanf_float+0x6e>
 8008cac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008cb0:	6022      	str	r2, [r4, #0]
 8008cb2:	2501      	movs	r5, #1
 8008cb4:	e7c0      	b.n	8008c38 <_scanf_float+0x188>
 8008cb6:	2d03      	cmp	r5, #3
 8008cb8:	d0e2      	beq.n	8008c80 <_scanf_float+0x1d0>
 8008cba:	2d05      	cmp	r5, #5
 8008cbc:	e7de      	b.n	8008c7c <_scanf_float+0x1cc>
 8008cbe:	2d02      	cmp	r5, #2
 8008cc0:	f47f af26 	bne.w	8008b10 <_scanf_float+0x60>
 8008cc4:	2503      	movs	r5, #3
 8008cc6:	e7b7      	b.n	8008c38 <_scanf_float+0x188>
 8008cc8:	2d06      	cmp	r5, #6
 8008cca:	f47f af21 	bne.w	8008b10 <_scanf_float+0x60>
 8008cce:	2507      	movs	r5, #7
 8008cd0:	e7b2      	b.n	8008c38 <_scanf_float+0x188>
 8008cd2:	6822      	ldr	r2, [r4, #0]
 8008cd4:	0591      	lsls	r1, r2, #22
 8008cd6:	f57f af1b 	bpl.w	8008b10 <_scanf_float+0x60>
 8008cda:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008cde:	6022      	str	r2, [r4, #0]
 8008ce0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ce4:	e7a8      	b.n	8008c38 <_scanf_float+0x188>
 8008ce6:	6822      	ldr	r2, [r4, #0]
 8008ce8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008cec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008cf0:	d006      	beq.n	8008d00 <_scanf_float+0x250>
 8008cf2:	0550      	lsls	r0, r2, #21
 8008cf4:	f57f af0c 	bpl.w	8008b10 <_scanf_float+0x60>
 8008cf8:	f1b9 0f00 	cmp.w	r9, #0
 8008cfc:	f43f af0f 	beq.w	8008b1e <_scanf_float+0x6e>
 8008d00:	0591      	lsls	r1, r2, #22
 8008d02:	bf58      	it	pl
 8008d04:	9901      	ldrpl	r1, [sp, #4]
 8008d06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d0a:	bf58      	it	pl
 8008d0c:	eba9 0101 	subpl.w	r1, r9, r1
 8008d10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008d14:	bf58      	it	pl
 8008d16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008d1a:	6022      	str	r2, [r4, #0]
 8008d1c:	f04f 0900 	mov.w	r9, #0
 8008d20:	e78a      	b.n	8008c38 <_scanf_float+0x188>
 8008d22:	f04f 0a03 	mov.w	sl, #3
 8008d26:	e787      	b.n	8008c38 <_scanf_float+0x188>
 8008d28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008d2c:	4639      	mov	r1, r7
 8008d2e:	4640      	mov	r0, r8
 8008d30:	4798      	blx	r3
 8008d32:	2800      	cmp	r0, #0
 8008d34:	f43f aedf 	beq.w	8008af6 <_scanf_float+0x46>
 8008d38:	e6ea      	b.n	8008b10 <_scanf_float+0x60>
 8008d3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d42:	463a      	mov	r2, r7
 8008d44:	4640      	mov	r0, r8
 8008d46:	4798      	blx	r3
 8008d48:	6923      	ldr	r3, [r4, #16]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	6123      	str	r3, [r4, #16]
 8008d4e:	e6ec      	b.n	8008b2a <_scanf_float+0x7a>
 8008d50:	1e6b      	subs	r3, r5, #1
 8008d52:	2b06      	cmp	r3, #6
 8008d54:	d825      	bhi.n	8008da2 <_scanf_float+0x2f2>
 8008d56:	2d02      	cmp	r5, #2
 8008d58:	d836      	bhi.n	8008dc8 <_scanf_float+0x318>
 8008d5a:	455e      	cmp	r6, fp
 8008d5c:	f67f aee8 	bls.w	8008b30 <_scanf_float+0x80>
 8008d60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d68:	463a      	mov	r2, r7
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	4798      	blx	r3
 8008d6e:	6923      	ldr	r3, [r4, #16]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	6123      	str	r3, [r4, #16]
 8008d74:	e7f1      	b.n	8008d5a <_scanf_float+0x2aa>
 8008d76:	9802      	ldr	r0, [sp, #8]
 8008d78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008d80:	9002      	str	r0, [sp, #8]
 8008d82:	463a      	mov	r2, r7
 8008d84:	4640      	mov	r0, r8
 8008d86:	4798      	blx	r3
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	6123      	str	r3, [r4, #16]
 8008d8e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008d92:	fa5f fa8a 	uxtb.w	sl, sl
 8008d96:	f1ba 0f02 	cmp.w	sl, #2
 8008d9a:	d1ec      	bne.n	8008d76 <_scanf_float+0x2c6>
 8008d9c:	3d03      	subs	r5, #3
 8008d9e:	b2ed      	uxtb	r5, r5
 8008da0:	1b76      	subs	r6, r6, r5
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	05da      	lsls	r2, r3, #23
 8008da6:	d52f      	bpl.n	8008e08 <_scanf_float+0x358>
 8008da8:	055b      	lsls	r3, r3, #21
 8008daa:	d510      	bpl.n	8008dce <_scanf_float+0x31e>
 8008dac:	455e      	cmp	r6, fp
 8008dae:	f67f aebf 	bls.w	8008b30 <_scanf_float+0x80>
 8008db2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008db6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dba:	463a      	mov	r2, r7
 8008dbc:	4640      	mov	r0, r8
 8008dbe:	4798      	blx	r3
 8008dc0:	6923      	ldr	r3, [r4, #16]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	6123      	str	r3, [r4, #16]
 8008dc6:	e7f1      	b.n	8008dac <_scanf_float+0x2fc>
 8008dc8:	46aa      	mov	sl, r5
 8008dca:	9602      	str	r6, [sp, #8]
 8008dcc:	e7df      	b.n	8008d8e <_scanf_float+0x2de>
 8008dce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008dd2:	6923      	ldr	r3, [r4, #16]
 8008dd4:	2965      	cmp	r1, #101	; 0x65
 8008dd6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008dda:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8008dde:	6123      	str	r3, [r4, #16]
 8008de0:	d00c      	beq.n	8008dfc <_scanf_float+0x34c>
 8008de2:	2945      	cmp	r1, #69	; 0x45
 8008de4:	d00a      	beq.n	8008dfc <_scanf_float+0x34c>
 8008de6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008dea:	463a      	mov	r2, r7
 8008dec:	4640      	mov	r0, r8
 8008dee:	4798      	blx	r3
 8008df0:	6923      	ldr	r3, [r4, #16]
 8008df2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008df6:	3b01      	subs	r3, #1
 8008df8:	1eb5      	subs	r5, r6, #2
 8008dfa:	6123      	str	r3, [r4, #16]
 8008dfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e00:	463a      	mov	r2, r7
 8008e02:	4640      	mov	r0, r8
 8008e04:	4798      	blx	r3
 8008e06:	462e      	mov	r6, r5
 8008e08:	6825      	ldr	r5, [r4, #0]
 8008e0a:	f015 0510 	ands.w	r5, r5, #16
 8008e0e:	d158      	bne.n	8008ec2 <_scanf_float+0x412>
 8008e10:	7035      	strb	r5, [r6, #0]
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e1c:	d11c      	bne.n	8008e58 <_scanf_float+0x3a8>
 8008e1e:	9b01      	ldr	r3, [sp, #4]
 8008e20:	454b      	cmp	r3, r9
 8008e22:	eba3 0209 	sub.w	r2, r3, r9
 8008e26:	d124      	bne.n	8008e72 <_scanf_float+0x3c2>
 8008e28:	2200      	movs	r2, #0
 8008e2a:	4659      	mov	r1, fp
 8008e2c:	4640      	mov	r0, r8
 8008e2e:	f002 fcf3 	bl	800b818 <_strtod_r>
 8008e32:	9b03      	ldr	r3, [sp, #12]
 8008e34:	6821      	ldr	r1, [r4, #0]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f011 0f02 	tst.w	r1, #2
 8008e3c:	ec57 6b10 	vmov	r6, r7, d0
 8008e40:	f103 0204 	add.w	r2, r3, #4
 8008e44:	d020      	beq.n	8008e88 <_scanf_float+0x3d8>
 8008e46:	9903      	ldr	r1, [sp, #12]
 8008e48:	600a      	str	r2, [r1, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	e9c3 6700 	strd	r6, r7, [r3]
 8008e50:	68e3      	ldr	r3, [r4, #12]
 8008e52:	3301      	adds	r3, #1
 8008e54:	60e3      	str	r3, [r4, #12]
 8008e56:	e66c      	b.n	8008b32 <_scanf_float+0x82>
 8008e58:	9b04      	ldr	r3, [sp, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d0e4      	beq.n	8008e28 <_scanf_float+0x378>
 8008e5e:	9905      	ldr	r1, [sp, #20]
 8008e60:	230a      	movs	r3, #10
 8008e62:	462a      	mov	r2, r5
 8008e64:	3101      	adds	r1, #1
 8008e66:	4640      	mov	r0, r8
 8008e68:	f002 fd5e 	bl	800b928 <_strtol_r>
 8008e6c:	9b04      	ldr	r3, [sp, #16]
 8008e6e:	9e05      	ldr	r6, [sp, #20]
 8008e70:	1ac2      	subs	r2, r0, r3
 8008e72:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008e76:	429e      	cmp	r6, r3
 8008e78:	bf28      	it	cs
 8008e7a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008e7e:	4912      	ldr	r1, [pc, #72]	; (8008ec8 <_scanf_float+0x418>)
 8008e80:	4630      	mov	r0, r6
 8008e82:	f000 f955 	bl	8009130 <siprintf>
 8008e86:	e7cf      	b.n	8008e28 <_scanf_float+0x378>
 8008e88:	f011 0f04 	tst.w	r1, #4
 8008e8c:	9903      	ldr	r1, [sp, #12]
 8008e8e:	600a      	str	r2, [r1, #0]
 8008e90:	d1db      	bne.n	8008e4a <_scanf_float+0x39a>
 8008e92:	f8d3 8000 	ldr.w	r8, [r3]
 8008e96:	ee10 2a10 	vmov	r2, s0
 8008e9a:	ee10 0a10 	vmov	r0, s0
 8008e9e:	463b      	mov	r3, r7
 8008ea0:	4639      	mov	r1, r7
 8008ea2:	f7f7 fe43 	bl	8000b2c <__aeabi_dcmpun>
 8008ea6:	b128      	cbz	r0, 8008eb4 <_scanf_float+0x404>
 8008ea8:	4808      	ldr	r0, [pc, #32]	; (8008ecc <_scanf_float+0x41c>)
 8008eaa:	f000 fb2d 	bl	8009508 <nanf>
 8008eae:	ed88 0a00 	vstr	s0, [r8]
 8008eb2:	e7cd      	b.n	8008e50 <_scanf_float+0x3a0>
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	f7f7 fe96 	bl	8000be8 <__aeabi_d2f>
 8008ebc:	f8c8 0000 	str.w	r0, [r8]
 8008ec0:	e7c6      	b.n	8008e50 <_scanf_float+0x3a0>
 8008ec2:	2500      	movs	r5, #0
 8008ec4:	e635      	b.n	8008b32 <_scanf_float+0x82>
 8008ec6:	bf00      	nop
 8008ec8:	0800cbf0 	.word	0x0800cbf0
 8008ecc:	0800cf85 	.word	0x0800cf85

08008ed0 <std>:
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	b510      	push	{r4, lr}
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	e9c0 3300 	strd	r3, r3, [r0]
 8008eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ede:	6083      	str	r3, [r0, #8]
 8008ee0:	8181      	strh	r1, [r0, #12]
 8008ee2:	6643      	str	r3, [r0, #100]	; 0x64
 8008ee4:	81c2      	strh	r2, [r0, #14]
 8008ee6:	6183      	str	r3, [r0, #24]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	2208      	movs	r2, #8
 8008eec:	305c      	adds	r0, #92	; 0x5c
 8008eee:	f000 fa17 	bl	8009320 <memset>
 8008ef2:	4b0d      	ldr	r3, [pc, #52]	; (8008f28 <std+0x58>)
 8008ef4:	6263      	str	r3, [r4, #36]	; 0x24
 8008ef6:	4b0d      	ldr	r3, [pc, #52]	; (8008f2c <std+0x5c>)
 8008ef8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008efa:	4b0d      	ldr	r3, [pc, #52]	; (8008f30 <std+0x60>)
 8008efc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008efe:	4b0d      	ldr	r3, [pc, #52]	; (8008f34 <std+0x64>)
 8008f00:	6323      	str	r3, [r4, #48]	; 0x30
 8008f02:	4b0d      	ldr	r3, [pc, #52]	; (8008f38 <std+0x68>)
 8008f04:	6224      	str	r4, [r4, #32]
 8008f06:	429c      	cmp	r4, r3
 8008f08:	d006      	beq.n	8008f18 <std+0x48>
 8008f0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008f0e:	4294      	cmp	r4, r2
 8008f10:	d002      	beq.n	8008f18 <std+0x48>
 8008f12:	33d0      	adds	r3, #208	; 0xd0
 8008f14:	429c      	cmp	r4, r3
 8008f16:	d105      	bne.n	8008f24 <std+0x54>
 8008f18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f20:	f000 bae0 	b.w	80094e4 <__retarget_lock_init_recursive>
 8008f24:	bd10      	pop	{r4, pc}
 8008f26:	bf00      	nop
 8008f28:	08009171 	.word	0x08009171
 8008f2c:	08009193 	.word	0x08009193
 8008f30:	080091cb 	.word	0x080091cb
 8008f34:	080091ef 	.word	0x080091ef
 8008f38:	20001d0c 	.word	0x20001d0c

08008f3c <stdio_exit_handler>:
 8008f3c:	4a02      	ldr	r2, [pc, #8]	; (8008f48 <stdio_exit_handler+0xc>)
 8008f3e:	4903      	ldr	r1, [pc, #12]	; (8008f4c <stdio_exit_handler+0x10>)
 8008f40:	4803      	ldr	r0, [pc, #12]	; (8008f50 <stdio_exit_handler+0x14>)
 8008f42:	f000 b869 	b.w	8009018 <_fwalk_sglue>
 8008f46:	bf00      	nop
 8008f48:	20000010 	.word	0x20000010
 8008f4c:	0800bf71 	.word	0x0800bf71
 8008f50:	2000001c 	.word	0x2000001c

08008f54 <cleanup_stdio>:
 8008f54:	6841      	ldr	r1, [r0, #4]
 8008f56:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <cleanup_stdio+0x34>)
 8008f58:	4299      	cmp	r1, r3
 8008f5a:	b510      	push	{r4, lr}
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	d001      	beq.n	8008f64 <cleanup_stdio+0x10>
 8008f60:	f003 f806 	bl	800bf70 <_fflush_r>
 8008f64:	68a1      	ldr	r1, [r4, #8]
 8008f66:	4b09      	ldr	r3, [pc, #36]	; (8008f8c <cleanup_stdio+0x38>)
 8008f68:	4299      	cmp	r1, r3
 8008f6a:	d002      	beq.n	8008f72 <cleanup_stdio+0x1e>
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f002 ffff 	bl	800bf70 <_fflush_r>
 8008f72:	68e1      	ldr	r1, [r4, #12]
 8008f74:	4b06      	ldr	r3, [pc, #24]	; (8008f90 <cleanup_stdio+0x3c>)
 8008f76:	4299      	cmp	r1, r3
 8008f78:	d004      	beq.n	8008f84 <cleanup_stdio+0x30>
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f80:	f002 bff6 	b.w	800bf70 <_fflush_r>
 8008f84:	bd10      	pop	{r4, pc}
 8008f86:	bf00      	nop
 8008f88:	20001d0c 	.word	0x20001d0c
 8008f8c:	20001d74 	.word	0x20001d74
 8008f90:	20001ddc 	.word	0x20001ddc

08008f94 <global_stdio_init.part.0>:
 8008f94:	b510      	push	{r4, lr}
 8008f96:	4b0b      	ldr	r3, [pc, #44]	; (8008fc4 <global_stdio_init.part.0+0x30>)
 8008f98:	4c0b      	ldr	r4, [pc, #44]	; (8008fc8 <global_stdio_init.part.0+0x34>)
 8008f9a:	4a0c      	ldr	r2, [pc, #48]	; (8008fcc <global_stdio_init.part.0+0x38>)
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2104      	movs	r1, #4
 8008fa4:	f7ff ff94 	bl	8008ed0 <std>
 8008fa8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008fac:	2201      	movs	r2, #1
 8008fae:	2109      	movs	r1, #9
 8008fb0:	f7ff ff8e 	bl	8008ed0 <std>
 8008fb4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008fb8:	2202      	movs	r2, #2
 8008fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fbe:	2112      	movs	r1, #18
 8008fc0:	f7ff bf86 	b.w	8008ed0 <std>
 8008fc4:	20001e44 	.word	0x20001e44
 8008fc8:	20001d0c 	.word	0x20001d0c
 8008fcc:	08008f3d 	.word	0x08008f3d

08008fd0 <__sfp_lock_acquire>:
 8008fd0:	4801      	ldr	r0, [pc, #4]	; (8008fd8 <__sfp_lock_acquire+0x8>)
 8008fd2:	f000 ba88 	b.w	80094e6 <__retarget_lock_acquire_recursive>
 8008fd6:	bf00      	nop
 8008fd8:	20001e4d 	.word	0x20001e4d

08008fdc <__sfp_lock_release>:
 8008fdc:	4801      	ldr	r0, [pc, #4]	; (8008fe4 <__sfp_lock_release+0x8>)
 8008fde:	f000 ba83 	b.w	80094e8 <__retarget_lock_release_recursive>
 8008fe2:	bf00      	nop
 8008fe4:	20001e4d 	.word	0x20001e4d

08008fe8 <__sinit>:
 8008fe8:	b510      	push	{r4, lr}
 8008fea:	4604      	mov	r4, r0
 8008fec:	f7ff fff0 	bl	8008fd0 <__sfp_lock_acquire>
 8008ff0:	6a23      	ldr	r3, [r4, #32]
 8008ff2:	b11b      	cbz	r3, 8008ffc <__sinit+0x14>
 8008ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ff8:	f7ff bff0 	b.w	8008fdc <__sfp_lock_release>
 8008ffc:	4b04      	ldr	r3, [pc, #16]	; (8009010 <__sinit+0x28>)
 8008ffe:	6223      	str	r3, [r4, #32]
 8009000:	4b04      	ldr	r3, [pc, #16]	; (8009014 <__sinit+0x2c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1f5      	bne.n	8008ff4 <__sinit+0xc>
 8009008:	f7ff ffc4 	bl	8008f94 <global_stdio_init.part.0>
 800900c:	e7f2      	b.n	8008ff4 <__sinit+0xc>
 800900e:	bf00      	nop
 8009010:	08008f55 	.word	0x08008f55
 8009014:	20001e44 	.word	0x20001e44

08009018 <_fwalk_sglue>:
 8009018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800901c:	4607      	mov	r7, r0
 800901e:	4688      	mov	r8, r1
 8009020:	4614      	mov	r4, r2
 8009022:	2600      	movs	r6, #0
 8009024:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009028:	f1b9 0901 	subs.w	r9, r9, #1
 800902c:	d505      	bpl.n	800903a <_fwalk_sglue+0x22>
 800902e:	6824      	ldr	r4, [r4, #0]
 8009030:	2c00      	cmp	r4, #0
 8009032:	d1f7      	bne.n	8009024 <_fwalk_sglue+0xc>
 8009034:	4630      	mov	r0, r6
 8009036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800903a:	89ab      	ldrh	r3, [r5, #12]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d907      	bls.n	8009050 <_fwalk_sglue+0x38>
 8009040:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009044:	3301      	adds	r3, #1
 8009046:	d003      	beq.n	8009050 <_fwalk_sglue+0x38>
 8009048:	4629      	mov	r1, r5
 800904a:	4638      	mov	r0, r7
 800904c:	47c0      	blx	r8
 800904e:	4306      	orrs	r6, r0
 8009050:	3568      	adds	r5, #104	; 0x68
 8009052:	e7e9      	b.n	8009028 <_fwalk_sglue+0x10>

08009054 <iprintf>:
 8009054:	b40f      	push	{r0, r1, r2, r3}
 8009056:	b507      	push	{r0, r1, r2, lr}
 8009058:	4906      	ldr	r1, [pc, #24]	; (8009074 <iprintf+0x20>)
 800905a:	ab04      	add	r3, sp, #16
 800905c:	6808      	ldr	r0, [r1, #0]
 800905e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009062:	6881      	ldr	r1, [r0, #8]
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	f002 fde3 	bl	800bc30 <_vfiprintf_r>
 800906a:	b003      	add	sp, #12
 800906c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009070:	b004      	add	sp, #16
 8009072:	4770      	bx	lr
 8009074:	20000068 	.word	0x20000068

08009078 <_puts_r>:
 8009078:	6a03      	ldr	r3, [r0, #32]
 800907a:	b570      	push	{r4, r5, r6, lr}
 800907c:	6884      	ldr	r4, [r0, #8]
 800907e:	4605      	mov	r5, r0
 8009080:	460e      	mov	r6, r1
 8009082:	b90b      	cbnz	r3, 8009088 <_puts_r+0x10>
 8009084:	f7ff ffb0 	bl	8008fe8 <__sinit>
 8009088:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800908a:	07db      	lsls	r3, r3, #31
 800908c:	d405      	bmi.n	800909a <_puts_r+0x22>
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	0598      	lsls	r0, r3, #22
 8009092:	d402      	bmi.n	800909a <_puts_r+0x22>
 8009094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009096:	f000 fa26 	bl	80094e6 <__retarget_lock_acquire_recursive>
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	0719      	lsls	r1, r3, #28
 800909e:	d513      	bpl.n	80090c8 <_puts_r+0x50>
 80090a0:	6923      	ldr	r3, [r4, #16]
 80090a2:	b18b      	cbz	r3, 80090c8 <_puts_r+0x50>
 80090a4:	3e01      	subs	r6, #1
 80090a6:	68a3      	ldr	r3, [r4, #8]
 80090a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090ac:	3b01      	subs	r3, #1
 80090ae:	60a3      	str	r3, [r4, #8]
 80090b0:	b9e9      	cbnz	r1, 80090ee <_puts_r+0x76>
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	da2e      	bge.n	8009114 <_puts_r+0x9c>
 80090b6:	4622      	mov	r2, r4
 80090b8:	210a      	movs	r1, #10
 80090ba:	4628      	mov	r0, r5
 80090bc:	f000 f89b 	bl	80091f6 <__swbuf_r>
 80090c0:	3001      	adds	r0, #1
 80090c2:	d007      	beq.n	80090d4 <_puts_r+0x5c>
 80090c4:	250a      	movs	r5, #10
 80090c6:	e007      	b.n	80090d8 <_puts_r+0x60>
 80090c8:	4621      	mov	r1, r4
 80090ca:	4628      	mov	r0, r5
 80090cc:	f000 f8d0 	bl	8009270 <__swsetup_r>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d0e7      	beq.n	80090a4 <_puts_r+0x2c>
 80090d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80090d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090da:	07da      	lsls	r2, r3, #31
 80090dc:	d405      	bmi.n	80090ea <_puts_r+0x72>
 80090de:	89a3      	ldrh	r3, [r4, #12]
 80090e0:	059b      	lsls	r3, r3, #22
 80090e2:	d402      	bmi.n	80090ea <_puts_r+0x72>
 80090e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090e6:	f000 f9ff 	bl	80094e8 <__retarget_lock_release_recursive>
 80090ea:	4628      	mov	r0, r5
 80090ec:	bd70      	pop	{r4, r5, r6, pc}
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	da04      	bge.n	80090fc <_puts_r+0x84>
 80090f2:	69a2      	ldr	r2, [r4, #24]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	dc06      	bgt.n	8009106 <_puts_r+0x8e>
 80090f8:	290a      	cmp	r1, #10
 80090fa:	d004      	beq.n	8009106 <_puts_r+0x8e>
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	1c5a      	adds	r2, r3, #1
 8009100:	6022      	str	r2, [r4, #0]
 8009102:	7019      	strb	r1, [r3, #0]
 8009104:	e7cf      	b.n	80090a6 <_puts_r+0x2e>
 8009106:	4622      	mov	r2, r4
 8009108:	4628      	mov	r0, r5
 800910a:	f000 f874 	bl	80091f6 <__swbuf_r>
 800910e:	3001      	adds	r0, #1
 8009110:	d1c9      	bne.n	80090a6 <_puts_r+0x2e>
 8009112:	e7df      	b.n	80090d4 <_puts_r+0x5c>
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	250a      	movs	r5, #10
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	6022      	str	r2, [r4, #0]
 800911c:	701d      	strb	r5, [r3, #0]
 800911e:	e7db      	b.n	80090d8 <_puts_r+0x60>

08009120 <puts>:
 8009120:	4b02      	ldr	r3, [pc, #8]	; (800912c <puts+0xc>)
 8009122:	4601      	mov	r1, r0
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	f7ff bfa7 	b.w	8009078 <_puts_r>
 800912a:	bf00      	nop
 800912c:	20000068 	.word	0x20000068

08009130 <siprintf>:
 8009130:	b40e      	push	{r1, r2, r3}
 8009132:	b500      	push	{lr}
 8009134:	b09c      	sub	sp, #112	; 0x70
 8009136:	ab1d      	add	r3, sp, #116	; 0x74
 8009138:	9002      	str	r0, [sp, #8]
 800913a:	9006      	str	r0, [sp, #24]
 800913c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009140:	4809      	ldr	r0, [pc, #36]	; (8009168 <siprintf+0x38>)
 8009142:	9107      	str	r1, [sp, #28]
 8009144:	9104      	str	r1, [sp, #16]
 8009146:	4909      	ldr	r1, [pc, #36]	; (800916c <siprintf+0x3c>)
 8009148:	f853 2b04 	ldr.w	r2, [r3], #4
 800914c:	9105      	str	r1, [sp, #20]
 800914e:	6800      	ldr	r0, [r0, #0]
 8009150:	9301      	str	r3, [sp, #4]
 8009152:	a902      	add	r1, sp, #8
 8009154:	f002 fc44 	bl	800b9e0 <_svfiprintf_r>
 8009158:	9b02      	ldr	r3, [sp, #8]
 800915a:	2200      	movs	r2, #0
 800915c:	701a      	strb	r2, [r3, #0]
 800915e:	b01c      	add	sp, #112	; 0x70
 8009160:	f85d eb04 	ldr.w	lr, [sp], #4
 8009164:	b003      	add	sp, #12
 8009166:	4770      	bx	lr
 8009168:	20000068 	.word	0x20000068
 800916c:	ffff0208 	.word	0xffff0208

08009170 <__sread>:
 8009170:	b510      	push	{r4, lr}
 8009172:	460c      	mov	r4, r1
 8009174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009178:	f000 f956 	bl	8009428 <_read_r>
 800917c:	2800      	cmp	r0, #0
 800917e:	bfab      	itete	ge
 8009180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009182:	89a3      	ldrhlt	r3, [r4, #12]
 8009184:	181b      	addge	r3, r3, r0
 8009186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800918a:	bfac      	ite	ge
 800918c:	6563      	strge	r3, [r4, #84]	; 0x54
 800918e:	81a3      	strhlt	r3, [r4, #12]
 8009190:	bd10      	pop	{r4, pc}

08009192 <__swrite>:
 8009192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009196:	461f      	mov	r7, r3
 8009198:	898b      	ldrh	r3, [r1, #12]
 800919a:	05db      	lsls	r3, r3, #23
 800919c:	4605      	mov	r5, r0
 800919e:	460c      	mov	r4, r1
 80091a0:	4616      	mov	r6, r2
 80091a2:	d505      	bpl.n	80091b0 <__swrite+0x1e>
 80091a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a8:	2302      	movs	r3, #2
 80091aa:	2200      	movs	r2, #0
 80091ac:	f000 f92a 	bl	8009404 <_lseek_r>
 80091b0:	89a3      	ldrh	r3, [r4, #12]
 80091b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091ba:	81a3      	strh	r3, [r4, #12]
 80091bc:	4632      	mov	r2, r6
 80091be:	463b      	mov	r3, r7
 80091c0:	4628      	mov	r0, r5
 80091c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091c6:	f000 b951 	b.w	800946c <_write_r>

080091ca <__sseek>:
 80091ca:	b510      	push	{r4, lr}
 80091cc:	460c      	mov	r4, r1
 80091ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d2:	f000 f917 	bl	8009404 <_lseek_r>
 80091d6:	1c43      	adds	r3, r0, #1
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	bf15      	itete	ne
 80091dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80091de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091e6:	81a3      	strheq	r3, [r4, #12]
 80091e8:	bf18      	it	ne
 80091ea:	81a3      	strhne	r3, [r4, #12]
 80091ec:	bd10      	pop	{r4, pc}

080091ee <__sclose>:
 80091ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f2:	f000 b8a1 	b.w	8009338 <_close_r>

080091f6 <__swbuf_r>:
 80091f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f8:	460e      	mov	r6, r1
 80091fa:	4614      	mov	r4, r2
 80091fc:	4605      	mov	r5, r0
 80091fe:	b118      	cbz	r0, 8009208 <__swbuf_r+0x12>
 8009200:	6a03      	ldr	r3, [r0, #32]
 8009202:	b90b      	cbnz	r3, 8009208 <__swbuf_r+0x12>
 8009204:	f7ff fef0 	bl	8008fe8 <__sinit>
 8009208:	69a3      	ldr	r3, [r4, #24]
 800920a:	60a3      	str	r3, [r4, #8]
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	071a      	lsls	r2, r3, #28
 8009210:	d525      	bpl.n	800925e <__swbuf_r+0x68>
 8009212:	6923      	ldr	r3, [r4, #16]
 8009214:	b31b      	cbz	r3, 800925e <__swbuf_r+0x68>
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	6922      	ldr	r2, [r4, #16]
 800921a:	1a98      	subs	r0, r3, r2
 800921c:	6963      	ldr	r3, [r4, #20]
 800921e:	b2f6      	uxtb	r6, r6
 8009220:	4283      	cmp	r3, r0
 8009222:	4637      	mov	r7, r6
 8009224:	dc04      	bgt.n	8009230 <__swbuf_r+0x3a>
 8009226:	4621      	mov	r1, r4
 8009228:	4628      	mov	r0, r5
 800922a:	f002 fea1 	bl	800bf70 <_fflush_r>
 800922e:	b9e0      	cbnz	r0, 800926a <__swbuf_r+0x74>
 8009230:	68a3      	ldr	r3, [r4, #8]
 8009232:	3b01      	subs	r3, #1
 8009234:	60a3      	str	r3, [r4, #8]
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	6022      	str	r2, [r4, #0]
 800923c:	701e      	strb	r6, [r3, #0]
 800923e:	6962      	ldr	r2, [r4, #20]
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	429a      	cmp	r2, r3
 8009244:	d004      	beq.n	8009250 <__swbuf_r+0x5a>
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	07db      	lsls	r3, r3, #31
 800924a:	d506      	bpl.n	800925a <__swbuf_r+0x64>
 800924c:	2e0a      	cmp	r6, #10
 800924e:	d104      	bne.n	800925a <__swbuf_r+0x64>
 8009250:	4621      	mov	r1, r4
 8009252:	4628      	mov	r0, r5
 8009254:	f002 fe8c 	bl	800bf70 <_fflush_r>
 8009258:	b938      	cbnz	r0, 800926a <__swbuf_r+0x74>
 800925a:	4638      	mov	r0, r7
 800925c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800925e:	4621      	mov	r1, r4
 8009260:	4628      	mov	r0, r5
 8009262:	f000 f805 	bl	8009270 <__swsetup_r>
 8009266:	2800      	cmp	r0, #0
 8009268:	d0d5      	beq.n	8009216 <__swbuf_r+0x20>
 800926a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800926e:	e7f4      	b.n	800925a <__swbuf_r+0x64>

08009270 <__swsetup_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	4b2a      	ldr	r3, [pc, #168]	; (800931c <__swsetup_r+0xac>)
 8009274:	4605      	mov	r5, r0
 8009276:	6818      	ldr	r0, [r3, #0]
 8009278:	460c      	mov	r4, r1
 800927a:	b118      	cbz	r0, 8009284 <__swsetup_r+0x14>
 800927c:	6a03      	ldr	r3, [r0, #32]
 800927e:	b90b      	cbnz	r3, 8009284 <__swsetup_r+0x14>
 8009280:	f7ff feb2 	bl	8008fe8 <__sinit>
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800928a:	0718      	lsls	r0, r3, #28
 800928c:	d422      	bmi.n	80092d4 <__swsetup_r+0x64>
 800928e:	06d9      	lsls	r1, r3, #27
 8009290:	d407      	bmi.n	80092a2 <__swsetup_r+0x32>
 8009292:	2309      	movs	r3, #9
 8009294:	602b      	str	r3, [r5, #0]
 8009296:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800929a:	81a3      	strh	r3, [r4, #12]
 800929c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092a0:	e034      	b.n	800930c <__swsetup_r+0x9c>
 80092a2:	0758      	lsls	r0, r3, #29
 80092a4:	d512      	bpl.n	80092cc <__swsetup_r+0x5c>
 80092a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092a8:	b141      	cbz	r1, 80092bc <__swsetup_r+0x4c>
 80092aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092ae:	4299      	cmp	r1, r3
 80092b0:	d002      	beq.n	80092b8 <__swsetup_r+0x48>
 80092b2:	4628      	mov	r0, r5
 80092b4:	f000 ffaa 	bl	800a20c <_free_r>
 80092b8:	2300      	movs	r3, #0
 80092ba:	6363      	str	r3, [r4, #52]	; 0x34
 80092bc:	89a3      	ldrh	r3, [r4, #12]
 80092be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092c2:	81a3      	strh	r3, [r4, #12]
 80092c4:	2300      	movs	r3, #0
 80092c6:	6063      	str	r3, [r4, #4]
 80092c8:	6923      	ldr	r3, [r4, #16]
 80092ca:	6023      	str	r3, [r4, #0]
 80092cc:	89a3      	ldrh	r3, [r4, #12]
 80092ce:	f043 0308 	orr.w	r3, r3, #8
 80092d2:	81a3      	strh	r3, [r4, #12]
 80092d4:	6923      	ldr	r3, [r4, #16]
 80092d6:	b94b      	cbnz	r3, 80092ec <__swsetup_r+0x7c>
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092e2:	d003      	beq.n	80092ec <__swsetup_r+0x7c>
 80092e4:	4621      	mov	r1, r4
 80092e6:	4628      	mov	r0, r5
 80092e8:	f002 fe90 	bl	800c00c <__smakebuf_r>
 80092ec:	89a0      	ldrh	r0, [r4, #12]
 80092ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092f2:	f010 0301 	ands.w	r3, r0, #1
 80092f6:	d00a      	beq.n	800930e <__swsetup_r+0x9e>
 80092f8:	2300      	movs	r3, #0
 80092fa:	60a3      	str	r3, [r4, #8]
 80092fc:	6963      	ldr	r3, [r4, #20]
 80092fe:	425b      	negs	r3, r3
 8009300:	61a3      	str	r3, [r4, #24]
 8009302:	6923      	ldr	r3, [r4, #16]
 8009304:	b943      	cbnz	r3, 8009318 <__swsetup_r+0xa8>
 8009306:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800930a:	d1c4      	bne.n	8009296 <__swsetup_r+0x26>
 800930c:	bd38      	pop	{r3, r4, r5, pc}
 800930e:	0781      	lsls	r1, r0, #30
 8009310:	bf58      	it	pl
 8009312:	6963      	ldrpl	r3, [r4, #20]
 8009314:	60a3      	str	r3, [r4, #8]
 8009316:	e7f4      	b.n	8009302 <__swsetup_r+0x92>
 8009318:	2000      	movs	r0, #0
 800931a:	e7f7      	b.n	800930c <__swsetup_r+0x9c>
 800931c:	20000068 	.word	0x20000068

08009320 <memset>:
 8009320:	4402      	add	r2, r0
 8009322:	4603      	mov	r3, r0
 8009324:	4293      	cmp	r3, r2
 8009326:	d100      	bne.n	800932a <memset+0xa>
 8009328:	4770      	bx	lr
 800932a:	f803 1b01 	strb.w	r1, [r3], #1
 800932e:	e7f9      	b.n	8009324 <memset+0x4>

08009330 <_localeconv_r>:
 8009330:	4800      	ldr	r0, [pc, #0]	; (8009334 <_localeconv_r+0x4>)
 8009332:	4770      	bx	lr
 8009334:	2000015c 	.word	0x2000015c

08009338 <_close_r>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4d06      	ldr	r5, [pc, #24]	; (8009354 <_close_r+0x1c>)
 800933c:	2300      	movs	r3, #0
 800933e:	4604      	mov	r4, r0
 8009340:	4608      	mov	r0, r1
 8009342:	602b      	str	r3, [r5, #0]
 8009344:	f7f8 fbd7 	bl	8001af6 <_close>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d102      	bne.n	8009352 <_close_r+0x1a>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	b103      	cbz	r3, 8009352 <_close_r+0x1a>
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	20001e48 	.word	0x20001e48

08009358 <_reclaim_reent>:
 8009358:	4b29      	ldr	r3, [pc, #164]	; (8009400 <_reclaim_reent+0xa8>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4283      	cmp	r3, r0
 800935e:	b570      	push	{r4, r5, r6, lr}
 8009360:	4604      	mov	r4, r0
 8009362:	d04b      	beq.n	80093fc <_reclaim_reent+0xa4>
 8009364:	69c3      	ldr	r3, [r0, #28]
 8009366:	b143      	cbz	r3, 800937a <_reclaim_reent+0x22>
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d144      	bne.n	80093f8 <_reclaim_reent+0xa0>
 800936e:	69e3      	ldr	r3, [r4, #28]
 8009370:	6819      	ldr	r1, [r3, #0]
 8009372:	b111      	cbz	r1, 800937a <_reclaim_reent+0x22>
 8009374:	4620      	mov	r0, r4
 8009376:	f000 ff49 	bl	800a20c <_free_r>
 800937a:	6961      	ldr	r1, [r4, #20]
 800937c:	b111      	cbz	r1, 8009384 <_reclaim_reent+0x2c>
 800937e:	4620      	mov	r0, r4
 8009380:	f000 ff44 	bl	800a20c <_free_r>
 8009384:	69e1      	ldr	r1, [r4, #28]
 8009386:	b111      	cbz	r1, 800938e <_reclaim_reent+0x36>
 8009388:	4620      	mov	r0, r4
 800938a:	f000 ff3f 	bl	800a20c <_free_r>
 800938e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009390:	b111      	cbz	r1, 8009398 <_reclaim_reent+0x40>
 8009392:	4620      	mov	r0, r4
 8009394:	f000 ff3a 	bl	800a20c <_free_r>
 8009398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800939a:	b111      	cbz	r1, 80093a2 <_reclaim_reent+0x4a>
 800939c:	4620      	mov	r0, r4
 800939e:	f000 ff35 	bl	800a20c <_free_r>
 80093a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80093a4:	b111      	cbz	r1, 80093ac <_reclaim_reent+0x54>
 80093a6:	4620      	mov	r0, r4
 80093a8:	f000 ff30 	bl	800a20c <_free_r>
 80093ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80093ae:	b111      	cbz	r1, 80093b6 <_reclaim_reent+0x5e>
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 ff2b 	bl	800a20c <_free_r>
 80093b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80093b8:	b111      	cbz	r1, 80093c0 <_reclaim_reent+0x68>
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 ff26 	bl	800a20c <_free_r>
 80093c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80093c2:	b111      	cbz	r1, 80093ca <_reclaim_reent+0x72>
 80093c4:	4620      	mov	r0, r4
 80093c6:	f000 ff21 	bl	800a20c <_free_r>
 80093ca:	6a23      	ldr	r3, [r4, #32]
 80093cc:	b1b3      	cbz	r3, 80093fc <_reclaim_reent+0xa4>
 80093ce:	4620      	mov	r0, r4
 80093d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80093d4:	4718      	bx	r3
 80093d6:	5949      	ldr	r1, [r1, r5]
 80093d8:	b941      	cbnz	r1, 80093ec <_reclaim_reent+0x94>
 80093da:	3504      	adds	r5, #4
 80093dc:	69e3      	ldr	r3, [r4, #28]
 80093de:	2d80      	cmp	r5, #128	; 0x80
 80093e0:	68d9      	ldr	r1, [r3, #12]
 80093e2:	d1f8      	bne.n	80093d6 <_reclaim_reent+0x7e>
 80093e4:	4620      	mov	r0, r4
 80093e6:	f000 ff11 	bl	800a20c <_free_r>
 80093ea:	e7c0      	b.n	800936e <_reclaim_reent+0x16>
 80093ec:	680e      	ldr	r6, [r1, #0]
 80093ee:	4620      	mov	r0, r4
 80093f0:	f000 ff0c 	bl	800a20c <_free_r>
 80093f4:	4631      	mov	r1, r6
 80093f6:	e7ef      	b.n	80093d8 <_reclaim_reent+0x80>
 80093f8:	2500      	movs	r5, #0
 80093fa:	e7ef      	b.n	80093dc <_reclaim_reent+0x84>
 80093fc:	bd70      	pop	{r4, r5, r6, pc}
 80093fe:	bf00      	nop
 8009400:	20000068 	.word	0x20000068

08009404 <_lseek_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4d07      	ldr	r5, [pc, #28]	; (8009424 <_lseek_r+0x20>)
 8009408:	4604      	mov	r4, r0
 800940a:	4608      	mov	r0, r1
 800940c:	4611      	mov	r1, r2
 800940e:	2200      	movs	r2, #0
 8009410:	602a      	str	r2, [r5, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	f7f8 fb96 	bl	8001b44 <_lseek>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_lseek_r+0x1e>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_lseek_r+0x1e>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	20001e48 	.word	0x20001e48

08009428 <_read_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	4d07      	ldr	r5, [pc, #28]	; (8009448 <_read_r+0x20>)
 800942c:	4604      	mov	r4, r0
 800942e:	4608      	mov	r0, r1
 8009430:	4611      	mov	r1, r2
 8009432:	2200      	movs	r2, #0
 8009434:	602a      	str	r2, [r5, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	f7f8 fb24 	bl	8001a84 <_read>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d102      	bne.n	8009446 <_read_r+0x1e>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	b103      	cbz	r3, 8009446 <_read_r+0x1e>
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	20001e48 	.word	0x20001e48

0800944c <_sbrk_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4d06      	ldr	r5, [pc, #24]	; (8009468 <_sbrk_r+0x1c>)
 8009450:	2300      	movs	r3, #0
 8009452:	4604      	mov	r4, r0
 8009454:	4608      	mov	r0, r1
 8009456:	602b      	str	r3, [r5, #0]
 8009458:	f7f8 fb82 	bl	8001b60 <_sbrk>
 800945c:	1c43      	adds	r3, r0, #1
 800945e:	d102      	bne.n	8009466 <_sbrk_r+0x1a>
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	b103      	cbz	r3, 8009466 <_sbrk_r+0x1a>
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	20001e48 	.word	0x20001e48

0800946c <_write_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4d07      	ldr	r5, [pc, #28]	; (800948c <_write_r+0x20>)
 8009470:	4604      	mov	r4, r0
 8009472:	4608      	mov	r0, r1
 8009474:	4611      	mov	r1, r2
 8009476:	2200      	movs	r2, #0
 8009478:	602a      	str	r2, [r5, #0]
 800947a:	461a      	mov	r2, r3
 800947c:	f7f8 fb1f 	bl	8001abe <_write>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d102      	bne.n	800948a <_write_r+0x1e>
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	b103      	cbz	r3, 800948a <_write_r+0x1e>
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	20001e48 	.word	0x20001e48

08009490 <__errno>:
 8009490:	4b01      	ldr	r3, [pc, #4]	; (8009498 <__errno+0x8>)
 8009492:	6818      	ldr	r0, [r3, #0]
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	20000068 	.word	0x20000068

0800949c <__libc_init_array>:
 800949c:	b570      	push	{r4, r5, r6, lr}
 800949e:	4d0d      	ldr	r5, [pc, #52]	; (80094d4 <__libc_init_array+0x38>)
 80094a0:	4c0d      	ldr	r4, [pc, #52]	; (80094d8 <__libc_init_array+0x3c>)
 80094a2:	1b64      	subs	r4, r4, r5
 80094a4:	10a4      	asrs	r4, r4, #2
 80094a6:	2600      	movs	r6, #0
 80094a8:	42a6      	cmp	r6, r4
 80094aa:	d109      	bne.n	80094c0 <__libc_init_array+0x24>
 80094ac:	4d0b      	ldr	r5, [pc, #44]	; (80094dc <__libc_init_array+0x40>)
 80094ae:	4c0c      	ldr	r4, [pc, #48]	; (80094e0 <__libc_init_array+0x44>)
 80094b0:	f003 fa7e 	bl	800c9b0 <_init>
 80094b4:	1b64      	subs	r4, r4, r5
 80094b6:	10a4      	asrs	r4, r4, #2
 80094b8:	2600      	movs	r6, #0
 80094ba:	42a6      	cmp	r6, r4
 80094bc:	d105      	bne.n	80094ca <__libc_init_array+0x2e>
 80094be:	bd70      	pop	{r4, r5, r6, pc}
 80094c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c4:	4798      	blx	r3
 80094c6:	3601      	adds	r6, #1
 80094c8:	e7ee      	b.n	80094a8 <__libc_init_array+0xc>
 80094ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ce:	4798      	blx	r3
 80094d0:	3601      	adds	r6, #1
 80094d2:	e7f2      	b.n	80094ba <__libc_init_array+0x1e>
 80094d4:	0800cff0 	.word	0x0800cff0
 80094d8:	0800cff0 	.word	0x0800cff0
 80094dc:	0800cff0 	.word	0x0800cff0
 80094e0:	0800cff4 	.word	0x0800cff4

080094e4 <__retarget_lock_init_recursive>:
 80094e4:	4770      	bx	lr

080094e6 <__retarget_lock_acquire_recursive>:
 80094e6:	4770      	bx	lr

080094e8 <__retarget_lock_release_recursive>:
 80094e8:	4770      	bx	lr

080094ea <memcpy>:
 80094ea:	440a      	add	r2, r1
 80094ec:	4291      	cmp	r1, r2
 80094ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80094f2:	d100      	bne.n	80094f6 <memcpy+0xc>
 80094f4:	4770      	bx	lr
 80094f6:	b510      	push	{r4, lr}
 80094f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009500:	4291      	cmp	r1, r2
 8009502:	d1f9      	bne.n	80094f8 <memcpy+0xe>
 8009504:	bd10      	pop	{r4, pc}
	...

08009508 <nanf>:
 8009508:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009510 <nanf+0x8>
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	7fc00000 	.word	0x7fc00000

08009514 <quorem>:
 8009514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009518:	6903      	ldr	r3, [r0, #16]
 800951a:	690c      	ldr	r4, [r1, #16]
 800951c:	42a3      	cmp	r3, r4
 800951e:	4607      	mov	r7, r0
 8009520:	db7e      	blt.n	8009620 <quorem+0x10c>
 8009522:	3c01      	subs	r4, #1
 8009524:	f101 0814 	add.w	r8, r1, #20
 8009528:	f100 0514 	add.w	r5, r0, #20
 800952c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009530:	9301      	str	r3, [sp, #4]
 8009532:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009536:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800953a:	3301      	adds	r3, #1
 800953c:	429a      	cmp	r2, r3
 800953e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009542:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009546:	fbb2 f6f3 	udiv	r6, r2, r3
 800954a:	d331      	bcc.n	80095b0 <quorem+0x9c>
 800954c:	f04f 0e00 	mov.w	lr, #0
 8009550:	4640      	mov	r0, r8
 8009552:	46ac      	mov	ip, r5
 8009554:	46f2      	mov	sl, lr
 8009556:	f850 2b04 	ldr.w	r2, [r0], #4
 800955a:	b293      	uxth	r3, r2
 800955c:	fb06 e303 	mla	r3, r6, r3, lr
 8009560:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009564:	0c1a      	lsrs	r2, r3, #16
 8009566:	b29b      	uxth	r3, r3
 8009568:	ebaa 0303 	sub.w	r3, sl, r3
 800956c:	f8dc a000 	ldr.w	sl, [ip]
 8009570:	fa13 f38a 	uxtah	r3, r3, sl
 8009574:	fb06 220e 	mla	r2, r6, lr, r2
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	9b00      	ldr	r3, [sp, #0]
 800957c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009580:	b292      	uxth	r2, r2
 8009582:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009586:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800958a:	f8bd 3000 	ldrh.w	r3, [sp]
 800958e:	4581      	cmp	r9, r0
 8009590:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009594:	f84c 3b04 	str.w	r3, [ip], #4
 8009598:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800959c:	d2db      	bcs.n	8009556 <quorem+0x42>
 800959e:	f855 300b 	ldr.w	r3, [r5, fp]
 80095a2:	b92b      	cbnz	r3, 80095b0 <quorem+0x9c>
 80095a4:	9b01      	ldr	r3, [sp, #4]
 80095a6:	3b04      	subs	r3, #4
 80095a8:	429d      	cmp	r5, r3
 80095aa:	461a      	mov	r2, r3
 80095ac:	d32c      	bcc.n	8009608 <quorem+0xf4>
 80095ae:	613c      	str	r4, [r7, #16]
 80095b0:	4638      	mov	r0, r7
 80095b2:	f001 f93d 	bl	800a830 <__mcmp>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	db22      	blt.n	8009600 <quorem+0xec>
 80095ba:	3601      	adds	r6, #1
 80095bc:	4629      	mov	r1, r5
 80095be:	2000      	movs	r0, #0
 80095c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80095c4:	f8d1 c000 	ldr.w	ip, [r1]
 80095c8:	b293      	uxth	r3, r2
 80095ca:	1ac3      	subs	r3, r0, r3
 80095cc:	0c12      	lsrs	r2, r2, #16
 80095ce:	fa13 f38c 	uxtah	r3, r3, ip
 80095d2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80095d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095da:	b29b      	uxth	r3, r3
 80095dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095e0:	45c1      	cmp	r9, r8
 80095e2:	f841 3b04 	str.w	r3, [r1], #4
 80095e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80095ea:	d2e9      	bcs.n	80095c0 <quorem+0xac>
 80095ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095f4:	b922      	cbnz	r2, 8009600 <quorem+0xec>
 80095f6:	3b04      	subs	r3, #4
 80095f8:	429d      	cmp	r5, r3
 80095fa:	461a      	mov	r2, r3
 80095fc:	d30a      	bcc.n	8009614 <quorem+0x100>
 80095fe:	613c      	str	r4, [r7, #16]
 8009600:	4630      	mov	r0, r6
 8009602:	b003      	add	sp, #12
 8009604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009608:	6812      	ldr	r2, [r2, #0]
 800960a:	3b04      	subs	r3, #4
 800960c:	2a00      	cmp	r2, #0
 800960e:	d1ce      	bne.n	80095ae <quorem+0x9a>
 8009610:	3c01      	subs	r4, #1
 8009612:	e7c9      	b.n	80095a8 <quorem+0x94>
 8009614:	6812      	ldr	r2, [r2, #0]
 8009616:	3b04      	subs	r3, #4
 8009618:	2a00      	cmp	r2, #0
 800961a:	d1f0      	bne.n	80095fe <quorem+0xea>
 800961c:	3c01      	subs	r4, #1
 800961e:	e7eb      	b.n	80095f8 <quorem+0xe4>
 8009620:	2000      	movs	r0, #0
 8009622:	e7ee      	b.n	8009602 <quorem+0xee>
 8009624:	0000      	movs	r0, r0
	...

08009628 <_dtoa_r>:
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	ed2d 8b04 	vpush	{d8-d9}
 8009630:	69c5      	ldr	r5, [r0, #28]
 8009632:	b093      	sub	sp, #76	; 0x4c
 8009634:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009638:	ec57 6b10 	vmov	r6, r7, d0
 800963c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009640:	9107      	str	r1, [sp, #28]
 8009642:	4604      	mov	r4, r0
 8009644:	920a      	str	r2, [sp, #40]	; 0x28
 8009646:	930d      	str	r3, [sp, #52]	; 0x34
 8009648:	b975      	cbnz	r5, 8009668 <_dtoa_r+0x40>
 800964a:	2010      	movs	r0, #16
 800964c:	f7fe fd16 	bl	800807c <malloc>
 8009650:	4602      	mov	r2, r0
 8009652:	61e0      	str	r0, [r4, #28]
 8009654:	b920      	cbnz	r0, 8009660 <_dtoa_r+0x38>
 8009656:	4bae      	ldr	r3, [pc, #696]	; (8009910 <_dtoa_r+0x2e8>)
 8009658:	21ef      	movs	r1, #239	; 0xef
 800965a:	48ae      	ldr	r0, [pc, #696]	; (8009914 <_dtoa_r+0x2ec>)
 800965c:	f002 fd68 	bl	800c130 <__assert_func>
 8009660:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009664:	6005      	str	r5, [r0, #0]
 8009666:	60c5      	str	r5, [r0, #12]
 8009668:	69e3      	ldr	r3, [r4, #28]
 800966a:	6819      	ldr	r1, [r3, #0]
 800966c:	b151      	cbz	r1, 8009684 <_dtoa_r+0x5c>
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	604a      	str	r2, [r1, #4]
 8009672:	2301      	movs	r3, #1
 8009674:	4093      	lsls	r3, r2
 8009676:	608b      	str	r3, [r1, #8]
 8009678:	4620      	mov	r0, r4
 800967a:	f000 fe53 	bl	800a324 <_Bfree>
 800967e:	69e3      	ldr	r3, [r4, #28]
 8009680:	2200      	movs	r2, #0
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	1e3b      	subs	r3, r7, #0
 8009686:	bfbb      	ittet	lt
 8009688:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800968c:	9303      	strlt	r3, [sp, #12]
 800968e:	2300      	movge	r3, #0
 8009690:	2201      	movlt	r2, #1
 8009692:	bfac      	ite	ge
 8009694:	f8c8 3000 	strge.w	r3, [r8]
 8009698:	f8c8 2000 	strlt.w	r2, [r8]
 800969c:	4b9e      	ldr	r3, [pc, #632]	; (8009918 <_dtoa_r+0x2f0>)
 800969e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80096a2:	ea33 0308 	bics.w	r3, r3, r8
 80096a6:	d11b      	bne.n	80096e0 <_dtoa_r+0xb8>
 80096a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80096b4:	4333      	orrs	r3, r6
 80096b6:	f000 8593 	beq.w	800a1e0 <_dtoa_r+0xbb8>
 80096ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096bc:	b963      	cbnz	r3, 80096d8 <_dtoa_r+0xb0>
 80096be:	4b97      	ldr	r3, [pc, #604]	; (800991c <_dtoa_r+0x2f4>)
 80096c0:	e027      	b.n	8009712 <_dtoa_r+0xea>
 80096c2:	4b97      	ldr	r3, [pc, #604]	; (8009920 <_dtoa_r+0x2f8>)
 80096c4:	9300      	str	r3, [sp, #0]
 80096c6:	3308      	adds	r3, #8
 80096c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096ca:	6013      	str	r3, [r2, #0]
 80096cc:	9800      	ldr	r0, [sp, #0]
 80096ce:	b013      	add	sp, #76	; 0x4c
 80096d0:	ecbd 8b04 	vpop	{d8-d9}
 80096d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d8:	4b90      	ldr	r3, [pc, #576]	; (800991c <_dtoa_r+0x2f4>)
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	3303      	adds	r3, #3
 80096de:	e7f3      	b.n	80096c8 <_dtoa_r+0xa0>
 80096e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096e4:	2200      	movs	r2, #0
 80096e6:	ec51 0b17 	vmov	r0, r1, d7
 80096ea:	eeb0 8a47 	vmov.f32	s16, s14
 80096ee:	eef0 8a67 	vmov.f32	s17, s15
 80096f2:	2300      	movs	r3, #0
 80096f4:	f7f7 f9e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80096f8:	4681      	mov	r9, r0
 80096fa:	b160      	cbz	r0, 8009716 <_dtoa_r+0xee>
 80096fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096fe:	2301      	movs	r3, #1
 8009700:	6013      	str	r3, [r2, #0]
 8009702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009704:	2b00      	cmp	r3, #0
 8009706:	f000 8568 	beq.w	800a1da <_dtoa_r+0xbb2>
 800970a:	4b86      	ldr	r3, [pc, #536]	; (8009924 <_dtoa_r+0x2fc>)
 800970c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800970e:	6013      	str	r3, [r2, #0]
 8009710:	3b01      	subs	r3, #1
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	e7da      	b.n	80096cc <_dtoa_r+0xa4>
 8009716:	aa10      	add	r2, sp, #64	; 0x40
 8009718:	a911      	add	r1, sp, #68	; 0x44
 800971a:	4620      	mov	r0, r4
 800971c:	eeb0 0a48 	vmov.f32	s0, s16
 8009720:	eef0 0a68 	vmov.f32	s1, s17
 8009724:	f001 f99a 	bl	800aa5c <__d2b>
 8009728:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800972c:	4682      	mov	sl, r0
 800972e:	2d00      	cmp	r5, #0
 8009730:	d07f      	beq.n	8009832 <_dtoa_r+0x20a>
 8009732:	ee18 3a90 	vmov	r3, s17
 8009736:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800973a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800973e:	ec51 0b18 	vmov	r0, r1, d8
 8009742:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009746:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800974a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800974e:	4619      	mov	r1, r3
 8009750:	2200      	movs	r2, #0
 8009752:	4b75      	ldr	r3, [pc, #468]	; (8009928 <_dtoa_r+0x300>)
 8009754:	f7f6 fd98 	bl	8000288 <__aeabi_dsub>
 8009758:	a367      	add	r3, pc, #412	; (adr r3, 80098f8 <_dtoa_r+0x2d0>)
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	f7f6 ff4b 	bl	80005f8 <__aeabi_dmul>
 8009762:	a367      	add	r3, pc, #412	; (adr r3, 8009900 <_dtoa_r+0x2d8>)
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	f7f6 fd90 	bl	800028c <__adddf3>
 800976c:	4606      	mov	r6, r0
 800976e:	4628      	mov	r0, r5
 8009770:	460f      	mov	r7, r1
 8009772:	f7f6 fed7 	bl	8000524 <__aeabi_i2d>
 8009776:	a364      	add	r3, pc, #400	; (adr r3, 8009908 <_dtoa_r+0x2e0>)
 8009778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977c:	f7f6 ff3c 	bl	80005f8 <__aeabi_dmul>
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	4630      	mov	r0, r6
 8009786:	4639      	mov	r1, r7
 8009788:	f7f6 fd80 	bl	800028c <__adddf3>
 800978c:	4606      	mov	r6, r0
 800978e:	460f      	mov	r7, r1
 8009790:	f7f7 f9e2 	bl	8000b58 <__aeabi_d2iz>
 8009794:	2200      	movs	r2, #0
 8009796:	4683      	mov	fp, r0
 8009798:	2300      	movs	r3, #0
 800979a:	4630      	mov	r0, r6
 800979c:	4639      	mov	r1, r7
 800979e:	f7f7 f99d 	bl	8000adc <__aeabi_dcmplt>
 80097a2:	b148      	cbz	r0, 80097b8 <_dtoa_r+0x190>
 80097a4:	4658      	mov	r0, fp
 80097a6:	f7f6 febd 	bl	8000524 <__aeabi_i2d>
 80097aa:	4632      	mov	r2, r6
 80097ac:	463b      	mov	r3, r7
 80097ae:	f7f7 f98b 	bl	8000ac8 <__aeabi_dcmpeq>
 80097b2:	b908      	cbnz	r0, 80097b8 <_dtoa_r+0x190>
 80097b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80097b8:	f1bb 0f16 	cmp.w	fp, #22
 80097bc:	d857      	bhi.n	800986e <_dtoa_r+0x246>
 80097be:	4b5b      	ldr	r3, [pc, #364]	; (800992c <_dtoa_r+0x304>)
 80097c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80097c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c8:	ec51 0b18 	vmov	r0, r1, d8
 80097cc:	f7f7 f986 	bl	8000adc <__aeabi_dcmplt>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d04e      	beq.n	8009872 <_dtoa_r+0x24a>
 80097d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80097d8:	2300      	movs	r3, #0
 80097da:	930c      	str	r3, [sp, #48]	; 0x30
 80097dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097de:	1b5b      	subs	r3, r3, r5
 80097e0:	1e5a      	subs	r2, r3, #1
 80097e2:	bf45      	ittet	mi
 80097e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80097e8:	9305      	strmi	r3, [sp, #20]
 80097ea:	2300      	movpl	r3, #0
 80097ec:	2300      	movmi	r3, #0
 80097ee:	9206      	str	r2, [sp, #24]
 80097f0:	bf54      	ite	pl
 80097f2:	9305      	strpl	r3, [sp, #20]
 80097f4:	9306      	strmi	r3, [sp, #24]
 80097f6:	f1bb 0f00 	cmp.w	fp, #0
 80097fa:	db3c      	blt.n	8009876 <_dtoa_r+0x24e>
 80097fc:	9b06      	ldr	r3, [sp, #24]
 80097fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009802:	445b      	add	r3, fp
 8009804:	9306      	str	r3, [sp, #24]
 8009806:	2300      	movs	r3, #0
 8009808:	9308      	str	r3, [sp, #32]
 800980a:	9b07      	ldr	r3, [sp, #28]
 800980c:	2b09      	cmp	r3, #9
 800980e:	d868      	bhi.n	80098e2 <_dtoa_r+0x2ba>
 8009810:	2b05      	cmp	r3, #5
 8009812:	bfc4      	itt	gt
 8009814:	3b04      	subgt	r3, #4
 8009816:	9307      	strgt	r3, [sp, #28]
 8009818:	9b07      	ldr	r3, [sp, #28]
 800981a:	f1a3 0302 	sub.w	r3, r3, #2
 800981e:	bfcc      	ite	gt
 8009820:	2500      	movgt	r5, #0
 8009822:	2501      	movle	r5, #1
 8009824:	2b03      	cmp	r3, #3
 8009826:	f200 8085 	bhi.w	8009934 <_dtoa_r+0x30c>
 800982a:	e8df f003 	tbb	[pc, r3]
 800982e:	3b2e      	.short	0x3b2e
 8009830:	5839      	.short	0x5839
 8009832:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009836:	441d      	add	r5, r3
 8009838:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800983c:	2b20      	cmp	r3, #32
 800983e:	bfc1      	itttt	gt
 8009840:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009844:	fa08 f803 	lslgt.w	r8, r8, r3
 8009848:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800984c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009850:	bfd6      	itet	le
 8009852:	f1c3 0320 	rsble	r3, r3, #32
 8009856:	ea48 0003 	orrgt.w	r0, r8, r3
 800985a:	fa06 f003 	lslle.w	r0, r6, r3
 800985e:	f7f6 fe51 	bl	8000504 <__aeabi_ui2d>
 8009862:	2201      	movs	r2, #1
 8009864:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009868:	3d01      	subs	r5, #1
 800986a:	920e      	str	r2, [sp, #56]	; 0x38
 800986c:	e76f      	b.n	800974e <_dtoa_r+0x126>
 800986e:	2301      	movs	r3, #1
 8009870:	e7b3      	b.n	80097da <_dtoa_r+0x1b2>
 8009872:	900c      	str	r0, [sp, #48]	; 0x30
 8009874:	e7b2      	b.n	80097dc <_dtoa_r+0x1b4>
 8009876:	9b05      	ldr	r3, [sp, #20]
 8009878:	eba3 030b 	sub.w	r3, r3, fp
 800987c:	9305      	str	r3, [sp, #20]
 800987e:	f1cb 0300 	rsb	r3, fp, #0
 8009882:	9308      	str	r3, [sp, #32]
 8009884:	2300      	movs	r3, #0
 8009886:	930b      	str	r3, [sp, #44]	; 0x2c
 8009888:	e7bf      	b.n	800980a <_dtoa_r+0x1e2>
 800988a:	2300      	movs	r3, #0
 800988c:	9309      	str	r3, [sp, #36]	; 0x24
 800988e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009890:	2b00      	cmp	r3, #0
 8009892:	dc52      	bgt.n	800993a <_dtoa_r+0x312>
 8009894:	2301      	movs	r3, #1
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	9304      	str	r3, [sp, #16]
 800989a:	461a      	mov	r2, r3
 800989c:	920a      	str	r2, [sp, #40]	; 0x28
 800989e:	e00b      	b.n	80098b8 <_dtoa_r+0x290>
 80098a0:	2301      	movs	r3, #1
 80098a2:	e7f3      	b.n	800988c <_dtoa_r+0x264>
 80098a4:	2300      	movs	r3, #0
 80098a6:	9309      	str	r3, [sp, #36]	; 0x24
 80098a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098aa:	445b      	add	r3, fp
 80098ac:	9301      	str	r3, [sp, #4]
 80098ae:	3301      	adds	r3, #1
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	9304      	str	r3, [sp, #16]
 80098b4:	bfb8      	it	lt
 80098b6:	2301      	movlt	r3, #1
 80098b8:	69e0      	ldr	r0, [r4, #28]
 80098ba:	2100      	movs	r1, #0
 80098bc:	2204      	movs	r2, #4
 80098be:	f102 0614 	add.w	r6, r2, #20
 80098c2:	429e      	cmp	r6, r3
 80098c4:	d93d      	bls.n	8009942 <_dtoa_r+0x31a>
 80098c6:	6041      	str	r1, [r0, #4]
 80098c8:	4620      	mov	r0, r4
 80098ca:	f000 fceb 	bl	800a2a4 <_Balloc>
 80098ce:	9000      	str	r0, [sp, #0]
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d139      	bne.n	8009948 <_dtoa_r+0x320>
 80098d4:	4b16      	ldr	r3, [pc, #88]	; (8009930 <_dtoa_r+0x308>)
 80098d6:	4602      	mov	r2, r0
 80098d8:	f240 11af 	movw	r1, #431	; 0x1af
 80098dc:	e6bd      	b.n	800965a <_dtoa_r+0x32>
 80098de:	2301      	movs	r3, #1
 80098e0:	e7e1      	b.n	80098a6 <_dtoa_r+0x27e>
 80098e2:	2501      	movs	r5, #1
 80098e4:	2300      	movs	r3, #0
 80098e6:	9307      	str	r3, [sp, #28]
 80098e8:	9509      	str	r5, [sp, #36]	; 0x24
 80098ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	9304      	str	r3, [sp, #16]
 80098f2:	2200      	movs	r2, #0
 80098f4:	2312      	movs	r3, #18
 80098f6:	e7d1      	b.n	800989c <_dtoa_r+0x274>
 80098f8:	636f4361 	.word	0x636f4361
 80098fc:	3fd287a7 	.word	0x3fd287a7
 8009900:	8b60c8b3 	.word	0x8b60c8b3
 8009904:	3fc68a28 	.word	0x3fc68a28
 8009908:	509f79fb 	.word	0x509f79fb
 800990c:	3fd34413 	.word	0x3fd34413
 8009910:	0800cc02 	.word	0x0800cc02
 8009914:	0800cc19 	.word	0x0800cc19
 8009918:	7ff00000 	.word	0x7ff00000
 800991c:	0800cbfe 	.word	0x0800cbfe
 8009920:	0800cbf5 	.word	0x0800cbf5
 8009924:	0800cbcd 	.word	0x0800cbcd
 8009928:	3ff80000 	.word	0x3ff80000
 800992c:	0800cd08 	.word	0x0800cd08
 8009930:	0800cc71 	.word	0x0800cc71
 8009934:	2301      	movs	r3, #1
 8009936:	9309      	str	r3, [sp, #36]	; 0x24
 8009938:	e7d7      	b.n	80098ea <_dtoa_r+0x2c2>
 800993a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800993c:	9301      	str	r3, [sp, #4]
 800993e:	9304      	str	r3, [sp, #16]
 8009940:	e7ba      	b.n	80098b8 <_dtoa_r+0x290>
 8009942:	3101      	adds	r1, #1
 8009944:	0052      	lsls	r2, r2, #1
 8009946:	e7ba      	b.n	80098be <_dtoa_r+0x296>
 8009948:	69e3      	ldr	r3, [r4, #28]
 800994a:	9a00      	ldr	r2, [sp, #0]
 800994c:	601a      	str	r2, [r3, #0]
 800994e:	9b04      	ldr	r3, [sp, #16]
 8009950:	2b0e      	cmp	r3, #14
 8009952:	f200 80a8 	bhi.w	8009aa6 <_dtoa_r+0x47e>
 8009956:	2d00      	cmp	r5, #0
 8009958:	f000 80a5 	beq.w	8009aa6 <_dtoa_r+0x47e>
 800995c:	f1bb 0f00 	cmp.w	fp, #0
 8009960:	dd38      	ble.n	80099d4 <_dtoa_r+0x3ac>
 8009962:	4bc0      	ldr	r3, [pc, #768]	; (8009c64 <_dtoa_r+0x63c>)
 8009964:	f00b 020f 	and.w	r2, fp, #15
 8009968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800996c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009970:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009974:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009978:	d019      	beq.n	80099ae <_dtoa_r+0x386>
 800997a:	4bbb      	ldr	r3, [pc, #748]	; (8009c68 <_dtoa_r+0x640>)
 800997c:	ec51 0b18 	vmov	r0, r1, d8
 8009980:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009984:	f7f6 ff62 	bl	800084c <__aeabi_ddiv>
 8009988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800998c:	f008 080f 	and.w	r8, r8, #15
 8009990:	2503      	movs	r5, #3
 8009992:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009c68 <_dtoa_r+0x640>
 8009996:	f1b8 0f00 	cmp.w	r8, #0
 800999a:	d10a      	bne.n	80099b2 <_dtoa_r+0x38a>
 800999c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099a0:	4632      	mov	r2, r6
 80099a2:	463b      	mov	r3, r7
 80099a4:	f7f6 ff52 	bl	800084c <__aeabi_ddiv>
 80099a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099ac:	e02b      	b.n	8009a06 <_dtoa_r+0x3de>
 80099ae:	2502      	movs	r5, #2
 80099b0:	e7ef      	b.n	8009992 <_dtoa_r+0x36a>
 80099b2:	f018 0f01 	tst.w	r8, #1
 80099b6:	d008      	beq.n	80099ca <_dtoa_r+0x3a2>
 80099b8:	4630      	mov	r0, r6
 80099ba:	4639      	mov	r1, r7
 80099bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80099c0:	f7f6 fe1a 	bl	80005f8 <__aeabi_dmul>
 80099c4:	3501      	adds	r5, #1
 80099c6:	4606      	mov	r6, r0
 80099c8:	460f      	mov	r7, r1
 80099ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80099ce:	f109 0908 	add.w	r9, r9, #8
 80099d2:	e7e0      	b.n	8009996 <_dtoa_r+0x36e>
 80099d4:	f000 809f 	beq.w	8009b16 <_dtoa_r+0x4ee>
 80099d8:	f1cb 0600 	rsb	r6, fp, #0
 80099dc:	4ba1      	ldr	r3, [pc, #644]	; (8009c64 <_dtoa_r+0x63c>)
 80099de:	4fa2      	ldr	r7, [pc, #648]	; (8009c68 <_dtoa_r+0x640>)
 80099e0:	f006 020f 	and.w	r2, r6, #15
 80099e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	ec51 0b18 	vmov	r0, r1, d8
 80099f0:	f7f6 fe02 	bl	80005f8 <__aeabi_dmul>
 80099f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099f8:	1136      	asrs	r6, r6, #4
 80099fa:	2300      	movs	r3, #0
 80099fc:	2502      	movs	r5, #2
 80099fe:	2e00      	cmp	r6, #0
 8009a00:	d17e      	bne.n	8009b00 <_dtoa_r+0x4d8>
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1d0      	bne.n	80099a8 <_dtoa_r+0x380>
 8009a06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 8084 	beq.w	8009b1a <_dtoa_r+0x4f2>
 8009a12:	4b96      	ldr	r3, [pc, #600]	; (8009c6c <_dtoa_r+0x644>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	4640      	mov	r0, r8
 8009a18:	4649      	mov	r1, r9
 8009a1a:	f7f7 f85f 	bl	8000adc <__aeabi_dcmplt>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d07b      	beq.n	8009b1a <_dtoa_r+0x4f2>
 8009a22:	9b04      	ldr	r3, [sp, #16]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d078      	beq.n	8009b1a <_dtoa_r+0x4f2>
 8009a28:	9b01      	ldr	r3, [sp, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	dd39      	ble.n	8009aa2 <_dtoa_r+0x47a>
 8009a2e:	4b90      	ldr	r3, [pc, #576]	; (8009c70 <_dtoa_r+0x648>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	4640      	mov	r0, r8
 8009a34:	4649      	mov	r1, r9
 8009a36:	f7f6 fddf 	bl	80005f8 <__aeabi_dmul>
 8009a3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a3e:	9e01      	ldr	r6, [sp, #4]
 8009a40:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8009a44:	3501      	adds	r5, #1
 8009a46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	f7f6 fd6a 	bl	8000524 <__aeabi_i2d>
 8009a50:	4642      	mov	r2, r8
 8009a52:	464b      	mov	r3, r9
 8009a54:	f7f6 fdd0 	bl	80005f8 <__aeabi_dmul>
 8009a58:	4b86      	ldr	r3, [pc, #536]	; (8009c74 <_dtoa_r+0x64c>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f7f6 fc16 	bl	800028c <__adddf3>
 8009a60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a68:	9303      	str	r3, [sp, #12]
 8009a6a:	2e00      	cmp	r6, #0
 8009a6c:	d158      	bne.n	8009b20 <_dtoa_r+0x4f8>
 8009a6e:	4b82      	ldr	r3, [pc, #520]	; (8009c78 <_dtoa_r+0x650>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	4640      	mov	r0, r8
 8009a74:	4649      	mov	r1, r9
 8009a76:	f7f6 fc07 	bl	8000288 <__aeabi_dsub>
 8009a7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a7e:	4680      	mov	r8, r0
 8009a80:	4689      	mov	r9, r1
 8009a82:	f7f7 f849 	bl	8000b18 <__aeabi_dcmpgt>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	f040 8296 	bne.w	8009fb8 <_dtoa_r+0x990>
 8009a8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009a90:	4640      	mov	r0, r8
 8009a92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a96:	4649      	mov	r1, r9
 8009a98:	f7f7 f820 	bl	8000adc <__aeabi_dcmplt>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	f040 8289 	bne.w	8009fb4 <_dtoa_r+0x98c>
 8009aa2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f2c0 814e 	blt.w	8009d4a <_dtoa_r+0x722>
 8009aae:	f1bb 0f0e 	cmp.w	fp, #14
 8009ab2:	f300 814a 	bgt.w	8009d4a <_dtoa_r+0x722>
 8009ab6:	4b6b      	ldr	r3, [pc, #428]	; (8009c64 <_dtoa_r+0x63c>)
 8009ab8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009abc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f280 80dc 	bge.w	8009c80 <_dtoa_r+0x658>
 8009ac8:	9b04      	ldr	r3, [sp, #16]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f300 80d8 	bgt.w	8009c80 <_dtoa_r+0x658>
 8009ad0:	f040 826f 	bne.w	8009fb2 <_dtoa_r+0x98a>
 8009ad4:	4b68      	ldr	r3, [pc, #416]	; (8009c78 <_dtoa_r+0x650>)
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	4640      	mov	r0, r8
 8009ada:	4649      	mov	r1, r9
 8009adc:	f7f6 fd8c 	bl	80005f8 <__aeabi_dmul>
 8009ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ae4:	f7f7 f80e 	bl	8000b04 <__aeabi_dcmpge>
 8009ae8:	9e04      	ldr	r6, [sp, #16]
 8009aea:	4637      	mov	r7, r6
 8009aec:	2800      	cmp	r0, #0
 8009aee:	f040 8245 	bne.w	8009f7c <_dtoa_r+0x954>
 8009af2:	9d00      	ldr	r5, [sp, #0]
 8009af4:	2331      	movs	r3, #49	; 0x31
 8009af6:	f805 3b01 	strb.w	r3, [r5], #1
 8009afa:	f10b 0b01 	add.w	fp, fp, #1
 8009afe:	e241      	b.n	8009f84 <_dtoa_r+0x95c>
 8009b00:	07f2      	lsls	r2, r6, #31
 8009b02:	d505      	bpl.n	8009b10 <_dtoa_r+0x4e8>
 8009b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b08:	f7f6 fd76 	bl	80005f8 <__aeabi_dmul>
 8009b0c:	3501      	adds	r5, #1
 8009b0e:	2301      	movs	r3, #1
 8009b10:	1076      	asrs	r6, r6, #1
 8009b12:	3708      	adds	r7, #8
 8009b14:	e773      	b.n	80099fe <_dtoa_r+0x3d6>
 8009b16:	2502      	movs	r5, #2
 8009b18:	e775      	b.n	8009a06 <_dtoa_r+0x3de>
 8009b1a:	9e04      	ldr	r6, [sp, #16]
 8009b1c:	465f      	mov	r7, fp
 8009b1e:	e792      	b.n	8009a46 <_dtoa_r+0x41e>
 8009b20:	9900      	ldr	r1, [sp, #0]
 8009b22:	4b50      	ldr	r3, [pc, #320]	; (8009c64 <_dtoa_r+0x63c>)
 8009b24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b28:	4431      	add	r1, r6
 8009b2a:	9102      	str	r1, [sp, #8]
 8009b2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b2e:	eeb0 9a47 	vmov.f32	s18, s14
 8009b32:	eef0 9a67 	vmov.f32	s19, s15
 8009b36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b3e:	2900      	cmp	r1, #0
 8009b40:	d044      	beq.n	8009bcc <_dtoa_r+0x5a4>
 8009b42:	494e      	ldr	r1, [pc, #312]	; (8009c7c <_dtoa_r+0x654>)
 8009b44:	2000      	movs	r0, #0
 8009b46:	f7f6 fe81 	bl	800084c <__aeabi_ddiv>
 8009b4a:	ec53 2b19 	vmov	r2, r3, d9
 8009b4e:	f7f6 fb9b 	bl	8000288 <__aeabi_dsub>
 8009b52:	9d00      	ldr	r5, [sp, #0]
 8009b54:	ec41 0b19 	vmov	d9, r0, r1
 8009b58:	4649      	mov	r1, r9
 8009b5a:	4640      	mov	r0, r8
 8009b5c:	f7f6 fffc 	bl	8000b58 <__aeabi_d2iz>
 8009b60:	4606      	mov	r6, r0
 8009b62:	f7f6 fcdf 	bl	8000524 <__aeabi_i2d>
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	4640      	mov	r0, r8
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	f7f6 fb8b 	bl	8000288 <__aeabi_dsub>
 8009b72:	3630      	adds	r6, #48	; 0x30
 8009b74:	f805 6b01 	strb.w	r6, [r5], #1
 8009b78:	ec53 2b19 	vmov	r2, r3, d9
 8009b7c:	4680      	mov	r8, r0
 8009b7e:	4689      	mov	r9, r1
 8009b80:	f7f6 ffac 	bl	8000adc <__aeabi_dcmplt>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d164      	bne.n	8009c52 <_dtoa_r+0x62a>
 8009b88:	4642      	mov	r2, r8
 8009b8a:	464b      	mov	r3, r9
 8009b8c:	4937      	ldr	r1, [pc, #220]	; (8009c6c <_dtoa_r+0x644>)
 8009b8e:	2000      	movs	r0, #0
 8009b90:	f7f6 fb7a 	bl	8000288 <__aeabi_dsub>
 8009b94:	ec53 2b19 	vmov	r2, r3, d9
 8009b98:	f7f6 ffa0 	bl	8000adc <__aeabi_dcmplt>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	f040 80b6 	bne.w	8009d0e <_dtoa_r+0x6e6>
 8009ba2:	9b02      	ldr	r3, [sp, #8]
 8009ba4:	429d      	cmp	r5, r3
 8009ba6:	f43f af7c 	beq.w	8009aa2 <_dtoa_r+0x47a>
 8009baa:	4b31      	ldr	r3, [pc, #196]	; (8009c70 <_dtoa_r+0x648>)
 8009bac:	ec51 0b19 	vmov	r0, r1, d9
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f7f6 fd21 	bl	80005f8 <__aeabi_dmul>
 8009bb6:	4b2e      	ldr	r3, [pc, #184]	; (8009c70 <_dtoa_r+0x648>)
 8009bb8:	ec41 0b19 	vmov	d9, r0, r1
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	4640      	mov	r0, r8
 8009bc0:	4649      	mov	r1, r9
 8009bc2:	f7f6 fd19 	bl	80005f8 <__aeabi_dmul>
 8009bc6:	4680      	mov	r8, r0
 8009bc8:	4689      	mov	r9, r1
 8009bca:	e7c5      	b.n	8009b58 <_dtoa_r+0x530>
 8009bcc:	ec51 0b17 	vmov	r0, r1, d7
 8009bd0:	f7f6 fd12 	bl	80005f8 <__aeabi_dmul>
 8009bd4:	9b02      	ldr	r3, [sp, #8]
 8009bd6:	9d00      	ldr	r5, [sp, #0]
 8009bd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bda:	ec41 0b19 	vmov	d9, r0, r1
 8009bde:	4649      	mov	r1, r9
 8009be0:	4640      	mov	r0, r8
 8009be2:	f7f6 ffb9 	bl	8000b58 <__aeabi_d2iz>
 8009be6:	4606      	mov	r6, r0
 8009be8:	f7f6 fc9c 	bl	8000524 <__aeabi_i2d>
 8009bec:	3630      	adds	r6, #48	; 0x30
 8009bee:	4602      	mov	r2, r0
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	f7f6 fb47 	bl	8000288 <__aeabi_dsub>
 8009bfa:	f805 6b01 	strb.w	r6, [r5], #1
 8009bfe:	9b02      	ldr	r3, [sp, #8]
 8009c00:	429d      	cmp	r5, r3
 8009c02:	4680      	mov	r8, r0
 8009c04:	4689      	mov	r9, r1
 8009c06:	f04f 0200 	mov.w	r2, #0
 8009c0a:	d124      	bne.n	8009c56 <_dtoa_r+0x62e>
 8009c0c:	4b1b      	ldr	r3, [pc, #108]	; (8009c7c <_dtoa_r+0x654>)
 8009c0e:	ec51 0b19 	vmov	r0, r1, d9
 8009c12:	f7f6 fb3b 	bl	800028c <__adddf3>
 8009c16:	4602      	mov	r2, r0
 8009c18:	460b      	mov	r3, r1
 8009c1a:	4640      	mov	r0, r8
 8009c1c:	4649      	mov	r1, r9
 8009c1e:	f7f6 ff7b 	bl	8000b18 <__aeabi_dcmpgt>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d173      	bne.n	8009d0e <_dtoa_r+0x6e6>
 8009c26:	ec53 2b19 	vmov	r2, r3, d9
 8009c2a:	4914      	ldr	r1, [pc, #80]	; (8009c7c <_dtoa_r+0x654>)
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	f7f6 fb2b 	bl	8000288 <__aeabi_dsub>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	4640      	mov	r0, r8
 8009c38:	4649      	mov	r1, r9
 8009c3a:	f7f6 ff4f 	bl	8000adc <__aeabi_dcmplt>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	f43f af2f 	beq.w	8009aa2 <_dtoa_r+0x47a>
 8009c44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009c46:	1e6b      	subs	r3, r5, #1
 8009c48:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c4e:	2b30      	cmp	r3, #48	; 0x30
 8009c50:	d0f8      	beq.n	8009c44 <_dtoa_r+0x61c>
 8009c52:	46bb      	mov	fp, r7
 8009c54:	e04a      	b.n	8009cec <_dtoa_r+0x6c4>
 8009c56:	4b06      	ldr	r3, [pc, #24]	; (8009c70 <_dtoa_r+0x648>)
 8009c58:	f7f6 fcce 	bl	80005f8 <__aeabi_dmul>
 8009c5c:	4680      	mov	r8, r0
 8009c5e:	4689      	mov	r9, r1
 8009c60:	e7bd      	b.n	8009bde <_dtoa_r+0x5b6>
 8009c62:	bf00      	nop
 8009c64:	0800cd08 	.word	0x0800cd08
 8009c68:	0800cce0 	.word	0x0800cce0
 8009c6c:	3ff00000 	.word	0x3ff00000
 8009c70:	40240000 	.word	0x40240000
 8009c74:	401c0000 	.word	0x401c0000
 8009c78:	40140000 	.word	0x40140000
 8009c7c:	3fe00000 	.word	0x3fe00000
 8009c80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c84:	9d00      	ldr	r5, [sp, #0]
 8009c86:	4642      	mov	r2, r8
 8009c88:	464b      	mov	r3, r9
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	4639      	mov	r1, r7
 8009c8e:	f7f6 fddd 	bl	800084c <__aeabi_ddiv>
 8009c92:	f7f6 ff61 	bl	8000b58 <__aeabi_d2iz>
 8009c96:	9001      	str	r0, [sp, #4]
 8009c98:	f7f6 fc44 	bl	8000524 <__aeabi_i2d>
 8009c9c:	4642      	mov	r2, r8
 8009c9e:	464b      	mov	r3, r9
 8009ca0:	f7f6 fcaa 	bl	80005f8 <__aeabi_dmul>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	4630      	mov	r0, r6
 8009caa:	4639      	mov	r1, r7
 8009cac:	f7f6 faec 	bl	8000288 <__aeabi_dsub>
 8009cb0:	9e01      	ldr	r6, [sp, #4]
 8009cb2:	9f04      	ldr	r7, [sp, #16]
 8009cb4:	3630      	adds	r6, #48	; 0x30
 8009cb6:	f805 6b01 	strb.w	r6, [r5], #1
 8009cba:	9e00      	ldr	r6, [sp, #0]
 8009cbc:	1bae      	subs	r6, r5, r6
 8009cbe:	42b7      	cmp	r7, r6
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	d134      	bne.n	8009d30 <_dtoa_r+0x708>
 8009cc6:	f7f6 fae1 	bl	800028c <__adddf3>
 8009cca:	4642      	mov	r2, r8
 8009ccc:	464b      	mov	r3, r9
 8009cce:	4606      	mov	r6, r0
 8009cd0:	460f      	mov	r7, r1
 8009cd2:	f7f6 ff21 	bl	8000b18 <__aeabi_dcmpgt>
 8009cd6:	b9c8      	cbnz	r0, 8009d0c <_dtoa_r+0x6e4>
 8009cd8:	4642      	mov	r2, r8
 8009cda:	464b      	mov	r3, r9
 8009cdc:	4630      	mov	r0, r6
 8009cde:	4639      	mov	r1, r7
 8009ce0:	f7f6 fef2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ce4:	b110      	cbz	r0, 8009cec <_dtoa_r+0x6c4>
 8009ce6:	9b01      	ldr	r3, [sp, #4]
 8009ce8:	07db      	lsls	r3, r3, #31
 8009cea:	d40f      	bmi.n	8009d0c <_dtoa_r+0x6e4>
 8009cec:	4651      	mov	r1, sl
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 fb18 	bl	800a324 <_Bfree>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cf8:	702b      	strb	r3, [r5, #0]
 8009cfa:	f10b 0301 	add.w	r3, fp, #1
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f43f ace2 	beq.w	80096cc <_dtoa_r+0xa4>
 8009d08:	601d      	str	r5, [r3, #0]
 8009d0a:	e4df      	b.n	80096cc <_dtoa_r+0xa4>
 8009d0c:	465f      	mov	r7, fp
 8009d0e:	462b      	mov	r3, r5
 8009d10:	461d      	mov	r5, r3
 8009d12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d16:	2a39      	cmp	r2, #57	; 0x39
 8009d18:	d106      	bne.n	8009d28 <_dtoa_r+0x700>
 8009d1a:	9a00      	ldr	r2, [sp, #0]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d1f7      	bne.n	8009d10 <_dtoa_r+0x6e8>
 8009d20:	9900      	ldr	r1, [sp, #0]
 8009d22:	2230      	movs	r2, #48	; 0x30
 8009d24:	3701      	adds	r7, #1
 8009d26:	700a      	strb	r2, [r1, #0]
 8009d28:	781a      	ldrb	r2, [r3, #0]
 8009d2a:	3201      	adds	r2, #1
 8009d2c:	701a      	strb	r2, [r3, #0]
 8009d2e:	e790      	b.n	8009c52 <_dtoa_r+0x62a>
 8009d30:	4ba3      	ldr	r3, [pc, #652]	; (8009fc0 <_dtoa_r+0x998>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	f7f6 fc60 	bl	80005f8 <__aeabi_dmul>
 8009d38:	2200      	movs	r2, #0
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	4606      	mov	r6, r0
 8009d3e:	460f      	mov	r7, r1
 8009d40:	f7f6 fec2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d09e      	beq.n	8009c86 <_dtoa_r+0x65e>
 8009d48:	e7d0      	b.n	8009cec <_dtoa_r+0x6c4>
 8009d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d4c:	2a00      	cmp	r2, #0
 8009d4e:	f000 80ca 	beq.w	8009ee6 <_dtoa_r+0x8be>
 8009d52:	9a07      	ldr	r2, [sp, #28]
 8009d54:	2a01      	cmp	r2, #1
 8009d56:	f300 80ad 	bgt.w	8009eb4 <_dtoa_r+0x88c>
 8009d5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d5c:	2a00      	cmp	r2, #0
 8009d5e:	f000 80a5 	beq.w	8009eac <_dtoa_r+0x884>
 8009d62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d66:	9e08      	ldr	r6, [sp, #32]
 8009d68:	9d05      	ldr	r5, [sp, #20]
 8009d6a:	9a05      	ldr	r2, [sp, #20]
 8009d6c:	441a      	add	r2, r3
 8009d6e:	9205      	str	r2, [sp, #20]
 8009d70:	9a06      	ldr	r2, [sp, #24]
 8009d72:	2101      	movs	r1, #1
 8009d74:	441a      	add	r2, r3
 8009d76:	4620      	mov	r0, r4
 8009d78:	9206      	str	r2, [sp, #24]
 8009d7a:	f000 fbd3 	bl	800a524 <__i2b>
 8009d7e:	4607      	mov	r7, r0
 8009d80:	b165      	cbz	r5, 8009d9c <_dtoa_r+0x774>
 8009d82:	9b06      	ldr	r3, [sp, #24]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	dd09      	ble.n	8009d9c <_dtoa_r+0x774>
 8009d88:	42ab      	cmp	r3, r5
 8009d8a:	9a05      	ldr	r2, [sp, #20]
 8009d8c:	bfa8      	it	ge
 8009d8e:	462b      	movge	r3, r5
 8009d90:	1ad2      	subs	r2, r2, r3
 8009d92:	9205      	str	r2, [sp, #20]
 8009d94:	9a06      	ldr	r2, [sp, #24]
 8009d96:	1aed      	subs	r5, r5, r3
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	9306      	str	r3, [sp, #24]
 8009d9c:	9b08      	ldr	r3, [sp, #32]
 8009d9e:	b1f3      	cbz	r3, 8009dde <_dtoa_r+0x7b6>
 8009da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 80a3 	beq.w	8009eee <_dtoa_r+0x8c6>
 8009da8:	2e00      	cmp	r6, #0
 8009daa:	dd10      	ble.n	8009dce <_dtoa_r+0x7a6>
 8009dac:	4639      	mov	r1, r7
 8009dae:	4632      	mov	r2, r6
 8009db0:	4620      	mov	r0, r4
 8009db2:	f000 fc77 	bl	800a6a4 <__pow5mult>
 8009db6:	4652      	mov	r2, sl
 8009db8:	4601      	mov	r1, r0
 8009dba:	4607      	mov	r7, r0
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	f000 fbc7 	bl	800a550 <__multiply>
 8009dc2:	4651      	mov	r1, sl
 8009dc4:	4680      	mov	r8, r0
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f000 faac 	bl	800a324 <_Bfree>
 8009dcc:	46c2      	mov	sl, r8
 8009dce:	9b08      	ldr	r3, [sp, #32]
 8009dd0:	1b9a      	subs	r2, r3, r6
 8009dd2:	d004      	beq.n	8009dde <_dtoa_r+0x7b6>
 8009dd4:	4651      	mov	r1, sl
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 fc64 	bl	800a6a4 <__pow5mult>
 8009ddc:	4682      	mov	sl, r0
 8009dde:	2101      	movs	r1, #1
 8009de0:	4620      	mov	r0, r4
 8009de2:	f000 fb9f 	bl	800a524 <__i2b>
 8009de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	4606      	mov	r6, r0
 8009dec:	f340 8081 	ble.w	8009ef2 <_dtoa_r+0x8ca>
 8009df0:	461a      	mov	r2, r3
 8009df2:	4601      	mov	r1, r0
 8009df4:	4620      	mov	r0, r4
 8009df6:	f000 fc55 	bl	800a6a4 <__pow5mult>
 8009dfa:	9b07      	ldr	r3, [sp, #28]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	4606      	mov	r6, r0
 8009e00:	dd7a      	ble.n	8009ef8 <_dtoa_r+0x8d0>
 8009e02:	f04f 0800 	mov.w	r8, #0
 8009e06:	6933      	ldr	r3, [r6, #16]
 8009e08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009e0c:	6918      	ldr	r0, [r3, #16]
 8009e0e:	f000 fb3b 	bl	800a488 <__hi0bits>
 8009e12:	f1c0 0020 	rsb	r0, r0, #32
 8009e16:	9b06      	ldr	r3, [sp, #24]
 8009e18:	4418      	add	r0, r3
 8009e1a:	f010 001f 	ands.w	r0, r0, #31
 8009e1e:	f000 8094 	beq.w	8009f4a <_dtoa_r+0x922>
 8009e22:	f1c0 0320 	rsb	r3, r0, #32
 8009e26:	2b04      	cmp	r3, #4
 8009e28:	f340 8085 	ble.w	8009f36 <_dtoa_r+0x90e>
 8009e2c:	9b05      	ldr	r3, [sp, #20]
 8009e2e:	f1c0 001c 	rsb	r0, r0, #28
 8009e32:	4403      	add	r3, r0
 8009e34:	9305      	str	r3, [sp, #20]
 8009e36:	9b06      	ldr	r3, [sp, #24]
 8009e38:	4403      	add	r3, r0
 8009e3a:	4405      	add	r5, r0
 8009e3c:	9306      	str	r3, [sp, #24]
 8009e3e:	9b05      	ldr	r3, [sp, #20]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	dd05      	ble.n	8009e50 <_dtoa_r+0x828>
 8009e44:	4651      	mov	r1, sl
 8009e46:	461a      	mov	r2, r3
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f000 fc85 	bl	800a758 <__lshift>
 8009e4e:	4682      	mov	sl, r0
 8009e50:	9b06      	ldr	r3, [sp, #24]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	dd05      	ble.n	8009e62 <_dtoa_r+0x83a>
 8009e56:	4631      	mov	r1, r6
 8009e58:	461a      	mov	r2, r3
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f000 fc7c 	bl	800a758 <__lshift>
 8009e60:	4606      	mov	r6, r0
 8009e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d072      	beq.n	8009f4e <_dtoa_r+0x926>
 8009e68:	4631      	mov	r1, r6
 8009e6a:	4650      	mov	r0, sl
 8009e6c:	f000 fce0 	bl	800a830 <__mcmp>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	da6c      	bge.n	8009f4e <_dtoa_r+0x926>
 8009e74:	2300      	movs	r3, #0
 8009e76:	4651      	mov	r1, sl
 8009e78:	220a      	movs	r2, #10
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f000 fa74 	bl	800a368 <__multadd>
 8009e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e82:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009e86:	4682      	mov	sl, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f000 81b0 	beq.w	800a1ee <_dtoa_r+0xbc6>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	4639      	mov	r1, r7
 8009e92:	220a      	movs	r2, #10
 8009e94:	4620      	mov	r0, r4
 8009e96:	f000 fa67 	bl	800a368 <__multadd>
 8009e9a:	9b01      	ldr	r3, [sp, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	4607      	mov	r7, r0
 8009ea0:	f300 8096 	bgt.w	8009fd0 <_dtoa_r+0x9a8>
 8009ea4:	9b07      	ldr	r3, [sp, #28]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	dc59      	bgt.n	8009f5e <_dtoa_r+0x936>
 8009eaa:	e091      	b.n	8009fd0 <_dtoa_r+0x9a8>
 8009eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009eae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009eb2:	e758      	b.n	8009d66 <_dtoa_r+0x73e>
 8009eb4:	9b04      	ldr	r3, [sp, #16]
 8009eb6:	1e5e      	subs	r6, r3, #1
 8009eb8:	9b08      	ldr	r3, [sp, #32]
 8009eba:	42b3      	cmp	r3, r6
 8009ebc:	bfbf      	itttt	lt
 8009ebe:	9b08      	ldrlt	r3, [sp, #32]
 8009ec0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009ec2:	9608      	strlt	r6, [sp, #32]
 8009ec4:	1af3      	sublt	r3, r6, r3
 8009ec6:	bfb4      	ite	lt
 8009ec8:	18d2      	addlt	r2, r2, r3
 8009eca:	1b9e      	subge	r6, r3, r6
 8009ecc:	9b04      	ldr	r3, [sp, #16]
 8009ece:	bfbc      	itt	lt
 8009ed0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009ed2:	2600      	movlt	r6, #0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	bfb7      	itett	lt
 8009ed8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009edc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009ee0:	1a9d      	sublt	r5, r3, r2
 8009ee2:	2300      	movlt	r3, #0
 8009ee4:	e741      	b.n	8009d6a <_dtoa_r+0x742>
 8009ee6:	9e08      	ldr	r6, [sp, #32]
 8009ee8:	9d05      	ldr	r5, [sp, #20]
 8009eea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009eec:	e748      	b.n	8009d80 <_dtoa_r+0x758>
 8009eee:	9a08      	ldr	r2, [sp, #32]
 8009ef0:	e770      	b.n	8009dd4 <_dtoa_r+0x7ac>
 8009ef2:	9b07      	ldr	r3, [sp, #28]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	dc19      	bgt.n	8009f2c <_dtoa_r+0x904>
 8009ef8:	9b02      	ldr	r3, [sp, #8]
 8009efa:	b9bb      	cbnz	r3, 8009f2c <_dtoa_r+0x904>
 8009efc:	9b03      	ldr	r3, [sp, #12]
 8009efe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f02:	b99b      	cbnz	r3, 8009f2c <_dtoa_r+0x904>
 8009f04:	9b03      	ldr	r3, [sp, #12]
 8009f06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f0a:	0d1b      	lsrs	r3, r3, #20
 8009f0c:	051b      	lsls	r3, r3, #20
 8009f0e:	b183      	cbz	r3, 8009f32 <_dtoa_r+0x90a>
 8009f10:	9b05      	ldr	r3, [sp, #20]
 8009f12:	3301      	adds	r3, #1
 8009f14:	9305      	str	r3, [sp, #20]
 8009f16:	9b06      	ldr	r3, [sp, #24]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	9306      	str	r3, [sp, #24]
 8009f1c:	f04f 0801 	mov.w	r8, #1
 8009f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f47f af6f 	bne.w	8009e06 <_dtoa_r+0x7de>
 8009f28:	2001      	movs	r0, #1
 8009f2a:	e774      	b.n	8009e16 <_dtoa_r+0x7ee>
 8009f2c:	f04f 0800 	mov.w	r8, #0
 8009f30:	e7f6      	b.n	8009f20 <_dtoa_r+0x8f8>
 8009f32:	4698      	mov	r8, r3
 8009f34:	e7f4      	b.n	8009f20 <_dtoa_r+0x8f8>
 8009f36:	d082      	beq.n	8009e3e <_dtoa_r+0x816>
 8009f38:	9a05      	ldr	r2, [sp, #20]
 8009f3a:	331c      	adds	r3, #28
 8009f3c:	441a      	add	r2, r3
 8009f3e:	9205      	str	r2, [sp, #20]
 8009f40:	9a06      	ldr	r2, [sp, #24]
 8009f42:	441a      	add	r2, r3
 8009f44:	441d      	add	r5, r3
 8009f46:	9206      	str	r2, [sp, #24]
 8009f48:	e779      	b.n	8009e3e <_dtoa_r+0x816>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	e7f4      	b.n	8009f38 <_dtoa_r+0x910>
 8009f4e:	9b04      	ldr	r3, [sp, #16]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	dc37      	bgt.n	8009fc4 <_dtoa_r+0x99c>
 8009f54:	9b07      	ldr	r3, [sp, #28]
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	dd34      	ble.n	8009fc4 <_dtoa_r+0x99c>
 8009f5a:	9b04      	ldr	r3, [sp, #16]
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	9b01      	ldr	r3, [sp, #4]
 8009f60:	b963      	cbnz	r3, 8009f7c <_dtoa_r+0x954>
 8009f62:	4631      	mov	r1, r6
 8009f64:	2205      	movs	r2, #5
 8009f66:	4620      	mov	r0, r4
 8009f68:	f000 f9fe 	bl	800a368 <__multadd>
 8009f6c:	4601      	mov	r1, r0
 8009f6e:	4606      	mov	r6, r0
 8009f70:	4650      	mov	r0, sl
 8009f72:	f000 fc5d 	bl	800a830 <__mcmp>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	f73f adbb 	bgt.w	8009af2 <_dtoa_r+0x4ca>
 8009f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f7e:	9d00      	ldr	r5, [sp, #0]
 8009f80:	ea6f 0b03 	mvn.w	fp, r3
 8009f84:	f04f 0800 	mov.w	r8, #0
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 f9ca 	bl	800a324 <_Bfree>
 8009f90:	2f00      	cmp	r7, #0
 8009f92:	f43f aeab 	beq.w	8009cec <_dtoa_r+0x6c4>
 8009f96:	f1b8 0f00 	cmp.w	r8, #0
 8009f9a:	d005      	beq.n	8009fa8 <_dtoa_r+0x980>
 8009f9c:	45b8      	cmp	r8, r7
 8009f9e:	d003      	beq.n	8009fa8 <_dtoa_r+0x980>
 8009fa0:	4641      	mov	r1, r8
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f000 f9be 	bl	800a324 <_Bfree>
 8009fa8:	4639      	mov	r1, r7
 8009faa:	4620      	mov	r0, r4
 8009fac:	f000 f9ba 	bl	800a324 <_Bfree>
 8009fb0:	e69c      	b.n	8009cec <_dtoa_r+0x6c4>
 8009fb2:	2600      	movs	r6, #0
 8009fb4:	4637      	mov	r7, r6
 8009fb6:	e7e1      	b.n	8009f7c <_dtoa_r+0x954>
 8009fb8:	46bb      	mov	fp, r7
 8009fba:	4637      	mov	r7, r6
 8009fbc:	e599      	b.n	8009af2 <_dtoa_r+0x4ca>
 8009fbe:	bf00      	nop
 8009fc0:	40240000 	.word	0x40240000
 8009fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f000 80c8 	beq.w	800a15c <_dtoa_r+0xb34>
 8009fcc:	9b04      	ldr	r3, [sp, #16]
 8009fce:	9301      	str	r3, [sp, #4]
 8009fd0:	2d00      	cmp	r5, #0
 8009fd2:	dd05      	ble.n	8009fe0 <_dtoa_r+0x9b8>
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	462a      	mov	r2, r5
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f000 fbbd 	bl	800a758 <__lshift>
 8009fde:	4607      	mov	r7, r0
 8009fe0:	f1b8 0f00 	cmp.w	r8, #0
 8009fe4:	d05b      	beq.n	800a09e <_dtoa_r+0xa76>
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f000 f95b 	bl	800a2a4 <_Balloc>
 8009fee:	4605      	mov	r5, r0
 8009ff0:	b928      	cbnz	r0, 8009ffe <_dtoa_r+0x9d6>
 8009ff2:	4b83      	ldr	r3, [pc, #524]	; (800a200 <_dtoa_r+0xbd8>)
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009ffa:	f7ff bb2e 	b.w	800965a <_dtoa_r+0x32>
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	3202      	adds	r2, #2
 800a002:	0092      	lsls	r2, r2, #2
 800a004:	f107 010c 	add.w	r1, r7, #12
 800a008:	300c      	adds	r0, #12
 800a00a:	f7ff fa6e 	bl	80094ea <memcpy>
 800a00e:	2201      	movs	r2, #1
 800a010:	4629      	mov	r1, r5
 800a012:	4620      	mov	r0, r4
 800a014:	f000 fba0 	bl	800a758 <__lshift>
 800a018:	9b00      	ldr	r3, [sp, #0]
 800a01a:	3301      	adds	r3, #1
 800a01c:	9304      	str	r3, [sp, #16]
 800a01e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a022:	4413      	add	r3, r2
 800a024:	9308      	str	r3, [sp, #32]
 800a026:	9b02      	ldr	r3, [sp, #8]
 800a028:	f003 0301 	and.w	r3, r3, #1
 800a02c:	46b8      	mov	r8, r7
 800a02e:	9306      	str	r3, [sp, #24]
 800a030:	4607      	mov	r7, r0
 800a032:	9b04      	ldr	r3, [sp, #16]
 800a034:	4631      	mov	r1, r6
 800a036:	3b01      	subs	r3, #1
 800a038:	4650      	mov	r0, sl
 800a03a:	9301      	str	r3, [sp, #4]
 800a03c:	f7ff fa6a 	bl	8009514 <quorem>
 800a040:	4641      	mov	r1, r8
 800a042:	9002      	str	r0, [sp, #8]
 800a044:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a048:	4650      	mov	r0, sl
 800a04a:	f000 fbf1 	bl	800a830 <__mcmp>
 800a04e:	463a      	mov	r2, r7
 800a050:	9005      	str	r0, [sp, #20]
 800a052:	4631      	mov	r1, r6
 800a054:	4620      	mov	r0, r4
 800a056:	f000 fc07 	bl	800a868 <__mdiff>
 800a05a:	68c2      	ldr	r2, [r0, #12]
 800a05c:	4605      	mov	r5, r0
 800a05e:	bb02      	cbnz	r2, 800a0a2 <_dtoa_r+0xa7a>
 800a060:	4601      	mov	r1, r0
 800a062:	4650      	mov	r0, sl
 800a064:	f000 fbe4 	bl	800a830 <__mcmp>
 800a068:	4602      	mov	r2, r0
 800a06a:	4629      	mov	r1, r5
 800a06c:	4620      	mov	r0, r4
 800a06e:	9209      	str	r2, [sp, #36]	; 0x24
 800a070:	f000 f958 	bl	800a324 <_Bfree>
 800a074:	9b07      	ldr	r3, [sp, #28]
 800a076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a078:	9d04      	ldr	r5, [sp, #16]
 800a07a:	ea43 0102 	orr.w	r1, r3, r2
 800a07e:	9b06      	ldr	r3, [sp, #24]
 800a080:	4319      	orrs	r1, r3
 800a082:	d110      	bne.n	800a0a6 <_dtoa_r+0xa7e>
 800a084:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a088:	d029      	beq.n	800a0de <_dtoa_r+0xab6>
 800a08a:	9b05      	ldr	r3, [sp, #20]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dd02      	ble.n	800a096 <_dtoa_r+0xa6e>
 800a090:	9b02      	ldr	r3, [sp, #8]
 800a092:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a096:	9b01      	ldr	r3, [sp, #4]
 800a098:	f883 9000 	strb.w	r9, [r3]
 800a09c:	e774      	b.n	8009f88 <_dtoa_r+0x960>
 800a09e:	4638      	mov	r0, r7
 800a0a0:	e7ba      	b.n	800a018 <_dtoa_r+0x9f0>
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	e7e1      	b.n	800a06a <_dtoa_r+0xa42>
 800a0a6:	9b05      	ldr	r3, [sp, #20]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	db04      	blt.n	800a0b6 <_dtoa_r+0xa8e>
 800a0ac:	9907      	ldr	r1, [sp, #28]
 800a0ae:	430b      	orrs	r3, r1
 800a0b0:	9906      	ldr	r1, [sp, #24]
 800a0b2:	430b      	orrs	r3, r1
 800a0b4:	d120      	bne.n	800a0f8 <_dtoa_r+0xad0>
 800a0b6:	2a00      	cmp	r2, #0
 800a0b8:	dded      	ble.n	800a096 <_dtoa_r+0xa6e>
 800a0ba:	4651      	mov	r1, sl
 800a0bc:	2201      	movs	r2, #1
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f000 fb4a 	bl	800a758 <__lshift>
 800a0c4:	4631      	mov	r1, r6
 800a0c6:	4682      	mov	sl, r0
 800a0c8:	f000 fbb2 	bl	800a830 <__mcmp>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	dc03      	bgt.n	800a0d8 <_dtoa_r+0xab0>
 800a0d0:	d1e1      	bne.n	800a096 <_dtoa_r+0xa6e>
 800a0d2:	f019 0f01 	tst.w	r9, #1
 800a0d6:	d0de      	beq.n	800a096 <_dtoa_r+0xa6e>
 800a0d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a0dc:	d1d8      	bne.n	800a090 <_dtoa_r+0xa68>
 800a0de:	9a01      	ldr	r2, [sp, #4]
 800a0e0:	2339      	movs	r3, #57	; 0x39
 800a0e2:	7013      	strb	r3, [r2, #0]
 800a0e4:	462b      	mov	r3, r5
 800a0e6:	461d      	mov	r5, r3
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a0ee:	2a39      	cmp	r2, #57	; 0x39
 800a0f0:	d06c      	beq.n	800a1cc <_dtoa_r+0xba4>
 800a0f2:	3201      	adds	r2, #1
 800a0f4:	701a      	strb	r2, [r3, #0]
 800a0f6:	e747      	b.n	8009f88 <_dtoa_r+0x960>
 800a0f8:	2a00      	cmp	r2, #0
 800a0fa:	dd07      	ble.n	800a10c <_dtoa_r+0xae4>
 800a0fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a100:	d0ed      	beq.n	800a0de <_dtoa_r+0xab6>
 800a102:	9a01      	ldr	r2, [sp, #4]
 800a104:	f109 0301 	add.w	r3, r9, #1
 800a108:	7013      	strb	r3, [r2, #0]
 800a10a:	e73d      	b.n	8009f88 <_dtoa_r+0x960>
 800a10c:	9b04      	ldr	r3, [sp, #16]
 800a10e:	9a08      	ldr	r2, [sp, #32]
 800a110:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a114:	4293      	cmp	r3, r2
 800a116:	d043      	beq.n	800a1a0 <_dtoa_r+0xb78>
 800a118:	4651      	mov	r1, sl
 800a11a:	2300      	movs	r3, #0
 800a11c:	220a      	movs	r2, #10
 800a11e:	4620      	mov	r0, r4
 800a120:	f000 f922 	bl	800a368 <__multadd>
 800a124:	45b8      	cmp	r8, r7
 800a126:	4682      	mov	sl, r0
 800a128:	f04f 0300 	mov.w	r3, #0
 800a12c:	f04f 020a 	mov.w	r2, #10
 800a130:	4641      	mov	r1, r8
 800a132:	4620      	mov	r0, r4
 800a134:	d107      	bne.n	800a146 <_dtoa_r+0xb1e>
 800a136:	f000 f917 	bl	800a368 <__multadd>
 800a13a:	4680      	mov	r8, r0
 800a13c:	4607      	mov	r7, r0
 800a13e:	9b04      	ldr	r3, [sp, #16]
 800a140:	3301      	adds	r3, #1
 800a142:	9304      	str	r3, [sp, #16]
 800a144:	e775      	b.n	800a032 <_dtoa_r+0xa0a>
 800a146:	f000 f90f 	bl	800a368 <__multadd>
 800a14a:	4639      	mov	r1, r7
 800a14c:	4680      	mov	r8, r0
 800a14e:	2300      	movs	r3, #0
 800a150:	220a      	movs	r2, #10
 800a152:	4620      	mov	r0, r4
 800a154:	f000 f908 	bl	800a368 <__multadd>
 800a158:	4607      	mov	r7, r0
 800a15a:	e7f0      	b.n	800a13e <_dtoa_r+0xb16>
 800a15c:	9b04      	ldr	r3, [sp, #16]
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	9d00      	ldr	r5, [sp, #0]
 800a162:	4631      	mov	r1, r6
 800a164:	4650      	mov	r0, sl
 800a166:	f7ff f9d5 	bl	8009514 <quorem>
 800a16a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a16e:	9b00      	ldr	r3, [sp, #0]
 800a170:	f805 9b01 	strb.w	r9, [r5], #1
 800a174:	1aea      	subs	r2, r5, r3
 800a176:	9b01      	ldr	r3, [sp, #4]
 800a178:	4293      	cmp	r3, r2
 800a17a:	dd07      	ble.n	800a18c <_dtoa_r+0xb64>
 800a17c:	4651      	mov	r1, sl
 800a17e:	2300      	movs	r3, #0
 800a180:	220a      	movs	r2, #10
 800a182:	4620      	mov	r0, r4
 800a184:	f000 f8f0 	bl	800a368 <__multadd>
 800a188:	4682      	mov	sl, r0
 800a18a:	e7ea      	b.n	800a162 <_dtoa_r+0xb3a>
 800a18c:	9b01      	ldr	r3, [sp, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	bfc8      	it	gt
 800a192:	461d      	movgt	r5, r3
 800a194:	9b00      	ldr	r3, [sp, #0]
 800a196:	bfd8      	it	le
 800a198:	2501      	movle	r5, #1
 800a19a:	441d      	add	r5, r3
 800a19c:	f04f 0800 	mov.w	r8, #0
 800a1a0:	4651      	mov	r1, sl
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f000 fad7 	bl	800a758 <__lshift>
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	4682      	mov	sl, r0
 800a1ae:	f000 fb3f 	bl	800a830 <__mcmp>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	dc96      	bgt.n	800a0e4 <_dtoa_r+0xabc>
 800a1b6:	d102      	bne.n	800a1be <_dtoa_r+0xb96>
 800a1b8:	f019 0f01 	tst.w	r9, #1
 800a1bc:	d192      	bne.n	800a0e4 <_dtoa_r+0xabc>
 800a1be:	462b      	mov	r3, r5
 800a1c0:	461d      	mov	r5, r3
 800a1c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1c6:	2a30      	cmp	r2, #48	; 0x30
 800a1c8:	d0fa      	beq.n	800a1c0 <_dtoa_r+0xb98>
 800a1ca:	e6dd      	b.n	8009f88 <_dtoa_r+0x960>
 800a1cc:	9a00      	ldr	r2, [sp, #0]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d189      	bne.n	800a0e6 <_dtoa_r+0xabe>
 800a1d2:	f10b 0b01 	add.w	fp, fp, #1
 800a1d6:	2331      	movs	r3, #49	; 0x31
 800a1d8:	e796      	b.n	800a108 <_dtoa_r+0xae0>
 800a1da:	4b0a      	ldr	r3, [pc, #40]	; (800a204 <_dtoa_r+0xbdc>)
 800a1dc:	f7ff ba99 	b.w	8009712 <_dtoa_r+0xea>
 800a1e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f47f aa6d 	bne.w	80096c2 <_dtoa_r+0x9a>
 800a1e8:	4b07      	ldr	r3, [pc, #28]	; (800a208 <_dtoa_r+0xbe0>)
 800a1ea:	f7ff ba92 	b.w	8009712 <_dtoa_r+0xea>
 800a1ee:	9b01      	ldr	r3, [sp, #4]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	dcb5      	bgt.n	800a160 <_dtoa_r+0xb38>
 800a1f4:	9b07      	ldr	r3, [sp, #28]
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	f73f aeb1 	bgt.w	8009f5e <_dtoa_r+0x936>
 800a1fc:	e7b0      	b.n	800a160 <_dtoa_r+0xb38>
 800a1fe:	bf00      	nop
 800a200:	0800cc71 	.word	0x0800cc71
 800a204:	0800cbcc 	.word	0x0800cbcc
 800a208:	0800cbf5 	.word	0x0800cbf5

0800a20c <_free_r>:
 800a20c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a20e:	2900      	cmp	r1, #0
 800a210:	d044      	beq.n	800a29c <_free_r+0x90>
 800a212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a216:	9001      	str	r0, [sp, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f1a1 0404 	sub.w	r4, r1, #4
 800a21e:	bfb8      	it	lt
 800a220:	18e4      	addlt	r4, r4, r3
 800a222:	f7fd ffd3 	bl	80081cc <__malloc_lock>
 800a226:	4a1e      	ldr	r2, [pc, #120]	; (800a2a0 <_free_r+0x94>)
 800a228:	9801      	ldr	r0, [sp, #4]
 800a22a:	6813      	ldr	r3, [r2, #0]
 800a22c:	b933      	cbnz	r3, 800a23c <_free_r+0x30>
 800a22e:	6063      	str	r3, [r4, #4]
 800a230:	6014      	str	r4, [r2, #0]
 800a232:	b003      	add	sp, #12
 800a234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a238:	f7fd bfce 	b.w	80081d8 <__malloc_unlock>
 800a23c:	42a3      	cmp	r3, r4
 800a23e:	d908      	bls.n	800a252 <_free_r+0x46>
 800a240:	6825      	ldr	r5, [r4, #0]
 800a242:	1961      	adds	r1, r4, r5
 800a244:	428b      	cmp	r3, r1
 800a246:	bf01      	itttt	eq
 800a248:	6819      	ldreq	r1, [r3, #0]
 800a24a:	685b      	ldreq	r3, [r3, #4]
 800a24c:	1949      	addeq	r1, r1, r5
 800a24e:	6021      	streq	r1, [r4, #0]
 800a250:	e7ed      	b.n	800a22e <_free_r+0x22>
 800a252:	461a      	mov	r2, r3
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	b10b      	cbz	r3, 800a25c <_free_r+0x50>
 800a258:	42a3      	cmp	r3, r4
 800a25a:	d9fa      	bls.n	800a252 <_free_r+0x46>
 800a25c:	6811      	ldr	r1, [r2, #0]
 800a25e:	1855      	adds	r5, r2, r1
 800a260:	42a5      	cmp	r5, r4
 800a262:	d10b      	bne.n	800a27c <_free_r+0x70>
 800a264:	6824      	ldr	r4, [r4, #0]
 800a266:	4421      	add	r1, r4
 800a268:	1854      	adds	r4, r2, r1
 800a26a:	42a3      	cmp	r3, r4
 800a26c:	6011      	str	r1, [r2, #0]
 800a26e:	d1e0      	bne.n	800a232 <_free_r+0x26>
 800a270:	681c      	ldr	r4, [r3, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	6053      	str	r3, [r2, #4]
 800a276:	440c      	add	r4, r1
 800a278:	6014      	str	r4, [r2, #0]
 800a27a:	e7da      	b.n	800a232 <_free_r+0x26>
 800a27c:	d902      	bls.n	800a284 <_free_r+0x78>
 800a27e:	230c      	movs	r3, #12
 800a280:	6003      	str	r3, [r0, #0]
 800a282:	e7d6      	b.n	800a232 <_free_r+0x26>
 800a284:	6825      	ldr	r5, [r4, #0]
 800a286:	1961      	adds	r1, r4, r5
 800a288:	428b      	cmp	r3, r1
 800a28a:	bf04      	itt	eq
 800a28c:	6819      	ldreq	r1, [r3, #0]
 800a28e:	685b      	ldreq	r3, [r3, #4]
 800a290:	6063      	str	r3, [r4, #4]
 800a292:	bf04      	itt	eq
 800a294:	1949      	addeq	r1, r1, r5
 800a296:	6021      	streq	r1, [r4, #0]
 800a298:	6054      	str	r4, [r2, #4]
 800a29a:	e7ca      	b.n	800a232 <_free_r+0x26>
 800a29c:	b003      	add	sp, #12
 800a29e:	bd30      	pop	{r4, r5, pc}
 800a2a0:	20001d04 	.word	0x20001d04

0800a2a4 <_Balloc>:
 800a2a4:	b570      	push	{r4, r5, r6, lr}
 800a2a6:	69c6      	ldr	r6, [r0, #28]
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	460d      	mov	r5, r1
 800a2ac:	b976      	cbnz	r6, 800a2cc <_Balloc+0x28>
 800a2ae:	2010      	movs	r0, #16
 800a2b0:	f7fd fee4 	bl	800807c <malloc>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	61e0      	str	r0, [r4, #28]
 800a2b8:	b920      	cbnz	r0, 800a2c4 <_Balloc+0x20>
 800a2ba:	4b18      	ldr	r3, [pc, #96]	; (800a31c <_Balloc+0x78>)
 800a2bc:	4818      	ldr	r0, [pc, #96]	; (800a320 <_Balloc+0x7c>)
 800a2be:	216b      	movs	r1, #107	; 0x6b
 800a2c0:	f001 ff36 	bl	800c130 <__assert_func>
 800a2c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2c8:	6006      	str	r6, [r0, #0]
 800a2ca:	60c6      	str	r6, [r0, #12]
 800a2cc:	69e6      	ldr	r6, [r4, #28]
 800a2ce:	68f3      	ldr	r3, [r6, #12]
 800a2d0:	b183      	cbz	r3, 800a2f4 <_Balloc+0x50>
 800a2d2:	69e3      	ldr	r3, [r4, #28]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2da:	b9b8      	cbnz	r0, 800a30c <_Balloc+0x68>
 800a2dc:	2101      	movs	r1, #1
 800a2de:	fa01 f605 	lsl.w	r6, r1, r5
 800a2e2:	1d72      	adds	r2, r6, #5
 800a2e4:	0092      	lsls	r2, r2, #2
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f001 ff40 	bl	800c16c <_calloc_r>
 800a2ec:	b160      	cbz	r0, 800a308 <_Balloc+0x64>
 800a2ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2f2:	e00e      	b.n	800a312 <_Balloc+0x6e>
 800a2f4:	2221      	movs	r2, #33	; 0x21
 800a2f6:	2104      	movs	r1, #4
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f001 ff37 	bl	800c16c <_calloc_r>
 800a2fe:	69e3      	ldr	r3, [r4, #28]
 800a300:	60f0      	str	r0, [r6, #12]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1e4      	bne.n	800a2d2 <_Balloc+0x2e>
 800a308:	2000      	movs	r0, #0
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
 800a30c:	6802      	ldr	r2, [r0, #0]
 800a30e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a312:	2300      	movs	r3, #0
 800a314:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a318:	e7f7      	b.n	800a30a <_Balloc+0x66>
 800a31a:	bf00      	nop
 800a31c:	0800cc02 	.word	0x0800cc02
 800a320:	0800cc82 	.word	0x0800cc82

0800a324 <_Bfree>:
 800a324:	b570      	push	{r4, r5, r6, lr}
 800a326:	69c6      	ldr	r6, [r0, #28]
 800a328:	4605      	mov	r5, r0
 800a32a:	460c      	mov	r4, r1
 800a32c:	b976      	cbnz	r6, 800a34c <_Bfree+0x28>
 800a32e:	2010      	movs	r0, #16
 800a330:	f7fd fea4 	bl	800807c <malloc>
 800a334:	4602      	mov	r2, r0
 800a336:	61e8      	str	r0, [r5, #28]
 800a338:	b920      	cbnz	r0, 800a344 <_Bfree+0x20>
 800a33a:	4b09      	ldr	r3, [pc, #36]	; (800a360 <_Bfree+0x3c>)
 800a33c:	4809      	ldr	r0, [pc, #36]	; (800a364 <_Bfree+0x40>)
 800a33e:	218f      	movs	r1, #143	; 0x8f
 800a340:	f001 fef6 	bl	800c130 <__assert_func>
 800a344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a348:	6006      	str	r6, [r0, #0]
 800a34a:	60c6      	str	r6, [r0, #12]
 800a34c:	b13c      	cbz	r4, 800a35e <_Bfree+0x3a>
 800a34e:	69eb      	ldr	r3, [r5, #28]
 800a350:	6862      	ldr	r2, [r4, #4]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a358:	6021      	str	r1, [r4, #0]
 800a35a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a35e:	bd70      	pop	{r4, r5, r6, pc}
 800a360:	0800cc02 	.word	0x0800cc02
 800a364:	0800cc82 	.word	0x0800cc82

0800a368 <__multadd>:
 800a368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36c:	690d      	ldr	r5, [r1, #16]
 800a36e:	4607      	mov	r7, r0
 800a370:	460c      	mov	r4, r1
 800a372:	461e      	mov	r6, r3
 800a374:	f101 0c14 	add.w	ip, r1, #20
 800a378:	2000      	movs	r0, #0
 800a37a:	f8dc 3000 	ldr.w	r3, [ip]
 800a37e:	b299      	uxth	r1, r3
 800a380:	fb02 6101 	mla	r1, r2, r1, r6
 800a384:	0c1e      	lsrs	r6, r3, #16
 800a386:	0c0b      	lsrs	r3, r1, #16
 800a388:	fb02 3306 	mla	r3, r2, r6, r3
 800a38c:	b289      	uxth	r1, r1
 800a38e:	3001      	adds	r0, #1
 800a390:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a394:	4285      	cmp	r5, r0
 800a396:	f84c 1b04 	str.w	r1, [ip], #4
 800a39a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a39e:	dcec      	bgt.n	800a37a <__multadd+0x12>
 800a3a0:	b30e      	cbz	r6, 800a3e6 <__multadd+0x7e>
 800a3a2:	68a3      	ldr	r3, [r4, #8]
 800a3a4:	42ab      	cmp	r3, r5
 800a3a6:	dc19      	bgt.n	800a3dc <__multadd+0x74>
 800a3a8:	6861      	ldr	r1, [r4, #4]
 800a3aa:	4638      	mov	r0, r7
 800a3ac:	3101      	adds	r1, #1
 800a3ae:	f7ff ff79 	bl	800a2a4 <_Balloc>
 800a3b2:	4680      	mov	r8, r0
 800a3b4:	b928      	cbnz	r0, 800a3c2 <__multadd+0x5a>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	4b0c      	ldr	r3, [pc, #48]	; (800a3ec <__multadd+0x84>)
 800a3ba:	480d      	ldr	r0, [pc, #52]	; (800a3f0 <__multadd+0x88>)
 800a3bc:	21ba      	movs	r1, #186	; 0xba
 800a3be:	f001 feb7 	bl	800c130 <__assert_func>
 800a3c2:	6922      	ldr	r2, [r4, #16]
 800a3c4:	3202      	adds	r2, #2
 800a3c6:	f104 010c 	add.w	r1, r4, #12
 800a3ca:	0092      	lsls	r2, r2, #2
 800a3cc:	300c      	adds	r0, #12
 800a3ce:	f7ff f88c 	bl	80094ea <memcpy>
 800a3d2:	4621      	mov	r1, r4
 800a3d4:	4638      	mov	r0, r7
 800a3d6:	f7ff ffa5 	bl	800a324 <_Bfree>
 800a3da:	4644      	mov	r4, r8
 800a3dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3e0:	3501      	adds	r5, #1
 800a3e2:	615e      	str	r6, [r3, #20]
 800a3e4:	6125      	str	r5, [r4, #16]
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ec:	0800cc71 	.word	0x0800cc71
 800a3f0:	0800cc82 	.word	0x0800cc82

0800a3f4 <__s2b>:
 800a3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	4615      	mov	r5, r2
 800a3fc:	461f      	mov	r7, r3
 800a3fe:	2209      	movs	r2, #9
 800a400:	3308      	adds	r3, #8
 800a402:	4606      	mov	r6, r0
 800a404:	fb93 f3f2 	sdiv	r3, r3, r2
 800a408:	2100      	movs	r1, #0
 800a40a:	2201      	movs	r2, #1
 800a40c:	429a      	cmp	r2, r3
 800a40e:	db09      	blt.n	800a424 <__s2b+0x30>
 800a410:	4630      	mov	r0, r6
 800a412:	f7ff ff47 	bl	800a2a4 <_Balloc>
 800a416:	b940      	cbnz	r0, 800a42a <__s2b+0x36>
 800a418:	4602      	mov	r2, r0
 800a41a:	4b19      	ldr	r3, [pc, #100]	; (800a480 <__s2b+0x8c>)
 800a41c:	4819      	ldr	r0, [pc, #100]	; (800a484 <__s2b+0x90>)
 800a41e:	21d3      	movs	r1, #211	; 0xd3
 800a420:	f001 fe86 	bl	800c130 <__assert_func>
 800a424:	0052      	lsls	r2, r2, #1
 800a426:	3101      	adds	r1, #1
 800a428:	e7f0      	b.n	800a40c <__s2b+0x18>
 800a42a:	9b08      	ldr	r3, [sp, #32]
 800a42c:	6143      	str	r3, [r0, #20]
 800a42e:	2d09      	cmp	r5, #9
 800a430:	f04f 0301 	mov.w	r3, #1
 800a434:	6103      	str	r3, [r0, #16]
 800a436:	dd16      	ble.n	800a466 <__s2b+0x72>
 800a438:	f104 0909 	add.w	r9, r4, #9
 800a43c:	46c8      	mov	r8, r9
 800a43e:	442c      	add	r4, r5
 800a440:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a444:	4601      	mov	r1, r0
 800a446:	3b30      	subs	r3, #48	; 0x30
 800a448:	220a      	movs	r2, #10
 800a44a:	4630      	mov	r0, r6
 800a44c:	f7ff ff8c 	bl	800a368 <__multadd>
 800a450:	45a0      	cmp	r8, r4
 800a452:	d1f5      	bne.n	800a440 <__s2b+0x4c>
 800a454:	f1a5 0408 	sub.w	r4, r5, #8
 800a458:	444c      	add	r4, r9
 800a45a:	1b2d      	subs	r5, r5, r4
 800a45c:	1963      	adds	r3, r4, r5
 800a45e:	42bb      	cmp	r3, r7
 800a460:	db04      	blt.n	800a46c <__s2b+0x78>
 800a462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a466:	340a      	adds	r4, #10
 800a468:	2509      	movs	r5, #9
 800a46a:	e7f6      	b.n	800a45a <__s2b+0x66>
 800a46c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a470:	4601      	mov	r1, r0
 800a472:	3b30      	subs	r3, #48	; 0x30
 800a474:	220a      	movs	r2, #10
 800a476:	4630      	mov	r0, r6
 800a478:	f7ff ff76 	bl	800a368 <__multadd>
 800a47c:	e7ee      	b.n	800a45c <__s2b+0x68>
 800a47e:	bf00      	nop
 800a480:	0800cc71 	.word	0x0800cc71
 800a484:	0800cc82 	.word	0x0800cc82

0800a488 <__hi0bits>:
 800a488:	0c03      	lsrs	r3, r0, #16
 800a48a:	041b      	lsls	r3, r3, #16
 800a48c:	b9d3      	cbnz	r3, 800a4c4 <__hi0bits+0x3c>
 800a48e:	0400      	lsls	r0, r0, #16
 800a490:	2310      	movs	r3, #16
 800a492:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a496:	bf04      	itt	eq
 800a498:	0200      	lsleq	r0, r0, #8
 800a49a:	3308      	addeq	r3, #8
 800a49c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a4a0:	bf04      	itt	eq
 800a4a2:	0100      	lsleq	r0, r0, #4
 800a4a4:	3304      	addeq	r3, #4
 800a4a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a4aa:	bf04      	itt	eq
 800a4ac:	0080      	lsleq	r0, r0, #2
 800a4ae:	3302      	addeq	r3, #2
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	db05      	blt.n	800a4c0 <__hi0bits+0x38>
 800a4b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a4b8:	f103 0301 	add.w	r3, r3, #1
 800a4bc:	bf08      	it	eq
 800a4be:	2320      	moveq	r3, #32
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	4770      	bx	lr
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	e7e4      	b.n	800a492 <__hi0bits+0xa>

0800a4c8 <__lo0bits>:
 800a4c8:	6803      	ldr	r3, [r0, #0]
 800a4ca:	f013 0207 	ands.w	r2, r3, #7
 800a4ce:	d00c      	beq.n	800a4ea <__lo0bits+0x22>
 800a4d0:	07d9      	lsls	r1, r3, #31
 800a4d2:	d422      	bmi.n	800a51a <__lo0bits+0x52>
 800a4d4:	079a      	lsls	r2, r3, #30
 800a4d6:	bf49      	itett	mi
 800a4d8:	085b      	lsrmi	r3, r3, #1
 800a4da:	089b      	lsrpl	r3, r3, #2
 800a4dc:	6003      	strmi	r3, [r0, #0]
 800a4de:	2201      	movmi	r2, #1
 800a4e0:	bf5c      	itt	pl
 800a4e2:	6003      	strpl	r3, [r0, #0]
 800a4e4:	2202      	movpl	r2, #2
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	4770      	bx	lr
 800a4ea:	b299      	uxth	r1, r3
 800a4ec:	b909      	cbnz	r1, 800a4f2 <__lo0bits+0x2a>
 800a4ee:	0c1b      	lsrs	r3, r3, #16
 800a4f0:	2210      	movs	r2, #16
 800a4f2:	b2d9      	uxtb	r1, r3
 800a4f4:	b909      	cbnz	r1, 800a4fa <__lo0bits+0x32>
 800a4f6:	3208      	adds	r2, #8
 800a4f8:	0a1b      	lsrs	r3, r3, #8
 800a4fa:	0719      	lsls	r1, r3, #28
 800a4fc:	bf04      	itt	eq
 800a4fe:	091b      	lsreq	r3, r3, #4
 800a500:	3204      	addeq	r2, #4
 800a502:	0799      	lsls	r1, r3, #30
 800a504:	bf04      	itt	eq
 800a506:	089b      	lsreq	r3, r3, #2
 800a508:	3202      	addeq	r2, #2
 800a50a:	07d9      	lsls	r1, r3, #31
 800a50c:	d403      	bmi.n	800a516 <__lo0bits+0x4e>
 800a50e:	085b      	lsrs	r3, r3, #1
 800a510:	f102 0201 	add.w	r2, r2, #1
 800a514:	d003      	beq.n	800a51e <__lo0bits+0x56>
 800a516:	6003      	str	r3, [r0, #0]
 800a518:	e7e5      	b.n	800a4e6 <__lo0bits+0x1e>
 800a51a:	2200      	movs	r2, #0
 800a51c:	e7e3      	b.n	800a4e6 <__lo0bits+0x1e>
 800a51e:	2220      	movs	r2, #32
 800a520:	e7e1      	b.n	800a4e6 <__lo0bits+0x1e>
	...

0800a524 <__i2b>:
 800a524:	b510      	push	{r4, lr}
 800a526:	460c      	mov	r4, r1
 800a528:	2101      	movs	r1, #1
 800a52a:	f7ff febb 	bl	800a2a4 <_Balloc>
 800a52e:	4602      	mov	r2, r0
 800a530:	b928      	cbnz	r0, 800a53e <__i2b+0x1a>
 800a532:	4b05      	ldr	r3, [pc, #20]	; (800a548 <__i2b+0x24>)
 800a534:	4805      	ldr	r0, [pc, #20]	; (800a54c <__i2b+0x28>)
 800a536:	f240 1145 	movw	r1, #325	; 0x145
 800a53a:	f001 fdf9 	bl	800c130 <__assert_func>
 800a53e:	2301      	movs	r3, #1
 800a540:	6144      	str	r4, [r0, #20]
 800a542:	6103      	str	r3, [r0, #16]
 800a544:	bd10      	pop	{r4, pc}
 800a546:	bf00      	nop
 800a548:	0800cc71 	.word	0x0800cc71
 800a54c:	0800cc82 	.word	0x0800cc82

0800a550 <__multiply>:
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	4691      	mov	r9, r2
 800a556:	690a      	ldr	r2, [r1, #16]
 800a558:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	bfb8      	it	lt
 800a560:	460b      	movlt	r3, r1
 800a562:	460c      	mov	r4, r1
 800a564:	bfbc      	itt	lt
 800a566:	464c      	movlt	r4, r9
 800a568:	4699      	movlt	r9, r3
 800a56a:	6927      	ldr	r7, [r4, #16]
 800a56c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a570:	68a3      	ldr	r3, [r4, #8]
 800a572:	6861      	ldr	r1, [r4, #4]
 800a574:	eb07 060a 	add.w	r6, r7, sl
 800a578:	42b3      	cmp	r3, r6
 800a57a:	b085      	sub	sp, #20
 800a57c:	bfb8      	it	lt
 800a57e:	3101      	addlt	r1, #1
 800a580:	f7ff fe90 	bl	800a2a4 <_Balloc>
 800a584:	b930      	cbnz	r0, 800a594 <__multiply+0x44>
 800a586:	4602      	mov	r2, r0
 800a588:	4b44      	ldr	r3, [pc, #272]	; (800a69c <__multiply+0x14c>)
 800a58a:	4845      	ldr	r0, [pc, #276]	; (800a6a0 <__multiply+0x150>)
 800a58c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a590:	f001 fdce 	bl	800c130 <__assert_func>
 800a594:	f100 0514 	add.w	r5, r0, #20
 800a598:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a59c:	462b      	mov	r3, r5
 800a59e:	2200      	movs	r2, #0
 800a5a0:	4543      	cmp	r3, r8
 800a5a2:	d321      	bcc.n	800a5e8 <__multiply+0x98>
 800a5a4:	f104 0314 	add.w	r3, r4, #20
 800a5a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5ac:	f109 0314 	add.w	r3, r9, #20
 800a5b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a5b4:	9202      	str	r2, [sp, #8]
 800a5b6:	1b3a      	subs	r2, r7, r4
 800a5b8:	3a15      	subs	r2, #21
 800a5ba:	f022 0203 	bic.w	r2, r2, #3
 800a5be:	3204      	adds	r2, #4
 800a5c0:	f104 0115 	add.w	r1, r4, #21
 800a5c4:	428f      	cmp	r7, r1
 800a5c6:	bf38      	it	cc
 800a5c8:	2204      	movcc	r2, #4
 800a5ca:	9201      	str	r2, [sp, #4]
 800a5cc:	9a02      	ldr	r2, [sp, #8]
 800a5ce:	9303      	str	r3, [sp, #12]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d80c      	bhi.n	800a5ee <__multiply+0x9e>
 800a5d4:	2e00      	cmp	r6, #0
 800a5d6:	dd03      	ble.n	800a5e0 <__multiply+0x90>
 800a5d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d05b      	beq.n	800a698 <__multiply+0x148>
 800a5e0:	6106      	str	r6, [r0, #16]
 800a5e2:	b005      	add	sp, #20
 800a5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e8:	f843 2b04 	str.w	r2, [r3], #4
 800a5ec:	e7d8      	b.n	800a5a0 <__multiply+0x50>
 800a5ee:	f8b3 a000 	ldrh.w	sl, [r3]
 800a5f2:	f1ba 0f00 	cmp.w	sl, #0
 800a5f6:	d024      	beq.n	800a642 <__multiply+0xf2>
 800a5f8:	f104 0e14 	add.w	lr, r4, #20
 800a5fc:	46a9      	mov	r9, r5
 800a5fe:	f04f 0c00 	mov.w	ip, #0
 800a602:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a606:	f8d9 1000 	ldr.w	r1, [r9]
 800a60a:	fa1f fb82 	uxth.w	fp, r2
 800a60e:	b289      	uxth	r1, r1
 800a610:	fb0a 110b 	mla	r1, sl, fp, r1
 800a614:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a618:	f8d9 2000 	ldr.w	r2, [r9]
 800a61c:	4461      	add	r1, ip
 800a61e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a622:	fb0a c20b 	mla	r2, sl, fp, ip
 800a626:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a62a:	b289      	uxth	r1, r1
 800a62c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a630:	4577      	cmp	r7, lr
 800a632:	f849 1b04 	str.w	r1, [r9], #4
 800a636:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a63a:	d8e2      	bhi.n	800a602 <__multiply+0xb2>
 800a63c:	9a01      	ldr	r2, [sp, #4]
 800a63e:	f845 c002 	str.w	ip, [r5, r2]
 800a642:	9a03      	ldr	r2, [sp, #12]
 800a644:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a648:	3304      	adds	r3, #4
 800a64a:	f1b9 0f00 	cmp.w	r9, #0
 800a64e:	d021      	beq.n	800a694 <__multiply+0x144>
 800a650:	6829      	ldr	r1, [r5, #0]
 800a652:	f104 0c14 	add.w	ip, r4, #20
 800a656:	46ae      	mov	lr, r5
 800a658:	f04f 0a00 	mov.w	sl, #0
 800a65c:	f8bc b000 	ldrh.w	fp, [ip]
 800a660:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a664:	fb09 220b 	mla	r2, r9, fp, r2
 800a668:	4452      	add	r2, sl
 800a66a:	b289      	uxth	r1, r1
 800a66c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a670:	f84e 1b04 	str.w	r1, [lr], #4
 800a674:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a678:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a67c:	f8be 1000 	ldrh.w	r1, [lr]
 800a680:	fb09 110a 	mla	r1, r9, sl, r1
 800a684:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a688:	4567      	cmp	r7, ip
 800a68a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a68e:	d8e5      	bhi.n	800a65c <__multiply+0x10c>
 800a690:	9a01      	ldr	r2, [sp, #4]
 800a692:	50a9      	str	r1, [r5, r2]
 800a694:	3504      	adds	r5, #4
 800a696:	e799      	b.n	800a5cc <__multiply+0x7c>
 800a698:	3e01      	subs	r6, #1
 800a69a:	e79b      	b.n	800a5d4 <__multiply+0x84>
 800a69c:	0800cc71 	.word	0x0800cc71
 800a6a0:	0800cc82 	.word	0x0800cc82

0800a6a4 <__pow5mult>:
 800a6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6a8:	4615      	mov	r5, r2
 800a6aa:	f012 0203 	ands.w	r2, r2, #3
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	460f      	mov	r7, r1
 800a6b2:	d007      	beq.n	800a6c4 <__pow5mult+0x20>
 800a6b4:	4c25      	ldr	r4, [pc, #148]	; (800a74c <__pow5mult+0xa8>)
 800a6b6:	3a01      	subs	r2, #1
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6be:	f7ff fe53 	bl	800a368 <__multadd>
 800a6c2:	4607      	mov	r7, r0
 800a6c4:	10ad      	asrs	r5, r5, #2
 800a6c6:	d03d      	beq.n	800a744 <__pow5mult+0xa0>
 800a6c8:	69f4      	ldr	r4, [r6, #28]
 800a6ca:	b97c      	cbnz	r4, 800a6ec <__pow5mult+0x48>
 800a6cc:	2010      	movs	r0, #16
 800a6ce:	f7fd fcd5 	bl	800807c <malloc>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	61f0      	str	r0, [r6, #28]
 800a6d6:	b928      	cbnz	r0, 800a6e4 <__pow5mult+0x40>
 800a6d8:	4b1d      	ldr	r3, [pc, #116]	; (800a750 <__pow5mult+0xac>)
 800a6da:	481e      	ldr	r0, [pc, #120]	; (800a754 <__pow5mult+0xb0>)
 800a6dc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a6e0:	f001 fd26 	bl	800c130 <__assert_func>
 800a6e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6e8:	6004      	str	r4, [r0, #0]
 800a6ea:	60c4      	str	r4, [r0, #12]
 800a6ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a6f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6f4:	b94c      	cbnz	r4, 800a70a <__pow5mult+0x66>
 800a6f6:	f240 2171 	movw	r1, #625	; 0x271
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f7ff ff12 	bl	800a524 <__i2b>
 800a700:	2300      	movs	r3, #0
 800a702:	f8c8 0008 	str.w	r0, [r8, #8]
 800a706:	4604      	mov	r4, r0
 800a708:	6003      	str	r3, [r0, #0]
 800a70a:	f04f 0900 	mov.w	r9, #0
 800a70e:	07eb      	lsls	r3, r5, #31
 800a710:	d50a      	bpl.n	800a728 <__pow5mult+0x84>
 800a712:	4639      	mov	r1, r7
 800a714:	4622      	mov	r2, r4
 800a716:	4630      	mov	r0, r6
 800a718:	f7ff ff1a 	bl	800a550 <__multiply>
 800a71c:	4639      	mov	r1, r7
 800a71e:	4680      	mov	r8, r0
 800a720:	4630      	mov	r0, r6
 800a722:	f7ff fdff 	bl	800a324 <_Bfree>
 800a726:	4647      	mov	r7, r8
 800a728:	106d      	asrs	r5, r5, #1
 800a72a:	d00b      	beq.n	800a744 <__pow5mult+0xa0>
 800a72c:	6820      	ldr	r0, [r4, #0]
 800a72e:	b938      	cbnz	r0, 800a740 <__pow5mult+0x9c>
 800a730:	4622      	mov	r2, r4
 800a732:	4621      	mov	r1, r4
 800a734:	4630      	mov	r0, r6
 800a736:	f7ff ff0b 	bl	800a550 <__multiply>
 800a73a:	6020      	str	r0, [r4, #0]
 800a73c:	f8c0 9000 	str.w	r9, [r0]
 800a740:	4604      	mov	r4, r0
 800a742:	e7e4      	b.n	800a70e <__pow5mult+0x6a>
 800a744:	4638      	mov	r0, r7
 800a746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a74a:	bf00      	nop
 800a74c:	0800cdd0 	.word	0x0800cdd0
 800a750:	0800cc02 	.word	0x0800cc02
 800a754:	0800cc82 	.word	0x0800cc82

0800a758 <__lshift>:
 800a758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a75c:	460c      	mov	r4, r1
 800a75e:	6849      	ldr	r1, [r1, #4]
 800a760:	6923      	ldr	r3, [r4, #16]
 800a762:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a766:	68a3      	ldr	r3, [r4, #8]
 800a768:	4607      	mov	r7, r0
 800a76a:	4691      	mov	r9, r2
 800a76c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a770:	f108 0601 	add.w	r6, r8, #1
 800a774:	42b3      	cmp	r3, r6
 800a776:	db0b      	blt.n	800a790 <__lshift+0x38>
 800a778:	4638      	mov	r0, r7
 800a77a:	f7ff fd93 	bl	800a2a4 <_Balloc>
 800a77e:	4605      	mov	r5, r0
 800a780:	b948      	cbnz	r0, 800a796 <__lshift+0x3e>
 800a782:	4602      	mov	r2, r0
 800a784:	4b28      	ldr	r3, [pc, #160]	; (800a828 <__lshift+0xd0>)
 800a786:	4829      	ldr	r0, [pc, #164]	; (800a82c <__lshift+0xd4>)
 800a788:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a78c:	f001 fcd0 	bl	800c130 <__assert_func>
 800a790:	3101      	adds	r1, #1
 800a792:	005b      	lsls	r3, r3, #1
 800a794:	e7ee      	b.n	800a774 <__lshift+0x1c>
 800a796:	2300      	movs	r3, #0
 800a798:	f100 0114 	add.w	r1, r0, #20
 800a79c:	f100 0210 	add.w	r2, r0, #16
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	4553      	cmp	r3, sl
 800a7a4:	db33      	blt.n	800a80e <__lshift+0xb6>
 800a7a6:	6920      	ldr	r0, [r4, #16]
 800a7a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7ac:	f104 0314 	add.w	r3, r4, #20
 800a7b0:	f019 091f 	ands.w	r9, r9, #31
 800a7b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a7bc:	d02b      	beq.n	800a816 <__lshift+0xbe>
 800a7be:	f1c9 0e20 	rsb	lr, r9, #32
 800a7c2:	468a      	mov	sl, r1
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	6818      	ldr	r0, [r3, #0]
 800a7c8:	fa00 f009 	lsl.w	r0, r0, r9
 800a7cc:	4310      	orrs	r0, r2
 800a7ce:	f84a 0b04 	str.w	r0, [sl], #4
 800a7d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d6:	459c      	cmp	ip, r3
 800a7d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a7dc:	d8f3      	bhi.n	800a7c6 <__lshift+0x6e>
 800a7de:	ebac 0304 	sub.w	r3, ip, r4
 800a7e2:	3b15      	subs	r3, #21
 800a7e4:	f023 0303 	bic.w	r3, r3, #3
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	f104 0015 	add.w	r0, r4, #21
 800a7ee:	4584      	cmp	ip, r0
 800a7f0:	bf38      	it	cc
 800a7f2:	2304      	movcc	r3, #4
 800a7f4:	50ca      	str	r2, [r1, r3]
 800a7f6:	b10a      	cbz	r2, 800a7fc <__lshift+0xa4>
 800a7f8:	f108 0602 	add.w	r6, r8, #2
 800a7fc:	3e01      	subs	r6, #1
 800a7fe:	4638      	mov	r0, r7
 800a800:	612e      	str	r6, [r5, #16]
 800a802:	4621      	mov	r1, r4
 800a804:	f7ff fd8e 	bl	800a324 <_Bfree>
 800a808:	4628      	mov	r0, r5
 800a80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a812:	3301      	adds	r3, #1
 800a814:	e7c5      	b.n	800a7a2 <__lshift+0x4a>
 800a816:	3904      	subs	r1, #4
 800a818:	f853 2b04 	ldr.w	r2, [r3], #4
 800a81c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a820:	459c      	cmp	ip, r3
 800a822:	d8f9      	bhi.n	800a818 <__lshift+0xc0>
 800a824:	e7ea      	b.n	800a7fc <__lshift+0xa4>
 800a826:	bf00      	nop
 800a828:	0800cc71 	.word	0x0800cc71
 800a82c:	0800cc82 	.word	0x0800cc82

0800a830 <__mcmp>:
 800a830:	b530      	push	{r4, r5, lr}
 800a832:	6902      	ldr	r2, [r0, #16]
 800a834:	690c      	ldr	r4, [r1, #16]
 800a836:	1b12      	subs	r2, r2, r4
 800a838:	d10e      	bne.n	800a858 <__mcmp+0x28>
 800a83a:	f100 0314 	add.w	r3, r0, #20
 800a83e:	3114      	adds	r1, #20
 800a840:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a844:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a848:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a84c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a850:	42a5      	cmp	r5, r4
 800a852:	d003      	beq.n	800a85c <__mcmp+0x2c>
 800a854:	d305      	bcc.n	800a862 <__mcmp+0x32>
 800a856:	2201      	movs	r2, #1
 800a858:	4610      	mov	r0, r2
 800a85a:	bd30      	pop	{r4, r5, pc}
 800a85c:	4283      	cmp	r3, r0
 800a85e:	d3f3      	bcc.n	800a848 <__mcmp+0x18>
 800a860:	e7fa      	b.n	800a858 <__mcmp+0x28>
 800a862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a866:	e7f7      	b.n	800a858 <__mcmp+0x28>

0800a868 <__mdiff>:
 800a868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	460c      	mov	r4, r1
 800a86e:	4606      	mov	r6, r0
 800a870:	4611      	mov	r1, r2
 800a872:	4620      	mov	r0, r4
 800a874:	4690      	mov	r8, r2
 800a876:	f7ff ffdb 	bl	800a830 <__mcmp>
 800a87a:	1e05      	subs	r5, r0, #0
 800a87c:	d110      	bne.n	800a8a0 <__mdiff+0x38>
 800a87e:	4629      	mov	r1, r5
 800a880:	4630      	mov	r0, r6
 800a882:	f7ff fd0f 	bl	800a2a4 <_Balloc>
 800a886:	b930      	cbnz	r0, 800a896 <__mdiff+0x2e>
 800a888:	4b3a      	ldr	r3, [pc, #232]	; (800a974 <__mdiff+0x10c>)
 800a88a:	4602      	mov	r2, r0
 800a88c:	f240 2137 	movw	r1, #567	; 0x237
 800a890:	4839      	ldr	r0, [pc, #228]	; (800a978 <__mdiff+0x110>)
 800a892:	f001 fc4d 	bl	800c130 <__assert_func>
 800a896:	2301      	movs	r3, #1
 800a898:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a89c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a0:	bfa4      	itt	ge
 800a8a2:	4643      	movge	r3, r8
 800a8a4:	46a0      	movge	r8, r4
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a8ac:	bfa6      	itte	ge
 800a8ae:	461c      	movge	r4, r3
 800a8b0:	2500      	movge	r5, #0
 800a8b2:	2501      	movlt	r5, #1
 800a8b4:	f7ff fcf6 	bl	800a2a4 <_Balloc>
 800a8b8:	b920      	cbnz	r0, 800a8c4 <__mdiff+0x5c>
 800a8ba:	4b2e      	ldr	r3, [pc, #184]	; (800a974 <__mdiff+0x10c>)
 800a8bc:	4602      	mov	r2, r0
 800a8be:	f240 2145 	movw	r1, #581	; 0x245
 800a8c2:	e7e5      	b.n	800a890 <__mdiff+0x28>
 800a8c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a8c8:	6926      	ldr	r6, [r4, #16]
 800a8ca:	60c5      	str	r5, [r0, #12]
 800a8cc:	f104 0914 	add.w	r9, r4, #20
 800a8d0:	f108 0514 	add.w	r5, r8, #20
 800a8d4:	f100 0e14 	add.w	lr, r0, #20
 800a8d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a8dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a8e0:	f108 0210 	add.w	r2, r8, #16
 800a8e4:	46f2      	mov	sl, lr
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a8ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a8f0:	fa11 f88b 	uxtah	r8, r1, fp
 800a8f4:	b299      	uxth	r1, r3
 800a8f6:	0c1b      	lsrs	r3, r3, #16
 800a8f8:	eba8 0801 	sub.w	r8, r8, r1
 800a8fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a900:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a904:	fa1f f888 	uxth.w	r8, r8
 800a908:	1419      	asrs	r1, r3, #16
 800a90a:	454e      	cmp	r6, r9
 800a90c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a910:	f84a 3b04 	str.w	r3, [sl], #4
 800a914:	d8e8      	bhi.n	800a8e8 <__mdiff+0x80>
 800a916:	1b33      	subs	r3, r6, r4
 800a918:	3b15      	subs	r3, #21
 800a91a:	f023 0303 	bic.w	r3, r3, #3
 800a91e:	3304      	adds	r3, #4
 800a920:	3415      	adds	r4, #21
 800a922:	42a6      	cmp	r6, r4
 800a924:	bf38      	it	cc
 800a926:	2304      	movcc	r3, #4
 800a928:	441d      	add	r5, r3
 800a92a:	4473      	add	r3, lr
 800a92c:	469e      	mov	lr, r3
 800a92e:	462e      	mov	r6, r5
 800a930:	4566      	cmp	r6, ip
 800a932:	d30e      	bcc.n	800a952 <__mdiff+0xea>
 800a934:	f10c 0203 	add.w	r2, ip, #3
 800a938:	1b52      	subs	r2, r2, r5
 800a93a:	f022 0203 	bic.w	r2, r2, #3
 800a93e:	3d03      	subs	r5, #3
 800a940:	45ac      	cmp	ip, r5
 800a942:	bf38      	it	cc
 800a944:	2200      	movcc	r2, #0
 800a946:	4413      	add	r3, r2
 800a948:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a94c:	b17a      	cbz	r2, 800a96e <__mdiff+0x106>
 800a94e:	6107      	str	r7, [r0, #16]
 800a950:	e7a4      	b.n	800a89c <__mdiff+0x34>
 800a952:	f856 8b04 	ldr.w	r8, [r6], #4
 800a956:	fa11 f288 	uxtah	r2, r1, r8
 800a95a:	1414      	asrs	r4, r2, #16
 800a95c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a960:	b292      	uxth	r2, r2
 800a962:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a966:	f84e 2b04 	str.w	r2, [lr], #4
 800a96a:	1421      	asrs	r1, r4, #16
 800a96c:	e7e0      	b.n	800a930 <__mdiff+0xc8>
 800a96e:	3f01      	subs	r7, #1
 800a970:	e7ea      	b.n	800a948 <__mdiff+0xe0>
 800a972:	bf00      	nop
 800a974:	0800cc71 	.word	0x0800cc71
 800a978:	0800cc82 	.word	0x0800cc82

0800a97c <__ulp>:
 800a97c:	b082      	sub	sp, #8
 800a97e:	ed8d 0b00 	vstr	d0, [sp]
 800a982:	9a01      	ldr	r2, [sp, #4]
 800a984:	4b0f      	ldr	r3, [pc, #60]	; (800a9c4 <__ulp+0x48>)
 800a986:	4013      	ands	r3, r2
 800a988:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	dc08      	bgt.n	800a9a2 <__ulp+0x26>
 800a990:	425b      	negs	r3, r3
 800a992:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a996:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a99a:	da04      	bge.n	800a9a6 <__ulp+0x2a>
 800a99c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a9a0:	4113      	asrs	r3, r2
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	e008      	b.n	800a9b8 <__ulp+0x3c>
 800a9a6:	f1a2 0314 	sub.w	r3, r2, #20
 800a9aa:	2b1e      	cmp	r3, #30
 800a9ac:	bfda      	itte	le
 800a9ae:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a9b2:	40da      	lsrle	r2, r3
 800a9b4:	2201      	movgt	r2, #1
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	ec41 0b10 	vmov	d0, r0, r1
 800a9c0:	b002      	add	sp, #8
 800a9c2:	4770      	bx	lr
 800a9c4:	7ff00000 	.word	0x7ff00000

0800a9c8 <__b2d>:
 800a9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9cc:	6906      	ldr	r6, [r0, #16]
 800a9ce:	f100 0814 	add.w	r8, r0, #20
 800a9d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a9d6:	1f37      	subs	r7, r6, #4
 800a9d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a9dc:	4610      	mov	r0, r2
 800a9de:	f7ff fd53 	bl	800a488 <__hi0bits>
 800a9e2:	f1c0 0320 	rsb	r3, r0, #32
 800a9e6:	280a      	cmp	r0, #10
 800a9e8:	600b      	str	r3, [r1, #0]
 800a9ea:	491b      	ldr	r1, [pc, #108]	; (800aa58 <__b2d+0x90>)
 800a9ec:	dc15      	bgt.n	800aa1a <__b2d+0x52>
 800a9ee:	f1c0 0c0b 	rsb	ip, r0, #11
 800a9f2:	fa22 f30c 	lsr.w	r3, r2, ip
 800a9f6:	45b8      	cmp	r8, r7
 800a9f8:	ea43 0501 	orr.w	r5, r3, r1
 800a9fc:	bf34      	ite	cc
 800a9fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa02:	2300      	movcs	r3, #0
 800aa04:	3015      	adds	r0, #21
 800aa06:	fa02 f000 	lsl.w	r0, r2, r0
 800aa0a:	fa23 f30c 	lsr.w	r3, r3, ip
 800aa0e:	4303      	orrs	r3, r0
 800aa10:	461c      	mov	r4, r3
 800aa12:	ec45 4b10 	vmov	d0, r4, r5
 800aa16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa1a:	45b8      	cmp	r8, r7
 800aa1c:	bf3a      	itte	cc
 800aa1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa22:	f1a6 0708 	subcc.w	r7, r6, #8
 800aa26:	2300      	movcs	r3, #0
 800aa28:	380b      	subs	r0, #11
 800aa2a:	d012      	beq.n	800aa52 <__b2d+0x8a>
 800aa2c:	f1c0 0120 	rsb	r1, r0, #32
 800aa30:	fa23 f401 	lsr.w	r4, r3, r1
 800aa34:	4082      	lsls	r2, r0
 800aa36:	4322      	orrs	r2, r4
 800aa38:	4547      	cmp	r7, r8
 800aa3a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800aa3e:	bf8c      	ite	hi
 800aa40:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aa44:	2200      	movls	r2, #0
 800aa46:	4083      	lsls	r3, r0
 800aa48:	40ca      	lsrs	r2, r1
 800aa4a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	e7de      	b.n	800aa10 <__b2d+0x48>
 800aa52:	ea42 0501 	orr.w	r5, r2, r1
 800aa56:	e7db      	b.n	800aa10 <__b2d+0x48>
 800aa58:	3ff00000 	.word	0x3ff00000

0800aa5c <__d2b>:
 800aa5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa60:	460f      	mov	r7, r1
 800aa62:	2101      	movs	r1, #1
 800aa64:	ec59 8b10 	vmov	r8, r9, d0
 800aa68:	4616      	mov	r6, r2
 800aa6a:	f7ff fc1b 	bl	800a2a4 <_Balloc>
 800aa6e:	4604      	mov	r4, r0
 800aa70:	b930      	cbnz	r0, 800aa80 <__d2b+0x24>
 800aa72:	4602      	mov	r2, r0
 800aa74:	4b24      	ldr	r3, [pc, #144]	; (800ab08 <__d2b+0xac>)
 800aa76:	4825      	ldr	r0, [pc, #148]	; (800ab0c <__d2b+0xb0>)
 800aa78:	f240 310f 	movw	r1, #783	; 0x30f
 800aa7c:	f001 fb58 	bl	800c130 <__assert_func>
 800aa80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa88:	bb2d      	cbnz	r5, 800aad6 <__d2b+0x7a>
 800aa8a:	9301      	str	r3, [sp, #4]
 800aa8c:	f1b8 0300 	subs.w	r3, r8, #0
 800aa90:	d026      	beq.n	800aae0 <__d2b+0x84>
 800aa92:	4668      	mov	r0, sp
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	f7ff fd17 	bl	800a4c8 <__lo0bits>
 800aa9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa9e:	b1e8      	cbz	r0, 800aadc <__d2b+0x80>
 800aaa0:	f1c0 0320 	rsb	r3, r0, #32
 800aaa4:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa8:	430b      	orrs	r3, r1
 800aaaa:	40c2      	lsrs	r2, r0
 800aaac:	6163      	str	r3, [r4, #20]
 800aaae:	9201      	str	r2, [sp, #4]
 800aab0:	9b01      	ldr	r3, [sp, #4]
 800aab2:	61a3      	str	r3, [r4, #24]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	bf14      	ite	ne
 800aab8:	2202      	movne	r2, #2
 800aaba:	2201      	moveq	r2, #1
 800aabc:	6122      	str	r2, [r4, #16]
 800aabe:	b1bd      	cbz	r5, 800aaf0 <__d2b+0x94>
 800aac0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aac4:	4405      	add	r5, r0
 800aac6:	603d      	str	r5, [r7, #0]
 800aac8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aacc:	6030      	str	r0, [r6, #0]
 800aace:	4620      	mov	r0, r4
 800aad0:	b003      	add	sp, #12
 800aad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aada:	e7d6      	b.n	800aa8a <__d2b+0x2e>
 800aadc:	6161      	str	r1, [r4, #20]
 800aade:	e7e7      	b.n	800aab0 <__d2b+0x54>
 800aae0:	a801      	add	r0, sp, #4
 800aae2:	f7ff fcf1 	bl	800a4c8 <__lo0bits>
 800aae6:	9b01      	ldr	r3, [sp, #4]
 800aae8:	6163      	str	r3, [r4, #20]
 800aaea:	3020      	adds	r0, #32
 800aaec:	2201      	movs	r2, #1
 800aaee:	e7e5      	b.n	800aabc <__d2b+0x60>
 800aaf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aaf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aaf8:	6038      	str	r0, [r7, #0]
 800aafa:	6918      	ldr	r0, [r3, #16]
 800aafc:	f7ff fcc4 	bl	800a488 <__hi0bits>
 800ab00:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab04:	e7e2      	b.n	800aacc <__d2b+0x70>
 800ab06:	bf00      	nop
 800ab08:	0800cc71 	.word	0x0800cc71
 800ab0c:	0800cc82 	.word	0x0800cc82

0800ab10 <__ratio>:
 800ab10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab14:	4688      	mov	r8, r1
 800ab16:	4669      	mov	r1, sp
 800ab18:	4681      	mov	r9, r0
 800ab1a:	f7ff ff55 	bl	800a9c8 <__b2d>
 800ab1e:	a901      	add	r1, sp, #4
 800ab20:	4640      	mov	r0, r8
 800ab22:	ec55 4b10 	vmov	r4, r5, d0
 800ab26:	f7ff ff4f 	bl	800a9c8 <__b2d>
 800ab2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab2e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab32:	eba3 0c02 	sub.w	ip, r3, r2
 800ab36:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab3a:	1a9b      	subs	r3, r3, r2
 800ab3c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab40:	ec51 0b10 	vmov	r0, r1, d0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	bfd6      	itet	le
 800ab48:	460a      	movle	r2, r1
 800ab4a:	462a      	movgt	r2, r5
 800ab4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab50:	468b      	mov	fp, r1
 800ab52:	462f      	mov	r7, r5
 800ab54:	bfd4      	ite	le
 800ab56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ab5a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab5e:	4620      	mov	r0, r4
 800ab60:	ee10 2a10 	vmov	r2, s0
 800ab64:	465b      	mov	r3, fp
 800ab66:	4639      	mov	r1, r7
 800ab68:	f7f5 fe70 	bl	800084c <__aeabi_ddiv>
 800ab6c:	ec41 0b10 	vmov	d0, r0, r1
 800ab70:	b003      	add	sp, #12
 800ab72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab76 <__copybits>:
 800ab76:	3901      	subs	r1, #1
 800ab78:	b570      	push	{r4, r5, r6, lr}
 800ab7a:	1149      	asrs	r1, r1, #5
 800ab7c:	6914      	ldr	r4, [r2, #16]
 800ab7e:	3101      	adds	r1, #1
 800ab80:	f102 0314 	add.w	r3, r2, #20
 800ab84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab8c:	1f05      	subs	r5, r0, #4
 800ab8e:	42a3      	cmp	r3, r4
 800ab90:	d30c      	bcc.n	800abac <__copybits+0x36>
 800ab92:	1aa3      	subs	r3, r4, r2
 800ab94:	3b11      	subs	r3, #17
 800ab96:	f023 0303 	bic.w	r3, r3, #3
 800ab9a:	3211      	adds	r2, #17
 800ab9c:	42a2      	cmp	r2, r4
 800ab9e:	bf88      	it	hi
 800aba0:	2300      	movhi	r3, #0
 800aba2:	4418      	add	r0, r3
 800aba4:	2300      	movs	r3, #0
 800aba6:	4288      	cmp	r0, r1
 800aba8:	d305      	bcc.n	800abb6 <__copybits+0x40>
 800abaa:	bd70      	pop	{r4, r5, r6, pc}
 800abac:	f853 6b04 	ldr.w	r6, [r3], #4
 800abb0:	f845 6f04 	str.w	r6, [r5, #4]!
 800abb4:	e7eb      	b.n	800ab8e <__copybits+0x18>
 800abb6:	f840 3b04 	str.w	r3, [r0], #4
 800abba:	e7f4      	b.n	800aba6 <__copybits+0x30>

0800abbc <__any_on>:
 800abbc:	f100 0214 	add.w	r2, r0, #20
 800abc0:	6900      	ldr	r0, [r0, #16]
 800abc2:	114b      	asrs	r3, r1, #5
 800abc4:	4298      	cmp	r0, r3
 800abc6:	b510      	push	{r4, lr}
 800abc8:	db11      	blt.n	800abee <__any_on+0x32>
 800abca:	dd0a      	ble.n	800abe2 <__any_on+0x26>
 800abcc:	f011 011f 	ands.w	r1, r1, #31
 800abd0:	d007      	beq.n	800abe2 <__any_on+0x26>
 800abd2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800abd6:	fa24 f001 	lsr.w	r0, r4, r1
 800abda:	fa00 f101 	lsl.w	r1, r0, r1
 800abde:	428c      	cmp	r4, r1
 800abe0:	d10b      	bne.n	800abfa <__any_on+0x3e>
 800abe2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d803      	bhi.n	800abf2 <__any_on+0x36>
 800abea:	2000      	movs	r0, #0
 800abec:	bd10      	pop	{r4, pc}
 800abee:	4603      	mov	r3, r0
 800abf0:	e7f7      	b.n	800abe2 <__any_on+0x26>
 800abf2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abf6:	2900      	cmp	r1, #0
 800abf8:	d0f5      	beq.n	800abe6 <__any_on+0x2a>
 800abfa:	2001      	movs	r0, #1
 800abfc:	e7f6      	b.n	800abec <__any_on+0x30>

0800abfe <sulp>:
 800abfe:	b570      	push	{r4, r5, r6, lr}
 800ac00:	4604      	mov	r4, r0
 800ac02:	460d      	mov	r5, r1
 800ac04:	ec45 4b10 	vmov	d0, r4, r5
 800ac08:	4616      	mov	r6, r2
 800ac0a:	f7ff feb7 	bl	800a97c <__ulp>
 800ac0e:	ec51 0b10 	vmov	r0, r1, d0
 800ac12:	b17e      	cbz	r6, 800ac34 <sulp+0x36>
 800ac14:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ac18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dd09      	ble.n	800ac34 <sulp+0x36>
 800ac20:	051b      	lsls	r3, r3, #20
 800ac22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ac26:	2400      	movs	r4, #0
 800ac28:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ac2c:	4622      	mov	r2, r4
 800ac2e:	462b      	mov	r3, r5
 800ac30:	f7f5 fce2 	bl	80005f8 <__aeabi_dmul>
 800ac34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac38 <_strtod_l>:
 800ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3c:	ed2d 8b02 	vpush	{d8}
 800ac40:	b09b      	sub	sp, #108	; 0x6c
 800ac42:	4604      	mov	r4, r0
 800ac44:	9213      	str	r2, [sp, #76]	; 0x4c
 800ac46:	2200      	movs	r2, #0
 800ac48:	9216      	str	r2, [sp, #88]	; 0x58
 800ac4a:	460d      	mov	r5, r1
 800ac4c:	f04f 0800 	mov.w	r8, #0
 800ac50:	f04f 0900 	mov.w	r9, #0
 800ac54:	460a      	mov	r2, r1
 800ac56:	9215      	str	r2, [sp, #84]	; 0x54
 800ac58:	7811      	ldrb	r1, [r2, #0]
 800ac5a:	292b      	cmp	r1, #43	; 0x2b
 800ac5c:	d04c      	beq.n	800acf8 <_strtod_l+0xc0>
 800ac5e:	d83a      	bhi.n	800acd6 <_strtod_l+0x9e>
 800ac60:	290d      	cmp	r1, #13
 800ac62:	d834      	bhi.n	800acce <_strtod_l+0x96>
 800ac64:	2908      	cmp	r1, #8
 800ac66:	d834      	bhi.n	800acd2 <_strtod_l+0x9a>
 800ac68:	2900      	cmp	r1, #0
 800ac6a:	d03d      	beq.n	800ace8 <_strtod_l+0xb0>
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	920a      	str	r2, [sp, #40]	; 0x28
 800ac70:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ac72:	7832      	ldrb	r2, [r6, #0]
 800ac74:	2a30      	cmp	r2, #48	; 0x30
 800ac76:	f040 80b4 	bne.w	800ade2 <_strtod_l+0x1aa>
 800ac7a:	7872      	ldrb	r2, [r6, #1]
 800ac7c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ac80:	2a58      	cmp	r2, #88	; 0x58
 800ac82:	d170      	bne.n	800ad66 <_strtod_l+0x12e>
 800ac84:	9302      	str	r3, [sp, #8]
 800ac86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac88:	9301      	str	r3, [sp, #4]
 800ac8a:	ab16      	add	r3, sp, #88	; 0x58
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	4a8e      	ldr	r2, [pc, #568]	; (800aec8 <_strtod_l+0x290>)
 800ac90:	ab17      	add	r3, sp, #92	; 0x5c
 800ac92:	a915      	add	r1, sp, #84	; 0x54
 800ac94:	4620      	mov	r0, r4
 800ac96:	f001 fae7 	bl	800c268 <__gethex>
 800ac9a:	f010 070f 	ands.w	r7, r0, #15
 800ac9e:	4605      	mov	r5, r0
 800aca0:	d005      	beq.n	800acae <_strtod_l+0x76>
 800aca2:	2f06      	cmp	r7, #6
 800aca4:	d12a      	bne.n	800acfc <_strtod_l+0xc4>
 800aca6:	3601      	adds	r6, #1
 800aca8:	2300      	movs	r3, #0
 800acaa:	9615      	str	r6, [sp, #84]	; 0x54
 800acac:	930a      	str	r3, [sp, #40]	; 0x28
 800acae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f040 857f 	bne.w	800b7b4 <_strtod_l+0xb7c>
 800acb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acb8:	b1db      	cbz	r3, 800acf2 <_strtod_l+0xba>
 800acba:	4642      	mov	r2, r8
 800acbc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800acc0:	ec43 2b10 	vmov	d0, r2, r3
 800acc4:	b01b      	add	sp, #108	; 0x6c
 800acc6:	ecbd 8b02 	vpop	{d8}
 800acca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acce:	2920      	cmp	r1, #32
 800acd0:	d1cc      	bne.n	800ac6c <_strtod_l+0x34>
 800acd2:	3201      	adds	r2, #1
 800acd4:	e7bf      	b.n	800ac56 <_strtod_l+0x1e>
 800acd6:	292d      	cmp	r1, #45	; 0x2d
 800acd8:	d1c8      	bne.n	800ac6c <_strtod_l+0x34>
 800acda:	2101      	movs	r1, #1
 800acdc:	910a      	str	r1, [sp, #40]	; 0x28
 800acde:	1c51      	adds	r1, r2, #1
 800ace0:	9115      	str	r1, [sp, #84]	; 0x54
 800ace2:	7852      	ldrb	r2, [r2, #1]
 800ace4:	2a00      	cmp	r2, #0
 800ace6:	d1c3      	bne.n	800ac70 <_strtod_l+0x38>
 800ace8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acea:	9515      	str	r5, [sp, #84]	; 0x54
 800acec:	2b00      	cmp	r3, #0
 800acee:	f040 855f 	bne.w	800b7b0 <_strtod_l+0xb78>
 800acf2:	4642      	mov	r2, r8
 800acf4:	464b      	mov	r3, r9
 800acf6:	e7e3      	b.n	800acc0 <_strtod_l+0x88>
 800acf8:	2100      	movs	r1, #0
 800acfa:	e7ef      	b.n	800acdc <_strtod_l+0xa4>
 800acfc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800acfe:	b13a      	cbz	r2, 800ad10 <_strtod_l+0xd8>
 800ad00:	2135      	movs	r1, #53	; 0x35
 800ad02:	a818      	add	r0, sp, #96	; 0x60
 800ad04:	f7ff ff37 	bl	800ab76 <__copybits>
 800ad08:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f7ff fb0a 	bl	800a324 <_Bfree>
 800ad10:	3f01      	subs	r7, #1
 800ad12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad14:	2f04      	cmp	r7, #4
 800ad16:	d806      	bhi.n	800ad26 <_strtod_l+0xee>
 800ad18:	e8df f007 	tbb	[pc, r7]
 800ad1c:	201d0314 	.word	0x201d0314
 800ad20:	14          	.byte	0x14
 800ad21:	00          	.byte	0x00
 800ad22:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ad26:	05e9      	lsls	r1, r5, #23
 800ad28:	bf48      	it	mi
 800ad2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ad2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad32:	0d1b      	lsrs	r3, r3, #20
 800ad34:	051b      	lsls	r3, r3, #20
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1b9      	bne.n	800acae <_strtod_l+0x76>
 800ad3a:	f7fe fba9 	bl	8009490 <__errno>
 800ad3e:	2322      	movs	r3, #34	; 0x22
 800ad40:	6003      	str	r3, [r0, #0]
 800ad42:	e7b4      	b.n	800acae <_strtod_l+0x76>
 800ad44:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ad48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ad4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ad50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ad54:	e7e7      	b.n	800ad26 <_strtod_l+0xee>
 800ad56:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800aed0 <_strtod_l+0x298>
 800ad5a:	e7e4      	b.n	800ad26 <_strtod_l+0xee>
 800ad5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ad60:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ad64:	e7df      	b.n	800ad26 <_strtod_l+0xee>
 800ad66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad68:	1c5a      	adds	r2, r3, #1
 800ad6a:	9215      	str	r2, [sp, #84]	; 0x54
 800ad6c:	785b      	ldrb	r3, [r3, #1]
 800ad6e:	2b30      	cmp	r3, #48	; 0x30
 800ad70:	d0f9      	beq.n	800ad66 <_strtod_l+0x12e>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d09b      	beq.n	800acae <_strtod_l+0x76>
 800ad76:	2301      	movs	r3, #1
 800ad78:	f04f 0a00 	mov.w	sl, #0
 800ad7c:	9304      	str	r3, [sp, #16]
 800ad7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad80:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad82:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ad86:	46d3      	mov	fp, sl
 800ad88:	220a      	movs	r2, #10
 800ad8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ad8c:	7806      	ldrb	r6, [r0, #0]
 800ad8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ad92:	b2d9      	uxtb	r1, r3
 800ad94:	2909      	cmp	r1, #9
 800ad96:	d926      	bls.n	800ade6 <_strtod_l+0x1ae>
 800ad98:	494c      	ldr	r1, [pc, #304]	; (800aecc <_strtod_l+0x294>)
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f001 f98c 	bl	800c0b8 <strncmp>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d030      	beq.n	800ae06 <_strtod_l+0x1ce>
 800ada4:	2000      	movs	r0, #0
 800ada6:	4632      	mov	r2, r6
 800ada8:	9005      	str	r0, [sp, #20]
 800adaa:	465e      	mov	r6, fp
 800adac:	4603      	mov	r3, r0
 800adae:	2a65      	cmp	r2, #101	; 0x65
 800adb0:	d001      	beq.n	800adb6 <_strtod_l+0x17e>
 800adb2:	2a45      	cmp	r2, #69	; 0x45
 800adb4:	d113      	bne.n	800adde <_strtod_l+0x1a6>
 800adb6:	b91e      	cbnz	r6, 800adc0 <_strtod_l+0x188>
 800adb8:	9a04      	ldr	r2, [sp, #16]
 800adba:	4302      	orrs	r2, r0
 800adbc:	d094      	beq.n	800ace8 <_strtod_l+0xb0>
 800adbe:	2600      	movs	r6, #0
 800adc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800adc2:	1c6a      	adds	r2, r5, #1
 800adc4:	9215      	str	r2, [sp, #84]	; 0x54
 800adc6:	786a      	ldrb	r2, [r5, #1]
 800adc8:	2a2b      	cmp	r2, #43	; 0x2b
 800adca:	d074      	beq.n	800aeb6 <_strtod_l+0x27e>
 800adcc:	2a2d      	cmp	r2, #45	; 0x2d
 800adce:	d078      	beq.n	800aec2 <_strtod_l+0x28a>
 800add0:	f04f 0c00 	mov.w	ip, #0
 800add4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800add8:	2909      	cmp	r1, #9
 800adda:	d97f      	bls.n	800aedc <_strtod_l+0x2a4>
 800addc:	9515      	str	r5, [sp, #84]	; 0x54
 800adde:	2700      	movs	r7, #0
 800ade0:	e09e      	b.n	800af20 <_strtod_l+0x2e8>
 800ade2:	2300      	movs	r3, #0
 800ade4:	e7c8      	b.n	800ad78 <_strtod_l+0x140>
 800ade6:	f1bb 0f08 	cmp.w	fp, #8
 800adea:	bfd8      	it	le
 800adec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800adee:	f100 0001 	add.w	r0, r0, #1
 800adf2:	bfda      	itte	le
 800adf4:	fb02 3301 	mlale	r3, r2, r1, r3
 800adf8:	9309      	strle	r3, [sp, #36]	; 0x24
 800adfa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800adfe:	f10b 0b01 	add.w	fp, fp, #1
 800ae02:	9015      	str	r0, [sp, #84]	; 0x54
 800ae04:	e7c1      	b.n	800ad8a <_strtod_l+0x152>
 800ae06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae08:	1c5a      	adds	r2, r3, #1
 800ae0a:	9215      	str	r2, [sp, #84]	; 0x54
 800ae0c:	785a      	ldrb	r2, [r3, #1]
 800ae0e:	f1bb 0f00 	cmp.w	fp, #0
 800ae12:	d037      	beq.n	800ae84 <_strtod_l+0x24c>
 800ae14:	9005      	str	r0, [sp, #20]
 800ae16:	465e      	mov	r6, fp
 800ae18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ae1c:	2b09      	cmp	r3, #9
 800ae1e:	d912      	bls.n	800ae46 <_strtod_l+0x20e>
 800ae20:	2301      	movs	r3, #1
 800ae22:	e7c4      	b.n	800adae <_strtod_l+0x176>
 800ae24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae26:	1c5a      	adds	r2, r3, #1
 800ae28:	9215      	str	r2, [sp, #84]	; 0x54
 800ae2a:	785a      	ldrb	r2, [r3, #1]
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	2a30      	cmp	r2, #48	; 0x30
 800ae30:	d0f8      	beq.n	800ae24 <_strtod_l+0x1ec>
 800ae32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ae36:	2b08      	cmp	r3, #8
 800ae38:	f200 84c1 	bhi.w	800b7be <_strtod_l+0xb86>
 800ae3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae3e:	9005      	str	r0, [sp, #20]
 800ae40:	2000      	movs	r0, #0
 800ae42:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae44:	4606      	mov	r6, r0
 800ae46:	3a30      	subs	r2, #48	; 0x30
 800ae48:	f100 0301 	add.w	r3, r0, #1
 800ae4c:	d014      	beq.n	800ae78 <_strtod_l+0x240>
 800ae4e:	9905      	ldr	r1, [sp, #20]
 800ae50:	4419      	add	r1, r3
 800ae52:	9105      	str	r1, [sp, #20]
 800ae54:	4633      	mov	r3, r6
 800ae56:	eb00 0c06 	add.w	ip, r0, r6
 800ae5a:	210a      	movs	r1, #10
 800ae5c:	4563      	cmp	r3, ip
 800ae5e:	d113      	bne.n	800ae88 <_strtod_l+0x250>
 800ae60:	1833      	adds	r3, r6, r0
 800ae62:	2b08      	cmp	r3, #8
 800ae64:	f106 0601 	add.w	r6, r6, #1
 800ae68:	4406      	add	r6, r0
 800ae6a:	dc1a      	bgt.n	800aea2 <_strtod_l+0x26a>
 800ae6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae6e:	230a      	movs	r3, #10
 800ae70:	fb03 2301 	mla	r3, r3, r1, r2
 800ae74:	9309      	str	r3, [sp, #36]	; 0x24
 800ae76:	2300      	movs	r3, #0
 800ae78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ae7a:	1c51      	adds	r1, r2, #1
 800ae7c:	9115      	str	r1, [sp, #84]	; 0x54
 800ae7e:	7852      	ldrb	r2, [r2, #1]
 800ae80:	4618      	mov	r0, r3
 800ae82:	e7c9      	b.n	800ae18 <_strtod_l+0x1e0>
 800ae84:	4658      	mov	r0, fp
 800ae86:	e7d2      	b.n	800ae2e <_strtod_l+0x1f6>
 800ae88:	2b08      	cmp	r3, #8
 800ae8a:	f103 0301 	add.w	r3, r3, #1
 800ae8e:	dc03      	bgt.n	800ae98 <_strtod_l+0x260>
 800ae90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ae92:	434f      	muls	r7, r1
 800ae94:	9709      	str	r7, [sp, #36]	; 0x24
 800ae96:	e7e1      	b.n	800ae5c <_strtod_l+0x224>
 800ae98:	2b10      	cmp	r3, #16
 800ae9a:	bfd8      	it	le
 800ae9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800aea0:	e7dc      	b.n	800ae5c <_strtod_l+0x224>
 800aea2:	2e10      	cmp	r6, #16
 800aea4:	bfdc      	itt	le
 800aea6:	230a      	movle	r3, #10
 800aea8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800aeac:	e7e3      	b.n	800ae76 <_strtod_l+0x23e>
 800aeae:	2300      	movs	r3, #0
 800aeb0:	9305      	str	r3, [sp, #20]
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e780      	b.n	800adb8 <_strtod_l+0x180>
 800aeb6:	f04f 0c00 	mov.w	ip, #0
 800aeba:	1caa      	adds	r2, r5, #2
 800aebc:	9215      	str	r2, [sp, #84]	; 0x54
 800aebe:	78aa      	ldrb	r2, [r5, #2]
 800aec0:	e788      	b.n	800add4 <_strtod_l+0x19c>
 800aec2:	f04f 0c01 	mov.w	ip, #1
 800aec6:	e7f8      	b.n	800aeba <_strtod_l+0x282>
 800aec8:	0800cde0 	.word	0x0800cde0
 800aecc:	0800cddc 	.word	0x0800cddc
 800aed0:	7ff00000 	.word	0x7ff00000
 800aed4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aed6:	1c51      	adds	r1, r2, #1
 800aed8:	9115      	str	r1, [sp, #84]	; 0x54
 800aeda:	7852      	ldrb	r2, [r2, #1]
 800aedc:	2a30      	cmp	r2, #48	; 0x30
 800aede:	d0f9      	beq.n	800aed4 <_strtod_l+0x29c>
 800aee0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aee4:	2908      	cmp	r1, #8
 800aee6:	f63f af7a 	bhi.w	800adde <_strtod_l+0x1a6>
 800aeea:	3a30      	subs	r2, #48	; 0x30
 800aeec:	9208      	str	r2, [sp, #32]
 800aeee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aef0:	920c      	str	r2, [sp, #48]	; 0x30
 800aef2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aef4:	1c57      	adds	r7, r2, #1
 800aef6:	9715      	str	r7, [sp, #84]	; 0x54
 800aef8:	7852      	ldrb	r2, [r2, #1]
 800aefa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aefe:	f1be 0f09 	cmp.w	lr, #9
 800af02:	d938      	bls.n	800af76 <_strtod_l+0x33e>
 800af04:	990c      	ldr	r1, [sp, #48]	; 0x30
 800af06:	1a7f      	subs	r7, r7, r1
 800af08:	2f08      	cmp	r7, #8
 800af0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800af0e:	dc03      	bgt.n	800af18 <_strtod_l+0x2e0>
 800af10:	9908      	ldr	r1, [sp, #32]
 800af12:	428f      	cmp	r7, r1
 800af14:	bfa8      	it	ge
 800af16:	460f      	movge	r7, r1
 800af18:	f1bc 0f00 	cmp.w	ip, #0
 800af1c:	d000      	beq.n	800af20 <_strtod_l+0x2e8>
 800af1e:	427f      	negs	r7, r7
 800af20:	2e00      	cmp	r6, #0
 800af22:	d14f      	bne.n	800afc4 <_strtod_l+0x38c>
 800af24:	9904      	ldr	r1, [sp, #16]
 800af26:	4301      	orrs	r1, r0
 800af28:	f47f aec1 	bne.w	800acae <_strtod_l+0x76>
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f47f aedb 	bne.w	800ace8 <_strtod_l+0xb0>
 800af32:	2a69      	cmp	r2, #105	; 0x69
 800af34:	d029      	beq.n	800af8a <_strtod_l+0x352>
 800af36:	dc26      	bgt.n	800af86 <_strtod_l+0x34e>
 800af38:	2a49      	cmp	r2, #73	; 0x49
 800af3a:	d026      	beq.n	800af8a <_strtod_l+0x352>
 800af3c:	2a4e      	cmp	r2, #78	; 0x4e
 800af3e:	f47f aed3 	bne.w	800ace8 <_strtod_l+0xb0>
 800af42:	499b      	ldr	r1, [pc, #620]	; (800b1b0 <_strtod_l+0x578>)
 800af44:	a815      	add	r0, sp, #84	; 0x54
 800af46:	f001 fbcf 	bl	800c6e8 <__match>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	f43f aecc 	beq.w	800ace8 <_strtod_l+0xb0>
 800af50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	2b28      	cmp	r3, #40	; 0x28
 800af56:	d12f      	bne.n	800afb8 <_strtod_l+0x380>
 800af58:	4996      	ldr	r1, [pc, #600]	; (800b1b4 <_strtod_l+0x57c>)
 800af5a:	aa18      	add	r2, sp, #96	; 0x60
 800af5c:	a815      	add	r0, sp, #84	; 0x54
 800af5e:	f001 fbd7 	bl	800c710 <__hexnan>
 800af62:	2805      	cmp	r0, #5
 800af64:	d128      	bne.n	800afb8 <_strtod_l+0x380>
 800af66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800af70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800af74:	e69b      	b.n	800acae <_strtod_l+0x76>
 800af76:	9f08      	ldr	r7, [sp, #32]
 800af78:	210a      	movs	r1, #10
 800af7a:	fb01 2107 	mla	r1, r1, r7, r2
 800af7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800af82:	9208      	str	r2, [sp, #32]
 800af84:	e7b5      	b.n	800aef2 <_strtod_l+0x2ba>
 800af86:	2a6e      	cmp	r2, #110	; 0x6e
 800af88:	e7d9      	b.n	800af3e <_strtod_l+0x306>
 800af8a:	498b      	ldr	r1, [pc, #556]	; (800b1b8 <_strtod_l+0x580>)
 800af8c:	a815      	add	r0, sp, #84	; 0x54
 800af8e:	f001 fbab 	bl	800c6e8 <__match>
 800af92:	2800      	cmp	r0, #0
 800af94:	f43f aea8 	beq.w	800ace8 <_strtod_l+0xb0>
 800af98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af9a:	4988      	ldr	r1, [pc, #544]	; (800b1bc <_strtod_l+0x584>)
 800af9c:	3b01      	subs	r3, #1
 800af9e:	a815      	add	r0, sp, #84	; 0x54
 800afa0:	9315      	str	r3, [sp, #84]	; 0x54
 800afa2:	f001 fba1 	bl	800c6e8 <__match>
 800afa6:	b910      	cbnz	r0, 800afae <_strtod_l+0x376>
 800afa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afaa:	3301      	adds	r3, #1
 800afac:	9315      	str	r3, [sp, #84]	; 0x54
 800afae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b1cc <_strtod_l+0x594>
 800afb2:	f04f 0800 	mov.w	r8, #0
 800afb6:	e67a      	b.n	800acae <_strtod_l+0x76>
 800afb8:	4881      	ldr	r0, [pc, #516]	; (800b1c0 <_strtod_l+0x588>)
 800afba:	f001 f8b1 	bl	800c120 <nan>
 800afbe:	ec59 8b10 	vmov	r8, r9, d0
 800afc2:	e674      	b.n	800acae <_strtod_l+0x76>
 800afc4:	9b05      	ldr	r3, [sp, #20]
 800afc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afc8:	1afb      	subs	r3, r7, r3
 800afca:	f1bb 0f00 	cmp.w	fp, #0
 800afce:	bf08      	it	eq
 800afd0:	46b3      	moveq	fp, r6
 800afd2:	2e10      	cmp	r6, #16
 800afd4:	9308      	str	r3, [sp, #32]
 800afd6:	4635      	mov	r5, r6
 800afd8:	bfa8      	it	ge
 800afda:	2510      	movge	r5, #16
 800afdc:	f7f5 fa92 	bl	8000504 <__aeabi_ui2d>
 800afe0:	2e09      	cmp	r6, #9
 800afe2:	4680      	mov	r8, r0
 800afe4:	4689      	mov	r9, r1
 800afe6:	dd13      	ble.n	800b010 <_strtod_l+0x3d8>
 800afe8:	4b76      	ldr	r3, [pc, #472]	; (800b1c4 <_strtod_l+0x58c>)
 800afea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800afee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aff2:	f7f5 fb01 	bl	80005f8 <__aeabi_dmul>
 800aff6:	4680      	mov	r8, r0
 800aff8:	4650      	mov	r0, sl
 800affa:	4689      	mov	r9, r1
 800affc:	f7f5 fa82 	bl	8000504 <__aeabi_ui2d>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	4640      	mov	r0, r8
 800b006:	4649      	mov	r1, r9
 800b008:	f7f5 f940 	bl	800028c <__adddf3>
 800b00c:	4680      	mov	r8, r0
 800b00e:	4689      	mov	r9, r1
 800b010:	2e0f      	cmp	r6, #15
 800b012:	dc38      	bgt.n	800b086 <_strtod_l+0x44e>
 800b014:	9b08      	ldr	r3, [sp, #32]
 800b016:	2b00      	cmp	r3, #0
 800b018:	f43f ae49 	beq.w	800acae <_strtod_l+0x76>
 800b01c:	dd24      	ble.n	800b068 <_strtod_l+0x430>
 800b01e:	2b16      	cmp	r3, #22
 800b020:	dc0b      	bgt.n	800b03a <_strtod_l+0x402>
 800b022:	4968      	ldr	r1, [pc, #416]	; (800b1c4 <_strtod_l+0x58c>)
 800b024:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b02c:	4642      	mov	r2, r8
 800b02e:	464b      	mov	r3, r9
 800b030:	f7f5 fae2 	bl	80005f8 <__aeabi_dmul>
 800b034:	4680      	mov	r8, r0
 800b036:	4689      	mov	r9, r1
 800b038:	e639      	b.n	800acae <_strtod_l+0x76>
 800b03a:	9a08      	ldr	r2, [sp, #32]
 800b03c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b040:	4293      	cmp	r3, r2
 800b042:	db20      	blt.n	800b086 <_strtod_l+0x44e>
 800b044:	4c5f      	ldr	r4, [pc, #380]	; (800b1c4 <_strtod_l+0x58c>)
 800b046:	f1c6 060f 	rsb	r6, r6, #15
 800b04a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b04e:	4642      	mov	r2, r8
 800b050:	464b      	mov	r3, r9
 800b052:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b056:	f7f5 facf 	bl	80005f8 <__aeabi_dmul>
 800b05a:	9b08      	ldr	r3, [sp, #32]
 800b05c:	1b9e      	subs	r6, r3, r6
 800b05e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b062:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b066:	e7e3      	b.n	800b030 <_strtod_l+0x3f8>
 800b068:	9b08      	ldr	r3, [sp, #32]
 800b06a:	3316      	adds	r3, #22
 800b06c:	db0b      	blt.n	800b086 <_strtod_l+0x44e>
 800b06e:	9b05      	ldr	r3, [sp, #20]
 800b070:	1bdf      	subs	r7, r3, r7
 800b072:	4b54      	ldr	r3, [pc, #336]	; (800b1c4 <_strtod_l+0x58c>)
 800b074:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b07c:	4640      	mov	r0, r8
 800b07e:	4649      	mov	r1, r9
 800b080:	f7f5 fbe4 	bl	800084c <__aeabi_ddiv>
 800b084:	e7d6      	b.n	800b034 <_strtod_l+0x3fc>
 800b086:	9b08      	ldr	r3, [sp, #32]
 800b088:	1b75      	subs	r5, r6, r5
 800b08a:	441d      	add	r5, r3
 800b08c:	2d00      	cmp	r5, #0
 800b08e:	dd70      	ble.n	800b172 <_strtod_l+0x53a>
 800b090:	f015 030f 	ands.w	r3, r5, #15
 800b094:	d00a      	beq.n	800b0ac <_strtod_l+0x474>
 800b096:	494b      	ldr	r1, [pc, #300]	; (800b1c4 <_strtod_l+0x58c>)
 800b098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b09c:	4642      	mov	r2, r8
 800b09e:	464b      	mov	r3, r9
 800b0a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0a4:	f7f5 faa8 	bl	80005f8 <__aeabi_dmul>
 800b0a8:	4680      	mov	r8, r0
 800b0aa:	4689      	mov	r9, r1
 800b0ac:	f035 050f 	bics.w	r5, r5, #15
 800b0b0:	d04d      	beq.n	800b14e <_strtod_l+0x516>
 800b0b2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b0b6:	dd22      	ble.n	800b0fe <_strtod_l+0x4c6>
 800b0b8:	2500      	movs	r5, #0
 800b0ba:	46ab      	mov	fp, r5
 800b0bc:	9509      	str	r5, [sp, #36]	; 0x24
 800b0be:	9505      	str	r5, [sp, #20]
 800b0c0:	2322      	movs	r3, #34	; 0x22
 800b0c2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b1cc <_strtod_l+0x594>
 800b0c6:	6023      	str	r3, [r4, #0]
 800b0c8:	f04f 0800 	mov.w	r8, #0
 800b0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f43f aded 	beq.w	800acae <_strtod_l+0x76>
 800b0d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f7ff f924 	bl	800a324 <_Bfree>
 800b0dc:	9905      	ldr	r1, [sp, #20]
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f7ff f920 	bl	800a324 <_Bfree>
 800b0e4:	4659      	mov	r1, fp
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f7ff f91c 	bl	800a324 <_Bfree>
 800b0ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f7ff f918 	bl	800a324 <_Bfree>
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f7ff f914 	bl	800a324 <_Bfree>
 800b0fc:	e5d7      	b.n	800acae <_strtod_l+0x76>
 800b0fe:	4b32      	ldr	r3, [pc, #200]	; (800b1c8 <_strtod_l+0x590>)
 800b100:	9304      	str	r3, [sp, #16]
 800b102:	2300      	movs	r3, #0
 800b104:	112d      	asrs	r5, r5, #4
 800b106:	4640      	mov	r0, r8
 800b108:	4649      	mov	r1, r9
 800b10a:	469a      	mov	sl, r3
 800b10c:	2d01      	cmp	r5, #1
 800b10e:	dc21      	bgt.n	800b154 <_strtod_l+0x51c>
 800b110:	b10b      	cbz	r3, 800b116 <_strtod_l+0x4de>
 800b112:	4680      	mov	r8, r0
 800b114:	4689      	mov	r9, r1
 800b116:	492c      	ldr	r1, [pc, #176]	; (800b1c8 <_strtod_l+0x590>)
 800b118:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b11c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b120:	4642      	mov	r2, r8
 800b122:	464b      	mov	r3, r9
 800b124:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b128:	f7f5 fa66 	bl	80005f8 <__aeabi_dmul>
 800b12c:	4b27      	ldr	r3, [pc, #156]	; (800b1cc <_strtod_l+0x594>)
 800b12e:	460a      	mov	r2, r1
 800b130:	400b      	ands	r3, r1
 800b132:	4927      	ldr	r1, [pc, #156]	; (800b1d0 <_strtod_l+0x598>)
 800b134:	428b      	cmp	r3, r1
 800b136:	4680      	mov	r8, r0
 800b138:	d8be      	bhi.n	800b0b8 <_strtod_l+0x480>
 800b13a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b13e:	428b      	cmp	r3, r1
 800b140:	bf86      	itte	hi
 800b142:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b1d4 <_strtod_l+0x59c>
 800b146:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800b14a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b14e:	2300      	movs	r3, #0
 800b150:	9304      	str	r3, [sp, #16]
 800b152:	e07b      	b.n	800b24c <_strtod_l+0x614>
 800b154:	07ea      	lsls	r2, r5, #31
 800b156:	d505      	bpl.n	800b164 <_strtod_l+0x52c>
 800b158:	9b04      	ldr	r3, [sp, #16]
 800b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15e:	f7f5 fa4b 	bl	80005f8 <__aeabi_dmul>
 800b162:	2301      	movs	r3, #1
 800b164:	9a04      	ldr	r2, [sp, #16]
 800b166:	3208      	adds	r2, #8
 800b168:	f10a 0a01 	add.w	sl, sl, #1
 800b16c:	106d      	asrs	r5, r5, #1
 800b16e:	9204      	str	r2, [sp, #16]
 800b170:	e7cc      	b.n	800b10c <_strtod_l+0x4d4>
 800b172:	d0ec      	beq.n	800b14e <_strtod_l+0x516>
 800b174:	426d      	negs	r5, r5
 800b176:	f015 020f 	ands.w	r2, r5, #15
 800b17a:	d00a      	beq.n	800b192 <_strtod_l+0x55a>
 800b17c:	4b11      	ldr	r3, [pc, #68]	; (800b1c4 <_strtod_l+0x58c>)
 800b17e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b182:	4640      	mov	r0, r8
 800b184:	4649      	mov	r1, r9
 800b186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18a:	f7f5 fb5f 	bl	800084c <__aeabi_ddiv>
 800b18e:	4680      	mov	r8, r0
 800b190:	4689      	mov	r9, r1
 800b192:	112d      	asrs	r5, r5, #4
 800b194:	d0db      	beq.n	800b14e <_strtod_l+0x516>
 800b196:	2d1f      	cmp	r5, #31
 800b198:	dd1e      	ble.n	800b1d8 <_strtod_l+0x5a0>
 800b19a:	2500      	movs	r5, #0
 800b19c:	46ab      	mov	fp, r5
 800b19e:	9509      	str	r5, [sp, #36]	; 0x24
 800b1a0:	9505      	str	r5, [sp, #20]
 800b1a2:	2322      	movs	r3, #34	; 0x22
 800b1a4:	f04f 0800 	mov.w	r8, #0
 800b1a8:	f04f 0900 	mov.w	r9, #0
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	e78d      	b.n	800b0cc <_strtod_l+0x494>
 800b1b0:	0800cbc9 	.word	0x0800cbc9
 800b1b4:	0800cdf4 	.word	0x0800cdf4
 800b1b8:	0800cbc1 	.word	0x0800cbc1
 800b1bc:	0800cbf8 	.word	0x0800cbf8
 800b1c0:	0800cf85 	.word	0x0800cf85
 800b1c4:	0800cd08 	.word	0x0800cd08
 800b1c8:	0800cce0 	.word	0x0800cce0
 800b1cc:	7ff00000 	.word	0x7ff00000
 800b1d0:	7ca00000 	.word	0x7ca00000
 800b1d4:	7fefffff 	.word	0x7fefffff
 800b1d8:	f015 0310 	ands.w	r3, r5, #16
 800b1dc:	bf18      	it	ne
 800b1de:	236a      	movne	r3, #106	; 0x6a
 800b1e0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b584 <_strtod_l+0x94c>
 800b1e4:	9304      	str	r3, [sp, #16]
 800b1e6:	4640      	mov	r0, r8
 800b1e8:	4649      	mov	r1, r9
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	07ea      	lsls	r2, r5, #31
 800b1ee:	d504      	bpl.n	800b1fa <_strtod_l+0x5c2>
 800b1f0:	e9da 2300 	ldrd	r2, r3, [sl]
 800b1f4:	f7f5 fa00 	bl	80005f8 <__aeabi_dmul>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	106d      	asrs	r5, r5, #1
 800b1fc:	f10a 0a08 	add.w	sl, sl, #8
 800b200:	d1f4      	bne.n	800b1ec <_strtod_l+0x5b4>
 800b202:	b10b      	cbz	r3, 800b208 <_strtod_l+0x5d0>
 800b204:	4680      	mov	r8, r0
 800b206:	4689      	mov	r9, r1
 800b208:	9b04      	ldr	r3, [sp, #16]
 800b20a:	b1bb      	cbz	r3, 800b23c <_strtod_l+0x604>
 800b20c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b210:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b214:	2b00      	cmp	r3, #0
 800b216:	4649      	mov	r1, r9
 800b218:	dd10      	ble.n	800b23c <_strtod_l+0x604>
 800b21a:	2b1f      	cmp	r3, #31
 800b21c:	f340 811e 	ble.w	800b45c <_strtod_l+0x824>
 800b220:	2b34      	cmp	r3, #52	; 0x34
 800b222:	bfde      	ittt	le
 800b224:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b228:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b22c:	4093      	lslle	r3, r2
 800b22e:	f04f 0800 	mov.w	r8, #0
 800b232:	bfcc      	ite	gt
 800b234:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b238:	ea03 0901 	andle.w	r9, r3, r1
 800b23c:	2200      	movs	r2, #0
 800b23e:	2300      	movs	r3, #0
 800b240:	4640      	mov	r0, r8
 800b242:	4649      	mov	r1, r9
 800b244:	f7f5 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 800b248:	2800      	cmp	r0, #0
 800b24a:	d1a6      	bne.n	800b19a <_strtod_l+0x562>
 800b24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b252:	4633      	mov	r3, r6
 800b254:	465a      	mov	r2, fp
 800b256:	4620      	mov	r0, r4
 800b258:	f7ff f8cc 	bl	800a3f4 <__s2b>
 800b25c:	9009      	str	r0, [sp, #36]	; 0x24
 800b25e:	2800      	cmp	r0, #0
 800b260:	f43f af2a 	beq.w	800b0b8 <_strtod_l+0x480>
 800b264:	9a08      	ldr	r2, [sp, #32]
 800b266:	9b05      	ldr	r3, [sp, #20]
 800b268:	2a00      	cmp	r2, #0
 800b26a:	eba3 0307 	sub.w	r3, r3, r7
 800b26e:	bfa8      	it	ge
 800b270:	2300      	movge	r3, #0
 800b272:	930c      	str	r3, [sp, #48]	; 0x30
 800b274:	2500      	movs	r5, #0
 800b276:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b27a:	9312      	str	r3, [sp, #72]	; 0x48
 800b27c:	46ab      	mov	fp, r5
 800b27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b280:	4620      	mov	r0, r4
 800b282:	6859      	ldr	r1, [r3, #4]
 800b284:	f7ff f80e 	bl	800a2a4 <_Balloc>
 800b288:	9005      	str	r0, [sp, #20]
 800b28a:	2800      	cmp	r0, #0
 800b28c:	f43f af18 	beq.w	800b0c0 <_strtod_l+0x488>
 800b290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b292:	691a      	ldr	r2, [r3, #16]
 800b294:	3202      	adds	r2, #2
 800b296:	f103 010c 	add.w	r1, r3, #12
 800b29a:	0092      	lsls	r2, r2, #2
 800b29c:	300c      	adds	r0, #12
 800b29e:	f7fe f924 	bl	80094ea <memcpy>
 800b2a2:	ec49 8b10 	vmov	d0, r8, r9
 800b2a6:	aa18      	add	r2, sp, #96	; 0x60
 800b2a8:	a917      	add	r1, sp, #92	; 0x5c
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f7ff fbd6 	bl	800aa5c <__d2b>
 800b2b0:	ec49 8b18 	vmov	d8, r8, r9
 800b2b4:	9016      	str	r0, [sp, #88]	; 0x58
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	f43f af02 	beq.w	800b0c0 <_strtod_l+0x488>
 800b2bc:	2101      	movs	r1, #1
 800b2be:	4620      	mov	r0, r4
 800b2c0:	f7ff f930 	bl	800a524 <__i2b>
 800b2c4:	4683      	mov	fp, r0
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	f43f aefa 	beq.w	800b0c0 <_strtod_l+0x488>
 800b2cc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b2ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b2d0:	2e00      	cmp	r6, #0
 800b2d2:	bfab      	itete	ge
 800b2d4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b2d6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b2d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b2da:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b2de:	bfac      	ite	ge
 800b2e0:	eb06 0a03 	addge.w	sl, r6, r3
 800b2e4:	1b9f      	sublt	r7, r3, r6
 800b2e6:	9b04      	ldr	r3, [sp, #16]
 800b2e8:	1af6      	subs	r6, r6, r3
 800b2ea:	4416      	add	r6, r2
 800b2ec:	4ba0      	ldr	r3, [pc, #640]	; (800b570 <_strtod_l+0x938>)
 800b2ee:	3e01      	subs	r6, #1
 800b2f0:	429e      	cmp	r6, r3
 800b2f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b2f6:	f280 80c4 	bge.w	800b482 <_strtod_l+0x84a>
 800b2fa:	1b9b      	subs	r3, r3, r6
 800b2fc:	2b1f      	cmp	r3, #31
 800b2fe:	eba2 0203 	sub.w	r2, r2, r3
 800b302:	f04f 0101 	mov.w	r1, #1
 800b306:	f300 80b0 	bgt.w	800b46a <_strtod_l+0x832>
 800b30a:	fa01 f303 	lsl.w	r3, r1, r3
 800b30e:	930e      	str	r3, [sp, #56]	; 0x38
 800b310:	2300      	movs	r3, #0
 800b312:	930d      	str	r3, [sp, #52]	; 0x34
 800b314:	eb0a 0602 	add.w	r6, sl, r2
 800b318:	9b04      	ldr	r3, [sp, #16]
 800b31a:	45b2      	cmp	sl, r6
 800b31c:	4417      	add	r7, r2
 800b31e:	441f      	add	r7, r3
 800b320:	4653      	mov	r3, sl
 800b322:	bfa8      	it	ge
 800b324:	4633      	movge	r3, r6
 800b326:	42bb      	cmp	r3, r7
 800b328:	bfa8      	it	ge
 800b32a:	463b      	movge	r3, r7
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	bfc2      	ittt	gt
 800b330:	1af6      	subgt	r6, r6, r3
 800b332:	1aff      	subgt	r7, r7, r3
 800b334:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	dd17      	ble.n	800b36e <_strtod_l+0x736>
 800b33e:	4659      	mov	r1, fp
 800b340:	461a      	mov	r2, r3
 800b342:	4620      	mov	r0, r4
 800b344:	f7ff f9ae 	bl	800a6a4 <__pow5mult>
 800b348:	4683      	mov	fp, r0
 800b34a:	2800      	cmp	r0, #0
 800b34c:	f43f aeb8 	beq.w	800b0c0 <_strtod_l+0x488>
 800b350:	4601      	mov	r1, r0
 800b352:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b354:	4620      	mov	r0, r4
 800b356:	f7ff f8fb 	bl	800a550 <__multiply>
 800b35a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b35c:	2800      	cmp	r0, #0
 800b35e:	f43f aeaf 	beq.w	800b0c0 <_strtod_l+0x488>
 800b362:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b364:	4620      	mov	r0, r4
 800b366:	f7fe ffdd 	bl	800a324 <_Bfree>
 800b36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b36c:	9316      	str	r3, [sp, #88]	; 0x58
 800b36e:	2e00      	cmp	r6, #0
 800b370:	f300 808c 	bgt.w	800b48c <_strtod_l+0x854>
 800b374:	9b08      	ldr	r3, [sp, #32]
 800b376:	2b00      	cmp	r3, #0
 800b378:	dd08      	ble.n	800b38c <_strtod_l+0x754>
 800b37a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b37c:	9905      	ldr	r1, [sp, #20]
 800b37e:	4620      	mov	r0, r4
 800b380:	f7ff f990 	bl	800a6a4 <__pow5mult>
 800b384:	9005      	str	r0, [sp, #20]
 800b386:	2800      	cmp	r0, #0
 800b388:	f43f ae9a 	beq.w	800b0c0 <_strtod_l+0x488>
 800b38c:	2f00      	cmp	r7, #0
 800b38e:	dd08      	ble.n	800b3a2 <_strtod_l+0x76a>
 800b390:	9905      	ldr	r1, [sp, #20]
 800b392:	463a      	mov	r2, r7
 800b394:	4620      	mov	r0, r4
 800b396:	f7ff f9df 	bl	800a758 <__lshift>
 800b39a:	9005      	str	r0, [sp, #20]
 800b39c:	2800      	cmp	r0, #0
 800b39e:	f43f ae8f 	beq.w	800b0c0 <_strtod_l+0x488>
 800b3a2:	f1ba 0f00 	cmp.w	sl, #0
 800b3a6:	dd08      	ble.n	800b3ba <_strtod_l+0x782>
 800b3a8:	4659      	mov	r1, fp
 800b3aa:	4652      	mov	r2, sl
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f7ff f9d3 	bl	800a758 <__lshift>
 800b3b2:	4683      	mov	fp, r0
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	f43f ae83 	beq.w	800b0c0 <_strtod_l+0x488>
 800b3ba:	9a05      	ldr	r2, [sp, #20]
 800b3bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f7ff fa52 	bl	800a868 <__mdiff>
 800b3c4:	4605      	mov	r5, r0
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	f43f ae7a 	beq.w	800b0c0 <_strtod_l+0x488>
 800b3cc:	68c3      	ldr	r3, [r0, #12]
 800b3ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	60c3      	str	r3, [r0, #12]
 800b3d4:	4659      	mov	r1, fp
 800b3d6:	f7ff fa2b 	bl	800a830 <__mcmp>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	da60      	bge.n	800b4a0 <_strtod_l+0x868>
 800b3de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3e0:	ea53 0308 	orrs.w	r3, r3, r8
 800b3e4:	f040 8084 	bne.w	800b4f0 <_strtod_l+0x8b8>
 800b3e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d17f      	bne.n	800b4f0 <_strtod_l+0x8b8>
 800b3f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b3f4:	0d1b      	lsrs	r3, r3, #20
 800b3f6:	051b      	lsls	r3, r3, #20
 800b3f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b3fc:	d978      	bls.n	800b4f0 <_strtod_l+0x8b8>
 800b3fe:	696b      	ldr	r3, [r5, #20]
 800b400:	b913      	cbnz	r3, 800b408 <_strtod_l+0x7d0>
 800b402:	692b      	ldr	r3, [r5, #16]
 800b404:	2b01      	cmp	r3, #1
 800b406:	dd73      	ble.n	800b4f0 <_strtod_l+0x8b8>
 800b408:	4629      	mov	r1, r5
 800b40a:	2201      	movs	r2, #1
 800b40c:	4620      	mov	r0, r4
 800b40e:	f7ff f9a3 	bl	800a758 <__lshift>
 800b412:	4659      	mov	r1, fp
 800b414:	4605      	mov	r5, r0
 800b416:	f7ff fa0b 	bl	800a830 <__mcmp>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	dd68      	ble.n	800b4f0 <_strtod_l+0x8b8>
 800b41e:	9904      	ldr	r1, [sp, #16]
 800b420:	4a54      	ldr	r2, [pc, #336]	; (800b574 <_strtod_l+0x93c>)
 800b422:	464b      	mov	r3, r9
 800b424:	2900      	cmp	r1, #0
 800b426:	f000 8084 	beq.w	800b532 <_strtod_l+0x8fa>
 800b42a:	ea02 0109 	and.w	r1, r2, r9
 800b42e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b432:	dc7e      	bgt.n	800b532 <_strtod_l+0x8fa>
 800b434:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b438:	f77f aeb3 	ble.w	800b1a2 <_strtod_l+0x56a>
 800b43c:	4b4e      	ldr	r3, [pc, #312]	; (800b578 <_strtod_l+0x940>)
 800b43e:	4640      	mov	r0, r8
 800b440:	4649      	mov	r1, r9
 800b442:	2200      	movs	r2, #0
 800b444:	f7f5 f8d8 	bl	80005f8 <__aeabi_dmul>
 800b448:	4b4a      	ldr	r3, [pc, #296]	; (800b574 <_strtod_l+0x93c>)
 800b44a:	400b      	ands	r3, r1
 800b44c:	4680      	mov	r8, r0
 800b44e:	4689      	mov	r9, r1
 800b450:	2b00      	cmp	r3, #0
 800b452:	f47f ae3f 	bne.w	800b0d4 <_strtod_l+0x49c>
 800b456:	2322      	movs	r3, #34	; 0x22
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	e63b      	b.n	800b0d4 <_strtod_l+0x49c>
 800b45c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b460:	fa02 f303 	lsl.w	r3, r2, r3
 800b464:	ea03 0808 	and.w	r8, r3, r8
 800b468:	e6e8      	b.n	800b23c <_strtod_l+0x604>
 800b46a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b46e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b472:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b476:	36e2      	adds	r6, #226	; 0xe2
 800b478:	fa01 f306 	lsl.w	r3, r1, r6
 800b47c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b480:	e748      	b.n	800b314 <_strtod_l+0x6dc>
 800b482:	2100      	movs	r1, #0
 800b484:	2301      	movs	r3, #1
 800b486:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b48a:	e743      	b.n	800b314 <_strtod_l+0x6dc>
 800b48c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b48e:	4632      	mov	r2, r6
 800b490:	4620      	mov	r0, r4
 800b492:	f7ff f961 	bl	800a758 <__lshift>
 800b496:	9016      	str	r0, [sp, #88]	; 0x58
 800b498:	2800      	cmp	r0, #0
 800b49a:	f47f af6b 	bne.w	800b374 <_strtod_l+0x73c>
 800b49e:	e60f      	b.n	800b0c0 <_strtod_l+0x488>
 800b4a0:	46ca      	mov	sl, r9
 800b4a2:	d171      	bne.n	800b588 <_strtod_l+0x950>
 800b4a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4aa:	b352      	cbz	r2, 800b502 <_strtod_l+0x8ca>
 800b4ac:	4a33      	ldr	r2, [pc, #204]	; (800b57c <_strtod_l+0x944>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d12a      	bne.n	800b508 <_strtod_l+0x8d0>
 800b4b2:	9b04      	ldr	r3, [sp, #16]
 800b4b4:	4641      	mov	r1, r8
 800b4b6:	b1fb      	cbz	r3, 800b4f8 <_strtod_l+0x8c0>
 800b4b8:	4b2e      	ldr	r3, [pc, #184]	; (800b574 <_strtod_l+0x93c>)
 800b4ba:	ea09 0303 	and.w	r3, r9, r3
 800b4be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b4c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4c6:	d81a      	bhi.n	800b4fe <_strtod_l+0x8c6>
 800b4c8:	0d1b      	lsrs	r3, r3, #20
 800b4ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b4ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d2:	4299      	cmp	r1, r3
 800b4d4:	d118      	bne.n	800b508 <_strtod_l+0x8d0>
 800b4d6:	4b2a      	ldr	r3, [pc, #168]	; (800b580 <_strtod_l+0x948>)
 800b4d8:	459a      	cmp	sl, r3
 800b4da:	d102      	bne.n	800b4e2 <_strtod_l+0x8aa>
 800b4dc:	3101      	adds	r1, #1
 800b4de:	f43f adef 	beq.w	800b0c0 <_strtod_l+0x488>
 800b4e2:	4b24      	ldr	r3, [pc, #144]	; (800b574 <_strtod_l+0x93c>)
 800b4e4:	ea0a 0303 	and.w	r3, sl, r3
 800b4e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b4ec:	f04f 0800 	mov.w	r8, #0
 800b4f0:	9b04      	ldr	r3, [sp, #16]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1a2      	bne.n	800b43c <_strtod_l+0x804>
 800b4f6:	e5ed      	b.n	800b0d4 <_strtod_l+0x49c>
 800b4f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4fc:	e7e9      	b.n	800b4d2 <_strtod_l+0x89a>
 800b4fe:	4613      	mov	r3, r2
 800b500:	e7e7      	b.n	800b4d2 <_strtod_l+0x89a>
 800b502:	ea53 0308 	orrs.w	r3, r3, r8
 800b506:	d08a      	beq.n	800b41e <_strtod_l+0x7e6>
 800b508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b50a:	b1e3      	cbz	r3, 800b546 <_strtod_l+0x90e>
 800b50c:	ea13 0f0a 	tst.w	r3, sl
 800b510:	d0ee      	beq.n	800b4f0 <_strtod_l+0x8b8>
 800b512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b514:	9a04      	ldr	r2, [sp, #16]
 800b516:	4640      	mov	r0, r8
 800b518:	4649      	mov	r1, r9
 800b51a:	b1c3      	cbz	r3, 800b54e <_strtod_l+0x916>
 800b51c:	f7ff fb6f 	bl	800abfe <sulp>
 800b520:	4602      	mov	r2, r0
 800b522:	460b      	mov	r3, r1
 800b524:	ec51 0b18 	vmov	r0, r1, d8
 800b528:	f7f4 feb0 	bl	800028c <__adddf3>
 800b52c:	4680      	mov	r8, r0
 800b52e:	4689      	mov	r9, r1
 800b530:	e7de      	b.n	800b4f0 <_strtod_l+0x8b8>
 800b532:	4013      	ands	r3, r2
 800b534:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b538:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b53c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b540:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b544:	e7d4      	b.n	800b4f0 <_strtod_l+0x8b8>
 800b546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b548:	ea13 0f08 	tst.w	r3, r8
 800b54c:	e7e0      	b.n	800b510 <_strtod_l+0x8d8>
 800b54e:	f7ff fb56 	bl	800abfe <sulp>
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	ec51 0b18 	vmov	r0, r1, d8
 800b55a:	f7f4 fe95 	bl	8000288 <__aeabi_dsub>
 800b55e:	2200      	movs	r2, #0
 800b560:	2300      	movs	r3, #0
 800b562:	4680      	mov	r8, r0
 800b564:	4689      	mov	r9, r1
 800b566:	f7f5 faaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b56a:	2800      	cmp	r0, #0
 800b56c:	d0c0      	beq.n	800b4f0 <_strtod_l+0x8b8>
 800b56e:	e618      	b.n	800b1a2 <_strtod_l+0x56a>
 800b570:	fffffc02 	.word	0xfffffc02
 800b574:	7ff00000 	.word	0x7ff00000
 800b578:	39500000 	.word	0x39500000
 800b57c:	000fffff 	.word	0x000fffff
 800b580:	7fefffff 	.word	0x7fefffff
 800b584:	0800ce08 	.word	0x0800ce08
 800b588:	4659      	mov	r1, fp
 800b58a:	4628      	mov	r0, r5
 800b58c:	f7ff fac0 	bl	800ab10 <__ratio>
 800b590:	ec57 6b10 	vmov	r6, r7, d0
 800b594:	ee10 0a10 	vmov	r0, s0
 800b598:	2200      	movs	r2, #0
 800b59a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b59e:	4639      	mov	r1, r7
 800b5a0:	f7f5 faa6 	bl	8000af0 <__aeabi_dcmple>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d071      	beq.n	800b68c <_strtod_l+0xa54>
 800b5a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d17c      	bne.n	800b6a8 <_strtod_l+0xa70>
 800b5ae:	f1b8 0f00 	cmp.w	r8, #0
 800b5b2:	d15a      	bne.n	800b66a <_strtod_l+0xa32>
 800b5b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d15d      	bne.n	800b678 <_strtod_l+0xa40>
 800b5bc:	4b90      	ldr	r3, [pc, #576]	; (800b800 <_strtod_l+0xbc8>)
 800b5be:	2200      	movs	r2, #0
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	4639      	mov	r1, r7
 800b5c4:	f7f5 fa8a 	bl	8000adc <__aeabi_dcmplt>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	d15c      	bne.n	800b686 <_strtod_l+0xa4e>
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	4639      	mov	r1, r7
 800b5d0:	4b8c      	ldr	r3, [pc, #560]	; (800b804 <_strtod_l+0xbcc>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f7f5 f810 	bl	80005f8 <__aeabi_dmul>
 800b5d8:	4606      	mov	r6, r0
 800b5da:	460f      	mov	r7, r1
 800b5dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b5e0:	9606      	str	r6, [sp, #24]
 800b5e2:	9307      	str	r3, [sp, #28]
 800b5e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b5ec:	4b86      	ldr	r3, [pc, #536]	; (800b808 <_strtod_l+0xbd0>)
 800b5ee:	ea0a 0303 	and.w	r3, sl, r3
 800b5f2:	930d      	str	r3, [sp, #52]	; 0x34
 800b5f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5f6:	4b85      	ldr	r3, [pc, #532]	; (800b80c <_strtod_l+0xbd4>)
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	f040 8090 	bne.w	800b71e <_strtod_l+0xae6>
 800b5fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b602:	ec49 8b10 	vmov	d0, r8, r9
 800b606:	f7ff f9b9 	bl	800a97c <__ulp>
 800b60a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b60e:	ec51 0b10 	vmov	r0, r1, d0
 800b612:	f7f4 fff1 	bl	80005f8 <__aeabi_dmul>
 800b616:	4642      	mov	r2, r8
 800b618:	464b      	mov	r3, r9
 800b61a:	f7f4 fe37 	bl	800028c <__adddf3>
 800b61e:	460b      	mov	r3, r1
 800b620:	4979      	ldr	r1, [pc, #484]	; (800b808 <_strtod_l+0xbd0>)
 800b622:	4a7b      	ldr	r2, [pc, #492]	; (800b810 <_strtod_l+0xbd8>)
 800b624:	4019      	ands	r1, r3
 800b626:	4291      	cmp	r1, r2
 800b628:	4680      	mov	r8, r0
 800b62a:	d944      	bls.n	800b6b6 <_strtod_l+0xa7e>
 800b62c:	ee18 2a90 	vmov	r2, s17
 800b630:	4b78      	ldr	r3, [pc, #480]	; (800b814 <_strtod_l+0xbdc>)
 800b632:	429a      	cmp	r2, r3
 800b634:	d104      	bne.n	800b640 <_strtod_l+0xa08>
 800b636:	ee18 3a10 	vmov	r3, s16
 800b63a:	3301      	adds	r3, #1
 800b63c:	f43f ad40 	beq.w	800b0c0 <_strtod_l+0x488>
 800b640:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b814 <_strtod_l+0xbdc>
 800b644:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b648:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b64a:	4620      	mov	r0, r4
 800b64c:	f7fe fe6a 	bl	800a324 <_Bfree>
 800b650:	9905      	ldr	r1, [sp, #20]
 800b652:	4620      	mov	r0, r4
 800b654:	f7fe fe66 	bl	800a324 <_Bfree>
 800b658:	4659      	mov	r1, fp
 800b65a:	4620      	mov	r0, r4
 800b65c:	f7fe fe62 	bl	800a324 <_Bfree>
 800b660:	4629      	mov	r1, r5
 800b662:	4620      	mov	r0, r4
 800b664:	f7fe fe5e 	bl	800a324 <_Bfree>
 800b668:	e609      	b.n	800b27e <_strtod_l+0x646>
 800b66a:	f1b8 0f01 	cmp.w	r8, #1
 800b66e:	d103      	bne.n	800b678 <_strtod_l+0xa40>
 800b670:	f1b9 0f00 	cmp.w	r9, #0
 800b674:	f43f ad95 	beq.w	800b1a2 <_strtod_l+0x56a>
 800b678:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b7d0 <_strtod_l+0xb98>
 800b67c:	4f60      	ldr	r7, [pc, #384]	; (800b800 <_strtod_l+0xbc8>)
 800b67e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b682:	2600      	movs	r6, #0
 800b684:	e7ae      	b.n	800b5e4 <_strtod_l+0x9ac>
 800b686:	4f5f      	ldr	r7, [pc, #380]	; (800b804 <_strtod_l+0xbcc>)
 800b688:	2600      	movs	r6, #0
 800b68a:	e7a7      	b.n	800b5dc <_strtod_l+0x9a4>
 800b68c:	4b5d      	ldr	r3, [pc, #372]	; (800b804 <_strtod_l+0xbcc>)
 800b68e:	4630      	mov	r0, r6
 800b690:	4639      	mov	r1, r7
 800b692:	2200      	movs	r2, #0
 800b694:	f7f4 ffb0 	bl	80005f8 <__aeabi_dmul>
 800b698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b69a:	4606      	mov	r6, r0
 800b69c:	460f      	mov	r7, r1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d09c      	beq.n	800b5dc <_strtod_l+0x9a4>
 800b6a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b6a6:	e79d      	b.n	800b5e4 <_strtod_l+0x9ac>
 800b6a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b7d8 <_strtod_l+0xba0>
 800b6ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6b0:	ec57 6b17 	vmov	r6, r7, d7
 800b6b4:	e796      	b.n	800b5e4 <_strtod_l+0x9ac>
 800b6b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b6ba:	9b04      	ldr	r3, [sp, #16]
 800b6bc:	46ca      	mov	sl, r9
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1c2      	bne.n	800b648 <_strtod_l+0xa10>
 800b6c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b6c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6c8:	0d1b      	lsrs	r3, r3, #20
 800b6ca:	051b      	lsls	r3, r3, #20
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d1bb      	bne.n	800b648 <_strtod_l+0xa10>
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	4639      	mov	r1, r7
 800b6d4:	f7f5 faf0 	bl	8000cb8 <__aeabi_d2lz>
 800b6d8:	f7f4 ff60 	bl	800059c <__aeabi_l2d>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	460b      	mov	r3, r1
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	4639      	mov	r1, r7
 800b6e4:	f7f4 fdd0 	bl	8000288 <__aeabi_dsub>
 800b6e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6ee:	ea43 0308 	orr.w	r3, r3, r8
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	4606      	mov	r6, r0
 800b6f6:	460f      	mov	r7, r1
 800b6f8:	d054      	beq.n	800b7a4 <_strtod_l+0xb6c>
 800b6fa:	a339      	add	r3, pc, #228	; (adr r3, 800b7e0 <_strtod_l+0xba8>)
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	f7f5 f9ec 	bl	8000adc <__aeabi_dcmplt>
 800b704:	2800      	cmp	r0, #0
 800b706:	f47f ace5 	bne.w	800b0d4 <_strtod_l+0x49c>
 800b70a:	a337      	add	r3, pc, #220	; (adr r3, 800b7e8 <_strtod_l+0xbb0>)
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	4630      	mov	r0, r6
 800b712:	4639      	mov	r1, r7
 800b714:	f7f5 fa00 	bl	8000b18 <__aeabi_dcmpgt>
 800b718:	2800      	cmp	r0, #0
 800b71a:	d095      	beq.n	800b648 <_strtod_l+0xa10>
 800b71c:	e4da      	b.n	800b0d4 <_strtod_l+0x49c>
 800b71e:	9b04      	ldr	r3, [sp, #16]
 800b720:	b333      	cbz	r3, 800b770 <_strtod_l+0xb38>
 800b722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b724:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b728:	d822      	bhi.n	800b770 <_strtod_l+0xb38>
 800b72a:	a331      	add	r3, pc, #196	; (adr r3, 800b7f0 <_strtod_l+0xbb8>)
 800b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b730:	4630      	mov	r0, r6
 800b732:	4639      	mov	r1, r7
 800b734:	f7f5 f9dc 	bl	8000af0 <__aeabi_dcmple>
 800b738:	b1a0      	cbz	r0, 800b764 <_strtod_l+0xb2c>
 800b73a:	4639      	mov	r1, r7
 800b73c:	4630      	mov	r0, r6
 800b73e:	f7f5 fa33 	bl	8000ba8 <__aeabi_d2uiz>
 800b742:	2801      	cmp	r0, #1
 800b744:	bf38      	it	cc
 800b746:	2001      	movcc	r0, #1
 800b748:	f7f4 fedc 	bl	8000504 <__aeabi_ui2d>
 800b74c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b74e:	4606      	mov	r6, r0
 800b750:	460f      	mov	r7, r1
 800b752:	bb23      	cbnz	r3, 800b79e <_strtod_l+0xb66>
 800b754:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b758:	9010      	str	r0, [sp, #64]	; 0x40
 800b75a:	9311      	str	r3, [sp, #68]	; 0x44
 800b75c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b760:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b768:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b76c:	1a9b      	subs	r3, r3, r2
 800b76e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b770:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b774:	eeb0 0a48 	vmov.f32	s0, s16
 800b778:	eef0 0a68 	vmov.f32	s1, s17
 800b77c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b780:	f7ff f8fc 	bl	800a97c <__ulp>
 800b784:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b788:	ec53 2b10 	vmov	r2, r3, d0
 800b78c:	f7f4 ff34 	bl	80005f8 <__aeabi_dmul>
 800b790:	ec53 2b18 	vmov	r2, r3, d8
 800b794:	f7f4 fd7a 	bl	800028c <__adddf3>
 800b798:	4680      	mov	r8, r0
 800b79a:	4689      	mov	r9, r1
 800b79c:	e78d      	b.n	800b6ba <_strtod_l+0xa82>
 800b79e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b7a2:	e7db      	b.n	800b75c <_strtod_l+0xb24>
 800b7a4:	a314      	add	r3, pc, #80	; (adr r3, 800b7f8 <_strtod_l+0xbc0>)
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	f7f5 f997 	bl	8000adc <__aeabi_dcmplt>
 800b7ae:	e7b3      	b.n	800b718 <_strtod_l+0xae0>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	930a      	str	r3, [sp, #40]	; 0x28
 800b7b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b7b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7b8:	6013      	str	r3, [r2, #0]
 800b7ba:	f7ff ba7c 	b.w	800acb6 <_strtod_l+0x7e>
 800b7be:	2a65      	cmp	r2, #101	; 0x65
 800b7c0:	f43f ab75 	beq.w	800aeae <_strtod_l+0x276>
 800b7c4:	2a45      	cmp	r2, #69	; 0x45
 800b7c6:	f43f ab72 	beq.w	800aeae <_strtod_l+0x276>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	f7ff bbaa 	b.w	800af24 <_strtod_l+0x2ec>
 800b7d0:	00000000 	.word	0x00000000
 800b7d4:	bff00000 	.word	0xbff00000
 800b7d8:	00000000 	.word	0x00000000
 800b7dc:	3ff00000 	.word	0x3ff00000
 800b7e0:	94a03595 	.word	0x94a03595
 800b7e4:	3fdfffff 	.word	0x3fdfffff
 800b7e8:	35afe535 	.word	0x35afe535
 800b7ec:	3fe00000 	.word	0x3fe00000
 800b7f0:	ffc00000 	.word	0xffc00000
 800b7f4:	41dfffff 	.word	0x41dfffff
 800b7f8:	94a03595 	.word	0x94a03595
 800b7fc:	3fcfffff 	.word	0x3fcfffff
 800b800:	3ff00000 	.word	0x3ff00000
 800b804:	3fe00000 	.word	0x3fe00000
 800b808:	7ff00000 	.word	0x7ff00000
 800b80c:	7fe00000 	.word	0x7fe00000
 800b810:	7c9fffff 	.word	0x7c9fffff
 800b814:	7fefffff 	.word	0x7fefffff

0800b818 <_strtod_r>:
 800b818:	4b01      	ldr	r3, [pc, #4]	; (800b820 <_strtod_r+0x8>)
 800b81a:	f7ff ba0d 	b.w	800ac38 <_strtod_l>
 800b81e:	bf00      	nop
 800b820:	2000006c 	.word	0x2000006c

0800b824 <_strtol_l.constprop.0>:
 800b824:	2b01      	cmp	r3, #1
 800b826:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b82a:	d001      	beq.n	800b830 <_strtol_l.constprop.0+0xc>
 800b82c:	2b24      	cmp	r3, #36	; 0x24
 800b82e:	d906      	bls.n	800b83e <_strtol_l.constprop.0+0x1a>
 800b830:	f7fd fe2e 	bl	8009490 <__errno>
 800b834:	2316      	movs	r3, #22
 800b836:	6003      	str	r3, [r0, #0]
 800b838:	2000      	movs	r0, #0
 800b83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b83e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b924 <_strtol_l.constprop.0+0x100>
 800b842:	460d      	mov	r5, r1
 800b844:	462e      	mov	r6, r5
 800b846:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b84a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b84e:	f017 0708 	ands.w	r7, r7, #8
 800b852:	d1f7      	bne.n	800b844 <_strtol_l.constprop.0+0x20>
 800b854:	2c2d      	cmp	r4, #45	; 0x2d
 800b856:	d132      	bne.n	800b8be <_strtol_l.constprop.0+0x9a>
 800b858:	782c      	ldrb	r4, [r5, #0]
 800b85a:	2701      	movs	r7, #1
 800b85c:	1cb5      	adds	r5, r6, #2
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d05b      	beq.n	800b91a <_strtol_l.constprop.0+0xf6>
 800b862:	2b10      	cmp	r3, #16
 800b864:	d109      	bne.n	800b87a <_strtol_l.constprop.0+0x56>
 800b866:	2c30      	cmp	r4, #48	; 0x30
 800b868:	d107      	bne.n	800b87a <_strtol_l.constprop.0+0x56>
 800b86a:	782c      	ldrb	r4, [r5, #0]
 800b86c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b870:	2c58      	cmp	r4, #88	; 0x58
 800b872:	d14d      	bne.n	800b910 <_strtol_l.constprop.0+0xec>
 800b874:	786c      	ldrb	r4, [r5, #1]
 800b876:	2310      	movs	r3, #16
 800b878:	3502      	adds	r5, #2
 800b87a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b87e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b882:	f04f 0e00 	mov.w	lr, #0
 800b886:	fbb8 f9f3 	udiv	r9, r8, r3
 800b88a:	4676      	mov	r6, lr
 800b88c:	fb03 8a19 	mls	sl, r3, r9, r8
 800b890:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b894:	f1bc 0f09 	cmp.w	ip, #9
 800b898:	d816      	bhi.n	800b8c8 <_strtol_l.constprop.0+0xa4>
 800b89a:	4664      	mov	r4, ip
 800b89c:	42a3      	cmp	r3, r4
 800b89e:	dd24      	ble.n	800b8ea <_strtol_l.constprop.0+0xc6>
 800b8a0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b8a4:	d008      	beq.n	800b8b8 <_strtol_l.constprop.0+0x94>
 800b8a6:	45b1      	cmp	r9, r6
 800b8a8:	d31c      	bcc.n	800b8e4 <_strtol_l.constprop.0+0xc0>
 800b8aa:	d101      	bne.n	800b8b0 <_strtol_l.constprop.0+0x8c>
 800b8ac:	45a2      	cmp	sl, r4
 800b8ae:	db19      	blt.n	800b8e4 <_strtol_l.constprop.0+0xc0>
 800b8b0:	fb06 4603 	mla	r6, r6, r3, r4
 800b8b4:	f04f 0e01 	mov.w	lr, #1
 800b8b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8bc:	e7e8      	b.n	800b890 <_strtol_l.constprop.0+0x6c>
 800b8be:	2c2b      	cmp	r4, #43	; 0x2b
 800b8c0:	bf04      	itt	eq
 800b8c2:	782c      	ldrbeq	r4, [r5, #0]
 800b8c4:	1cb5      	addeq	r5, r6, #2
 800b8c6:	e7ca      	b.n	800b85e <_strtol_l.constprop.0+0x3a>
 800b8c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b8cc:	f1bc 0f19 	cmp.w	ip, #25
 800b8d0:	d801      	bhi.n	800b8d6 <_strtol_l.constprop.0+0xb2>
 800b8d2:	3c37      	subs	r4, #55	; 0x37
 800b8d4:	e7e2      	b.n	800b89c <_strtol_l.constprop.0+0x78>
 800b8d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b8da:	f1bc 0f19 	cmp.w	ip, #25
 800b8de:	d804      	bhi.n	800b8ea <_strtol_l.constprop.0+0xc6>
 800b8e0:	3c57      	subs	r4, #87	; 0x57
 800b8e2:	e7db      	b.n	800b89c <_strtol_l.constprop.0+0x78>
 800b8e4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800b8e8:	e7e6      	b.n	800b8b8 <_strtol_l.constprop.0+0x94>
 800b8ea:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b8ee:	d105      	bne.n	800b8fc <_strtol_l.constprop.0+0xd8>
 800b8f0:	2322      	movs	r3, #34	; 0x22
 800b8f2:	6003      	str	r3, [r0, #0]
 800b8f4:	4646      	mov	r6, r8
 800b8f6:	b942      	cbnz	r2, 800b90a <_strtol_l.constprop.0+0xe6>
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	e79e      	b.n	800b83a <_strtol_l.constprop.0+0x16>
 800b8fc:	b107      	cbz	r7, 800b900 <_strtol_l.constprop.0+0xdc>
 800b8fe:	4276      	negs	r6, r6
 800b900:	2a00      	cmp	r2, #0
 800b902:	d0f9      	beq.n	800b8f8 <_strtol_l.constprop.0+0xd4>
 800b904:	f1be 0f00 	cmp.w	lr, #0
 800b908:	d000      	beq.n	800b90c <_strtol_l.constprop.0+0xe8>
 800b90a:	1e69      	subs	r1, r5, #1
 800b90c:	6011      	str	r1, [r2, #0]
 800b90e:	e7f3      	b.n	800b8f8 <_strtol_l.constprop.0+0xd4>
 800b910:	2430      	movs	r4, #48	; 0x30
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1b1      	bne.n	800b87a <_strtol_l.constprop.0+0x56>
 800b916:	2308      	movs	r3, #8
 800b918:	e7af      	b.n	800b87a <_strtol_l.constprop.0+0x56>
 800b91a:	2c30      	cmp	r4, #48	; 0x30
 800b91c:	d0a5      	beq.n	800b86a <_strtol_l.constprop.0+0x46>
 800b91e:	230a      	movs	r3, #10
 800b920:	e7ab      	b.n	800b87a <_strtol_l.constprop.0+0x56>
 800b922:	bf00      	nop
 800b924:	0800ce31 	.word	0x0800ce31

0800b928 <_strtol_r>:
 800b928:	f7ff bf7c 	b.w	800b824 <_strtol_l.constprop.0>

0800b92c <__ssputs_r>:
 800b92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b930:	688e      	ldr	r6, [r1, #8]
 800b932:	461f      	mov	r7, r3
 800b934:	42be      	cmp	r6, r7
 800b936:	680b      	ldr	r3, [r1, #0]
 800b938:	4682      	mov	sl, r0
 800b93a:	460c      	mov	r4, r1
 800b93c:	4690      	mov	r8, r2
 800b93e:	d82c      	bhi.n	800b99a <__ssputs_r+0x6e>
 800b940:	898a      	ldrh	r2, [r1, #12]
 800b942:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b946:	d026      	beq.n	800b996 <__ssputs_r+0x6a>
 800b948:	6965      	ldr	r5, [r4, #20]
 800b94a:	6909      	ldr	r1, [r1, #16]
 800b94c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b950:	eba3 0901 	sub.w	r9, r3, r1
 800b954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b958:	1c7b      	adds	r3, r7, #1
 800b95a:	444b      	add	r3, r9
 800b95c:	106d      	asrs	r5, r5, #1
 800b95e:	429d      	cmp	r5, r3
 800b960:	bf38      	it	cc
 800b962:	461d      	movcc	r5, r3
 800b964:	0553      	lsls	r3, r2, #21
 800b966:	d527      	bpl.n	800b9b8 <__ssputs_r+0x8c>
 800b968:	4629      	mov	r1, r5
 800b96a:	f7fc fbaf 	bl	80080cc <_malloc_r>
 800b96e:	4606      	mov	r6, r0
 800b970:	b360      	cbz	r0, 800b9cc <__ssputs_r+0xa0>
 800b972:	6921      	ldr	r1, [r4, #16]
 800b974:	464a      	mov	r2, r9
 800b976:	f7fd fdb8 	bl	80094ea <memcpy>
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b984:	81a3      	strh	r3, [r4, #12]
 800b986:	6126      	str	r6, [r4, #16]
 800b988:	6165      	str	r5, [r4, #20]
 800b98a:	444e      	add	r6, r9
 800b98c:	eba5 0509 	sub.w	r5, r5, r9
 800b990:	6026      	str	r6, [r4, #0]
 800b992:	60a5      	str	r5, [r4, #8]
 800b994:	463e      	mov	r6, r7
 800b996:	42be      	cmp	r6, r7
 800b998:	d900      	bls.n	800b99c <__ssputs_r+0x70>
 800b99a:	463e      	mov	r6, r7
 800b99c:	6820      	ldr	r0, [r4, #0]
 800b99e:	4632      	mov	r2, r6
 800b9a0:	4641      	mov	r1, r8
 800b9a2:	f000 fb6f 	bl	800c084 <memmove>
 800b9a6:	68a3      	ldr	r3, [r4, #8]
 800b9a8:	1b9b      	subs	r3, r3, r6
 800b9aa:	60a3      	str	r3, [r4, #8]
 800b9ac:	6823      	ldr	r3, [r4, #0]
 800b9ae:	4433      	add	r3, r6
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	2000      	movs	r0, #0
 800b9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b8:	462a      	mov	r2, r5
 800b9ba:	f000 ff56 	bl	800c86a <_realloc_r>
 800b9be:	4606      	mov	r6, r0
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d1e0      	bne.n	800b986 <__ssputs_r+0x5a>
 800b9c4:	6921      	ldr	r1, [r4, #16]
 800b9c6:	4650      	mov	r0, sl
 800b9c8:	f7fe fc20 	bl	800a20c <_free_r>
 800b9cc:	230c      	movs	r3, #12
 800b9ce:	f8ca 3000 	str.w	r3, [sl]
 800b9d2:	89a3      	ldrh	r3, [r4, #12]
 800b9d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9d8:	81a3      	strh	r3, [r4, #12]
 800b9da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9de:	e7e9      	b.n	800b9b4 <__ssputs_r+0x88>

0800b9e0 <_svfiprintf_r>:
 800b9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e4:	4698      	mov	r8, r3
 800b9e6:	898b      	ldrh	r3, [r1, #12]
 800b9e8:	061b      	lsls	r3, r3, #24
 800b9ea:	b09d      	sub	sp, #116	; 0x74
 800b9ec:	4607      	mov	r7, r0
 800b9ee:	460d      	mov	r5, r1
 800b9f0:	4614      	mov	r4, r2
 800b9f2:	d50e      	bpl.n	800ba12 <_svfiprintf_r+0x32>
 800b9f4:	690b      	ldr	r3, [r1, #16]
 800b9f6:	b963      	cbnz	r3, 800ba12 <_svfiprintf_r+0x32>
 800b9f8:	2140      	movs	r1, #64	; 0x40
 800b9fa:	f7fc fb67 	bl	80080cc <_malloc_r>
 800b9fe:	6028      	str	r0, [r5, #0]
 800ba00:	6128      	str	r0, [r5, #16]
 800ba02:	b920      	cbnz	r0, 800ba0e <_svfiprintf_r+0x2e>
 800ba04:	230c      	movs	r3, #12
 800ba06:	603b      	str	r3, [r7, #0]
 800ba08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba0c:	e0d0      	b.n	800bbb0 <_svfiprintf_r+0x1d0>
 800ba0e:	2340      	movs	r3, #64	; 0x40
 800ba10:	616b      	str	r3, [r5, #20]
 800ba12:	2300      	movs	r3, #0
 800ba14:	9309      	str	r3, [sp, #36]	; 0x24
 800ba16:	2320      	movs	r3, #32
 800ba18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba20:	2330      	movs	r3, #48	; 0x30
 800ba22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bbc8 <_svfiprintf_r+0x1e8>
 800ba26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba2a:	f04f 0901 	mov.w	r9, #1
 800ba2e:	4623      	mov	r3, r4
 800ba30:	469a      	mov	sl, r3
 800ba32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba36:	b10a      	cbz	r2, 800ba3c <_svfiprintf_r+0x5c>
 800ba38:	2a25      	cmp	r2, #37	; 0x25
 800ba3a:	d1f9      	bne.n	800ba30 <_svfiprintf_r+0x50>
 800ba3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba40:	d00b      	beq.n	800ba5a <_svfiprintf_r+0x7a>
 800ba42:	465b      	mov	r3, fp
 800ba44:	4622      	mov	r2, r4
 800ba46:	4629      	mov	r1, r5
 800ba48:	4638      	mov	r0, r7
 800ba4a:	f7ff ff6f 	bl	800b92c <__ssputs_r>
 800ba4e:	3001      	adds	r0, #1
 800ba50:	f000 80a9 	beq.w	800bba6 <_svfiprintf_r+0x1c6>
 800ba54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba56:	445a      	add	r2, fp
 800ba58:	9209      	str	r2, [sp, #36]	; 0x24
 800ba5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f000 80a1 	beq.w	800bba6 <_svfiprintf_r+0x1c6>
 800ba64:	2300      	movs	r3, #0
 800ba66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba6e:	f10a 0a01 	add.w	sl, sl, #1
 800ba72:	9304      	str	r3, [sp, #16]
 800ba74:	9307      	str	r3, [sp, #28]
 800ba76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba7a:	931a      	str	r3, [sp, #104]	; 0x68
 800ba7c:	4654      	mov	r4, sl
 800ba7e:	2205      	movs	r2, #5
 800ba80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba84:	4850      	ldr	r0, [pc, #320]	; (800bbc8 <_svfiprintf_r+0x1e8>)
 800ba86:	f7f4 fba3 	bl	80001d0 <memchr>
 800ba8a:	9a04      	ldr	r2, [sp, #16]
 800ba8c:	b9d8      	cbnz	r0, 800bac6 <_svfiprintf_r+0xe6>
 800ba8e:	06d0      	lsls	r0, r2, #27
 800ba90:	bf44      	itt	mi
 800ba92:	2320      	movmi	r3, #32
 800ba94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba98:	0711      	lsls	r1, r2, #28
 800ba9a:	bf44      	itt	mi
 800ba9c:	232b      	movmi	r3, #43	; 0x2b
 800ba9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baa2:	f89a 3000 	ldrb.w	r3, [sl]
 800baa6:	2b2a      	cmp	r3, #42	; 0x2a
 800baa8:	d015      	beq.n	800bad6 <_svfiprintf_r+0xf6>
 800baaa:	9a07      	ldr	r2, [sp, #28]
 800baac:	4654      	mov	r4, sl
 800baae:	2000      	movs	r0, #0
 800bab0:	f04f 0c0a 	mov.w	ip, #10
 800bab4:	4621      	mov	r1, r4
 800bab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baba:	3b30      	subs	r3, #48	; 0x30
 800babc:	2b09      	cmp	r3, #9
 800babe:	d94d      	bls.n	800bb5c <_svfiprintf_r+0x17c>
 800bac0:	b1b0      	cbz	r0, 800baf0 <_svfiprintf_r+0x110>
 800bac2:	9207      	str	r2, [sp, #28]
 800bac4:	e014      	b.n	800baf0 <_svfiprintf_r+0x110>
 800bac6:	eba0 0308 	sub.w	r3, r0, r8
 800baca:	fa09 f303 	lsl.w	r3, r9, r3
 800bace:	4313      	orrs	r3, r2
 800bad0:	9304      	str	r3, [sp, #16]
 800bad2:	46a2      	mov	sl, r4
 800bad4:	e7d2      	b.n	800ba7c <_svfiprintf_r+0x9c>
 800bad6:	9b03      	ldr	r3, [sp, #12]
 800bad8:	1d19      	adds	r1, r3, #4
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	9103      	str	r1, [sp, #12]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	bfbb      	ittet	lt
 800bae2:	425b      	neglt	r3, r3
 800bae4:	f042 0202 	orrlt.w	r2, r2, #2
 800bae8:	9307      	strge	r3, [sp, #28]
 800baea:	9307      	strlt	r3, [sp, #28]
 800baec:	bfb8      	it	lt
 800baee:	9204      	strlt	r2, [sp, #16]
 800baf0:	7823      	ldrb	r3, [r4, #0]
 800baf2:	2b2e      	cmp	r3, #46	; 0x2e
 800baf4:	d10c      	bne.n	800bb10 <_svfiprintf_r+0x130>
 800baf6:	7863      	ldrb	r3, [r4, #1]
 800baf8:	2b2a      	cmp	r3, #42	; 0x2a
 800bafa:	d134      	bne.n	800bb66 <_svfiprintf_r+0x186>
 800bafc:	9b03      	ldr	r3, [sp, #12]
 800bafe:	1d1a      	adds	r2, r3, #4
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	9203      	str	r2, [sp, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	bfb8      	it	lt
 800bb08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bb0c:	3402      	adds	r4, #2
 800bb0e:	9305      	str	r3, [sp, #20]
 800bb10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bbd8 <_svfiprintf_r+0x1f8>
 800bb14:	7821      	ldrb	r1, [r4, #0]
 800bb16:	2203      	movs	r2, #3
 800bb18:	4650      	mov	r0, sl
 800bb1a:	f7f4 fb59 	bl	80001d0 <memchr>
 800bb1e:	b138      	cbz	r0, 800bb30 <_svfiprintf_r+0x150>
 800bb20:	9b04      	ldr	r3, [sp, #16]
 800bb22:	eba0 000a 	sub.w	r0, r0, sl
 800bb26:	2240      	movs	r2, #64	; 0x40
 800bb28:	4082      	lsls	r2, r0
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	3401      	adds	r4, #1
 800bb2e:	9304      	str	r3, [sp, #16]
 800bb30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb34:	4825      	ldr	r0, [pc, #148]	; (800bbcc <_svfiprintf_r+0x1ec>)
 800bb36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb3a:	2206      	movs	r2, #6
 800bb3c:	f7f4 fb48 	bl	80001d0 <memchr>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	d038      	beq.n	800bbb6 <_svfiprintf_r+0x1d6>
 800bb44:	4b22      	ldr	r3, [pc, #136]	; (800bbd0 <_svfiprintf_r+0x1f0>)
 800bb46:	bb1b      	cbnz	r3, 800bb90 <_svfiprintf_r+0x1b0>
 800bb48:	9b03      	ldr	r3, [sp, #12]
 800bb4a:	3307      	adds	r3, #7
 800bb4c:	f023 0307 	bic.w	r3, r3, #7
 800bb50:	3308      	adds	r3, #8
 800bb52:	9303      	str	r3, [sp, #12]
 800bb54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb56:	4433      	add	r3, r6
 800bb58:	9309      	str	r3, [sp, #36]	; 0x24
 800bb5a:	e768      	b.n	800ba2e <_svfiprintf_r+0x4e>
 800bb5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb60:	460c      	mov	r4, r1
 800bb62:	2001      	movs	r0, #1
 800bb64:	e7a6      	b.n	800bab4 <_svfiprintf_r+0xd4>
 800bb66:	2300      	movs	r3, #0
 800bb68:	3401      	adds	r4, #1
 800bb6a:	9305      	str	r3, [sp, #20]
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	f04f 0c0a 	mov.w	ip, #10
 800bb72:	4620      	mov	r0, r4
 800bb74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb78:	3a30      	subs	r2, #48	; 0x30
 800bb7a:	2a09      	cmp	r2, #9
 800bb7c:	d903      	bls.n	800bb86 <_svfiprintf_r+0x1a6>
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d0c6      	beq.n	800bb10 <_svfiprintf_r+0x130>
 800bb82:	9105      	str	r1, [sp, #20]
 800bb84:	e7c4      	b.n	800bb10 <_svfiprintf_r+0x130>
 800bb86:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e7f0      	b.n	800bb72 <_svfiprintf_r+0x192>
 800bb90:	ab03      	add	r3, sp, #12
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	462a      	mov	r2, r5
 800bb96:	4b0f      	ldr	r3, [pc, #60]	; (800bbd4 <_svfiprintf_r+0x1f4>)
 800bb98:	a904      	add	r1, sp, #16
 800bb9a:	4638      	mov	r0, r7
 800bb9c:	f7fc fbc2 	bl	8008324 <_printf_float>
 800bba0:	1c42      	adds	r2, r0, #1
 800bba2:	4606      	mov	r6, r0
 800bba4:	d1d6      	bne.n	800bb54 <_svfiprintf_r+0x174>
 800bba6:	89ab      	ldrh	r3, [r5, #12]
 800bba8:	065b      	lsls	r3, r3, #25
 800bbaa:	f53f af2d 	bmi.w	800ba08 <_svfiprintf_r+0x28>
 800bbae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbb0:	b01d      	add	sp, #116	; 0x74
 800bbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb6:	ab03      	add	r3, sp, #12
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	462a      	mov	r2, r5
 800bbbc:	4b05      	ldr	r3, [pc, #20]	; (800bbd4 <_svfiprintf_r+0x1f4>)
 800bbbe:	a904      	add	r1, sp, #16
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	f7fc fe53 	bl	800886c <_printf_i>
 800bbc6:	e7eb      	b.n	800bba0 <_svfiprintf_r+0x1c0>
 800bbc8:	0800cf31 	.word	0x0800cf31
 800bbcc:	0800cf3b 	.word	0x0800cf3b
 800bbd0:	08008325 	.word	0x08008325
 800bbd4:	0800b92d 	.word	0x0800b92d
 800bbd8:	0800cf37 	.word	0x0800cf37

0800bbdc <__sfputc_r>:
 800bbdc:	6893      	ldr	r3, [r2, #8]
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	b410      	push	{r4}
 800bbe4:	6093      	str	r3, [r2, #8]
 800bbe6:	da08      	bge.n	800bbfa <__sfputc_r+0x1e>
 800bbe8:	6994      	ldr	r4, [r2, #24]
 800bbea:	42a3      	cmp	r3, r4
 800bbec:	db01      	blt.n	800bbf2 <__sfputc_r+0x16>
 800bbee:	290a      	cmp	r1, #10
 800bbf0:	d103      	bne.n	800bbfa <__sfputc_r+0x1e>
 800bbf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbf6:	f7fd bafe 	b.w	80091f6 <__swbuf_r>
 800bbfa:	6813      	ldr	r3, [r2, #0]
 800bbfc:	1c58      	adds	r0, r3, #1
 800bbfe:	6010      	str	r0, [r2, #0]
 800bc00:	7019      	strb	r1, [r3, #0]
 800bc02:	4608      	mov	r0, r1
 800bc04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <__sfputs_r>:
 800bc0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0c:	4606      	mov	r6, r0
 800bc0e:	460f      	mov	r7, r1
 800bc10:	4614      	mov	r4, r2
 800bc12:	18d5      	adds	r5, r2, r3
 800bc14:	42ac      	cmp	r4, r5
 800bc16:	d101      	bne.n	800bc1c <__sfputs_r+0x12>
 800bc18:	2000      	movs	r0, #0
 800bc1a:	e007      	b.n	800bc2c <__sfputs_r+0x22>
 800bc1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc20:	463a      	mov	r2, r7
 800bc22:	4630      	mov	r0, r6
 800bc24:	f7ff ffda 	bl	800bbdc <__sfputc_r>
 800bc28:	1c43      	adds	r3, r0, #1
 800bc2a:	d1f3      	bne.n	800bc14 <__sfputs_r+0xa>
 800bc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc30 <_vfiprintf_r>:
 800bc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc34:	460d      	mov	r5, r1
 800bc36:	b09d      	sub	sp, #116	; 0x74
 800bc38:	4614      	mov	r4, r2
 800bc3a:	4698      	mov	r8, r3
 800bc3c:	4606      	mov	r6, r0
 800bc3e:	b118      	cbz	r0, 800bc48 <_vfiprintf_r+0x18>
 800bc40:	6a03      	ldr	r3, [r0, #32]
 800bc42:	b90b      	cbnz	r3, 800bc48 <_vfiprintf_r+0x18>
 800bc44:	f7fd f9d0 	bl	8008fe8 <__sinit>
 800bc48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc4a:	07d9      	lsls	r1, r3, #31
 800bc4c:	d405      	bmi.n	800bc5a <_vfiprintf_r+0x2a>
 800bc4e:	89ab      	ldrh	r3, [r5, #12]
 800bc50:	059a      	lsls	r2, r3, #22
 800bc52:	d402      	bmi.n	800bc5a <_vfiprintf_r+0x2a>
 800bc54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc56:	f7fd fc46 	bl	80094e6 <__retarget_lock_acquire_recursive>
 800bc5a:	89ab      	ldrh	r3, [r5, #12]
 800bc5c:	071b      	lsls	r3, r3, #28
 800bc5e:	d501      	bpl.n	800bc64 <_vfiprintf_r+0x34>
 800bc60:	692b      	ldr	r3, [r5, #16]
 800bc62:	b99b      	cbnz	r3, 800bc8c <_vfiprintf_r+0x5c>
 800bc64:	4629      	mov	r1, r5
 800bc66:	4630      	mov	r0, r6
 800bc68:	f7fd fb02 	bl	8009270 <__swsetup_r>
 800bc6c:	b170      	cbz	r0, 800bc8c <_vfiprintf_r+0x5c>
 800bc6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc70:	07dc      	lsls	r4, r3, #31
 800bc72:	d504      	bpl.n	800bc7e <_vfiprintf_r+0x4e>
 800bc74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc78:	b01d      	add	sp, #116	; 0x74
 800bc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7e:	89ab      	ldrh	r3, [r5, #12]
 800bc80:	0598      	lsls	r0, r3, #22
 800bc82:	d4f7      	bmi.n	800bc74 <_vfiprintf_r+0x44>
 800bc84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc86:	f7fd fc2f 	bl	80094e8 <__retarget_lock_release_recursive>
 800bc8a:	e7f3      	b.n	800bc74 <_vfiprintf_r+0x44>
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc90:	2320      	movs	r3, #32
 800bc92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc96:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc9a:	2330      	movs	r3, #48	; 0x30
 800bc9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800be50 <_vfiprintf_r+0x220>
 800bca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bca4:	f04f 0901 	mov.w	r9, #1
 800bca8:	4623      	mov	r3, r4
 800bcaa:	469a      	mov	sl, r3
 800bcac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcb0:	b10a      	cbz	r2, 800bcb6 <_vfiprintf_r+0x86>
 800bcb2:	2a25      	cmp	r2, #37	; 0x25
 800bcb4:	d1f9      	bne.n	800bcaa <_vfiprintf_r+0x7a>
 800bcb6:	ebba 0b04 	subs.w	fp, sl, r4
 800bcba:	d00b      	beq.n	800bcd4 <_vfiprintf_r+0xa4>
 800bcbc:	465b      	mov	r3, fp
 800bcbe:	4622      	mov	r2, r4
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f7ff ffa1 	bl	800bc0a <__sfputs_r>
 800bcc8:	3001      	adds	r0, #1
 800bcca:	f000 80a9 	beq.w	800be20 <_vfiprintf_r+0x1f0>
 800bcce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcd0:	445a      	add	r2, fp
 800bcd2:	9209      	str	r2, [sp, #36]	; 0x24
 800bcd4:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f000 80a1 	beq.w	800be20 <_vfiprintf_r+0x1f0>
 800bcde:	2300      	movs	r3, #0
 800bce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce8:	f10a 0a01 	add.w	sl, sl, #1
 800bcec:	9304      	str	r3, [sp, #16]
 800bcee:	9307      	str	r3, [sp, #28]
 800bcf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcf4:	931a      	str	r3, [sp, #104]	; 0x68
 800bcf6:	4654      	mov	r4, sl
 800bcf8:	2205      	movs	r2, #5
 800bcfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcfe:	4854      	ldr	r0, [pc, #336]	; (800be50 <_vfiprintf_r+0x220>)
 800bd00:	f7f4 fa66 	bl	80001d0 <memchr>
 800bd04:	9a04      	ldr	r2, [sp, #16]
 800bd06:	b9d8      	cbnz	r0, 800bd40 <_vfiprintf_r+0x110>
 800bd08:	06d1      	lsls	r1, r2, #27
 800bd0a:	bf44      	itt	mi
 800bd0c:	2320      	movmi	r3, #32
 800bd0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd12:	0713      	lsls	r3, r2, #28
 800bd14:	bf44      	itt	mi
 800bd16:	232b      	movmi	r3, #43	; 0x2b
 800bd18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd1c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd20:	2b2a      	cmp	r3, #42	; 0x2a
 800bd22:	d015      	beq.n	800bd50 <_vfiprintf_r+0x120>
 800bd24:	9a07      	ldr	r2, [sp, #28]
 800bd26:	4654      	mov	r4, sl
 800bd28:	2000      	movs	r0, #0
 800bd2a:	f04f 0c0a 	mov.w	ip, #10
 800bd2e:	4621      	mov	r1, r4
 800bd30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd34:	3b30      	subs	r3, #48	; 0x30
 800bd36:	2b09      	cmp	r3, #9
 800bd38:	d94d      	bls.n	800bdd6 <_vfiprintf_r+0x1a6>
 800bd3a:	b1b0      	cbz	r0, 800bd6a <_vfiprintf_r+0x13a>
 800bd3c:	9207      	str	r2, [sp, #28]
 800bd3e:	e014      	b.n	800bd6a <_vfiprintf_r+0x13a>
 800bd40:	eba0 0308 	sub.w	r3, r0, r8
 800bd44:	fa09 f303 	lsl.w	r3, r9, r3
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	9304      	str	r3, [sp, #16]
 800bd4c:	46a2      	mov	sl, r4
 800bd4e:	e7d2      	b.n	800bcf6 <_vfiprintf_r+0xc6>
 800bd50:	9b03      	ldr	r3, [sp, #12]
 800bd52:	1d19      	adds	r1, r3, #4
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	9103      	str	r1, [sp, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	bfbb      	ittet	lt
 800bd5c:	425b      	neglt	r3, r3
 800bd5e:	f042 0202 	orrlt.w	r2, r2, #2
 800bd62:	9307      	strge	r3, [sp, #28]
 800bd64:	9307      	strlt	r3, [sp, #28]
 800bd66:	bfb8      	it	lt
 800bd68:	9204      	strlt	r2, [sp, #16]
 800bd6a:	7823      	ldrb	r3, [r4, #0]
 800bd6c:	2b2e      	cmp	r3, #46	; 0x2e
 800bd6e:	d10c      	bne.n	800bd8a <_vfiprintf_r+0x15a>
 800bd70:	7863      	ldrb	r3, [r4, #1]
 800bd72:	2b2a      	cmp	r3, #42	; 0x2a
 800bd74:	d134      	bne.n	800bde0 <_vfiprintf_r+0x1b0>
 800bd76:	9b03      	ldr	r3, [sp, #12]
 800bd78:	1d1a      	adds	r2, r3, #4
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	9203      	str	r2, [sp, #12]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	bfb8      	it	lt
 800bd82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bd86:	3402      	adds	r4, #2
 800bd88:	9305      	str	r3, [sp, #20]
 800bd8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800be60 <_vfiprintf_r+0x230>
 800bd8e:	7821      	ldrb	r1, [r4, #0]
 800bd90:	2203      	movs	r2, #3
 800bd92:	4650      	mov	r0, sl
 800bd94:	f7f4 fa1c 	bl	80001d0 <memchr>
 800bd98:	b138      	cbz	r0, 800bdaa <_vfiprintf_r+0x17a>
 800bd9a:	9b04      	ldr	r3, [sp, #16]
 800bd9c:	eba0 000a 	sub.w	r0, r0, sl
 800bda0:	2240      	movs	r2, #64	; 0x40
 800bda2:	4082      	lsls	r2, r0
 800bda4:	4313      	orrs	r3, r2
 800bda6:	3401      	adds	r4, #1
 800bda8:	9304      	str	r3, [sp, #16]
 800bdaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdae:	4829      	ldr	r0, [pc, #164]	; (800be54 <_vfiprintf_r+0x224>)
 800bdb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdb4:	2206      	movs	r2, #6
 800bdb6:	f7f4 fa0b 	bl	80001d0 <memchr>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d03f      	beq.n	800be3e <_vfiprintf_r+0x20e>
 800bdbe:	4b26      	ldr	r3, [pc, #152]	; (800be58 <_vfiprintf_r+0x228>)
 800bdc0:	bb1b      	cbnz	r3, 800be0a <_vfiprintf_r+0x1da>
 800bdc2:	9b03      	ldr	r3, [sp, #12]
 800bdc4:	3307      	adds	r3, #7
 800bdc6:	f023 0307 	bic.w	r3, r3, #7
 800bdca:	3308      	adds	r3, #8
 800bdcc:	9303      	str	r3, [sp, #12]
 800bdce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd0:	443b      	add	r3, r7
 800bdd2:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd4:	e768      	b.n	800bca8 <_vfiprintf_r+0x78>
 800bdd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdda:	460c      	mov	r4, r1
 800bddc:	2001      	movs	r0, #1
 800bdde:	e7a6      	b.n	800bd2e <_vfiprintf_r+0xfe>
 800bde0:	2300      	movs	r3, #0
 800bde2:	3401      	adds	r4, #1
 800bde4:	9305      	str	r3, [sp, #20]
 800bde6:	4619      	mov	r1, r3
 800bde8:	f04f 0c0a 	mov.w	ip, #10
 800bdec:	4620      	mov	r0, r4
 800bdee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdf2:	3a30      	subs	r2, #48	; 0x30
 800bdf4:	2a09      	cmp	r2, #9
 800bdf6:	d903      	bls.n	800be00 <_vfiprintf_r+0x1d0>
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d0c6      	beq.n	800bd8a <_vfiprintf_r+0x15a>
 800bdfc:	9105      	str	r1, [sp, #20]
 800bdfe:	e7c4      	b.n	800bd8a <_vfiprintf_r+0x15a>
 800be00:	fb0c 2101 	mla	r1, ip, r1, r2
 800be04:	4604      	mov	r4, r0
 800be06:	2301      	movs	r3, #1
 800be08:	e7f0      	b.n	800bdec <_vfiprintf_r+0x1bc>
 800be0a:	ab03      	add	r3, sp, #12
 800be0c:	9300      	str	r3, [sp, #0]
 800be0e:	462a      	mov	r2, r5
 800be10:	4b12      	ldr	r3, [pc, #72]	; (800be5c <_vfiprintf_r+0x22c>)
 800be12:	a904      	add	r1, sp, #16
 800be14:	4630      	mov	r0, r6
 800be16:	f7fc fa85 	bl	8008324 <_printf_float>
 800be1a:	4607      	mov	r7, r0
 800be1c:	1c78      	adds	r0, r7, #1
 800be1e:	d1d6      	bne.n	800bdce <_vfiprintf_r+0x19e>
 800be20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be22:	07d9      	lsls	r1, r3, #31
 800be24:	d405      	bmi.n	800be32 <_vfiprintf_r+0x202>
 800be26:	89ab      	ldrh	r3, [r5, #12]
 800be28:	059a      	lsls	r2, r3, #22
 800be2a:	d402      	bmi.n	800be32 <_vfiprintf_r+0x202>
 800be2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be2e:	f7fd fb5b 	bl	80094e8 <__retarget_lock_release_recursive>
 800be32:	89ab      	ldrh	r3, [r5, #12]
 800be34:	065b      	lsls	r3, r3, #25
 800be36:	f53f af1d 	bmi.w	800bc74 <_vfiprintf_r+0x44>
 800be3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be3c:	e71c      	b.n	800bc78 <_vfiprintf_r+0x48>
 800be3e:	ab03      	add	r3, sp, #12
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	462a      	mov	r2, r5
 800be44:	4b05      	ldr	r3, [pc, #20]	; (800be5c <_vfiprintf_r+0x22c>)
 800be46:	a904      	add	r1, sp, #16
 800be48:	4630      	mov	r0, r6
 800be4a:	f7fc fd0f 	bl	800886c <_printf_i>
 800be4e:	e7e4      	b.n	800be1a <_vfiprintf_r+0x1ea>
 800be50:	0800cf31 	.word	0x0800cf31
 800be54:	0800cf3b 	.word	0x0800cf3b
 800be58:	08008325 	.word	0x08008325
 800be5c:	0800bc0b 	.word	0x0800bc0b
 800be60:	0800cf37 	.word	0x0800cf37

0800be64 <__sflush_r>:
 800be64:	898a      	ldrh	r2, [r1, #12]
 800be66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be6a:	4605      	mov	r5, r0
 800be6c:	0710      	lsls	r0, r2, #28
 800be6e:	460c      	mov	r4, r1
 800be70:	d458      	bmi.n	800bf24 <__sflush_r+0xc0>
 800be72:	684b      	ldr	r3, [r1, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	dc05      	bgt.n	800be84 <__sflush_r+0x20>
 800be78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	dc02      	bgt.n	800be84 <__sflush_r+0x20>
 800be7e:	2000      	movs	r0, #0
 800be80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be86:	2e00      	cmp	r6, #0
 800be88:	d0f9      	beq.n	800be7e <__sflush_r+0x1a>
 800be8a:	2300      	movs	r3, #0
 800be8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be90:	682f      	ldr	r7, [r5, #0]
 800be92:	6a21      	ldr	r1, [r4, #32]
 800be94:	602b      	str	r3, [r5, #0]
 800be96:	d032      	beq.n	800befe <__sflush_r+0x9a>
 800be98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be9a:	89a3      	ldrh	r3, [r4, #12]
 800be9c:	075a      	lsls	r2, r3, #29
 800be9e:	d505      	bpl.n	800beac <__sflush_r+0x48>
 800bea0:	6863      	ldr	r3, [r4, #4]
 800bea2:	1ac0      	subs	r0, r0, r3
 800bea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bea6:	b10b      	cbz	r3, 800beac <__sflush_r+0x48>
 800bea8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800beaa:	1ac0      	subs	r0, r0, r3
 800beac:	2300      	movs	r3, #0
 800beae:	4602      	mov	r2, r0
 800beb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800beb2:	6a21      	ldr	r1, [r4, #32]
 800beb4:	4628      	mov	r0, r5
 800beb6:	47b0      	blx	r6
 800beb8:	1c43      	adds	r3, r0, #1
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	d106      	bne.n	800becc <__sflush_r+0x68>
 800bebe:	6829      	ldr	r1, [r5, #0]
 800bec0:	291d      	cmp	r1, #29
 800bec2:	d82b      	bhi.n	800bf1c <__sflush_r+0xb8>
 800bec4:	4a29      	ldr	r2, [pc, #164]	; (800bf6c <__sflush_r+0x108>)
 800bec6:	410a      	asrs	r2, r1
 800bec8:	07d6      	lsls	r6, r2, #31
 800beca:	d427      	bmi.n	800bf1c <__sflush_r+0xb8>
 800becc:	2200      	movs	r2, #0
 800bece:	6062      	str	r2, [r4, #4]
 800bed0:	04d9      	lsls	r1, r3, #19
 800bed2:	6922      	ldr	r2, [r4, #16]
 800bed4:	6022      	str	r2, [r4, #0]
 800bed6:	d504      	bpl.n	800bee2 <__sflush_r+0x7e>
 800bed8:	1c42      	adds	r2, r0, #1
 800beda:	d101      	bne.n	800bee0 <__sflush_r+0x7c>
 800bedc:	682b      	ldr	r3, [r5, #0]
 800bede:	b903      	cbnz	r3, 800bee2 <__sflush_r+0x7e>
 800bee0:	6560      	str	r0, [r4, #84]	; 0x54
 800bee2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bee4:	602f      	str	r7, [r5, #0]
 800bee6:	2900      	cmp	r1, #0
 800bee8:	d0c9      	beq.n	800be7e <__sflush_r+0x1a>
 800beea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800beee:	4299      	cmp	r1, r3
 800bef0:	d002      	beq.n	800bef8 <__sflush_r+0x94>
 800bef2:	4628      	mov	r0, r5
 800bef4:	f7fe f98a 	bl	800a20c <_free_r>
 800bef8:	2000      	movs	r0, #0
 800befa:	6360      	str	r0, [r4, #52]	; 0x34
 800befc:	e7c0      	b.n	800be80 <__sflush_r+0x1c>
 800befe:	2301      	movs	r3, #1
 800bf00:	4628      	mov	r0, r5
 800bf02:	47b0      	blx	r6
 800bf04:	1c41      	adds	r1, r0, #1
 800bf06:	d1c8      	bne.n	800be9a <__sflush_r+0x36>
 800bf08:	682b      	ldr	r3, [r5, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d0c5      	beq.n	800be9a <__sflush_r+0x36>
 800bf0e:	2b1d      	cmp	r3, #29
 800bf10:	d001      	beq.n	800bf16 <__sflush_r+0xb2>
 800bf12:	2b16      	cmp	r3, #22
 800bf14:	d101      	bne.n	800bf1a <__sflush_r+0xb6>
 800bf16:	602f      	str	r7, [r5, #0]
 800bf18:	e7b1      	b.n	800be7e <__sflush_r+0x1a>
 800bf1a:	89a3      	ldrh	r3, [r4, #12]
 800bf1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf20:	81a3      	strh	r3, [r4, #12]
 800bf22:	e7ad      	b.n	800be80 <__sflush_r+0x1c>
 800bf24:	690f      	ldr	r7, [r1, #16]
 800bf26:	2f00      	cmp	r7, #0
 800bf28:	d0a9      	beq.n	800be7e <__sflush_r+0x1a>
 800bf2a:	0793      	lsls	r3, r2, #30
 800bf2c:	680e      	ldr	r6, [r1, #0]
 800bf2e:	bf08      	it	eq
 800bf30:	694b      	ldreq	r3, [r1, #20]
 800bf32:	600f      	str	r7, [r1, #0]
 800bf34:	bf18      	it	ne
 800bf36:	2300      	movne	r3, #0
 800bf38:	eba6 0807 	sub.w	r8, r6, r7
 800bf3c:	608b      	str	r3, [r1, #8]
 800bf3e:	f1b8 0f00 	cmp.w	r8, #0
 800bf42:	dd9c      	ble.n	800be7e <__sflush_r+0x1a>
 800bf44:	6a21      	ldr	r1, [r4, #32]
 800bf46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf48:	4643      	mov	r3, r8
 800bf4a:	463a      	mov	r2, r7
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	47b0      	blx	r6
 800bf50:	2800      	cmp	r0, #0
 800bf52:	dc06      	bgt.n	800bf62 <__sflush_r+0xfe>
 800bf54:	89a3      	ldrh	r3, [r4, #12]
 800bf56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf5a:	81a3      	strh	r3, [r4, #12]
 800bf5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf60:	e78e      	b.n	800be80 <__sflush_r+0x1c>
 800bf62:	4407      	add	r7, r0
 800bf64:	eba8 0800 	sub.w	r8, r8, r0
 800bf68:	e7e9      	b.n	800bf3e <__sflush_r+0xda>
 800bf6a:	bf00      	nop
 800bf6c:	dfbffffe 	.word	0xdfbffffe

0800bf70 <_fflush_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	690b      	ldr	r3, [r1, #16]
 800bf74:	4605      	mov	r5, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	b913      	cbnz	r3, 800bf80 <_fflush_r+0x10>
 800bf7a:	2500      	movs	r5, #0
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	bd38      	pop	{r3, r4, r5, pc}
 800bf80:	b118      	cbz	r0, 800bf8a <_fflush_r+0x1a>
 800bf82:	6a03      	ldr	r3, [r0, #32]
 800bf84:	b90b      	cbnz	r3, 800bf8a <_fflush_r+0x1a>
 800bf86:	f7fd f82f 	bl	8008fe8 <__sinit>
 800bf8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d0f3      	beq.n	800bf7a <_fflush_r+0xa>
 800bf92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf94:	07d0      	lsls	r0, r2, #31
 800bf96:	d404      	bmi.n	800bfa2 <_fflush_r+0x32>
 800bf98:	0599      	lsls	r1, r3, #22
 800bf9a:	d402      	bmi.n	800bfa2 <_fflush_r+0x32>
 800bf9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf9e:	f7fd faa2 	bl	80094e6 <__retarget_lock_acquire_recursive>
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	4621      	mov	r1, r4
 800bfa6:	f7ff ff5d 	bl	800be64 <__sflush_r>
 800bfaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfac:	07da      	lsls	r2, r3, #31
 800bfae:	4605      	mov	r5, r0
 800bfb0:	d4e4      	bmi.n	800bf7c <_fflush_r+0xc>
 800bfb2:	89a3      	ldrh	r3, [r4, #12]
 800bfb4:	059b      	lsls	r3, r3, #22
 800bfb6:	d4e1      	bmi.n	800bf7c <_fflush_r+0xc>
 800bfb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfba:	f7fd fa95 	bl	80094e8 <__retarget_lock_release_recursive>
 800bfbe:	e7dd      	b.n	800bf7c <_fflush_r+0xc>

0800bfc0 <__swhatbuf_r>:
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc8:	2900      	cmp	r1, #0
 800bfca:	b096      	sub	sp, #88	; 0x58
 800bfcc:	4615      	mov	r5, r2
 800bfce:	461e      	mov	r6, r3
 800bfd0:	da0d      	bge.n	800bfee <__swhatbuf_r+0x2e>
 800bfd2:	89a3      	ldrh	r3, [r4, #12]
 800bfd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bfd8:	f04f 0100 	mov.w	r1, #0
 800bfdc:	bf0c      	ite	eq
 800bfde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bfe2:	2340      	movne	r3, #64	; 0x40
 800bfe4:	2000      	movs	r0, #0
 800bfe6:	6031      	str	r1, [r6, #0]
 800bfe8:	602b      	str	r3, [r5, #0]
 800bfea:	b016      	add	sp, #88	; 0x58
 800bfec:	bd70      	pop	{r4, r5, r6, pc}
 800bfee:	466a      	mov	r2, sp
 800bff0:	f000 f874 	bl	800c0dc <_fstat_r>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	dbec      	blt.n	800bfd2 <__swhatbuf_r+0x12>
 800bff8:	9901      	ldr	r1, [sp, #4]
 800bffa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bffe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c002:	4259      	negs	r1, r3
 800c004:	4159      	adcs	r1, r3
 800c006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c00a:	e7eb      	b.n	800bfe4 <__swhatbuf_r+0x24>

0800c00c <__smakebuf_r>:
 800c00c:	898b      	ldrh	r3, [r1, #12]
 800c00e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c010:	079d      	lsls	r5, r3, #30
 800c012:	4606      	mov	r6, r0
 800c014:	460c      	mov	r4, r1
 800c016:	d507      	bpl.n	800c028 <__smakebuf_r+0x1c>
 800c018:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	6123      	str	r3, [r4, #16]
 800c020:	2301      	movs	r3, #1
 800c022:	6163      	str	r3, [r4, #20]
 800c024:	b002      	add	sp, #8
 800c026:	bd70      	pop	{r4, r5, r6, pc}
 800c028:	ab01      	add	r3, sp, #4
 800c02a:	466a      	mov	r2, sp
 800c02c:	f7ff ffc8 	bl	800bfc0 <__swhatbuf_r>
 800c030:	9900      	ldr	r1, [sp, #0]
 800c032:	4605      	mov	r5, r0
 800c034:	4630      	mov	r0, r6
 800c036:	f7fc f849 	bl	80080cc <_malloc_r>
 800c03a:	b948      	cbnz	r0, 800c050 <__smakebuf_r+0x44>
 800c03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c040:	059a      	lsls	r2, r3, #22
 800c042:	d4ef      	bmi.n	800c024 <__smakebuf_r+0x18>
 800c044:	f023 0303 	bic.w	r3, r3, #3
 800c048:	f043 0302 	orr.w	r3, r3, #2
 800c04c:	81a3      	strh	r3, [r4, #12]
 800c04e:	e7e3      	b.n	800c018 <__smakebuf_r+0xc>
 800c050:	89a3      	ldrh	r3, [r4, #12]
 800c052:	6020      	str	r0, [r4, #0]
 800c054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c058:	81a3      	strh	r3, [r4, #12]
 800c05a:	9b00      	ldr	r3, [sp, #0]
 800c05c:	6163      	str	r3, [r4, #20]
 800c05e:	9b01      	ldr	r3, [sp, #4]
 800c060:	6120      	str	r0, [r4, #16]
 800c062:	b15b      	cbz	r3, 800c07c <__smakebuf_r+0x70>
 800c064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c068:	4630      	mov	r0, r6
 800c06a:	f000 f849 	bl	800c100 <_isatty_r>
 800c06e:	b128      	cbz	r0, 800c07c <__smakebuf_r+0x70>
 800c070:	89a3      	ldrh	r3, [r4, #12]
 800c072:	f023 0303 	bic.w	r3, r3, #3
 800c076:	f043 0301 	orr.w	r3, r3, #1
 800c07a:	81a3      	strh	r3, [r4, #12]
 800c07c:	89a3      	ldrh	r3, [r4, #12]
 800c07e:	431d      	orrs	r5, r3
 800c080:	81a5      	strh	r5, [r4, #12]
 800c082:	e7cf      	b.n	800c024 <__smakebuf_r+0x18>

0800c084 <memmove>:
 800c084:	4288      	cmp	r0, r1
 800c086:	b510      	push	{r4, lr}
 800c088:	eb01 0402 	add.w	r4, r1, r2
 800c08c:	d902      	bls.n	800c094 <memmove+0x10>
 800c08e:	4284      	cmp	r4, r0
 800c090:	4623      	mov	r3, r4
 800c092:	d807      	bhi.n	800c0a4 <memmove+0x20>
 800c094:	1e43      	subs	r3, r0, #1
 800c096:	42a1      	cmp	r1, r4
 800c098:	d008      	beq.n	800c0ac <memmove+0x28>
 800c09a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c09e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0a2:	e7f8      	b.n	800c096 <memmove+0x12>
 800c0a4:	4402      	add	r2, r0
 800c0a6:	4601      	mov	r1, r0
 800c0a8:	428a      	cmp	r2, r1
 800c0aa:	d100      	bne.n	800c0ae <memmove+0x2a>
 800c0ac:	bd10      	pop	{r4, pc}
 800c0ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0b6:	e7f7      	b.n	800c0a8 <memmove+0x24>

0800c0b8 <strncmp>:
 800c0b8:	b510      	push	{r4, lr}
 800c0ba:	b16a      	cbz	r2, 800c0d8 <strncmp+0x20>
 800c0bc:	3901      	subs	r1, #1
 800c0be:	1884      	adds	r4, r0, r2
 800c0c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d103      	bne.n	800c0d4 <strncmp+0x1c>
 800c0cc:	42a0      	cmp	r0, r4
 800c0ce:	d001      	beq.n	800c0d4 <strncmp+0x1c>
 800c0d0:	2a00      	cmp	r2, #0
 800c0d2:	d1f5      	bne.n	800c0c0 <strncmp+0x8>
 800c0d4:	1ad0      	subs	r0, r2, r3
 800c0d6:	bd10      	pop	{r4, pc}
 800c0d8:	4610      	mov	r0, r2
 800c0da:	e7fc      	b.n	800c0d6 <strncmp+0x1e>

0800c0dc <_fstat_r>:
 800c0dc:	b538      	push	{r3, r4, r5, lr}
 800c0de:	4d07      	ldr	r5, [pc, #28]	; (800c0fc <_fstat_r+0x20>)
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	4608      	mov	r0, r1
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	602b      	str	r3, [r5, #0]
 800c0ea:	f7f5 fd10 	bl	8001b0e <_fstat>
 800c0ee:	1c43      	adds	r3, r0, #1
 800c0f0:	d102      	bne.n	800c0f8 <_fstat_r+0x1c>
 800c0f2:	682b      	ldr	r3, [r5, #0]
 800c0f4:	b103      	cbz	r3, 800c0f8 <_fstat_r+0x1c>
 800c0f6:	6023      	str	r3, [r4, #0]
 800c0f8:	bd38      	pop	{r3, r4, r5, pc}
 800c0fa:	bf00      	nop
 800c0fc:	20001e48 	.word	0x20001e48

0800c100 <_isatty_r>:
 800c100:	b538      	push	{r3, r4, r5, lr}
 800c102:	4d06      	ldr	r5, [pc, #24]	; (800c11c <_isatty_r+0x1c>)
 800c104:	2300      	movs	r3, #0
 800c106:	4604      	mov	r4, r0
 800c108:	4608      	mov	r0, r1
 800c10a:	602b      	str	r3, [r5, #0]
 800c10c:	f7f5 fd0f 	bl	8001b2e <_isatty>
 800c110:	1c43      	adds	r3, r0, #1
 800c112:	d102      	bne.n	800c11a <_isatty_r+0x1a>
 800c114:	682b      	ldr	r3, [r5, #0]
 800c116:	b103      	cbz	r3, 800c11a <_isatty_r+0x1a>
 800c118:	6023      	str	r3, [r4, #0]
 800c11a:	bd38      	pop	{r3, r4, r5, pc}
 800c11c:	20001e48 	.word	0x20001e48

0800c120 <nan>:
 800c120:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c128 <nan+0x8>
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	00000000 	.word	0x00000000
 800c12c:	7ff80000 	.word	0x7ff80000

0800c130 <__assert_func>:
 800c130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c132:	4614      	mov	r4, r2
 800c134:	461a      	mov	r2, r3
 800c136:	4b09      	ldr	r3, [pc, #36]	; (800c15c <__assert_func+0x2c>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4605      	mov	r5, r0
 800c13c:	68d8      	ldr	r0, [r3, #12]
 800c13e:	b14c      	cbz	r4, 800c154 <__assert_func+0x24>
 800c140:	4b07      	ldr	r3, [pc, #28]	; (800c160 <__assert_func+0x30>)
 800c142:	9100      	str	r1, [sp, #0]
 800c144:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c148:	4906      	ldr	r1, [pc, #24]	; (800c164 <__assert_func+0x34>)
 800c14a:	462b      	mov	r3, r5
 800c14c:	f000 fbca 	bl	800c8e4 <fiprintf>
 800c150:	f000 fbda 	bl	800c908 <abort>
 800c154:	4b04      	ldr	r3, [pc, #16]	; (800c168 <__assert_func+0x38>)
 800c156:	461c      	mov	r4, r3
 800c158:	e7f3      	b.n	800c142 <__assert_func+0x12>
 800c15a:	bf00      	nop
 800c15c:	20000068 	.word	0x20000068
 800c160:	0800cf4a 	.word	0x0800cf4a
 800c164:	0800cf57 	.word	0x0800cf57
 800c168:	0800cf85 	.word	0x0800cf85

0800c16c <_calloc_r>:
 800c16c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c16e:	fba1 2402 	umull	r2, r4, r1, r2
 800c172:	b94c      	cbnz	r4, 800c188 <_calloc_r+0x1c>
 800c174:	4611      	mov	r1, r2
 800c176:	9201      	str	r2, [sp, #4]
 800c178:	f7fb ffa8 	bl	80080cc <_malloc_r>
 800c17c:	9a01      	ldr	r2, [sp, #4]
 800c17e:	4605      	mov	r5, r0
 800c180:	b930      	cbnz	r0, 800c190 <_calloc_r+0x24>
 800c182:	4628      	mov	r0, r5
 800c184:	b003      	add	sp, #12
 800c186:	bd30      	pop	{r4, r5, pc}
 800c188:	220c      	movs	r2, #12
 800c18a:	6002      	str	r2, [r0, #0]
 800c18c:	2500      	movs	r5, #0
 800c18e:	e7f8      	b.n	800c182 <_calloc_r+0x16>
 800c190:	4621      	mov	r1, r4
 800c192:	f7fd f8c5 	bl	8009320 <memset>
 800c196:	e7f4      	b.n	800c182 <_calloc_r+0x16>

0800c198 <rshift>:
 800c198:	6903      	ldr	r3, [r0, #16]
 800c19a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c19e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c1a6:	f100 0414 	add.w	r4, r0, #20
 800c1aa:	dd45      	ble.n	800c238 <rshift+0xa0>
 800c1ac:	f011 011f 	ands.w	r1, r1, #31
 800c1b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c1b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c1b8:	d10c      	bne.n	800c1d4 <rshift+0x3c>
 800c1ba:	f100 0710 	add.w	r7, r0, #16
 800c1be:	4629      	mov	r1, r5
 800c1c0:	42b1      	cmp	r1, r6
 800c1c2:	d334      	bcc.n	800c22e <rshift+0x96>
 800c1c4:	1a9b      	subs	r3, r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	1eea      	subs	r2, r5, #3
 800c1ca:	4296      	cmp	r6, r2
 800c1cc:	bf38      	it	cc
 800c1ce:	2300      	movcc	r3, #0
 800c1d0:	4423      	add	r3, r4
 800c1d2:	e015      	b.n	800c200 <rshift+0x68>
 800c1d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c1d8:	f1c1 0820 	rsb	r8, r1, #32
 800c1dc:	40cf      	lsrs	r7, r1
 800c1de:	f105 0e04 	add.w	lr, r5, #4
 800c1e2:	46a1      	mov	r9, r4
 800c1e4:	4576      	cmp	r6, lr
 800c1e6:	46f4      	mov	ip, lr
 800c1e8:	d815      	bhi.n	800c216 <rshift+0x7e>
 800c1ea:	1a9a      	subs	r2, r3, r2
 800c1ec:	0092      	lsls	r2, r2, #2
 800c1ee:	3a04      	subs	r2, #4
 800c1f0:	3501      	adds	r5, #1
 800c1f2:	42ae      	cmp	r6, r5
 800c1f4:	bf38      	it	cc
 800c1f6:	2200      	movcc	r2, #0
 800c1f8:	18a3      	adds	r3, r4, r2
 800c1fa:	50a7      	str	r7, [r4, r2]
 800c1fc:	b107      	cbz	r7, 800c200 <rshift+0x68>
 800c1fe:	3304      	adds	r3, #4
 800c200:	1b1a      	subs	r2, r3, r4
 800c202:	42a3      	cmp	r3, r4
 800c204:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c208:	bf08      	it	eq
 800c20a:	2300      	moveq	r3, #0
 800c20c:	6102      	str	r2, [r0, #16]
 800c20e:	bf08      	it	eq
 800c210:	6143      	streq	r3, [r0, #20]
 800c212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c216:	f8dc c000 	ldr.w	ip, [ip]
 800c21a:	fa0c fc08 	lsl.w	ip, ip, r8
 800c21e:	ea4c 0707 	orr.w	r7, ip, r7
 800c222:	f849 7b04 	str.w	r7, [r9], #4
 800c226:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c22a:	40cf      	lsrs	r7, r1
 800c22c:	e7da      	b.n	800c1e4 <rshift+0x4c>
 800c22e:	f851 cb04 	ldr.w	ip, [r1], #4
 800c232:	f847 cf04 	str.w	ip, [r7, #4]!
 800c236:	e7c3      	b.n	800c1c0 <rshift+0x28>
 800c238:	4623      	mov	r3, r4
 800c23a:	e7e1      	b.n	800c200 <rshift+0x68>

0800c23c <__hexdig_fun>:
 800c23c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c240:	2b09      	cmp	r3, #9
 800c242:	d802      	bhi.n	800c24a <__hexdig_fun+0xe>
 800c244:	3820      	subs	r0, #32
 800c246:	b2c0      	uxtb	r0, r0
 800c248:	4770      	bx	lr
 800c24a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c24e:	2b05      	cmp	r3, #5
 800c250:	d801      	bhi.n	800c256 <__hexdig_fun+0x1a>
 800c252:	3847      	subs	r0, #71	; 0x47
 800c254:	e7f7      	b.n	800c246 <__hexdig_fun+0xa>
 800c256:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c25a:	2b05      	cmp	r3, #5
 800c25c:	d801      	bhi.n	800c262 <__hexdig_fun+0x26>
 800c25e:	3827      	subs	r0, #39	; 0x27
 800c260:	e7f1      	b.n	800c246 <__hexdig_fun+0xa>
 800c262:	2000      	movs	r0, #0
 800c264:	4770      	bx	lr
	...

0800c268 <__gethex>:
 800c268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26c:	4617      	mov	r7, r2
 800c26e:	680a      	ldr	r2, [r1, #0]
 800c270:	b085      	sub	sp, #20
 800c272:	f102 0b02 	add.w	fp, r2, #2
 800c276:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c27a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c27e:	4681      	mov	r9, r0
 800c280:	468a      	mov	sl, r1
 800c282:	9302      	str	r3, [sp, #8]
 800c284:	32fe      	adds	r2, #254	; 0xfe
 800c286:	eb02 030b 	add.w	r3, r2, fp
 800c28a:	46d8      	mov	r8, fp
 800c28c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	2830      	cmp	r0, #48	; 0x30
 800c294:	d0f7      	beq.n	800c286 <__gethex+0x1e>
 800c296:	f7ff ffd1 	bl	800c23c <__hexdig_fun>
 800c29a:	4604      	mov	r4, r0
 800c29c:	2800      	cmp	r0, #0
 800c29e:	d138      	bne.n	800c312 <__gethex+0xaa>
 800c2a0:	49a7      	ldr	r1, [pc, #668]	; (800c540 <__gethex+0x2d8>)
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	4640      	mov	r0, r8
 800c2a6:	f7ff ff07 	bl	800c0b8 <strncmp>
 800c2aa:	4606      	mov	r6, r0
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	d169      	bne.n	800c384 <__gethex+0x11c>
 800c2b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c2b4:	465d      	mov	r5, fp
 800c2b6:	f7ff ffc1 	bl	800c23c <__hexdig_fun>
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	d064      	beq.n	800c388 <__gethex+0x120>
 800c2be:	465a      	mov	r2, fp
 800c2c0:	7810      	ldrb	r0, [r2, #0]
 800c2c2:	2830      	cmp	r0, #48	; 0x30
 800c2c4:	4690      	mov	r8, r2
 800c2c6:	f102 0201 	add.w	r2, r2, #1
 800c2ca:	d0f9      	beq.n	800c2c0 <__gethex+0x58>
 800c2cc:	f7ff ffb6 	bl	800c23c <__hexdig_fun>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	fab0 f480 	clz	r4, r0
 800c2d6:	0964      	lsrs	r4, r4, #5
 800c2d8:	465e      	mov	r6, fp
 800c2da:	9301      	str	r3, [sp, #4]
 800c2dc:	4642      	mov	r2, r8
 800c2de:	4615      	mov	r5, r2
 800c2e0:	3201      	adds	r2, #1
 800c2e2:	7828      	ldrb	r0, [r5, #0]
 800c2e4:	f7ff ffaa 	bl	800c23c <__hexdig_fun>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d1f8      	bne.n	800c2de <__gethex+0x76>
 800c2ec:	4994      	ldr	r1, [pc, #592]	; (800c540 <__gethex+0x2d8>)
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	f7ff fee1 	bl	800c0b8 <strncmp>
 800c2f6:	b978      	cbnz	r0, 800c318 <__gethex+0xb0>
 800c2f8:	b946      	cbnz	r6, 800c30c <__gethex+0xa4>
 800c2fa:	1c6e      	adds	r6, r5, #1
 800c2fc:	4632      	mov	r2, r6
 800c2fe:	4615      	mov	r5, r2
 800c300:	3201      	adds	r2, #1
 800c302:	7828      	ldrb	r0, [r5, #0]
 800c304:	f7ff ff9a 	bl	800c23c <__hexdig_fun>
 800c308:	2800      	cmp	r0, #0
 800c30a:	d1f8      	bne.n	800c2fe <__gethex+0x96>
 800c30c:	1b73      	subs	r3, r6, r5
 800c30e:	009e      	lsls	r6, r3, #2
 800c310:	e004      	b.n	800c31c <__gethex+0xb4>
 800c312:	2400      	movs	r4, #0
 800c314:	4626      	mov	r6, r4
 800c316:	e7e1      	b.n	800c2dc <__gethex+0x74>
 800c318:	2e00      	cmp	r6, #0
 800c31a:	d1f7      	bne.n	800c30c <__gethex+0xa4>
 800c31c:	782b      	ldrb	r3, [r5, #0]
 800c31e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c322:	2b50      	cmp	r3, #80	; 0x50
 800c324:	d13d      	bne.n	800c3a2 <__gethex+0x13a>
 800c326:	786b      	ldrb	r3, [r5, #1]
 800c328:	2b2b      	cmp	r3, #43	; 0x2b
 800c32a:	d02f      	beq.n	800c38c <__gethex+0x124>
 800c32c:	2b2d      	cmp	r3, #45	; 0x2d
 800c32e:	d031      	beq.n	800c394 <__gethex+0x12c>
 800c330:	1c69      	adds	r1, r5, #1
 800c332:	f04f 0b00 	mov.w	fp, #0
 800c336:	7808      	ldrb	r0, [r1, #0]
 800c338:	f7ff ff80 	bl	800c23c <__hexdig_fun>
 800c33c:	1e42      	subs	r2, r0, #1
 800c33e:	b2d2      	uxtb	r2, r2
 800c340:	2a18      	cmp	r2, #24
 800c342:	d82e      	bhi.n	800c3a2 <__gethex+0x13a>
 800c344:	f1a0 0210 	sub.w	r2, r0, #16
 800c348:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c34c:	f7ff ff76 	bl	800c23c <__hexdig_fun>
 800c350:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800c354:	fa5f fc8c 	uxtb.w	ip, ip
 800c358:	f1bc 0f18 	cmp.w	ip, #24
 800c35c:	d91d      	bls.n	800c39a <__gethex+0x132>
 800c35e:	f1bb 0f00 	cmp.w	fp, #0
 800c362:	d000      	beq.n	800c366 <__gethex+0xfe>
 800c364:	4252      	negs	r2, r2
 800c366:	4416      	add	r6, r2
 800c368:	f8ca 1000 	str.w	r1, [sl]
 800c36c:	b1dc      	cbz	r4, 800c3a6 <__gethex+0x13e>
 800c36e:	9b01      	ldr	r3, [sp, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	bf14      	ite	ne
 800c374:	f04f 0800 	movne.w	r8, #0
 800c378:	f04f 0806 	moveq.w	r8, #6
 800c37c:	4640      	mov	r0, r8
 800c37e:	b005      	add	sp, #20
 800c380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c384:	4645      	mov	r5, r8
 800c386:	4626      	mov	r6, r4
 800c388:	2401      	movs	r4, #1
 800c38a:	e7c7      	b.n	800c31c <__gethex+0xb4>
 800c38c:	f04f 0b00 	mov.w	fp, #0
 800c390:	1ca9      	adds	r1, r5, #2
 800c392:	e7d0      	b.n	800c336 <__gethex+0xce>
 800c394:	f04f 0b01 	mov.w	fp, #1
 800c398:	e7fa      	b.n	800c390 <__gethex+0x128>
 800c39a:	230a      	movs	r3, #10
 800c39c:	fb03 0002 	mla	r0, r3, r2, r0
 800c3a0:	e7d0      	b.n	800c344 <__gethex+0xdc>
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	e7e0      	b.n	800c368 <__gethex+0x100>
 800c3a6:	eba5 0308 	sub.w	r3, r5, r8
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	4621      	mov	r1, r4
 800c3ae:	2b07      	cmp	r3, #7
 800c3b0:	dc0a      	bgt.n	800c3c8 <__gethex+0x160>
 800c3b2:	4648      	mov	r0, r9
 800c3b4:	f7fd ff76 	bl	800a2a4 <_Balloc>
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	b940      	cbnz	r0, 800c3ce <__gethex+0x166>
 800c3bc:	4b61      	ldr	r3, [pc, #388]	; (800c544 <__gethex+0x2dc>)
 800c3be:	4602      	mov	r2, r0
 800c3c0:	21e4      	movs	r1, #228	; 0xe4
 800c3c2:	4861      	ldr	r0, [pc, #388]	; (800c548 <__gethex+0x2e0>)
 800c3c4:	f7ff feb4 	bl	800c130 <__assert_func>
 800c3c8:	3101      	adds	r1, #1
 800c3ca:	105b      	asrs	r3, r3, #1
 800c3cc:	e7ef      	b.n	800c3ae <__gethex+0x146>
 800c3ce:	f100 0a14 	add.w	sl, r0, #20
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	495a      	ldr	r1, [pc, #360]	; (800c540 <__gethex+0x2d8>)
 800c3d6:	f8cd a004 	str.w	sl, [sp, #4]
 800c3da:	469b      	mov	fp, r3
 800c3dc:	45a8      	cmp	r8, r5
 800c3de:	d342      	bcc.n	800c466 <__gethex+0x1fe>
 800c3e0:	9801      	ldr	r0, [sp, #4]
 800c3e2:	f840 bb04 	str.w	fp, [r0], #4
 800c3e6:	eba0 000a 	sub.w	r0, r0, sl
 800c3ea:	1080      	asrs	r0, r0, #2
 800c3ec:	6120      	str	r0, [r4, #16]
 800c3ee:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c3f2:	4658      	mov	r0, fp
 800c3f4:	f7fe f848 	bl	800a488 <__hi0bits>
 800c3f8:	683d      	ldr	r5, [r7, #0]
 800c3fa:	eba8 0000 	sub.w	r0, r8, r0
 800c3fe:	42a8      	cmp	r0, r5
 800c400:	dd59      	ble.n	800c4b6 <__gethex+0x24e>
 800c402:	eba0 0805 	sub.w	r8, r0, r5
 800c406:	4641      	mov	r1, r8
 800c408:	4620      	mov	r0, r4
 800c40a:	f7fe fbd7 	bl	800abbc <__any_on>
 800c40e:	4683      	mov	fp, r0
 800c410:	b1b8      	cbz	r0, 800c442 <__gethex+0x1da>
 800c412:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800c416:	1159      	asrs	r1, r3, #5
 800c418:	f003 021f 	and.w	r2, r3, #31
 800c41c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c420:	f04f 0b01 	mov.w	fp, #1
 800c424:	fa0b f202 	lsl.w	r2, fp, r2
 800c428:	420a      	tst	r2, r1
 800c42a:	d00a      	beq.n	800c442 <__gethex+0x1da>
 800c42c:	455b      	cmp	r3, fp
 800c42e:	dd06      	ble.n	800c43e <__gethex+0x1d6>
 800c430:	f1a8 0102 	sub.w	r1, r8, #2
 800c434:	4620      	mov	r0, r4
 800c436:	f7fe fbc1 	bl	800abbc <__any_on>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d138      	bne.n	800c4b0 <__gethex+0x248>
 800c43e:	f04f 0b02 	mov.w	fp, #2
 800c442:	4641      	mov	r1, r8
 800c444:	4620      	mov	r0, r4
 800c446:	f7ff fea7 	bl	800c198 <rshift>
 800c44a:	4446      	add	r6, r8
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	42b3      	cmp	r3, r6
 800c450:	da41      	bge.n	800c4d6 <__gethex+0x26e>
 800c452:	4621      	mov	r1, r4
 800c454:	4648      	mov	r0, r9
 800c456:	f7fd ff65 	bl	800a324 <_Bfree>
 800c45a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c45c:	2300      	movs	r3, #0
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c464:	e78a      	b.n	800c37c <__gethex+0x114>
 800c466:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c46a:	2a2e      	cmp	r2, #46	; 0x2e
 800c46c:	d014      	beq.n	800c498 <__gethex+0x230>
 800c46e:	2b20      	cmp	r3, #32
 800c470:	d106      	bne.n	800c480 <__gethex+0x218>
 800c472:	9b01      	ldr	r3, [sp, #4]
 800c474:	f843 bb04 	str.w	fp, [r3], #4
 800c478:	f04f 0b00 	mov.w	fp, #0
 800c47c:	9301      	str	r3, [sp, #4]
 800c47e:	465b      	mov	r3, fp
 800c480:	7828      	ldrb	r0, [r5, #0]
 800c482:	9303      	str	r3, [sp, #12]
 800c484:	f7ff feda 	bl	800c23c <__hexdig_fun>
 800c488:	9b03      	ldr	r3, [sp, #12]
 800c48a:	f000 000f 	and.w	r0, r0, #15
 800c48e:	4098      	lsls	r0, r3
 800c490:	ea4b 0b00 	orr.w	fp, fp, r0
 800c494:	3304      	adds	r3, #4
 800c496:	e7a1      	b.n	800c3dc <__gethex+0x174>
 800c498:	45a8      	cmp	r8, r5
 800c49a:	d8e8      	bhi.n	800c46e <__gethex+0x206>
 800c49c:	2201      	movs	r2, #1
 800c49e:	4628      	mov	r0, r5
 800c4a0:	9303      	str	r3, [sp, #12]
 800c4a2:	f7ff fe09 	bl	800c0b8 <strncmp>
 800c4a6:	4926      	ldr	r1, [pc, #152]	; (800c540 <__gethex+0x2d8>)
 800c4a8:	9b03      	ldr	r3, [sp, #12]
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	d1df      	bne.n	800c46e <__gethex+0x206>
 800c4ae:	e795      	b.n	800c3dc <__gethex+0x174>
 800c4b0:	f04f 0b03 	mov.w	fp, #3
 800c4b4:	e7c5      	b.n	800c442 <__gethex+0x1da>
 800c4b6:	da0b      	bge.n	800c4d0 <__gethex+0x268>
 800c4b8:	eba5 0800 	sub.w	r8, r5, r0
 800c4bc:	4621      	mov	r1, r4
 800c4be:	4642      	mov	r2, r8
 800c4c0:	4648      	mov	r0, r9
 800c4c2:	f7fe f949 	bl	800a758 <__lshift>
 800c4c6:	eba6 0608 	sub.w	r6, r6, r8
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	f100 0a14 	add.w	sl, r0, #20
 800c4d0:	f04f 0b00 	mov.w	fp, #0
 800c4d4:	e7ba      	b.n	800c44c <__gethex+0x1e4>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	42b3      	cmp	r3, r6
 800c4da:	dd73      	ble.n	800c5c4 <__gethex+0x35c>
 800c4dc:	1b9e      	subs	r6, r3, r6
 800c4de:	42b5      	cmp	r5, r6
 800c4e0:	dc34      	bgt.n	800c54c <__gethex+0x2e4>
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	d023      	beq.n	800c530 <__gethex+0x2c8>
 800c4e8:	2b03      	cmp	r3, #3
 800c4ea:	d025      	beq.n	800c538 <__gethex+0x2d0>
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d115      	bne.n	800c51c <__gethex+0x2b4>
 800c4f0:	42b5      	cmp	r5, r6
 800c4f2:	d113      	bne.n	800c51c <__gethex+0x2b4>
 800c4f4:	2d01      	cmp	r5, #1
 800c4f6:	d10b      	bne.n	800c510 <__gethex+0x2a8>
 800c4f8:	9a02      	ldr	r2, [sp, #8]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6013      	str	r3, [r2, #0]
 800c4fe:	2301      	movs	r3, #1
 800c500:	6123      	str	r3, [r4, #16]
 800c502:	f8ca 3000 	str.w	r3, [sl]
 800c506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c508:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c50c:	601c      	str	r4, [r3, #0]
 800c50e:	e735      	b.n	800c37c <__gethex+0x114>
 800c510:	1e69      	subs	r1, r5, #1
 800c512:	4620      	mov	r0, r4
 800c514:	f7fe fb52 	bl	800abbc <__any_on>
 800c518:	2800      	cmp	r0, #0
 800c51a:	d1ed      	bne.n	800c4f8 <__gethex+0x290>
 800c51c:	4621      	mov	r1, r4
 800c51e:	4648      	mov	r0, r9
 800c520:	f7fd ff00 	bl	800a324 <_Bfree>
 800c524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c526:	2300      	movs	r3, #0
 800c528:	6013      	str	r3, [r2, #0]
 800c52a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c52e:	e725      	b.n	800c37c <__gethex+0x114>
 800c530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1f2      	bne.n	800c51c <__gethex+0x2b4>
 800c536:	e7df      	b.n	800c4f8 <__gethex+0x290>
 800c538:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1dc      	bne.n	800c4f8 <__gethex+0x290>
 800c53e:	e7ed      	b.n	800c51c <__gethex+0x2b4>
 800c540:	0800cddc 	.word	0x0800cddc
 800c544:	0800cc71 	.word	0x0800cc71
 800c548:	0800cf86 	.word	0x0800cf86
 800c54c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800c550:	f1bb 0f00 	cmp.w	fp, #0
 800c554:	d133      	bne.n	800c5be <__gethex+0x356>
 800c556:	f1b8 0f00 	cmp.w	r8, #0
 800c55a:	d004      	beq.n	800c566 <__gethex+0x2fe>
 800c55c:	4641      	mov	r1, r8
 800c55e:	4620      	mov	r0, r4
 800c560:	f7fe fb2c 	bl	800abbc <__any_on>
 800c564:	4683      	mov	fp, r0
 800c566:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c56a:	2301      	movs	r3, #1
 800c56c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c570:	f008 081f 	and.w	r8, r8, #31
 800c574:	fa03 f308 	lsl.w	r3, r3, r8
 800c578:	4213      	tst	r3, r2
 800c57a:	4631      	mov	r1, r6
 800c57c:	4620      	mov	r0, r4
 800c57e:	bf18      	it	ne
 800c580:	f04b 0b02 	orrne.w	fp, fp, #2
 800c584:	1bad      	subs	r5, r5, r6
 800c586:	f7ff fe07 	bl	800c198 <rshift>
 800c58a:	687e      	ldr	r6, [r7, #4]
 800c58c:	f04f 0802 	mov.w	r8, #2
 800c590:	f1bb 0f00 	cmp.w	fp, #0
 800c594:	d04a      	beq.n	800c62c <__gethex+0x3c4>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2b02      	cmp	r3, #2
 800c59a:	d016      	beq.n	800c5ca <__gethex+0x362>
 800c59c:	2b03      	cmp	r3, #3
 800c59e:	d018      	beq.n	800c5d2 <__gethex+0x36a>
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d109      	bne.n	800c5b8 <__gethex+0x350>
 800c5a4:	f01b 0f02 	tst.w	fp, #2
 800c5a8:	d006      	beq.n	800c5b8 <__gethex+0x350>
 800c5aa:	f8da 3000 	ldr.w	r3, [sl]
 800c5ae:	ea4b 0b03 	orr.w	fp, fp, r3
 800c5b2:	f01b 0f01 	tst.w	fp, #1
 800c5b6:	d10f      	bne.n	800c5d8 <__gethex+0x370>
 800c5b8:	f048 0810 	orr.w	r8, r8, #16
 800c5bc:	e036      	b.n	800c62c <__gethex+0x3c4>
 800c5be:	f04f 0b01 	mov.w	fp, #1
 800c5c2:	e7d0      	b.n	800c566 <__gethex+0x2fe>
 800c5c4:	f04f 0801 	mov.w	r8, #1
 800c5c8:	e7e2      	b.n	800c590 <__gethex+0x328>
 800c5ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5cc:	f1c3 0301 	rsb	r3, r3, #1
 800c5d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d0ef      	beq.n	800c5b8 <__gethex+0x350>
 800c5d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c5dc:	f104 0214 	add.w	r2, r4, #20
 800c5e0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	4694      	mov	ip, r2
 800c5ee:	f852 1b04 	ldr.w	r1, [r2], #4
 800c5f2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800c5f6:	d01e      	beq.n	800c636 <__gethex+0x3ce>
 800c5f8:	3101      	adds	r1, #1
 800c5fa:	f8cc 1000 	str.w	r1, [ip]
 800c5fe:	f1b8 0f02 	cmp.w	r8, #2
 800c602:	f104 0214 	add.w	r2, r4, #20
 800c606:	d13d      	bne.n	800c684 <__gethex+0x41c>
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	3b01      	subs	r3, #1
 800c60c:	42ab      	cmp	r3, r5
 800c60e:	d10b      	bne.n	800c628 <__gethex+0x3c0>
 800c610:	1169      	asrs	r1, r5, #5
 800c612:	2301      	movs	r3, #1
 800c614:	f005 051f 	and.w	r5, r5, #31
 800c618:	fa03 f505 	lsl.w	r5, r3, r5
 800c61c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c620:	421d      	tst	r5, r3
 800c622:	bf18      	it	ne
 800c624:	f04f 0801 	movne.w	r8, #1
 800c628:	f048 0820 	orr.w	r8, r8, #32
 800c62c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c62e:	601c      	str	r4, [r3, #0]
 800c630:	9b02      	ldr	r3, [sp, #8]
 800c632:	601e      	str	r6, [r3, #0]
 800c634:	e6a2      	b.n	800c37c <__gethex+0x114>
 800c636:	4290      	cmp	r0, r2
 800c638:	f842 3c04 	str.w	r3, [r2, #-4]
 800c63c:	d8d6      	bhi.n	800c5ec <__gethex+0x384>
 800c63e:	68a2      	ldr	r2, [r4, #8]
 800c640:	4593      	cmp	fp, r2
 800c642:	db17      	blt.n	800c674 <__gethex+0x40c>
 800c644:	6861      	ldr	r1, [r4, #4]
 800c646:	4648      	mov	r0, r9
 800c648:	3101      	adds	r1, #1
 800c64a:	f7fd fe2b 	bl	800a2a4 <_Balloc>
 800c64e:	4682      	mov	sl, r0
 800c650:	b918      	cbnz	r0, 800c65a <__gethex+0x3f2>
 800c652:	4b1b      	ldr	r3, [pc, #108]	; (800c6c0 <__gethex+0x458>)
 800c654:	4602      	mov	r2, r0
 800c656:	2184      	movs	r1, #132	; 0x84
 800c658:	e6b3      	b.n	800c3c2 <__gethex+0x15a>
 800c65a:	6922      	ldr	r2, [r4, #16]
 800c65c:	3202      	adds	r2, #2
 800c65e:	f104 010c 	add.w	r1, r4, #12
 800c662:	0092      	lsls	r2, r2, #2
 800c664:	300c      	adds	r0, #12
 800c666:	f7fc ff40 	bl	80094ea <memcpy>
 800c66a:	4621      	mov	r1, r4
 800c66c:	4648      	mov	r0, r9
 800c66e:	f7fd fe59 	bl	800a324 <_Bfree>
 800c672:	4654      	mov	r4, sl
 800c674:	6922      	ldr	r2, [r4, #16]
 800c676:	1c51      	adds	r1, r2, #1
 800c678:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c67c:	6121      	str	r1, [r4, #16]
 800c67e:	2101      	movs	r1, #1
 800c680:	6151      	str	r1, [r2, #20]
 800c682:	e7bc      	b.n	800c5fe <__gethex+0x396>
 800c684:	6921      	ldr	r1, [r4, #16]
 800c686:	4559      	cmp	r1, fp
 800c688:	dd0b      	ble.n	800c6a2 <__gethex+0x43a>
 800c68a:	2101      	movs	r1, #1
 800c68c:	4620      	mov	r0, r4
 800c68e:	f7ff fd83 	bl	800c198 <rshift>
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	3601      	adds	r6, #1
 800c696:	42b3      	cmp	r3, r6
 800c698:	f6ff aedb 	blt.w	800c452 <__gethex+0x1ea>
 800c69c:	f04f 0801 	mov.w	r8, #1
 800c6a0:	e7c2      	b.n	800c628 <__gethex+0x3c0>
 800c6a2:	f015 051f 	ands.w	r5, r5, #31
 800c6a6:	d0f9      	beq.n	800c69c <__gethex+0x434>
 800c6a8:	9b01      	ldr	r3, [sp, #4]
 800c6aa:	441a      	add	r2, r3
 800c6ac:	f1c5 0520 	rsb	r5, r5, #32
 800c6b0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c6b4:	f7fd fee8 	bl	800a488 <__hi0bits>
 800c6b8:	42a8      	cmp	r0, r5
 800c6ba:	dbe6      	blt.n	800c68a <__gethex+0x422>
 800c6bc:	e7ee      	b.n	800c69c <__gethex+0x434>
 800c6be:	bf00      	nop
 800c6c0:	0800cc71 	.word	0x0800cc71

0800c6c4 <L_shift>:
 800c6c4:	f1c2 0208 	rsb	r2, r2, #8
 800c6c8:	0092      	lsls	r2, r2, #2
 800c6ca:	b570      	push	{r4, r5, r6, lr}
 800c6cc:	f1c2 0620 	rsb	r6, r2, #32
 800c6d0:	6843      	ldr	r3, [r0, #4]
 800c6d2:	6804      	ldr	r4, [r0, #0]
 800c6d4:	fa03 f506 	lsl.w	r5, r3, r6
 800c6d8:	432c      	orrs	r4, r5
 800c6da:	40d3      	lsrs	r3, r2
 800c6dc:	6004      	str	r4, [r0, #0]
 800c6de:	f840 3f04 	str.w	r3, [r0, #4]!
 800c6e2:	4288      	cmp	r0, r1
 800c6e4:	d3f4      	bcc.n	800c6d0 <L_shift+0xc>
 800c6e6:	bd70      	pop	{r4, r5, r6, pc}

0800c6e8 <__match>:
 800c6e8:	b530      	push	{r4, r5, lr}
 800c6ea:	6803      	ldr	r3, [r0, #0]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6f2:	b914      	cbnz	r4, 800c6fa <__match+0x12>
 800c6f4:	6003      	str	r3, [r0, #0]
 800c6f6:	2001      	movs	r0, #1
 800c6f8:	bd30      	pop	{r4, r5, pc}
 800c6fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c702:	2d19      	cmp	r5, #25
 800c704:	bf98      	it	ls
 800c706:	3220      	addls	r2, #32
 800c708:	42a2      	cmp	r2, r4
 800c70a:	d0f0      	beq.n	800c6ee <__match+0x6>
 800c70c:	2000      	movs	r0, #0
 800c70e:	e7f3      	b.n	800c6f8 <__match+0x10>

0800c710 <__hexnan>:
 800c710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c714:	680b      	ldr	r3, [r1, #0]
 800c716:	6801      	ldr	r1, [r0, #0]
 800c718:	115e      	asrs	r6, r3, #5
 800c71a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c71e:	f013 031f 	ands.w	r3, r3, #31
 800c722:	b087      	sub	sp, #28
 800c724:	bf18      	it	ne
 800c726:	3604      	addne	r6, #4
 800c728:	2500      	movs	r5, #0
 800c72a:	1f37      	subs	r7, r6, #4
 800c72c:	4682      	mov	sl, r0
 800c72e:	4690      	mov	r8, r2
 800c730:	9301      	str	r3, [sp, #4]
 800c732:	f846 5c04 	str.w	r5, [r6, #-4]
 800c736:	46b9      	mov	r9, r7
 800c738:	463c      	mov	r4, r7
 800c73a:	9502      	str	r5, [sp, #8]
 800c73c:	46ab      	mov	fp, r5
 800c73e:	784a      	ldrb	r2, [r1, #1]
 800c740:	1c4b      	adds	r3, r1, #1
 800c742:	9303      	str	r3, [sp, #12]
 800c744:	b342      	cbz	r2, 800c798 <__hexnan+0x88>
 800c746:	4610      	mov	r0, r2
 800c748:	9105      	str	r1, [sp, #20]
 800c74a:	9204      	str	r2, [sp, #16]
 800c74c:	f7ff fd76 	bl	800c23c <__hexdig_fun>
 800c750:	2800      	cmp	r0, #0
 800c752:	d14f      	bne.n	800c7f4 <__hexnan+0xe4>
 800c754:	9a04      	ldr	r2, [sp, #16]
 800c756:	9905      	ldr	r1, [sp, #20]
 800c758:	2a20      	cmp	r2, #32
 800c75a:	d818      	bhi.n	800c78e <__hexnan+0x7e>
 800c75c:	9b02      	ldr	r3, [sp, #8]
 800c75e:	459b      	cmp	fp, r3
 800c760:	dd13      	ble.n	800c78a <__hexnan+0x7a>
 800c762:	454c      	cmp	r4, r9
 800c764:	d206      	bcs.n	800c774 <__hexnan+0x64>
 800c766:	2d07      	cmp	r5, #7
 800c768:	dc04      	bgt.n	800c774 <__hexnan+0x64>
 800c76a:	462a      	mov	r2, r5
 800c76c:	4649      	mov	r1, r9
 800c76e:	4620      	mov	r0, r4
 800c770:	f7ff ffa8 	bl	800c6c4 <L_shift>
 800c774:	4544      	cmp	r4, r8
 800c776:	d950      	bls.n	800c81a <__hexnan+0x10a>
 800c778:	2300      	movs	r3, #0
 800c77a:	f1a4 0904 	sub.w	r9, r4, #4
 800c77e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c782:	f8cd b008 	str.w	fp, [sp, #8]
 800c786:	464c      	mov	r4, r9
 800c788:	461d      	mov	r5, r3
 800c78a:	9903      	ldr	r1, [sp, #12]
 800c78c:	e7d7      	b.n	800c73e <__hexnan+0x2e>
 800c78e:	2a29      	cmp	r2, #41	; 0x29
 800c790:	d155      	bne.n	800c83e <__hexnan+0x12e>
 800c792:	3102      	adds	r1, #2
 800c794:	f8ca 1000 	str.w	r1, [sl]
 800c798:	f1bb 0f00 	cmp.w	fp, #0
 800c79c:	d04f      	beq.n	800c83e <__hexnan+0x12e>
 800c79e:	454c      	cmp	r4, r9
 800c7a0:	d206      	bcs.n	800c7b0 <__hexnan+0xa0>
 800c7a2:	2d07      	cmp	r5, #7
 800c7a4:	dc04      	bgt.n	800c7b0 <__hexnan+0xa0>
 800c7a6:	462a      	mov	r2, r5
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f7ff ff8a 	bl	800c6c4 <L_shift>
 800c7b0:	4544      	cmp	r4, r8
 800c7b2:	d934      	bls.n	800c81e <__hexnan+0x10e>
 800c7b4:	f1a8 0204 	sub.w	r2, r8, #4
 800c7b8:	4623      	mov	r3, r4
 800c7ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800c7be:	f842 1f04 	str.w	r1, [r2, #4]!
 800c7c2:	429f      	cmp	r7, r3
 800c7c4:	d2f9      	bcs.n	800c7ba <__hexnan+0xaa>
 800c7c6:	1b3b      	subs	r3, r7, r4
 800c7c8:	f023 0303 	bic.w	r3, r3, #3
 800c7cc:	3304      	adds	r3, #4
 800c7ce:	3e03      	subs	r6, #3
 800c7d0:	3401      	adds	r4, #1
 800c7d2:	42a6      	cmp	r6, r4
 800c7d4:	bf38      	it	cc
 800c7d6:	2304      	movcc	r3, #4
 800c7d8:	4443      	add	r3, r8
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f843 2b04 	str.w	r2, [r3], #4
 800c7e0:	429f      	cmp	r7, r3
 800c7e2:	d2fb      	bcs.n	800c7dc <__hexnan+0xcc>
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	b91b      	cbnz	r3, 800c7f0 <__hexnan+0xe0>
 800c7e8:	4547      	cmp	r7, r8
 800c7ea:	d126      	bne.n	800c83a <__hexnan+0x12a>
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	603b      	str	r3, [r7, #0]
 800c7f0:	2005      	movs	r0, #5
 800c7f2:	e025      	b.n	800c840 <__hexnan+0x130>
 800c7f4:	3501      	adds	r5, #1
 800c7f6:	2d08      	cmp	r5, #8
 800c7f8:	f10b 0b01 	add.w	fp, fp, #1
 800c7fc:	dd06      	ble.n	800c80c <__hexnan+0xfc>
 800c7fe:	4544      	cmp	r4, r8
 800c800:	d9c3      	bls.n	800c78a <__hexnan+0x7a>
 800c802:	2300      	movs	r3, #0
 800c804:	f844 3c04 	str.w	r3, [r4, #-4]
 800c808:	2501      	movs	r5, #1
 800c80a:	3c04      	subs	r4, #4
 800c80c:	6822      	ldr	r2, [r4, #0]
 800c80e:	f000 000f 	and.w	r0, r0, #15
 800c812:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c816:	6020      	str	r0, [r4, #0]
 800c818:	e7b7      	b.n	800c78a <__hexnan+0x7a>
 800c81a:	2508      	movs	r5, #8
 800c81c:	e7b5      	b.n	800c78a <__hexnan+0x7a>
 800c81e:	9b01      	ldr	r3, [sp, #4]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d0df      	beq.n	800c7e4 <__hexnan+0xd4>
 800c824:	f1c3 0320 	rsb	r3, r3, #32
 800c828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c82c:	40da      	lsrs	r2, r3
 800c82e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c832:	4013      	ands	r3, r2
 800c834:	f846 3c04 	str.w	r3, [r6, #-4]
 800c838:	e7d4      	b.n	800c7e4 <__hexnan+0xd4>
 800c83a:	3f04      	subs	r7, #4
 800c83c:	e7d2      	b.n	800c7e4 <__hexnan+0xd4>
 800c83e:	2004      	movs	r0, #4
 800c840:	b007      	add	sp, #28
 800c842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c846 <__ascii_mbtowc>:
 800c846:	b082      	sub	sp, #8
 800c848:	b901      	cbnz	r1, 800c84c <__ascii_mbtowc+0x6>
 800c84a:	a901      	add	r1, sp, #4
 800c84c:	b142      	cbz	r2, 800c860 <__ascii_mbtowc+0x1a>
 800c84e:	b14b      	cbz	r3, 800c864 <__ascii_mbtowc+0x1e>
 800c850:	7813      	ldrb	r3, [r2, #0]
 800c852:	600b      	str	r3, [r1, #0]
 800c854:	7812      	ldrb	r2, [r2, #0]
 800c856:	1e10      	subs	r0, r2, #0
 800c858:	bf18      	it	ne
 800c85a:	2001      	movne	r0, #1
 800c85c:	b002      	add	sp, #8
 800c85e:	4770      	bx	lr
 800c860:	4610      	mov	r0, r2
 800c862:	e7fb      	b.n	800c85c <__ascii_mbtowc+0x16>
 800c864:	f06f 0001 	mvn.w	r0, #1
 800c868:	e7f8      	b.n	800c85c <__ascii_mbtowc+0x16>

0800c86a <_realloc_r>:
 800c86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c86e:	4680      	mov	r8, r0
 800c870:	4614      	mov	r4, r2
 800c872:	460e      	mov	r6, r1
 800c874:	b921      	cbnz	r1, 800c880 <_realloc_r+0x16>
 800c876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c87a:	4611      	mov	r1, r2
 800c87c:	f7fb bc26 	b.w	80080cc <_malloc_r>
 800c880:	b92a      	cbnz	r2, 800c88e <_realloc_r+0x24>
 800c882:	f7fd fcc3 	bl	800a20c <_free_r>
 800c886:	4625      	mov	r5, r4
 800c888:	4628      	mov	r0, r5
 800c88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c88e:	f000 f842 	bl	800c916 <_malloc_usable_size_r>
 800c892:	4284      	cmp	r4, r0
 800c894:	4607      	mov	r7, r0
 800c896:	d802      	bhi.n	800c89e <_realloc_r+0x34>
 800c898:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c89c:	d812      	bhi.n	800c8c4 <_realloc_r+0x5a>
 800c89e:	4621      	mov	r1, r4
 800c8a0:	4640      	mov	r0, r8
 800c8a2:	f7fb fc13 	bl	80080cc <_malloc_r>
 800c8a6:	4605      	mov	r5, r0
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d0ed      	beq.n	800c888 <_realloc_r+0x1e>
 800c8ac:	42bc      	cmp	r4, r7
 800c8ae:	4622      	mov	r2, r4
 800c8b0:	4631      	mov	r1, r6
 800c8b2:	bf28      	it	cs
 800c8b4:	463a      	movcs	r2, r7
 800c8b6:	f7fc fe18 	bl	80094ea <memcpy>
 800c8ba:	4631      	mov	r1, r6
 800c8bc:	4640      	mov	r0, r8
 800c8be:	f7fd fca5 	bl	800a20c <_free_r>
 800c8c2:	e7e1      	b.n	800c888 <_realloc_r+0x1e>
 800c8c4:	4635      	mov	r5, r6
 800c8c6:	e7df      	b.n	800c888 <_realloc_r+0x1e>

0800c8c8 <__ascii_wctomb>:
 800c8c8:	b149      	cbz	r1, 800c8de <__ascii_wctomb+0x16>
 800c8ca:	2aff      	cmp	r2, #255	; 0xff
 800c8cc:	bf85      	ittet	hi
 800c8ce:	238a      	movhi	r3, #138	; 0x8a
 800c8d0:	6003      	strhi	r3, [r0, #0]
 800c8d2:	700a      	strbls	r2, [r1, #0]
 800c8d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c8d8:	bf98      	it	ls
 800c8da:	2001      	movls	r0, #1
 800c8dc:	4770      	bx	lr
 800c8de:	4608      	mov	r0, r1
 800c8e0:	4770      	bx	lr
	...

0800c8e4 <fiprintf>:
 800c8e4:	b40e      	push	{r1, r2, r3}
 800c8e6:	b503      	push	{r0, r1, lr}
 800c8e8:	4601      	mov	r1, r0
 800c8ea:	ab03      	add	r3, sp, #12
 800c8ec:	4805      	ldr	r0, [pc, #20]	; (800c904 <fiprintf+0x20>)
 800c8ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8f2:	6800      	ldr	r0, [r0, #0]
 800c8f4:	9301      	str	r3, [sp, #4]
 800c8f6:	f7ff f99b 	bl	800bc30 <_vfiprintf_r>
 800c8fa:	b002      	add	sp, #8
 800c8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c900:	b003      	add	sp, #12
 800c902:	4770      	bx	lr
 800c904:	20000068 	.word	0x20000068

0800c908 <abort>:
 800c908:	b508      	push	{r3, lr}
 800c90a:	2006      	movs	r0, #6
 800c90c:	f000 f834 	bl	800c978 <raise>
 800c910:	2001      	movs	r0, #1
 800c912:	f7f5 f8ad 	bl	8001a70 <_exit>

0800c916 <_malloc_usable_size_r>:
 800c916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c91a:	1f18      	subs	r0, r3, #4
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	bfbc      	itt	lt
 800c920:	580b      	ldrlt	r3, [r1, r0]
 800c922:	18c0      	addlt	r0, r0, r3
 800c924:	4770      	bx	lr

0800c926 <_raise_r>:
 800c926:	291f      	cmp	r1, #31
 800c928:	b538      	push	{r3, r4, r5, lr}
 800c92a:	4604      	mov	r4, r0
 800c92c:	460d      	mov	r5, r1
 800c92e:	d904      	bls.n	800c93a <_raise_r+0x14>
 800c930:	2316      	movs	r3, #22
 800c932:	6003      	str	r3, [r0, #0]
 800c934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c938:	bd38      	pop	{r3, r4, r5, pc}
 800c93a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c93c:	b112      	cbz	r2, 800c944 <_raise_r+0x1e>
 800c93e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c942:	b94b      	cbnz	r3, 800c958 <_raise_r+0x32>
 800c944:	4620      	mov	r0, r4
 800c946:	f000 f831 	bl	800c9ac <_getpid_r>
 800c94a:	462a      	mov	r2, r5
 800c94c:	4601      	mov	r1, r0
 800c94e:	4620      	mov	r0, r4
 800c950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c954:	f000 b818 	b.w	800c988 <_kill_r>
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d00a      	beq.n	800c972 <_raise_r+0x4c>
 800c95c:	1c59      	adds	r1, r3, #1
 800c95e:	d103      	bne.n	800c968 <_raise_r+0x42>
 800c960:	2316      	movs	r3, #22
 800c962:	6003      	str	r3, [r0, #0]
 800c964:	2001      	movs	r0, #1
 800c966:	e7e7      	b.n	800c938 <_raise_r+0x12>
 800c968:	2400      	movs	r4, #0
 800c96a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c96e:	4628      	mov	r0, r5
 800c970:	4798      	blx	r3
 800c972:	2000      	movs	r0, #0
 800c974:	e7e0      	b.n	800c938 <_raise_r+0x12>
	...

0800c978 <raise>:
 800c978:	4b02      	ldr	r3, [pc, #8]	; (800c984 <raise+0xc>)
 800c97a:	4601      	mov	r1, r0
 800c97c:	6818      	ldr	r0, [r3, #0]
 800c97e:	f7ff bfd2 	b.w	800c926 <_raise_r>
 800c982:	bf00      	nop
 800c984:	20000068 	.word	0x20000068

0800c988 <_kill_r>:
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	4d07      	ldr	r5, [pc, #28]	; (800c9a8 <_kill_r+0x20>)
 800c98c:	2300      	movs	r3, #0
 800c98e:	4604      	mov	r4, r0
 800c990:	4608      	mov	r0, r1
 800c992:	4611      	mov	r1, r2
 800c994:	602b      	str	r3, [r5, #0]
 800c996:	f7f5 f85b 	bl	8001a50 <_kill>
 800c99a:	1c43      	adds	r3, r0, #1
 800c99c:	d102      	bne.n	800c9a4 <_kill_r+0x1c>
 800c99e:	682b      	ldr	r3, [r5, #0]
 800c9a0:	b103      	cbz	r3, 800c9a4 <_kill_r+0x1c>
 800c9a2:	6023      	str	r3, [r4, #0]
 800c9a4:	bd38      	pop	{r3, r4, r5, pc}
 800c9a6:	bf00      	nop
 800c9a8:	20001e48 	.word	0x20001e48

0800c9ac <_getpid_r>:
 800c9ac:	f7f5 b848 	b.w	8001a40 <_getpid>

0800c9b0 <_init>:
 800c9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9b2:	bf00      	nop
 800c9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9b6:	bc08      	pop	{r3}
 800c9b8:	469e      	mov	lr, r3
 800c9ba:	4770      	bx	lr

0800c9bc <_fini>:
 800c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9be:	bf00      	nop
 800c9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9c2:	bc08      	pop	{r3}
 800c9c4:	469e      	mov	lr, r3
 800c9c6:	4770      	bx	lr
