
accel-example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d39c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800d530  0800d530  0001d530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db90  0800db90  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800db90  0800db90  0001db90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db98  0800db98  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db98  0800db98  0001db98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db9c  0800db9c  0001db9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800dba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e10  200001e0  0800dd7c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001ff0  0800dd7c  00021ff0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020466  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042e9  00000000  00000000  000406b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  000449a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014f3  00000000  00000000  00046488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ace  00000000  00000000  0004797b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e75d  00000000  00000000  00070449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102c2a  00000000  00000000  0008eba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000087e8  00000000  00000000  001917d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00199fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d514 	.word	0x0800d514

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d514 	.word	0x0800d514

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <init_mpu>:
double gravitational_acceleration[3] = {0, 0, 0};

float unit_conversion = NO_CONVERSION;


HAL_StatusTypeDef init_mpu(I2C_HandleTypeDef* i2c_handler, UART_HandleTypeDef* debug_handler) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	hi2c_mpu = i2c_handler;
 8000ffa:	4a41      	ldr	r2, [pc, #260]	; (8001100 <init_mpu+0x110>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]
	uart_debug_handler = debug_handler;
 8001000:	4a40      	ldr	r2, [pc, #256]	; (8001104 <init_mpu+0x114>)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef ret;
    // Write power management configuration
	uint8_t data = MPU_PWR_MGMT_1_DEFAULT_CONFIG;
 8001006:	2300      	movs	r3, #0
 8001008:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 800100a:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <init_mpu+0x110>)
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2301      	movs	r3, #1
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	f107 030e 	add.w	r3, r7, #14
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	226b      	movs	r2, #107	; 0x6b
 8001020:	21d0      	movs	r1, #208	; 0xd0
 8001022:	f001 fcd7 	bl	80029d4 <HAL_I2C_Mem_Write>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d008      	beq.n	8001042 <init_mpu+0x52>
		DEBUG_PRINT("Failed to initialize power management configuration\r\n");
 8001030:	4b34      	ldr	r3, [pc, #208]	; (8001104 <init_mpu+0x114>)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	2364      	movs	r3, #100	; 0x64
 8001036:	2235      	movs	r2, #53	; 0x35
 8001038:	4933      	ldr	r1, [pc, #204]	; (8001108 <init_mpu+0x118>)
 800103a:	f004 fae7 	bl	800560c <HAL_UART_Transmit>
		return ret;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	e05a      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write filter configuration
	data = MPU_FILTER_DELAY_5_MS;
 8001042:	2303      	movs	r3, #3
 8001044:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_FILTER_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <init_mpu+0x110>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	2364      	movs	r3, #100	; 0x64
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	2301      	movs	r3, #1
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	f107 030e 	add.w	r3, r7, #14
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	221a      	movs	r2, #26
 800105c:	21d0      	movs	r1, #208	; 0xd0
 800105e:	f001 fcb9 	bl	80029d4 <HAL_I2C_Mem_Write>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d008      	beq.n	800107e <init_mpu+0x8e>
		DEBUG_PRINT("Failed to initialize DLPF configuration\r\n");
 800106c:	4b25      	ldr	r3, [pc, #148]	; (8001104 <init_mpu+0x114>)
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	2364      	movs	r3, #100	; 0x64
 8001072:	2229      	movs	r2, #41	; 0x29
 8001074:	4925      	ldr	r1, [pc, #148]	; (800110c <init_mpu+0x11c>)
 8001076:	f004 fac9 	bl	800560c <HAL_UART_Transmit>
		return ret;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	e03c      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write gyroscope configuration
	data = MPU_GYRO_RANGE_500_DPS;
 800107e:	2308      	movs	r3, #8
 8001080:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <init_mpu+0x110>)
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	2364      	movs	r3, #100	; 0x64
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2301      	movs	r3, #1
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f107 030e 	add.w	r3, r7, #14
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	221b      	movs	r2, #27
 8001098:	21d0      	movs	r1, #208	; 0xd0
 800109a:	f001 fc9b 	bl	80029d4 <HAL_I2C_Mem_Write>
 800109e:	4603      	mov	r3, r0
 80010a0:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <init_mpu+0xca>
		DEBUG_PRINT("Failed to initialize gyroscope configuration\r\n");
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <init_mpu+0x114>)
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	2364      	movs	r3, #100	; 0x64
 80010ae:	222e      	movs	r2, #46	; 0x2e
 80010b0:	4917      	ldr	r1, [pc, #92]	; (8001110 <init_mpu+0x120>)
 80010b2:	f004 faab 	bl	800560c <HAL_UART_Transmit>
		return ret;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	e01e      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write accelerometer configuration
	data = MPU_ACCEL_RANGE_8G;
 80010ba:	2310      	movs	r3, #16
 80010bc:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <init_mpu+0x110>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	2364      	movs	r3, #100	; 0x64
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	f107 030e 	add.w	r3, r7, #14
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	221c      	movs	r2, #28
 80010d4:	21d0      	movs	r1, #208	; 0xd0
 80010d6:	f001 fc7d 	bl	80029d4 <HAL_I2C_Mem_Write>
 80010da:	4603      	mov	r3, r0
 80010dc:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <init_mpu+0x106>
		DEBUG_PRINT("Failed to initialize accelerometer configuration\r\n");
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <init_mpu+0x114>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	2232      	movs	r2, #50	; 0x32
 80010ec:	4909      	ldr	r1, [pc, #36]	; (8001114 <init_mpu+0x124>)
 80010ee:	f004 fa8d 	bl	800560c <HAL_UART_Transmit>
		return ret;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	e000      	b.n	80010f8 <init_mpu+0x108>
	}
    return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200001fc 	.word	0x200001fc
 8001104:	20000200 	.word	0x20000200
 8001108:	0800d530 	.word	0x0800d530
 800110c:	0800d568 	.word	0x0800d568
 8001110:	0800d594 	.word	0x0800d594
 8001114:	0800d5c4 	.word	0x0800d5c4

08001118 <calibrate_mpu>:

HAL_StatusTypeDef calibrate_mpu() {
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b096      	sub	sp, #88	; 0x58
 800111c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	double target_vector[3] = {1, 0, 0};
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b57      	ldr	r3, [pc, #348]	; (8001280 <calibrate_mpu+0x168>)
 8001124:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	f04f 0300 	mov.w	r3, #0
 8001130:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double measured_accel[3];
	double preliminary_bias[3];
	for (int i = 0; i < CALIBRATION_ITERATIONS; i++) {
 8001140:	2300      	movs	r3, #0
 8001142:	657b      	str	r3, [r7, #84]	; 0x54
 8001144:	e03a      	b.n	80011bc <calibrate_mpu+0xa4>
		ret = get_accel(measured_accel);
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f8aa 	bl	80012a4 <get_accel>
 8001150:	4603      	mov	r3, r0
 8001152:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (ret) {
 8001156:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800115a:	2b00      	cmp	r3, #0
 800115c:	d009      	beq.n	8001172 <calibrate_mpu+0x5a>
			DEBUG_PRINT("Failed to calibrate accelerometer\r\n");
 800115e:	4b49      	ldr	r3, [pc, #292]	; (8001284 <calibrate_mpu+0x16c>)
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	2364      	movs	r3, #100	; 0x64
 8001164:	2223      	movs	r2, #35	; 0x23
 8001166:	4948      	ldr	r1, [pc, #288]	; (8001288 <calibrate_mpu+0x170>)
 8001168:	f004 fa50 	bl	800560c <HAL_UART_Transmit>
			return ret;
 800116c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001170:	e07d      	b.n	800126e <calibrate_mpu+0x156>
		}
		for (int j = 0; j < 3; j++) {
 8001172:	2300      	movs	r3, #0
 8001174:	653b      	str	r3, [r7, #80]	; 0x50
 8001176:	e01b      	b.n	80011b0 <calibrate_mpu+0x98>
			preliminary_bias[j] += measured_accel[j];
 8001178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	3358      	adds	r3, #88	; 0x58
 800117e:	443b      	add	r3, r7
 8001180:	3b58      	subs	r3, #88	; 0x58
 8001182:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	3358      	adds	r3, #88	; 0x58
 800118c:	443b      	add	r3, r7
 800118e:	3b40      	subs	r3, #64	; 0x40
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff f87a 	bl	800028c <__adddf3>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800119e:	00c9      	lsls	r1, r1, #3
 80011a0:	3158      	adds	r1, #88	; 0x58
 80011a2:	4439      	add	r1, r7
 80011a4:	3958      	subs	r1, #88	; 0x58
 80011a6:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++) {
 80011aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011ac:	3301      	adds	r3, #1
 80011ae:	653b      	str	r3, [r7, #80]	; 0x50
 80011b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	dde0      	ble.n	8001178 <calibrate_mpu+0x60>
	for (int i = 0; i < CALIBRATION_ITERATIONS; i++) {
 80011b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011b8:	3301      	adds	r3, #1
 80011ba:	657b      	str	r3, [r7, #84]	; 0x54
 80011bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011be:	f240 52db 	movw	r2, #1499	; 0x5db
 80011c2:	4293      	cmp	r3, r2
 80011c4:	ddbf      	ble.n	8001146 <calibrate_mpu+0x2e>
		}
	}
	accel_bias_x = target_vector[0] - (preliminary_bias[0] / CALIBRATION_ITERATIONS);
 80011c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80011ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011ce:	a32a      	add	r3, pc, #168	; (adr r3, 8001278 <calibrate_mpu+0x160>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7ff fb3a 	bl	800084c <__aeabi_ddiv>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4620      	mov	r0, r4
 80011de:	4629      	mov	r1, r5
 80011e0:	f7ff f852 	bl	8000288 <__aeabi_dsub>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4928      	ldr	r1, [pc, #160]	; (800128c <calibrate_mpu+0x174>)
 80011ea:	e9c1 2300 	strd	r2, r3, [r1]
	accel_bias_y = target_vector[1] - (preliminary_bias[1] / CALIBRATION_ITERATIONS);
 80011ee:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80011f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011f6:	a320      	add	r3, pc, #128	; (adr r3, 8001278 <calibrate_mpu+0x160>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff fb26 	bl	800084c <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4620      	mov	r0, r4
 8001206:	4629      	mov	r1, r5
 8001208:	f7ff f83e 	bl	8000288 <__aeabi_dsub>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	491f      	ldr	r1, [pc, #124]	; (8001290 <calibrate_mpu+0x178>)
 8001212:	e9c1 2300 	strd	r2, r3, [r1]
	accel_bias_z = target_vector[2] - (preliminary_bias[2] / CALIBRATION_ITERATIONS);
 8001216:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800121a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800121e:	a316      	add	r3, pc, #88	; (adr r3, 8001278 <calibrate_mpu+0x160>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f7ff fb12 	bl	800084c <__aeabi_ddiv>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4620      	mov	r0, r4
 800122e:	4629      	mov	r1, r5
 8001230:	f7ff f82a 	bl	8000288 <__aeabi_dsub>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4916      	ldr	r1, [pc, #88]	; (8001294 <calibrate_mpu+0x17c>)
 800123a:	e9c1 2300 	strd	r2, r3, [r1]
	ret = get_accel(gravitational_acceleration);
 800123e:	4816      	ldr	r0, [pc, #88]	; (8001298 <calibrate_mpu+0x180>)
 8001240:	f000 f830 	bl	80012a4 <get_accel>
 8001244:	4603      	mov	r3, r0
 8001246:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (ret) {
 800124a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <calibrate_mpu+0x14e>
		DEBUG_PRINT("Failed to calibrate accelerometer\r\n");
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <calibrate_mpu+0x16c>)
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	2364      	movs	r3, #100	; 0x64
 8001258:	2223      	movs	r2, #35	; 0x23
 800125a:	490b      	ldr	r1, [pc, #44]	; (8001288 <calibrate_mpu+0x170>)
 800125c:	f004 f9d6 	bl	800560c <HAL_UART_Transmit>
		return ret;
 8001260:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001264:	e003      	b.n	800126e <calibrate_mpu+0x156>
	}
	unit_conversion = GS_TO_MPSPS;
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <calibrate_mpu+0x184>)
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <calibrate_mpu+0x188>)
 800126a:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3758      	adds	r7, #88	; 0x58
 8001272:	46bd      	mov	sp, r7
 8001274:	bdb0      	pop	{r4, r5, r7, pc}
 8001276:	bf00      	nop
 8001278:	00000000 	.word	0x00000000
 800127c:	40977000 	.word	0x40977000
 8001280:	3ff00000 	.word	0x3ff00000
 8001284:	20000200 	.word	0x20000200
 8001288:	0800d5f8 	.word	0x0800d5f8
 800128c:	20000208 	.word	0x20000208
 8001290:	20000210 	.word	0x20000210
 8001294:	20000218 	.word	0x20000218
 8001298:	20000220 	.word	0x20000220
 800129c:	20000000 	.word	0x20000000
 80012a0:	411cf5c3 	.word	0x411cf5c3

080012a4 <get_accel>:

HAL_StatusTypeDef get_accel(double accel[3]) {
 80012a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012a8:	b08a      	sub	sp, #40	; 0x28
 80012aa:	af04      	add	r7, sp, #16
 80012ac:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t accel_buf[6];
	ret = HAL_I2C_Mem_Read(hi2c_mpu, MPU_ADDRESS, MPU_REG_ACEL_DATA, I2C_MEMADD_SIZE_8BIT, accel_buf, 6, I2C_DELAY);
 80012ae:	4b94      	ldr	r3, [pc, #592]	; (8001500 <get_accel+0x25c>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	2364      	movs	r3, #100	; 0x64
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2306      	movs	r3, #6
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	223b      	movs	r2, #59	; 0x3b
 80012c4:	21d0      	movs	r1, #208	; 0xd0
 80012c6:	f001 fc99 	bl	8002bfc <HAL_I2C_Mem_Read>
 80012ca:	4603      	mov	r3, r0
 80012cc:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <get_accel+0x42>
		DEBUG_PRINT("Failed to fetch accelerometer value\r\n");
 80012d4:	4b8b      	ldr	r3, [pc, #556]	; (8001504 <get_accel+0x260>)
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	2364      	movs	r3, #100	; 0x64
 80012da:	2225      	movs	r2, #37	; 0x25
 80012dc:	498a      	ldr	r1, [pc, #552]	; (8001508 <get_accel+0x264>)
 80012de:	f004 f995 	bl	800560c <HAL_UART_Transmit>
		return ret;
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	e107      	b.n	80014f6 <get_accel+0x252>
	}
	int16_t accel_raw_x = (accel_buf[0] << 8) | accel_buf[1];
 80012e6:	7a3b      	ldrb	r3, [r7, #8]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	7a7b      	ldrb	r3, [r7, #9]
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	82bb      	strh	r3, [r7, #20]
	int16_t accel_raw_y = (accel_buf[2] << 8) | accel_buf[3];
 80012f4:	7abb      	ldrb	r3, [r7, #10]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	7afb      	ldrb	r3, [r7, #11]
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	827b      	strh	r3, [r7, #18]
	int16_t accel_raw_z = (accel_buf[4] << 8) | accel_buf[5];
 8001302:	7b3b      	ldrb	r3, [r7, #12]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21a      	sxth	r2, r3
 8001308:	7b7b      	ldrb	r3, [r7, #13]
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	823b      	strh	r3, [r7, #16]

	accel[0] = (double)accel_raw_x / MPU_ACCEL_RANGE_8G_LSB + accel_bias_x - gravitational_acceleration[0];
 8001310:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f905 	bl	8000524 <__aeabi_i2d>
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b7b      	ldr	r3, [pc, #492]	; (800150c <get_accel+0x268>)
 8001320:	f7ff fa94 	bl	800084c <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	4b78      	ldr	r3, [pc, #480]	; (8001510 <get_accel+0x26c>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7fe ffab 	bl	800028c <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	4b75      	ldr	r3, [pc, #468]	; (8001514 <get_accel+0x270>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7fe ffa0 	bl	8000288 <__aeabi_dsub>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	e9c1 2300 	strd	r2, r3, [r1]
	accel[1] = (double)accel_raw_y / MPU_ACCEL_RANGE_8G_LSB + accel_bias_y - gravitational_acceleration[1];
 8001352:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f8e4 	bl	8000524 <__aeabi_i2d>
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b6a      	ldr	r3, [pc, #424]	; (800150c <get_accel+0x268>)
 8001362:	f7ff fa73 	bl	800084c <__aeabi_ddiv>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	4b6a      	ldr	r3, [pc, #424]	; (8001518 <get_accel+0x274>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7fe ff8a 	bl	800028c <__adddf3>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4690      	mov	r8, r2
 800137e:	4699      	mov	r9, r3
 8001380:	4b64      	ldr	r3, [pc, #400]	; (8001514 <get_accel+0x270>)
 8001382:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	f101 0408 	add.w	r4, r1, #8
 800138c:	4640      	mov	r0, r8
 800138e:	4649      	mov	r1, r9
 8001390:	f7fe ff7a 	bl	8000288 <__aeabi_dsub>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	e9c4 2300 	strd	r2, r3, [r4]
	accel[2] = (double)accel_raw_z / MPU_ACCEL_RANGE_8G_LSB + accel_bias_z - gravitational_acceleration[2];
 800139c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8bf 	bl	8000524 <__aeabi_i2d>
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b58      	ldr	r3, [pc, #352]	; (800150c <get_accel+0x268>)
 80013ac:	f7ff fa4e 	bl	800084c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	4b58      	ldr	r3, [pc, #352]	; (800151c <get_accel+0x278>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	f7fe ff65 	bl	800028c <__adddf3>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4690      	mov	r8, r2
 80013c8:	4699      	mov	r9, r3
 80013ca:	4b52      	ldr	r3, [pc, #328]	; (8001514 <get_accel+0x270>)
 80013cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	f101 0410 	add.w	r4, r1, #16
 80013d6:	4640      	mov	r0, r8
 80013d8:	4649      	mov	r1, r9
 80013da:	f7fe ff55 	bl	8000288 <__aeabi_dsub>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	e9c4 2300 	strd	r2, r3, [r4]

	accel[0] = (double)(int)(accel[0] * 10) / 10 * unit_conversion;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	4b4b      	ldr	r3, [pc, #300]	; (8001520 <get_accel+0x27c>)
 80013f2:	f7ff f901 	bl	80005f8 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff fbab 	bl	8000b58 <__aeabi_d2iz>
 8001402:	4603      	mov	r3, r0
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f88d 	bl	8000524 <__aeabi_i2d>
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	4b44      	ldr	r3, [pc, #272]	; (8001520 <get_accel+0x27c>)
 8001410:	f7ff fa1c 	bl	800084c <__aeabi_ddiv>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4614      	mov	r4, r2
 800141a:	461d      	mov	r5, r3
 800141c:	4b41      	ldr	r3, [pc, #260]	; (8001524 <get_accel+0x280>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f891 	bl	8000548 <__aeabi_f2d>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4620      	mov	r0, r4
 800142c:	4629      	mov	r1, r5
 800142e:	f7ff f8e3 	bl	80005f8 <__aeabi_dmul>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	e9c1 2300 	strd	r2, r3, [r1]
	accel[1] = (double)(int)(accel[1] * 10) / 10 * unit_conversion;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3308      	adds	r3, #8
 8001440:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b35      	ldr	r3, [pc, #212]	; (8001520 <get_accel+0x27c>)
 800144a:	f7ff f8d5 	bl	80005f8 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fb7f 	bl	8000b58 <__aeabi_d2iz>
 800145a:	4603      	mov	r3, r0
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f861 	bl	8000524 <__aeabi_i2d>
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <get_accel+0x27c>)
 8001468:	f7ff f9f0 	bl	800084c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4690      	mov	r8, r2
 8001472:	4699      	mov	r9, r3
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <get_accel+0x280>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f865 	bl	8000548 <__aeabi_f2d>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f101 0408 	add.w	r4, r1, #8
 8001488:	4640      	mov	r0, r8
 800148a:	4649      	mov	r1, r9
 800148c:	f7ff f8b4 	bl	80005f8 <__aeabi_dmul>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	e9c4 2300 	strd	r2, r3, [r4]
	accel[2] = (double)(int)(accel[2] * 10) / 10 * unit_conversion;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3310      	adds	r3, #16
 800149c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <get_accel+0x27c>)
 80014a6:	f7ff f8a7 	bl	80005f8 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fb51 	bl	8000b58 <__aeabi_d2iz>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f833 	bl	8000524 <__aeabi_i2d>
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <get_accel+0x27c>)
 80014c4:	f7ff f9c2 	bl	800084c <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4690      	mov	r8, r2
 80014ce:	4699      	mov	r9, r3
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <get_accel+0x280>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f837 	bl	8000548 <__aeabi_f2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f101 0410 	add.w	r4, r1, #16
 80014e4:	4640      	mov	r0, r8
 80014e6:	4649      	mov	r1, r9
 80014e8:	f7ff f886 	bl	80005f8 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	e9c4 2300 	strd	r2, r3, [r4]
	return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001500:	200001fc 	.word	0x200001fc
 8001504:	20000200 	.word	0x20000200
 8001508:	0800d61c 	.word	0x0800d61c
 800150c:	40b00000 	.word	0x40b00000
 8001510:	20000208 	.word	0x20000208
 8001514:	20000220 	.word	0x20000220
 8001518:	20000210 	.word	0x20000210
 800151c:	20000218 	.word	0x20000218
 8001520:	40240000 	.word	0x40240000
 8001524:	20000000 	.word	0x20000000

08001528 <init_spatial>:

// Internal globals
double accleration_sample_array[ACCEL_SAMPLES][3];
uint8_t accel_sample_index = 0;

HAL_StatusTypeDef init_spatial(I2C_HandleTypeDef* i2c_handler, UART_HandleTypeDef* debug_handler) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	ret = init_mpu(i2c_handler, debug_handler);
 8001532:	6839      	ldr	r1, [r7, #0]
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fd5b 	bl	8000ff0 <init_mpu>
 800153a:	4603      	mov	r3, r0
 800153c:	72fb      	strb	r3, [r7, #11]
	if (ret) {
 800153e:	7afb      	ldrb	r3, [r7, #11]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <init_spatial+0x20>
//		DEBUG_PRINT("Failed hardware initialization");
		return ret;
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	e01c      	b.n	8001582 <init_spatial+0x5a>
	}
	ret = calibrate_mpu();
 8001548:	f7ff fde6 	bl	8001118 <calibrate_mpu>
 800154c:	4603      	mov	r3, r0
 800154e:	72fb      	strb	r3, [r7, #11]
	if (ret) {
 8001550:	7afb      	ldrb	r3, [r7, #11]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <init_spatial+0x32>
		return ret;
 8001556:	7afb      	ldrb	r3, [r7, #11]
 8001558:	e013      	b.n	8001582 <init_spatial+0x5a>
	}
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	e00c      	b.n	800157a <init_spatial+0x52>
		get_accel(accleration_sample_array[i]);
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <init_spatial+0x64>)
 800156c:	4413      	add	r3, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fe98 	bl	80012a4 <get_accel>
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3301      	adds	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b09      	cmp	r3, #9
 800157e:	ddef      	ble.n	8001560 <init_spatial+0x38>
	}
	return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000290 	.word	0x20000290

08001590 <update_acceleration_averages>:
	current_position[2] = 0;

	current_distance = 0;
}

HAL_StatusTypeDef update_acceleration_averages() {
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
	for (int i = 0; i < 5; i++) {
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	e026      	b.n	80015ea <update_acceleration_averages+0x5a>
		HAL_StatusTypeDef ret;
		ret = get_accel(accleration_sample_array[accel_sample_index]);
 800159c:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <update_acceleration_averages+0x140>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4a4a      	ldr	r2, [pc, #296]	; (80016d4 <update_acceleration_averages+0x144>)
 80015ac:	4413      	add	r3, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fe78 	bl	80012a4 <get_accel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
		if (ret)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <update_acceleration_averages+0x32>
			return ret;
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	e082      	b.n	80016c8 <update_acceleration_averages+0x138>
		accel_sample_index = (accel_sample_index + 1) % ACCEL_SAMPLES;
 80015c2:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <update_acceleration_averages+0x140>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	4b43      	ldr	r3, [pc, #268]	; (80016d8 <update_acceleration_averages+0x148>)
 80015ca:	fb83 1302 	smull	r1, r3, r3, r2
 80015ce:	1099      	asrs	r1, r3, #2
 80015d0:	17d3      	asrs	r3, r2, #31
 80015d2:	1ac9      	subs	r1, r1, r3
 80015d4:	460b      	mov	r3, r1
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	1ad1      	subs	r1, r2, r3
 80015de:	b2ca      	uxtb	r2, r1
 80015e0:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <update_acceleration_averages+0x140>)
 80015e2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3301      	adds	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	ddd5      	ble.n	800159c <update_acceleration_averages+0xc>
	}
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	e03d      	b.n	8001672 <update_acceleration_averages+0xe2>
		current_acceleration[0] += accleration_sample_array[i][0];
 80015f6:	4b39      	ldr	r3, [pc, #228]	; (80016dc <update_acceleration_averages+0x14c>)
 80015f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015fc:	4c35      	ldr	r4, [pc, #212]	; (80016d4 <update_acceleration_averages+0x144>)
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4423      	add	r3, r4
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7fe fe3d 	bl	800028c <__adddf3>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4931      	ldr	r1, [pc, #196]	; (80016dc <update_acceleration_averages+0x14c>)
 8001618:	e9c1 2300 	strd	r2, r3, [r1]
		current_acceleration[1] += accleration_sample_array[i][1];
 800161c:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <update_acceleration_averages+0x14c>)
 800161e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001622:	4c2c      	ldr	r4, [pc, #176]	; (80016d4 <update_acceleration_averages+0x144>)
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4423      	add	r3, r4
 8001630:	3308      	adds	r3, #8
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe fe29 	bl	800028c <__adddf3>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4927      	ldr	r1, [pc, #156]	; (80016dc <update_acceleration_averages+0x14c>)
 8001640:	e9c1 2302 	strd	r2, r3, [r1, #8]
		current_acceleration[2] += accleration_sample_array[i][2];
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <update_acceleration_averages+0x14c>)
 8001646:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800164a:	4c22      	ldr	r4, [pc, #136]	; (80016d4 <update_acceleration_averages+0x144>)
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4423      	add	r3, r4
 8001658:	3310      	adds	r3, #16
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7fe fe15 	bl	800028c <__adddf3>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	491d      	ldr	r1, [pc, #116]	; (80016dc <update_acceleration_averages+0x14c>)
 8001668:	e9c1 2304 	strd	r2, r3, [r1, #16]
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	3301      	adds	r3, #1
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2b09      	cmp	r3, #9
 8001676:	ddbe      	ble.n	80015f6 <update_acceleration_averages+0x66>
	}
	current_acceleration[0] /= ACCEL_SAMPLES;
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <update_acceleration_averages+0x14c>)
 800167a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <update_acceleration_averages+0x150>)
 8001684:	f7ff f8e2 	bl	800084c <__aeabi_ddiv>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4913      	ldr	r1, [pc, #76]	; (80016dc <update_acceleration_averages+0x14c>)
 800168e:	e9c1 2300 	strd	r2, r3, [r1]
	current_acceleration[1] /= ACCEL_SAMPLES;
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <update_acceleration_averages+0x14c>)
 8001694:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <update_acceleration_averages+0x150>)
 800169e:	f7ff f8d5 	bl	800084c <__aeabi_ddiv>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	490d      	ldr	r1, [pc, #52]	; (80016dc <update_acceleration_averages+0x14c>)
 80016a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	current_acceleration[2] /= ACCEL_SAMPLES;
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <update_acceleration_averages+0x14c>)
 80016ae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <update_acceleration_averages+0x150>)
 80016b8:	f7ff f8c8 	bl	800084c <__aeabi_ddiv>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4906      	ldr	r1, [pc, #24]	; (80016dc <update_acceleration_averages+0x14c>)
 80016c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	20000380 	.word	0x20000380
 80016d4:	20000290 	.word	0x20000290
 80016d8:	66666667 	.word	0x66666667
 80016dc:	20000238 	.word	0x20000238
 80016e0:	40240000 	.word	0x40240000

080016e4 <update_spatial>:

HAL_StatusTypeDef update_spatial(float delta_t) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_StatusTypeDef ret;
	vector_euler_step(current_acceleration, current_velocity, delta_t);
 80016ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80016f2:	4917      	ldr	r1, [pc, #92]	; (8001750 <update_spatial+0x6c>)
 80016f4:	4817      	ldr	r0, [pc, #92]	; (8001754 <update_spatial+0x70>)
 80016f6:	f000 f884 	bl	8001802 <vector_euler_step>
	vector_euler_step(current_velocity, current_position, delta_t);
 80016fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80016fe:	4916      	ldr	r1, [pc, #88]	; (8001758 <update_spatial+0x74>)
 8001700:	4813      	ldr	r0, [pc, #76]	; (8001750 <update_spatial+0x6c>)
 8001702:	f000 f87e 	bl	8001802 <vector_euler_step>
	current_speed = magnitude(current_velocity);
 8001706:	4812      	ldr	r0, [pc, #72]	; (8001750 <update_spatial+0x6c>)
 8001708:	f000 f82c 	bl	8001764 <magnitude>
 800170c:	eeb0 7a40 	vmov.f32	s14, s0
 8001710:	eef0 7a60 	vmov.f32	s15, s1
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <update_spatial+0x78>)
 8001716:	ed83 7b00 	vstr	d7, [r3]
	euler_step(current_speed, &current_distance, delta_t);
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <update_spatial+0x78>)
 800171c:	ed93 7b00 	vldr	d7, [r3]
 8001720:	ed97 1a01 	vldr	s2, [r7, #4]
 8001724:	480e      	ldr	r0, [pc, #56]	; (8001760 <update_spatial+0x7c>)
 8001726:	eeb0 0a47 	vmov.f32	s0, s14
 800172a:	eef0 0a67 	vmov.f32	s1, s15
 800172e:	f000 f8d3 	bl	80018d8 <euler_step>
	ret = update_acceleration_averages();
 8001732:	f7ff ff2d 	bl	8001590 <update_acceleration_averages>
 8001736:	4603      	mov	r3, r0
 8001738:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <update_spatial+0x60>
//		DEBUG_PRINT("Failed to update acceleration");
		return ret;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	e000      	b.n	8001746 <update_spatial+0x62>
	}
	return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000250 	.word	0x20000250
 8001754:	20000238 	.word	0x20000238
 8001758:	20000270 	.word	0x20000270
 800175c:	20000268 	.word	0x20000268
 8001760:	20000288 	.word	0x20000288

08001764 <magnitude>:
#include "vectors.h"
#include <math.h>
#include <stdlib.h>

// Get the magnitude of a given vector
magnitude_t magnitude(vector_t* vec) {
 8001764:	b5b0      	push	{r4, r5, r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
    return root_func((vec[x] * vec[x]) + (vec[y] * vec[y]) + (vec[z] * vec[z]));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f7fe ff3e 	bl	80005f8 <__aeabi_dmul>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4614      	mov	r4, r2
 8001782:	461d      	mov	r5, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3308      	adds	r3, #8
 8001788:	e9d3 0100 	ldrd	r0, r1, [r3]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3308      	adds	r3, #8
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7fe ff30 	bl	80005f8 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe fd74 	bl	800028c <__adddf3>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4614      	mov	r4, r2
 80017aa:	461d      	mov	r5, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3310      	adds	r3, #16
 80017b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3310      	adds	r3, #16
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7fe ff1c 	bl	80005f8 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4620      	mov	r0, r4
 80017c6:	4629      	mov	r1, r5
 80017c8:	f7fe fd60 	bl	800028c <__adddf3>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff fa08 	bl	8000be8 <__aeabi_d2f>
 80017d8:	4603      	mov	r3, r0
 80017da:	ee00 3a10 	vmov	s0, r3
 80017de:	f00b fe77 	bl	800d4d0 <sqrtf>
 80017e2:	ee10 3a10 	vmov	r3, s0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe feae 	bl	8000548 <__aeabi_f2d>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80017f4:	eeb0 0a47 	vmov.f32	s0, s14
 80017f8:	eef0 0a67 	vmov.f32	s1, s15
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bdb0      	pop	{r4, r5, r7, pc}

08001802 <vector_euler_step>:

// Eulers method for integration in respect to time in 3 dimensions.
// Example: pass acceleration vector to source and velocity to target to integrate acceleration
void vector_euler_step(vector_t* source_vec, vector_t* target_vec, float delta_t) {
 8001802:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	ed87 0a01 	vstr	s0, [r7, #4]
    target_vec[x] += source_vec[x] * delta_t;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7fe fe92 	bl	8000548 <__aeabi_f2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4640      	mov	r0, r8
 800182a:	4649      	mov	r1, r9
 800182c:	f7fe fee4 	bl	80005f8 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4620      	mov	r0, r4
 8001836:	4629      	mov	r1, r5
 8001838:	f7fe fd28 	bl	800028c <__adddf3>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	e9c1 2300 	strd	r2, r3, [r1]
    target_vec[y] += source_vec[y] * delta_t;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	3308      	adds	r3, #8
 800184a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3308      	adds	r3, #8
 8001852:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7fe fe76 	bl	8000548 <__aeabi_f2d>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4640      	mov	r0, r8
 8001862:	4649      	mov	r1, r9
 8001864:	f7fe fec8 	bl	80005f8 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f103 0608 	add.w	r6, r3, #8
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4620      	mov	r0, r4
 800187c:	4629      	mov	r1, r5
 800187e:	f7fe fd05 	bl	800028c <__adddf3>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	e9c6 2300 	strd	r2, r3, [r6]
    target_vec[z] += source_vec[z] * delta_t;
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	3310      	adds	r3, #16
 800188e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3310      	adds	r3, #16
 8001896:	e9d3 8900 	ldrd	r8, r9, [r3]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7fe fe54 	bl	8000548 <__aeabi_f2d>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4640      	mov	r0, r8
 80018a6:	4649      	mov	r1, r9
 80018a8:	f7fe fea6 	bl	80005f8 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f103 0610 	add.w	r6, r3, #16
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4620      	mov	r0, r4
 80018c0:	4629      	mov	r1, r5
 80018c2:	f7fe fce3 	bl	800028c <__adddf3>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	e9c6 2300 	strd	r2, r3, [r6]
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080018d8 <euler_step>:

// Eulers method for integration in respect to time for scalars.
// This is used for calculating arc length.
void euler_step(magnitude_t source, magnitude_t* destination, float delta_t) {
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	ed87 0b02 	vstr	d0, [r7, #8]
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	ed87 1a00 	vstr	s2, [r7]
    *destination += source * delta_t;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 80018ee:	6838      	ldr	r0, [r7, #0]
 80018f0:	f7fe fe2a 	bl	8000548 <__aeabi_f2d>
 80018f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018f8:	f7fe fe7e 	bl	80005f8 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4620      	mov	r0, r4
 8001902:	4629      	mov	r1, r5
 8001904:	f7fe fcc2 	bl	800028c <__adddf3>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800191c <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 20);
 8001924:	1d39      	adds	r1, r7, #4
 8001926:	2314      	movs	r3, #20
 8001928:	2201      	movs	r2, #1
 800192a:	4804      	ldr	r0, [pc, #16]	; (800193c <__io_putchar+0x20>)
 800192c:	f003 fe6e 	bl	800560c <HAL_UART_Transmit>
	return ch;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000424 	.word	0x20000424

08001940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001944:	f000 fcc6 	bl	80022d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001948:	f000 f820 	bl	800198c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194c:	f000 f932 	bl	8001bb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001950:	f000 f900 	bl	8001b54 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001954:	f000 f86c 	bl	8001a30 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001958:	f000 f8aa 	bl	8001ab0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting kernel...\r\n");
 800195c:	4807      	ldr	r0, [pc, #28]	; (800197c <main+0x3c>)
 800195e:	f008 f96f 	bl	8009c40 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001962:	f004 fbef 	bl	8006144 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001966:	4a06      	ldr	r2, [pc, #24]	; (8001980 <main+0x40>)
 8001968:	2100      	movs	r1, #0
 800196a:	4806      	ldr	r0, [pc, #24]	; (8001984 <main+0x44>)
 800196c:	f004 fc34 	bl	80061d8 <osThreadNew>
 8001970:	4603      	mov	r3, r0
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <main+0x48>)
 8001974:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001976:	f004 fc09 	bl	800618c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800197a:	e7fe      	b.n	800197a <main+0x3a>
 800197c:	0800d650 	.word	0x0800d650
 8001980:	0800d6f8 	.word	0x0800d6f8
 8001984:	08001cf1 	.word	0x08001cf1
 8001988:	200004ac 	.word	0x200004ac

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b096      	sub	sp, #88	; 0x58
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	2244      	movs	r2, #68	; 0x44
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f008 fa50 	bl	8009e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	463b      	mov	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019b2:	f001 fd9b 	bl	80034ec <HAL_PWREx_ControlVoltageScaling>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019bc:	f000 f9ee 	bl	8001d9c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c0:	2302      	movs	r3, #2
 80019c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ca:	2310      	movs	r3, #16
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ce:	2302      	movs	r3, #2
 80019d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019d2:	2302      	movs	r3, #2
 80019d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019d6:	2301      	movs	r3, #1
 80019d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80019da:	230a      	movs	r3, #10
 80019dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019de:	2307      	movs	r3, #7
 80019e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019e2:	2302      	movs	r3, #2
 80019e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019e6:	2302      	movs	r3, #2
 80019e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 fdd2 	bl	8003598 <HAL_RCC_OscConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80019fa:	f000 f9cf 	bl	8001d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fe:	230f      	movs	r3, #15
 8001a00:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a02:	2303      	movs	r3, #3
 8001a04:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a12:	463b      	mov	r3, r7
 8001a14:	2104      	movs	r1, #4
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 f99a 	bl	8003d50 <HAL_RCC_ClockConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a22:	f000 f9bb 	bl	8001d9c <Error_Handler>
  }
}
 8001a26:	bf00      	nop
 8001a28:	3758      	adds	r7, #88	; 0x58
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <MX_I2C1_Init+0x78>)
 8001a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a3c:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <MX_I2C1_Init+0x7c>)
 8001a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a6a:	480e      	ldr	r0, [pc, #56]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a6c:	f000 ff16 	bl	800289c <HAL_I2C_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a76:	f000 f991 	bl	8001d9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a7e:	f001 fc8f 	bl	80033a0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a88:	f000 f988 	bl	8001d9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a90:	f001 fcd1 	bl	8003436 <HAL_I2CEx_ConfigDigitalFilter>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a9a:	f000 f97f 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000384 	.word	0x20000384
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	10909cec 	.word	0x10909cec

08001ab0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <MX_TIM2_Init+0xa0>)
 8001ad0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <MX_TIM2_Init+0xa0>)
 8001ad8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001adc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <MX_TIM2_Init+0xa0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_TIM2_Init+0xa0>)
 8001ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <MX_TIM2_Init+0xa0>)
 8001aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <MX_TIM2_Init+0xa0>)
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001afa:	4815      	ldr	r0, [pc, #84]	; (8001b50 <MX_TIM2_Init+0xa0>)
 8001afc:	f003 f83a 	bl	8004b74 <HAL_TIM_Base_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b06:	f000 f949 	bl	8001d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4619      	mov	r1, r3
 8001b16:	480e      	ldr	r0, [pc, #56]	; (8001b50 <MX_TIM2_Init+0xa0>)
 8001b18:	f003 fa5e 	bl	8004fd8 <HAL_TIM_ConfigClockSource>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001b22:	f000 f93b 	bl	8001d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	4619      	mov	r1, r3
 8001b32:	4807      	ldr	r0, [pc, #28]	; (8001b50 <MX_TIM2_Init+0xa0>)
 8001b34:	f003 fc76 	bl	8005424 <HAL_TIMEx_MasterConfigSynchronization>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001b3e:	f000 f92d 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  // Start TIM2
  HAL_TIM_Base_Start(&htim2);
 8001b42:	4803      	ldr	r0, [pc, #12]	; (8001b50 <MX_TIM2_Init+0xa0>)
 8001b44:	f003 f86e 	bl	8004c24 <HAL_TIM_Base_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	3720      	adds	r7, #32
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200003d8 	.word	0x200003d8

08001b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b5a:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <MX_USART2_UART_Init+0x5c>)
 8001b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b98:	f003 fcea 	bl	8005570 <HAL_UART_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ba2:	f000 f8fb 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000424 	.word	0x20000424
 8001bb0:	40004400 	.word	0x40004400

08001bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bca:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <MX_GPIO_Init+0xe0>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4a31      	ldr	r2, [pc, #196]	; (8001c94 <MX_GPIO_Init+0xe0>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd6:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <MX_GPIO_Init+0xe0>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001be2:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <MX_GPIO_Init+0xe0>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	4a2b      	ldr	r2, [pc, #172]	; (8001c94 <MX_GPIO_Init+0xe0>)
 8001be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bee:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <MX_GPIO_Init+0xe0>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <MX_GPIO_Init+0xe0>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	4a25      	ldr	r2, [pc, #148]	; (8001c94 <MX_GPIO_Init+0xe0>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <MX_GPIO_Init+0xe0>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <MX_GPIO_Init+0xe0>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	4a1f      	ldr	r2, [pc, #124]	; (8001c94 <MX_GPIO_Init+0xe0>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <MX_GPIO_Init+0xe0>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2120      	movs	r1, #32
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c32:	f000 fe1b 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c3c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4812      	ldr	r0, [pc, #72]	; (8001c98 <MX_GPIO_Init+0xe4>)
 8001c4e:	f000 fc63 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c52:	2320      	movs	r3, #32
 8001c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c56:	2301      	movs	r3, #1
 8001c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6c:	f000 fc54 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INT_Pin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 8001c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	4804      	ldr	r0, [pc, #16]	; (8001c98 <MX_GPIO_Init+0xe4>)
 8001c88:	f000 fc46 	bl	8002518 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	; 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	48000800 	.word	0x48000800

08001c9c <get_timestep>:

/* USER CODE BEGIN 4 */

// Get stored time in timer 2 in terms of seconds
double get_timestep() {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
	long double cur_time = TIM2->CNT;
 8001ca2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fc2b 	bl	8000504 <__aeabi_ui2d>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	e9c7 2300 	strd	r2, r3, [r7]
	// Reset timer for next call
	TIM2->CNT = 0;
 8001cb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24
	// Division to make time in terms of seconds
	cur_time /= 8000;
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <get_timestep+0x50>)
 8001cc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cc8:	f7fe fdc0 	bl	800084c <__aeabi_ddiv>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	e9c7 2300 	strd	r2, r3, [r7]
	return (double)cur_time;
 8001cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cd8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce0:	eef0 0a67 	vmov.f32	s1, s15
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40bf4000 	.word	0x40bf4000

08001cf0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af04      	add	r7, sp, #16
 8001cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	init_spatial(&hi2c1, &huart2);
 8001cf8:	4917      	ldr	r1, [pc, #92]	; (8001d58 <StartDefaultTask+0x68>)
 8001cfa:	4818      	ldr	r0, [pc, #96]	; (8001d5c <StartDefaultTask+0x6c>)
 8001cfc:	f7ff fc14 	bl	8001528 <init_spatial>
  /* Infinite loop */
  for(;;) {
	  update_spatial(get_timestep());
 8001d00:	f7ff ffcc 	bl	8001c9c <get_timestep>
 8001d04:	ec53 2b10 	vmov	r2, r3, d0
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f7fe ff6c 	bl	8000be8 <__aeabi_d2f>
 8001d10:	4603      	mov	r3, r0
 8001d12:	ee00 3a10 	vmov	s0, r3
 8001d16:	f7ff fce5 	bl	80016e4 <update_spatial>
	  printf("Acceleration x: %.2f, y: %.2f, z: %.2f\r\n", current_acceleration[0], current_acceleration[1], current_acceleration[2]);
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <StartDefaultTask+0x70>)
 8001d1c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d20:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <StartDefaultTask+0x70>)
 8001d22:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d26:	490e      	ldr	r1, [pc, #56]	; (8001d60 <StartDefaultTask+0x70>)
 8001d28:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001d30:	e9cd 2300 	strd	r2, r3, [sp]
 8001d34:	4622      	mov	r2, r4
 8001d36:	462b      	mov	r3, r5
 8001d38:	480a      	ldr	r0, [pc, #40]	; (8001d64 <StartDefaultTask+0x74>)
 8001d3a:	f007 ff1b 	bl	8009b74 <iprintf>
	  printf("Speed: %.2f m/s\r\n", current_speed);
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <StartDefaultTask+0x78>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	4809      	ldr	r0, [pc, #36]	; (8001d6c <StartDefaultTask+0x7c>)
 8001d46:	f007 ff15 	bl	8009b74 <iprintf>
	  printf("Trip: %.2f m\r\n", current_distance);
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <StartDefaultTask+0x80>)
 8001d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d50:	4808      	ldr	r0, [pc, #32]	; (8001d74 <StartDefaultTask+0x84>)
 8001d52:	f007 ff0f 	bl	8009b74 <iprintf>
  for(;;) {
 8001d56:	e7d3      	b.n	8001d00 <StartDefaultTask+0x10>
 8001d58:	20000424 	.word	0x20000424
 8001d5c:	20000384 	.word	0x20000384
 8001d60:	20000238 	.word	0x20000238
 8001d64:	0800d664 	.word	0x0800d664
 8001d68:	20000268 	.word	0x20000268
 8001d6c:	0800d690 	.word	0x0800d690
 8001d70:	20000288 	.word	0x20000288
 8001d74:	0800d6a4 	.word	0x0800d6a4

08001d78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d8a:	f000 fac3 	bl	8002314 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40012c00 	.word	0x40012c00

08001d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da0:	b672      	cpsid	i
}
 8001da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <Error_Handler+0x8>
	...

08001da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_MspInit+0x4c>)
 8001db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db2:	4a10      	ldr	r2, [pc, #64]	; (8001df4 <HAL_MspInit+0x4c>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_MspInit+0x4c>)
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_MspInit+0x4c>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_MspInit+0x4c>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_MspInit+0x4c>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	210f      	movs	r1, #15
 8001de2:	f06f 0001 	mvn.w	r0, #1
 8001de6:	f000 fb6d 	bl	80024c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000

08001df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b0ac      	sub	sp, #176	; 0xb0
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	2288      	movs	r2, #136	; 0x88
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f008 f811 	bl	8009e40 <memset>
  if(hi2c->Instance==I2C1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a21      	ldr	r2, [pc, #132]	; (8001ea8 <HAL_I2C_MspInit+0xb0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d13b      	bne.n	8001ea0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e28:	2340      	movs	r3, #64	; 0x40
 8001e2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4618      	mov	r0, r3
 8001e36:	f002 f9e1 	bl	80041fc <HAL_RCCEx_PeriphCLKConfig>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e40:	f7ff ffac 	bl	8001d9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_I2C_MspInit+0xb4>)
 8001e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e48:	4a18      	ldr	r2, [pc, #96]	; (8001eac <HAL_I2C_MspInit+0xb4>)
 8001e4a:	f043 0302 	orr.w	r3, r3, #2
 8001e4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e50:	4b16      	ldr	r3, [pc, #88]	; (8001eac <HAL_I2C_MspInit+0xb4>)
 8001e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ACCEL_SCL_Pin|ACCEL_SDA_Pin;
 8001e5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e64:	2312      	movs	r3, #18
 8001e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e76:	2304      	movs	r3, #4
 8001e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e80:	4619      	mov	r1, r3
 8001e82:	480b      	ldr	r0, [pc, #44]	; (8001eb0 <HAL_I2C_MspInit+0xb8>)
 8001e84:	f000 fb48 	bl	8002518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_I2C_MspInit+0xb4>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8c:	4a07      	ldr	r2, [pc, #28]	; (8001eac <HAL_I2C_MspInit+0xb4>)
 8001e8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e92:	6593      	str	r3, [r2, #88]	; 0x58
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_I2C_MspInit+0xb4>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ea0:	bf00      	nop
 8001ea2:	37b0      	adds	r7, #176	; 0xb0
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40005400 	.word	0x40005400
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	48000400 	.word	0x48000400

08001eb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec4:	d10b      	bne.n	8001ede <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_TIM_Base_MspInit+0x38>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <HAL_TIM_Base_MspInit+0x38>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_TIM_Base_MspInit+0x38>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000

08001ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0ac      	sub	sp, #176	; 0xb0
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	2288      	movs	r2, #136	; 0x88
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f007 ff95 	bl	8009e40 <memset>
  if(huart->Instance==USART2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <HAL_UART_MspInit+0xb0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d13b      	bne.n	8001f98 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f20:	2302      	movs	r3, #2
 8001f22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f002 f965 	bl	80041fc <HAL_RCCEx_PeriphCLKConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f38:	f7ff ff30 	bl	8001d9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_UART_MspInit+0xb4>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_UART_MspInit+0xb4>)
 8001f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f46:	6593      	str	r3, [r2, #88]	; 0x58
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_UART_MspInit+0xb4>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_UART_MspInit+0xb4>)
 8001f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f58:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <HAL_UART_MspInit+0xb4>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_UART_MspInit+0xb4>)
 8001f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f84:	2307      	movs	r3, #7
 8001f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f94:	f000 fac0 	bl	8002518 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f98:	bf00      	nop
 8001f9a:	37b0      	adds	r7, #176	; 0xb0
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40004400 	.word	0x40004400
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	; 0x30
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <HAL_InitTick+0xc8>)
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fba:	4a2d      	ldr	r2, [pc, #180]	; (8002070 <HAL_InitTick+0xc8>)
 8001fbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fc0:	6613      	str	r3, [r2, #96]	; 0x60
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <HAL_InitTick+0xc8>)
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fce:	f107 020c 	add.w	r2, r7, #12
 8001fd2:	f107 0310 	add.w	r3, r7, #16
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f002 f87d 	bl	80040d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001fde:	f002 f865 	bl	80040ac <HAL_RCC_GetPCLK2Freq>
 8001fe2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe6:	4a23      	ldr	r2, [pc, #140]	; (8002074 <HAL_InitTick+0xcc>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	0c9b      	lsrs	r3, r3, #18
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ff2:	4b21      	ldr	r3, [pc, #132]	; (8002078 <HAL_InitTick+0xd0>)
 8001ff4:	4a21      	ldr	r2, [pc, #132]	; (800207c <HAL_InitTick+0xd4>)
 8001ff6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <HAL_InitTick+0xd0>)
 8001ffa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ffe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002000:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <HAL_InitTick+0xd0>)
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <HAL_InitTick+0xd0>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_InitTick+0xd0>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002012:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_InitTick+0xd0>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002018:	4817      	ldr	r0, [pc, #92]	; (8002078 <HAL_InitTick+0xd0>)
 800201a:	f002 fdab 	bl	8004b74 <HAL_TIM_Base_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002024:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002028:	2b00      	cmp	r3, #0
 800202a:	d11b      	bne.n	8002064 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800202c:	4812      	ldr	r0, [pc, #72]	; (8002078 <HAL_InitTick+0xd0>)
 800202e:	f002 fe61 	bl	8004cf4 <HAL_TIM_Base_Start_IT>
 8002032:	4603      	mov	r3, r0
 8002034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002038:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800203c:	2b00      	cmp	r3, #0
 800203e:	d111      	bne.n	8002064 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002040:	2019      	movs	r0, #25
 8002042:	f000 fa5b 	bl	80024fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b0f      	cmp	r3, #15
 800204a:	d808      	bhi.n	800205e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800204c:	2200      	movs	r2, #0
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	2019      	movs	r0, #25
 8002052:	f000 fa37 	bl	80024c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <HAL_InitTick+0xd8>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	e002      	b.n	8002064 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002064:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002068:	4618      	mov	r0, r3
 800206a:	3730      	adds	r7, #48	; 0x30
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000
 8002074:	431bde83 	.word	0x431bde83
 8002078:	200004b0 	.word	0x200004b0
 800207c:	40012c00 	.word	0x40012c00
 8002080:	20000008 	.word	0x20000008

08002084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <NMI_Handler+0x4>
	...

0800208c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("ENCOUNTERED HARD FAULT, UNABLE TO CONTINUE!");
 8002090:	4801      	ldr	r0, [pc, #4]	; (8002098 <HardFault_Handler+0xc>)
 8002092:	f007 fd6f 	bl	8009b74 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <HardFault_Handler+0xa>
 8002098:	0800d6b4 	.word	0x0800d6b4

0800209c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <MemManage_Handler+0x4>

080020a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <UsageFault_Handler+0x4>

080020ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80020c2:	f002 fe87 	bl	8004dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200004b0 	.word	0x200004b0

080020d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return 1;
 80020d4:	2301      	movs	r3, #1
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <_kill>:

int _kill(int pid, int sig)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ea:	f007 ff61 	bl	8009fb0 <__errno>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2216      	movs	r2, #22
 80020f2:	601a      	str	r2, [r3, #0]
  return -1;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <_exit>:

void _exit (int status)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ffe7 	bl	80020e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002112:	e7fe      	b.n	8002112 <_exit+0x12>

08002114 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	e00a      	b.n	800213c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002126:	f3af 8000 	nop.w
 800212a:	4601      	mov	r1, r0
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	60ba      	str	r2, [r7, #8]
 8002132:	b2ca      	uxtb	r2, r1
 8002134:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	dbf0      	blt.n	8002126 <_read+0x12>
  }

  return len;
 8002144:	687b      	ldr	r3, [r7, #4]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e009      	b.n	8002174 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	60ba      	str	r2, [r7, #8]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fbd7 	bl	800191c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	dbf1      	blt.n	8002160 <_write+0x12>
  }
  return len;
 800217c:	687b      	ldr	r3, [r7, #4]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <_close>:

int _close(int file)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ae:	605a      	str	r2, [r3, #4]
  return 0;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <_isatty>:

int _isatty(int file)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021c6:	2301      	movs	r3, #1
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f8:	4a14      	ldr	r2, [pc, #80]	; (800224c <_sbrk+0x5c>)
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <_sbrk+0x60>)
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <_sbrk+0x64>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <_sbrk+0x64>)
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <_sbrk+0x68>)
 8002210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	429a      	cmp	r2, r3
 800221e:	d207      	bcs.n	8002230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002220:	f007 fec6 	bl	8009fb0 <__errno>
 8002224:	4603      	mov	r3, r0
 8002226:	220c      	movs	r2, #12
 8002228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800222a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800222e:	e009      	b.n	8002244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <_sbrk+0x64>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <_sbrk+0x64>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	4a05      	ldr	r2, [pc, #20]	; (8002254 <_sbrk+0x64>)
 8002240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002242:	68fb      	ldr	r3, [r7, #12]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20018000 	.word	0x20018000
 8002250:	00000400 	.word	0x00000400
 8002254:	200004fc 	.word	0x200004fc
 8002258:	20001ff0 	.word	0x20001ff0

0800225c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <SystemInit+0x20>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <SystemInit+0x20>)
 8002268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800226c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002284:	f7ff ffea 	bl	800225c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002288:	480c      	ldr	r0, [pc, #48]	; (80022bc <LoopForever+0x6>)
  ldr r1, =_edata
 800228a:	490d      	ldr	r1, [pc, #52]	; (80022c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800228c:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <LoopForever+0xe>)
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002290:	e002      	b.n	8002298 <LoopCopyDataInit>

08002292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002296:	3304      	adds	r3, #4

08002298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800229a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800229c:	d3f9      	bcc.n	8002292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022a0:	4c0a      	ldr	r4, [pc, #40]	; (80022cc <LoopForever+0x16>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a4:	e001      	b.n	80022aa <LoopFillZerobss>

080022a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a8:	3204      	adds	r2, #4

080022aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022ac:	d3fb      	bcc.n	80022a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ae:	f007 fe85 	bl	8009fbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022b2:	f7ff fb45 	bl	8001940 <main>

080022b6 <LoopForever>:

LoopForever:
    b LoopForever
 80022b6:	e7fe      	b.n	80022b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80022c4:	0800dba0 	.word	0x0800dba0
  ldr r2, =_sbss
 80022c8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80022cc:	20001ff0 	.word	0x20001ff0

080022d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022d0:	e7fe      	b.n	80022d0 <ADC1_2_IRQHandler>
	...

080022d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_Init+0x3c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <HAL_Init+0x3c>)
 80022e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ea:	2003      	movs	r0, #3
 80022ec:	f000 f8df 	bl	80024ae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022f0:	200f      	movs	r0, #15
 80022f2:	f7ff fe59 	bl	8001fa8 <HAL_InitTick>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	71fb      	strb	r3, [r7, #7]
 8002300:	e001      	b.n	8002306 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002302:	f7ff fd51 	bl	8001da8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002306:	79fb      	ldrb	r3, [r7, #7]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40022000 	.word	0x40022000

08002314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_IncTick+0x20>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_IncTick+0x24>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4413      	add	r3, r2
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <HAL_IncTick+0x24>)
 8002326:	6013      	str	r3, [r2, #0]
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	2000000c 	.word	0x2000000c
 8002338:	20000500 	.word	0x20000500

0800233c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return uwTick;
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_GetTick+0x14>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000500 	.word	0x20000500

08002354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002370:	4013      	ands	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800237c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002386:	4a04      	ldr	r2, [pc, #16]	; (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	60d3      	str	r3, [r2, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <__NVIC_GetPriorityGrouping+0x18>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	f003 0307 	and.w	r3, r3, #7
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	db0b      	blt.n	80023e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	4907      	ldr	r1, [pc, #28]	; (80023f0 <__NVIC_EnableIRQ+0x38>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	2001      	movs	r0, #1
 80023da:	fa00 f202 	lsl.w	r2, r0, r2
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000e100 	.word	0xe000e100

080023f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	2b00      	cmp	r3, #0
 8002406:	db0a      	blt.n	800241e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	490c      	ldr	r1, [pc, #48]	; (8002440 <__NVIC_SetPriority+0x4c>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	0112      	lsls	r2, r2, #4
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	440b      	add	r3, r1
 8002418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800241c:	e00a      	b.n	8002434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	4908      	ldr	r1, [pc, #32]	; (8002444 <__NVIC_SetPriority+0x50>)
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	3b04      	subs	r3, #4
 800242c:	0112      	lsls	r2, r2, #4
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	440b      	add	r3, r1
 8002432:	761a      	strb	r2, [r3, #24]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000e100 	.word	0xe000e100
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f1c3 0307 	rsb	r3, r3, #7
 8002462:	2b04      	cmp	r3, #4
 8002464:	bf28      	it	cs
 8002466:	2304      	movcs	r3, #4
 8002468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3304      	adds	r3, #4
 800246e:	2b06      	cmp	r3, #6
 8002470:	d902      	bls.n	8002478 <NVIC_EncodePriority+0x30>
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3b03      	subs	r3, #3
 8002476:	e000      	b.n	800247a <NVIC_EncodePriority+0x32>
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	401a      	ands	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002490:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	43d9      	mvns	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	4313      	orrs	r3, r2
         );
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3724      	adds	r7, #36	; 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ff4c 	bl	8002354 <__NVIC_SetPriorityGrouping>
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024d6:	f7ff ff61 	bl	800239c <__NVIC_GetPriorityGrouping>
 80024da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	6978      	ldr	r0, [r7, #20]
 80024e2:	f7ff ffb1 	bl	8002448 <NVIC_EncodePriority>
 80024e6:	4602      	mov	r2, r0
 80024e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff ff80 	bl	80023f4 <__NVIC_SetPriority>
}
 80024f4:	bf00      	nop
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff54 	bl	80023b8 <__NVIC_EnableIRQ>
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002526:	e17f      	b.n	8002828 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2101      	movs	r1, #1
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 8171 	beq.w	8002822 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d005      	beq.n	8002558 <HAL_GPIO_Init+0x40>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d130      	bne.n	80025ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800258e:	2201      	movs	r2, #1
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	f003 0201 	and.w	r2, r3, #1
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d118      	bne.n	80025f8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025cc:	2201      	movs	r2, #1
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	08db      	lsrs	r3, r3, #3
 80025e2:	f003 0201 	and.w	r2, r3, #1
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b03      	cmp	r3, #3
 8002602:	d017      	beq.n	8002634 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d123      	bne.n	8002688 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	08da      	lsrs	r2, r3, #3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3208      	adds	r2, #8
 8002648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	220f      	movs	r2, #15
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	08da      	lsrs	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3208      	adds	r2, #8
 8002682:	6939      	ldr	r1, [r7, #16]
 8002684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0203 	and.w	r2, r3, #3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80ac 	beq.w	8002822 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	4b5f      	ldr	r3, [pc, #380]	; (8002848 <HAL_GPIO_Init+0x330>)
 80026cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ce:	4a5e      	ldr	r2, [pc, #376]	; (8002848 <HAL_GPIO_Init+0x330>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6613      	str	r3, [r2, #96]	; 0x60
 80026d6:	4b5c      	ldr	r3, [pc, #368]	; (8002848 <HAL_GPIO_Init+0x330>)
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026e2:	4a5a      	ldr	r2, [pc, #360]	; (800284c <HAL_GPIO_Init+0x334>)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	3302      	adds	r3, #2
 80026ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	220f      	movs	r2, #15
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4013      	ands	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800270c:	d025      	beq.n	800275a <HAL_GPIO_Init+0x242>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4f      	ldr	r2, [pc, #316]	; (8002850 <HAL_GPIO_Init+0x338>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01f      	beq.n	8002756 <HAL_GPIO_Init+0x23e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4e      	ldr	r2, [pc, #312]	; (8002854 <HAL_GPIO_Init+0x33c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d019      	beq.n	8002752 <HAL_GPIO_Init+0x23a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4d      	ldr	r2, [pc, #308]	; (8002858 <HAL_GPIO_Init+0x340>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_GPIO_Init+0x236>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4c      	ldr	r2, [pc, #304]	; (800285c <HAL_GPIO_Init+0x344>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00d      	beq.n	800274a <HAL_GPIO_Init+0x232>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4b      	ldr	r2, [pc, #300]	; (8002860 <HAL_GPIO_Init+0x348>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <HAL_GPIO_Init+0x22e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4a      	ldr	r2, [pc, #296]	; (8002864 <HAL_GPIO_Init+0x34c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d101      	bne.n	8002742 <HAL_GPIO_Init+0x22a>
 800273e:	2306      	movs	r3, #6
 8002740:	e00c      	b.n	800275c <HAL_GPIO_Init+0x244>
 8002742:	2307      	movs	r3, #7
 8002744:	e00a      	b.n	800275c <HAL_GPIO_Init+0x244>
 8002746:	2305      	movs	r3, #5
 8002748:	e008      	b.n	800275c <HAL_GPIO_Init+0x244>
 800274a:	2304      	movs	r3, #4
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x244>
 800274e:	2303      	movs	r3, #3
 8002750:	e004      	b.n	800275c <HAL_GPIO_Init+0x244>
 8002752:	2302      	movs	r3, #2
 8002754:	e002      	b.n	800275c <HAL_GPIO_Init+0x244>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_GPIO_Init+0x244>
 800275a:	2300      	movs	r3, #0
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	f002 0203 	and.w	r2, r2, #3
 8002762:	0092      	lsls	r2, r2, #2
 8002764:	4093      	lsls	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800276c:	4937      	ldr	r1, [pc, #220]	; (800284c <HAL_GPIO_Init+0x334>)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	3302      	adds	r3, #2
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800277a:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <HAL_GPIO_Init+0x350>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	43db      	mvns	r3, r3
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4013      	ands	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800279e:	4a32      	ldr	r2, [pc, #200]	; (8002868 <HAL_GPIO_Init+0x350>)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027a4:	4b30      	ldr	r3, [pc, #192]	; (8002868 <HAL_GPIO_Init+0x350>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027c8:	4a27      	ldr	r2, [pc, #156]	; (8002868 <HAL_GPIO_Init+0x350>)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027ce:	4b26      	ldr	r3, [pc, #152]	; (8002868 <HAL_GPIO_Init+0x350>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4013      	ands	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027f2:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <HAL_GPIO_Init+0x350>)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_GPIO_Init+0x350>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	43db      	mvns	r3, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800281c:	4a12      	ldr	r2, [pc, #72]	; (8002868 <HAL_GPIO_Init+0x350>)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3301      	adds	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa22 f303 	lsr.w	r3, r2, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	f47f ae78 	bne.w	8002528 <HAL_GPIO_Init+0x10>
  }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	40010000 	.word	0x40010000
 8002850:	48000400 	.word	0x48000400
 8002854:	48000800 	.word	0x48000800
 8002858:	48000c00 	.word	0x48000c00
 800285c:	48001000 	.word	0x48001000
 8002860:	48001400 	.word	0x48001400
 8002864:	48001800 	.word	0x48001800
 8002868:	40010400 	.word	0x40010400

0800286c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	807b      	strh	r3, [r7, #2]
 8002878:	4613      	mov	r3, r2
 800287a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800287c:	787b      	ldrb	r3, [r7, #1]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002882:	887a      	ldrh	r2, [r7, #2]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002888:	e002      	b.n	8002890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e08d      	b.n	80029ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff fa98 	bl	8001df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	; 0x24
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	e006      	b.n	8002924 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002922:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d108      	bne.n	800293e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	e007      	b.n	800294e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800294c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800295c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002960:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002970:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69d9      	ldr	r1, [r3, #28]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1a      	ldr	r2, [r3, #32]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	4608      	mov	r0, r1
 80029de:	4611      	mov	r1, r2
 80029e0:	461a      	mov	r2, r3
 80029e2:	4603      	mov	r3, r0
 80029e4:	817b      	strh	r3, [r7, #10]
 80029e6:	460b      	mov	r3, r1
 80029e8:	813b      	strh	r3, [r7, #8]
 80029ea:	4613      	mov	r3, r2
 80029ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	f040 80f9 	bne.w	8002bee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_I2C_Mem_Write+0x34>
 8002a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0ed      	b.n	8002bf0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_I2C_Mem_Write+0x4e>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e0e6      	b.n	8002bf0 <HAL_I2C_Mem_Write+0x21c>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a2a:	f7ff fc87 	bl	800233c <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	2319      	movs	r3, #25
 8002a36:	2201      	movs	r2, #1
 8002a38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fac3 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0d1      	b.n	8002bf0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2221      	movs	r2, #33	; 0x21
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2240      	movs	r2, #64	; 0x40
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a74:	88f8      	ldrh	r0, [r7, #6]
 8002a76:	893a      	ldrh	r2, [r7, #8]
 8002a78:	8979      	ldrh	r1, [r7, #10]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	4603      	mov	r3, r0
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f9d3 	bl	8002e30 <I2C_RequestMemoryWrite>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0a9      	b.n	8002bf0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2bff      	cmp	r3, #255	; 0xff
 8002aa4:	d90e      	bls.n	8002ac4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	22ff      	movs	r2, #255	; 0xff
 8002aaa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	8979      	ldrh	r1, [r7, #10]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 fc3d 	bl	800333c <I2C_TransferConfig>
 8002ac2:	e00f      	b.n	8002ae4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	8979      	ldrh	r1, [r7, #10]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fc2c 	bl	800333c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fabc 	bl	8003066 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e07b      	b.n	8002bf0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d034      	beq.n	8002b9c <HAL_I2C_Mem_Write+0x1c8>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d130      	bne.n	8002b9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b40:	2200      	movs	r2, #0
 8002b42:	2180      	movs	r1, #128	; 0x80
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 fa3f 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e04d      	b.n	8002bf0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2bff      	cmp	r3, #255	; 0xff
 8002b5c:	d90e      	bls.n	8002b7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	22ff      	movs	r2, #255	; 0xff
 8002b62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	8979      	ldrh	r1, [r7, #10]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 fbe1 	bl	800333c <I2C_TransferConfig>
 8002b7a:	e00f      	b.n	8002b9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	8979      	ldrh	r1, [r7, #10]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fbd0 	bl	800333c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d19e      	bne.n	8002ae4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 faa2 	bl	80030f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e01a      	b.n	8002bf0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <HAL_I2C_Mem_Write+0x224>)
 8002bce:	400b      	ands	r3, r1
 8002bd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e000      	b.n	8002bf0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	fe00e800 	.word	0xfe00e800

08002bfc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	4608      	mov	r0, r1
 8002c06:	4611      	mov	r1, r2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	817b      	strh	r3, [r7, #10]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	813b      	strh	r3, [r7, #8]
 8002c12:	4613      	mov	r3, r2
 8002c14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	f040 80fd 	bne.w	8002e1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_I2C_Mem_Read+0x34>
 8002c2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0f1      	b.n	8002e20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Mem_Read+0x4e>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e0ea      	b.n	8002e20 <HAL_I2C_Mem_Read+0x224>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c52:	f7ff fb73 	bl	800233c <HAL_GetTick>
 8002c56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2319      	movs	r3, #25
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f9af 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0d5      	b.n	8002e20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2222      	movs	r2, #34	; 0x22
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2240      	movs	r2, #64	; 0x40
 8002c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c9c:	88f8      	ldrh	r0, [r7, #6]
 8002c9e:	893a      	ldrh	r2, [r7, #8]
 8002ca0:	8979      	ldrh	r1, [r7, #10]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	4603      	mov	r3, r0
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f913 	bl	8002ed8 <I2C_RequestMemoryRead>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0ad      	b.n	8002e20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2bff      	cmp	r3, #255	; 0xff
 8002ccc:	d90e      	bls.n	8002cec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	22ff      	movs	r2, #255	; 0xff
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	8979      	ldrh	r1, [r7, #10]
 8002cdc:	4b52      	ldr	r3, [pc, #328]	; (8002e28 <HAL_I2C_Mem_Read+0x22c>)
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fb29 	bl	800333c <I2C_TransferConfig>
 8002cea:	e00f      	b.n	8002d0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	8979      	ldrh	r1, [r7, #10]
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <HAL_I2C_Mem_Read+0x22c>)
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fb18 	bl	800333c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	2200      	movs	r2, #0
 8002d14:	2104      	movs	r1, #4
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f956 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e07c      	b.n	8002e20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d034      	beq.n	8002dcc <HAL_I2C_Mem_Read+0x1d0>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d130      	bne.n	8002dcc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d70:	2200      	movs	r2, #0
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f927 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e04d      	b.n	8002e20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2bff      	cmp	r3, #255	; 0xff
 8002d8c:	d90e      	bls.n	8002dac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	22ff      	movs	r2, #255	; 0xff
 8002d92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	8979      	ldrh	r1, [r7, #10]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 fac9 	bl	800333c <I2C_TransferConfig>
 8002daa:	e00f      	b.n	8002dcc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	8979      	ldrh	r1, [r7, #10]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 fab8 	bl	800333c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d19a      	bne.n	8002d0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f98a 	bl	80030f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e01a      	b.n	8002e20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2220      	movs	r2, #32
 8002df0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_I2C_Mem_Read+0x230>)
 8002dfe:	400b      	ands	r3, r1
 8002e00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e000      	b.n	8002e20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
  }
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	80002400 	.word	0x80002400
 8002e2c:	fe00e800 	.word	0xfe00e800

08002e30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	817b      	strh	r3, [r7, #10]
 8002e42:	460b      	mov	r3, r1
 8002e44:	813b      	strh	r3, [r7, #8]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	8979      	ldrh	r1, [r7, #10]
 8002e50:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <I2C_RequestMemoryWrite+0xa4>)
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fa6f 	bl	800333c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	69b9      	ldr	r1, [r7, #24]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f8ff 	bl	8003066 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e02c      	b.n	8002ecc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e78:	893b      	ldrh	r3, [r7, #8]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	629a      	str	r2, [r3, #40]	; 0x28
 8002e82:	e015      	b.n	8002eb0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e84:	893b      	ldrh	r3, [r7, #8]
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	69b9      	ldr	r1, [r7, #24]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f8e5 	bl	8003066 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e012      	b.n	8002ecc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ea6:	893b      	ldrh	r3, [r7, #8]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f884 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	80002000 	.word	0x80002000

08002ed8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	817b      	strh	r3, [r7, #10]
 8002eea:	460b      	mov	r3, r1
 8002eec:	813b      	strh	r3, [r7, #8]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	8979      	ldrh	r1, [r7, #10]
 8002ef8:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <I2C_RequestMemoryRead+0xa4>)
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2300      	movs	r3, #0
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 fa1c 	bl	800333c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	69b9      	ldr	r1, [r7, #24]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f8ac 	bl	8003066 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e02c      	b.n	8002f72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d105      	bne.n	8002f2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f1e:	893b      	ldrh	r3, [r7, #8]
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
 8002f28:	e015      	b.n	8002f56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f2a:	893b      	ldrh	r3, [r7, #8]
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	69b9      	ldr	r1, [r7, #24]
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f892 	bl	8003066 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e012      	b.n	8002f72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f4c:	893b      	ldrh	r3, [r7, #8]
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2140      	movs	r1, #64	; 0x40
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f831 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	80002000 	.word	0x80002000

08002f80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d103      	bne.n	8002f9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d007      	beq.n	8002fbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	619a      	str	r2, [r3, #24]
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd8:	e031      	b.n	800303e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fe0:	d02d      	beq.n	800303e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7ff f9ab 	bl	800233c <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d122      	bne.n	800303e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	429a      	cmp	r2, r3
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	461a      	mov	r2, r3
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	429a      	cmp	r2, r3
 8003014:	d113      	bne.n	800303e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f043 0220 	orr.w	r2, r3, #32
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e00f      	b.n	800305e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699a      	ldr	r2, [r3, #24]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4013      	ands	r3, r2
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	429a      	cmp	r2, r3
 800304c:	bf0c      	ite	eq
 800304e:	2301      	moveq	r3, #1
 8003050:	2300      	movne	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	429a      	cmp	r2, r3
 800305a:	d0be      	beq.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003072:	e033      	b.n	80030dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f87f 	bl	800317c <I2C_IsErrorOccurred>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e031      	b.n	80030ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800308e:	d025      	beq.n	80030dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003090:	f7ff f954 	bl	800233c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	429a      	cmp	r2, r3
 800309e:	d302      	bcc.n	80030a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d11a      	bne.n	80030dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d013      	beq.n	80030dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e007      	b.n	80030ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d1c4      	bne.n	8003074 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003100:	e02f      	b.n	8003162 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f838 	bl	800317c <I2C_IsErrorOccurred>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e02d      	b.n	8003172 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003116:	f7ff f911 	bl	800233c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	429a      	cmp	r2, r3
 8003124:	d302      	bcc.n	800312c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11a      	bne.n	8003162 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b20      	cmp	r3, #32
 8003138:	d013      	beq.n	8003162 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f043 0220 	orr.w	r2, r3, #32
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e007      	b.n	8003172 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b20      	cmp	r3, #32
 800316e:	d1c8      	bne.n	8003102 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d068      	beq.n	800327a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2210      	movs	r2, #16
 80031ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031b0:	e049      	b.n	8003246 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b8:	d045      	beq.n	8003246 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031ba:	f7ff f8bf 	bl	800233c <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d302      	bcc.n	80031d0 <I2C_IsErrorOccurred+0x54>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d13a      	bne.n	8003246 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f2:	d121      	bne.n	8003238 <I2C_IsErrorOccurred+0xbc>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031fa:	d01d      	beq.n	8003238 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d01a      	beq.n	8003238 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003210:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003212:	f7ff f893 	bl	800233c <HAL_GetTick>
 8003216:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003218:	e00e      	b.n	8003238 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800321a:	f7ff f88f 	bl	800233c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b19      	cmp	r3, #25
 8003226:	d907      	bls.n	8003238 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	f043 0320 	orr.w	r3, r3, #32
 800322e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003236:	e006      	b.n	8003246 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b20      	cmp	r3, #32
 8003244:	d1e9      	bne.n	800321a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b20      	cmp	r3, #32
 8003252:	d003      	beq.n	800325c <I2C_IsErrorOccurred+0xe0>
 8003254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0aa      	beq.n	80031b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800325c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003260:	2b00      	cmp	r3, #0
 8003262:	d103      	bne.n	800326c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2220      	movs	r2, #32
 800326a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	f043 0304 	orr.w	r3, r3, #4
 8003272:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800329c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	f043 0308 	orr.w	r3, r3, #8
 80032b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00b      	beq.n	80032e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	f043 0302 	orr.w	r3, r3, #2
 80032d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80032e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01c      	beq.n	800332a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f7ff fe45 	bl	8002f80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <I2C_IsErrorOccurred+0x1bc>)
 8003302:	400b      	ands	r3, r1
 8003304:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	431a      	orrs	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800332a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800332e:	4618      	mov	r0, r3
 8003330:	3728      	adds	r7, #40	; 0x28
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	fe00e800 	.word	0xfe00e800

0800333c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	817b      	strh	r3, [r7, #10]
 800334a:	4613      	mov	r3, r2
 800334c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800334e:	897b      	ldrh	r3, [r7, #10]
 8003350:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003354:	7a7b      	ldrb	r3, [r7, #9]
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800335c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	4313      	orrs	r3, r2
 8003366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800336a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	0d5b      	lsrs	r3, r3, #21
 8003376:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800337a:	4b08      	ldr	r3, [pc, #32]	; (800339c <I2C_TransferConfig+0x60>)
 800337c:	430b      	orrs	r3, r1
 800337e:	43db      	mvns	r3, r3
 8003380:	ea02 0103 	and.w	r1, r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	03ff63ff 	.word	0x03ff63ff

080033a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d138      	bne.n	8003428 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e032      	b.n	800342a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2224      	movs	r2, #36	; 0x24
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6819      	ldr	r1, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e000      	b.n	800342a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b20      	cmp	r3, #32
 800344a:	d139      	bne.n	80034c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003456:	2302      	movs	r3, #2
 8003458:	e033      	b.n	80034c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2224      	movs	r2, #36	; 0x24
 8003466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0201 	bic.w	r2, r2, #1
 8003478:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003488:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	021b      	lsls	r3, r3, #8
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	e000      	b.n	80034c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40007000 	.word	0x40007000

080034ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fa:	d130      	bne.n	800355e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034fc:	4b23      	ldr	r3, [pc, #140]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003508:	d038      	beq.n	800357c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003512:	4a1e      	ldr	r2, [pc, #120]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003514:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003518:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800351a:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2232      	movs	r2, #50	; 0x32
 8003520:	fb02 f303 	mul.w	r3, r2, r3
 8003524:	4a1b      	ldr	r2, [pc, #108]	; (8003594 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	0c9b      	lsrs	r3, r3, #18
 800352c:	3301      	adds	r3, #1
 800352e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003530:	e002      	b.n	8003538 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3b01      	subs	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003538:	4b14      	ldr	r3, [pc, #80]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003544:	d102      	bne.n	800354c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1f2      	bne.n	8003532 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003558:	d110      	bne.n	800357c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e00f      	b.n	800357e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800355e:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356a:	d007      	beq.n	800357c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800356c:	4b07      	ldr	r3, [pc, #28]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003574:	4a05      	ldr	r2, [pc, #20]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800357a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40007000 	.word	0x40007000
 8003590:	20000004 	.word	0x20000004
 8003594:	431bde83 	.word	0x431bde83

08003598 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e3ca      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035aa:	4b97      	ldr	r3, [pc, #604]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b4:	4b94      	ldr	r3, [pc, #592]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80e4 	beq.w	8003794 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <HAL_RCC_OscConfig+0x4a>
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	f040 808b 	bne.w	80036f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	f040 8087 	bne.w	80036f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035e2:	4b89      	ldr	r3, [pc, #548]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_RCC_OscConfig+0x62>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e3a2      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1a      	ldr	r2, [r3, #32]
 80035fe:	4b82      	ldr	r3, [pc, #520]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d004      	beq.n	8003614 <HAL_RCC_OscConfig+0x7c>
 800360a:	4b7f      	ldr	r3, [pc, #508]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003612:	e005      	b.n	8003620 <HAL_RCC_OscConfig+0x88>
 8003614:	4b7c      	ldr	r3, [pc, #496]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003620:	4293      	cmp	r3, r2
 8003622:	d223      	bcs.n	800366c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fd87 	bl	800413c <RCC_SetFlashLatencyFromMSIRange>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e383      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003638:	4b73      	ldr	r3, [pc, #460]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a72      	ldr	r2, [pc, #456]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800363e:	f043 0308 	orr.w	r3, r3, #8
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b70      	ldr	r3, [pc, #448]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	496d      	ldr	r1, [pc, #436]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003656:	4b6c      	ldr	r3, [pc, #432]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	4968      	ldr	r1, [pc, #416]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
 800366a:	e025      	b.n	80036b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800366c:	4b66      	ldr	r3, [pc, #408]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a65      	ldr	r2, [pc, #404]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003672:	f043 0308 	orr.w	r3, r3, #8
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	4b63      	ldr	r3, [pc, #396]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	4960      	ldr	r1, [pc, #384]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003686:	4313      	orrs	r3, r2
 8003688:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800368a:	4b5f      	ldr	r3, [pc, #380]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	495b      	ldr	r1, [pc, #364]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d109      	bne.n	80036b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fd47 	bl	800413c <RCC_SetFlashLatencyFromMSIRange>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e343      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036b8:	f000 fc4a 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b52      	ldr	r3, [pc, #328]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	4950      	ldr	r1, [pc, #320]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	f003 031f 	and.w	r3, r3, #31
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
 80036d4:	4a4e      	ldr	r2, [pc, #312]	; (8003810 <HAL_RCC_OscConfig+0x278>)
 80036d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036d8:	4b4e      	ldr	r3, [pc, #312]	; (8003814 <HAL_RCC_OscConfig+0x27c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe fc63 	bl	8001fa8 <HAL_InitTick>
 80036e2:	4603      	mov	r3, r0
 80036e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d052      	beq.n	8003792 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	e327      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d032      	beq.n	800375e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036f8:	4b43      	ldr	r3, [pc, #268]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a42      	ldr	r2, [pc, #264]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003704:	f7fe fe1a 	bl	800233c <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800370c:	f7fe fe16 	bl	800233c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e310      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800371e:	4b3a      	ldr	r3, [pc, #232]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800372a:	4b37      	ldr	r3, [pc, #220]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a36      	ldr	r2, [pc, #216]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003730:	f043 0308 	orr.w	r3, r3, #8
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	4b34      	ldr	r3, [pc, #208]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	4931      	ldr	r1, [pc, #196]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003744:	4313      	orrs	r3, r2
 8003746:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003748:	4b2f      	ldr	r3, [pc, #188]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	492c      	ldr	r1, [pc, #176]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
 800375c:	e01a      	b.n	8003794 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800375e:	4b2a      	ldr	r3, [pc, #168]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a29      	ldr	r2, [pc, #164]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800376a:	f7fe fde7 	bl	800233c <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003772:	f7fe fde3 	bl	800233c <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e2dd      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003784:	4b20      	ldr	r3, [pc, #128]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f0      	bne.n	8003772 <HAL_RCC_OscConfig+0x1da>
 8003790:	e000      	b.n	8003794 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003792:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d074      	beq.n	800388a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d005      	beq.n	80037b2 <HAL_RCC_OscConfig+0x21a>
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b0c      	cmp	r3, #12
 80037aa:	d10e      	bne.n	80037ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d10b      	bne.n	80037ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b2:	4b15      	ldr	r3, [pc, #84]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d064      	beq.n	8003888 <HAL_RCC_OscConfig+0x2f0>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d160      	bne.n	8003888 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e2ba      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x24a>
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80037da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	e026      	b.n	8003830 <HAL_RCC_OscConfig+0x298>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ea:	d115      	bne.n	8003818 <HAL_RCC_OscConfig+0x280>
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a05      	ldr	r2, [pc, #20]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80037f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a02      	ldr	r2, [pc, #8]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 80037fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	e014      	b.n	8003830 <HAL_RCC_OscConfig+0x298>
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000
 800380c:	0800d71c 	.word	0x0800d71c
 8003810:	20000004 	.word	0x20000004
 8003814:	20000008 	.word	0x20000008
 8003818:	4ba0      	ldr	r3, [pc, #640]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a9f      	ldr	r2, [pc, #636]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b9d      	ldr	r3, [pc, #628]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a9c      	ldr	r2, [pc, #624]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 800382a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fe fd80 	bl	800233c <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7fe fd7c 	bl	800233c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e276      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003852:	4b92      	ldr	r3, [pc, #584]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x2a8>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fe fd6c 	bl	800233c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003868:	f7fe fd68 	bl	800233c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e262      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800387a:	4b88      	ldr	r3, [pc, #544]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x2d0>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d060      	beq.n	8003958 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b04      	cmp	r3, #4
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_OscConfig+0x310>
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d116      	bne.n	80038d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a8:	4b7c      	ldr	r3, [pc, #496]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_OscConfig+0x328>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e23f      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c0:	4b76      	ldr	r3, [pc, #472]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	061b      	lsls	r3, r3, #24
 80038ce:	4973      	ldr	r1, [pc, #460]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d4:	e040      	b.n	8003958 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d023      	beq.n	8003926 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038de:	4b6f      	ldr	r3, [pc, #444]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a6e      	ldr	r2, [pc, #440]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fe fd27 	bl	800233c <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f2:	f7fe fd23 	bl	800233c <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e21d      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003904:	4b65      	ldr	r3, [pc, #404]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003910:	4b62      	ldr	r3, [pc, #392]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	495f      	ldr	r1, [pc, #380]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
 8003924:	e018      	b.n	8003958 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003926:	4b5d      	ldr	r3, [pc, #372]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a5c      	ldr	r2, [pc, #368]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 800392c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fe fd03 	bl	800233c <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393a:	f7fe fcff 	bl	800233c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e1f9      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800394c:	4b53      	ldr	r3, [pc, #332]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d03c      	beq.n	80039de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01c      	beq.n	80039a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800396c:	4b4b      	ldr	r3, [pc, #300]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 800396e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003972:	4a4a      	ldr	r2, [pc, #296]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397c:	f7fe fcde 	bl	800233c <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003984:	f7fe fcda 	bl	800233c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e1d4      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003996:	4b41      	ldr	r3, [pc, #260]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ef      	beq.n	8003984 <HAL_RCC_OscConfig+0x3ec>
 80039a4:	e01b      	b.n	80039de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a6:	4b3d      	ldr	r3, [pc, #244]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80039a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ac:	4a3b      	ldr	r2, [pc, #236]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b6:	f7fe fcc1 	bl	800233c <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039be:	f7fe fcbd 	bl	800233c <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1b7      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039d0:	4b32      	ldr	r3, [pc, #200]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80039d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1ef      	bne.n	80039be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80a6 	beq.w	8003b38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ec:	2300      	movs	r3, #0
 80039ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039f0:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80039f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10d      	bne.n	8003a18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fc:	4b27      	ldr	r3, [pc, #156]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	4a26      	ldr	r2, [pc, #152]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6593      	str	r3, [r2, #88]	; 0x58
 8003a08:	4b24      	ldr	r3, [pc, #144]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a14:	2301      	movs	r3, #1
 8003a16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a18:	4b21      	ldr	r3, [pc, #132]	; (8003aa0 <HAL_RCC_OscConfig+0x508>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d118      	bne.n	8003a56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a24:	4b1e      	ldr	r3, [pc, #120]	; (8003aa0 <HAL_RCC_OscConfig+0x508>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <HAL_RCC_OscConfig+0x508>)
 8003a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a30:	f7fe fc84 	bl	800233c <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a38:	f7fe fc80 	bl	800233c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e17a      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a4a:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <HAL_RCC_OscConfig+0x508>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d108      	bne.n	8003a70 <HAL_RCC_OscConfig+0x4d8>
 8003a5e:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	4a0d      	ldr	r2, [pc, #52]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a6e:	e029      	b.n	8003ac4 <HAL_RCC_OscConfig+0x52c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	d115      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x50c>
 8003a78:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a80:	f043 0304 	orr.w	r3, r3, #4
 8003a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	4a03      	ldr	r2, [pc, #12]	; (8003a9c <HAL_RCC_OscConfig+0x504>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a98:	e014      	b.n	8003ac4 <HAL_RCC_OscConfig+0x52c>
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40007000 	.word	0x40007000
 8003aa4:	4b9c      	ldr	r3, [pc, #624]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	4a9b      	ldr	r2, [pc, #620]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ab4:	4b98      	ldr	r3, [pc, #608]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	4a97      	ldr	r2, [pc, #604]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d016      	beq.n	8003afa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7fe fc36 	bl	800233c <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad4:	f7fe fc32 	bl	800233c <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e12a      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aea:	4b8b      	ldr	r3, [pc, #556]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0ed      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x53c>
 8003af8:	e015      	b.n	8003b26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afa:	f7fe fc1f 	bl	800233c <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b00:	e00a      	b.n	8003b18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b02:	f7fe fc1b 	bl	800233c <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e113      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b18:	4b7f      	ldr	r3, [pc, #508]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1ed      	bne.n	8003b02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b26:	7ffb      	ldrb	r3, [r7, #31]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2c:	4b7a      	ldr	r3, [pc, #488]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	4a79      	ldr	r2, [pc, #484]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b36:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80fe 	beq.w	8003d3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	f040 80d0 	bne.w	8003cec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b4c:	4b72      	ldr	r3, [pc, #456]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f003 0203 	and.w	r2, r3, #3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d130      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d127      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d11f      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b8c:	2a07      	cmp	r2, #7
 8003b8e:	bf14      	ite	ne
 8003b90:	2201      	movne	r2, #1
 8003b92:	2200      	moveq	r2, #0
 8003b94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d113      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d109      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d06e      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b0c      	cmp	r3, #12
 8003bc6:	d069      	beq.n	8003c9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bc8:	4b53      	ldr	r3, [pc, #332]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d105      	bne.n	8003be0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bd4:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0ad      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003be4:	4b4c      	ldr	r3, [pc, #304]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a4b      	ldr	r2, [pc, #300]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bf0:	f7fe fba4 	bl	800233c <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf8:	f7fe fba0 	bl	800233c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e09a      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c0a:	4b43      	ldr	r3, [pc, #268]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c16:	4b40      	ldr	r3, [pc, #256]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	4b40      	ldr	r3, [pc, #256]	; (8003d1c <HAL_RCC_OscConfig+0x784>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c26:	3a01      	subs	r2, #1
 8003c28:	0112      	lsls	r2, r2, #4
 8003c2a:	4311      	orrs	r1, r2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c30:	0212      	lsls	r2, r2, #8
 8003c32:	4311      	orrs	r1, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c38:	0852      	lsrs	r2, r2, #1
 8003c3a:	3a01      	subs	r2, #1
 8003c3c:	0552      	lsls	r2, r2, #21
 8003c3e:	4311      	orrs	r1, r2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c44:	0852      	lsrs	r2, r2, #1
 8003c46:	3a01      	subs	r2, #1
 8003c48:	0652      	lsls	r2, r2, #25
 8003c4a:	4311      	orrs	r1, r2
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c50:	0912      	lsrs	r2, r2, #4
 8003c52:	0452      	lsls	r2, r2, #17
 8003c54:	430a      	orrs	r2, r1
 8003c56:	4930      	ldr	r1, [pc, #192]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c5c:	4b2e      	ldr	r3, [pc, #184]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a2d      	ldr	r2, [pc, #180]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c68:	4b2b      	ldr	r3, [pc, #172]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4a2a      	ldr	r2, [pc, #168]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c74:	f7fe fb62 	bl	800233c <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fe fb5e 	bl	800233c <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e058      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8e:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c9a:	e050      	b.n	8003d3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e04f      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d148      	bne.n	8003d3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cac:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cb8:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cc4:	f7fe fb3a 	bl	800233c <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fe fb36 	bl	800233c <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e030      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cde:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x734>
 8003cea:	e028      	b.n	8003d3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	d023      	beq.n	8003d3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <HAL_RCC_OscConfig+0x780>)
 8003cf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfe:	f7fe fb1d 	bl	800233c <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d04:	e00c      	b.n	8003d20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d06:	f7fe fb19 	bl	800233c <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d905      	bls.n	8003d20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e013      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <HAL_RCC_OscConfig+0x7b0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1ec      	bne.n	8003d06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_RCC_OscConfig+0x7b0>)
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	4905      	ldr	r1, [pc, #20]	; (8003d48 <HAL_RCC_OscConfig+0x7b0>)
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_RCC_OscConfig+0x7b4>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	60cb      	str	r3, [r1, #12]
 8003d38:	e001      	b.n	8003d3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3720      	adds	r7, #32
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	feeefffc 	.word	0xfeeefffc

08003d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0e7      	b.n	8003f34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d64:	4b75      	ldr	r3, [pc, #468]	; (8003f3c <HAL_RCC_ClockConfig+0x1ec>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d910      	bls.n	8003d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d72:	4b72      	ldr	r3, [pc, #456]	; (8003f3c <HAL_RCC_ClockConfig+0x1ec>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f023 0207 	bic.w	r2, r3, #7
 8003d7a:	4970      	ldr	r1, [pc, #448]	; (8003f3c <HAL_RCC_ClockConfig+0x1ec>)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	4b6e      	ldr	r3, [pc, #440]	; (8003f3c <HAL_RCC_ClockConfig+0x1ec>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0cf      	b.n	8003f34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d010      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	4b66      	ldr	r3, [pc, #408]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d908      	bls.n	8003dc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db0:	4b63      	ldr	r3, [pc, #396]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	4960      	ldr	r1, [pc, #384]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d04c      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd6:	4b5a      	ldr	r3, [pc, #360]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d121      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e0a6      	b.n	8003f34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dee:	4b54      	ldr	r3, [pc, #336]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d115      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e09a      	b.n	8003f34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e06:	4b4e      	ldr	r3, [pc, #312]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e08e      	b.n	8003f34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e16:	4b4a      	ldr	r3, [pc, #296]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e086      	b.n	8003f34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e26:	4b46      	ldr	r3, [pc, #280]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f023 0203 	bic.w	r2, r3, #3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4943      	ldr	r1, [pc, #268]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e38:	f7fe fa80 	bl	800233c <HAL_GetTick>
 8003e3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e40:	f7fe fa7c 	bl	800233c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e06e      	b.n	8003f34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e56:	4b3a      	ldr	r3, [pc, #232]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 020c 	and.w	r2, r3, #12
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d1eb      	bne.n	8003e40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d010      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	4b31      	ldr	r3, [pc, #196]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d208      	bcs.n	8003e96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e84:	4b2e      	ldr	r3, [pc, #184]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	492b      	ldr	r1, [pc, #172]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e96:	4b29      	ldr	r3, [pc, #164]	; (8003f3c <HAL_RCC_ClockConfig+0x1ec>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d210      	bcs.n	8003ec6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea4:	4b25      	ldr	r3, [pc, #148]	; (8003f3c <HAL_RCC_ClockConfig+0x1ec>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 0207 	bic.w	r2, r3, #7
 8003eac:	4923      	ldr	r1, [pc, #140]	; (8003f3c <HAL_RCC_ClockConfig+0x1ec>)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb4:	4b21      	ldr	r3, [pc, #132]	; (8003f3c <HAL_RCC_ClockConfig+0x1ec>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d001      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e036      	b.n	8003f34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d008      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed2:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	4918      	ldr	r1, [pc, #96]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef0:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4910      	ldr	r1, [pc, #64]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f04:	f000 f824 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <HAL_RCC_ClockConfig+0x1f0>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	091b      	lsrs	r3, r3, #4
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	490b      	ldr	r1, [pc, #44]	; (8003f44 <HAL_RCC_ClockConfig+0x1f4>)
 8003f16:	5ccb      	ldrb	r3, [r1, r3]
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f20:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <HAL_RCC_ClockConfig+0x1f8>)
 8003f22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f24:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <HAL_RCC_ClockConfig+0x1fc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe f83d 	bl	8001fa8 <HAL_InitTick>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f32:	7afb      	ldrb	r3, [r7, #11]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40022000 	.word	0x40022000
 8003f40:	40021000 	.word	0x40021000
 8003f44:	0800d71c 	.word	0x0800d71c
 8003f48:	20000004 	.word	0x20000004
 8003f4c:	20000008 	.word	0x20000008

08003f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b089      	sub	sp, #36	; 0x24
 8003f54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f5e:	4b3e      	ldr	r3, [pc, #248]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f68:	4b3b      	ldr	r3, [pc, #236]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0x34>
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b0c      	cmp	r3, #12
 8003f7c:	d121      	bne.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d11e      	bne.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f84:	4b34      	ldr	r3, [pc, #208]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f90:	4b31      	ldr	r3, [pc, #196]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	e005      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fa0:	4b2d      	ldr	r3, [pc, #180]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	091b      	lsrs	r3, r3, #4
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fac:	4a2b      	ldr	r2, [pc, #172]	; (800405c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10d      	bne.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d102      	bne.n	8003fce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fc8:	4b25      	ldr	r3, [pc, #148]	; (8004060 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fca:	61bb      	str	r3, [r7, #24]
 8003fcc:	e004      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fd4:	4b23      	ldr	r3, [pc, #140]	; (8004064 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	2b0c      	cmp	r3, #12
 8003fdc:	d134      	bne.n	8004048 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fde:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d003      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0xac>
 8003ff4:	e005      	b.n	8004002 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ff6:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ff8:	617b      	str	r3, [r7, #20]
      break;
 8003ffa:	e005      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ffc:	4b19      	ldr	r3, [pc, #100]	; (8004064 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ffe:	617b      	str	r3, [r7, #20]
      break;
 8004000:	e002      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	617b      	str	r3, [r7, #20]
      break;
 8004006:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	3301      	adds	r3, #1
 8004014:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004016:	4b10      	ldr	r3, [pc, #64]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	0a1b      	lsrs	r3, r3, #8
 800401c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	fb03 f202 	mul.w	r2, r3, r2
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	0e5b      	lsrs	r3, r3, #25
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	3301      	adds	r3, #1
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004048:	69bb      	ldr	r3, [r7, #24]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3724      	adds	r7, #36	; 0x24
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
 800405c:	0800d734 	.word	0x0800d734
 8004060:	00f42400 	.word	0x00f42400
 8004064:	007a1200 	.word	0x007a1200

08004068 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <HAL_RCC_GetHCLKFreq+0x14>)
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000004 	.word	0x20000004

08004080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004084:	f7ff fff0 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 8004088:	4602      	mov	r2, r0
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	0a1b      	lsrs	r3, r3, #8
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	4904      	ldr	r1, [pc, #16]	; (80040a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004096:	5ccb      	ldrb	r3, [r1, r3]
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000
 80040a8:	0800d72c 	.word	0x0800d72c

080040ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040b0:	f7ff ffda 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 80040b4:	4602      	mov	r2, r0
 80040b6:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	0adb      	lsrs	r3, r3, #11
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	4904      	ldr	r1, [pc, #16]	; (80040d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040c2:	5ccb      	ldrb	r3, [r1, r3]
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000
 80040d4:	0800d72c 	.word	0x0800d72c

080040d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	220f      	movs	r2, #15
 80040e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80040e8:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_RCC_GetClockConfig+0x5c>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 0203 	and.w	r2, r3, #3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80040f4:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <HAL_RCC_GetClockConfig+0x5c>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <HAL_RCC_GetClockConfig+0x5c>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <HAL_RCC_GetClockConfig+0x5c>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	08db      	lsrs	r3, r3, #3
 8004112:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <HAL_RCC_GetClockConfig+0x60>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0207 	and.w	r2, r3, #7
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	601a      	str	r2, [r3, #0]
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40021000 	.word	0x40021000
 8004138:	40022000 	.word	0x40022000

0800413c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004148:	4b2a      	ldr	r3, [pc, #168]	; (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800414a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004154:	f7ff f9bc 	bl	80034d0 <HAL_PWREx_GetVoltageRange>
 8004158:	6178      	str	r0, [r7, #20]
 800415a:	e014      	b.n	8004186 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800415c:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800415e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004160:	4a24      	ldr	r2, [pc, #144]	; (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004166:	6593      	str	r3, [r2, #88]	; 0x58
 8004168:	4b22      	ldr	r3, [pc, #136]	; (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800416a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004174:	f7ff f9ac 	bl	80034d0 <HAL_PWREx_GetVoltageRange>
 8004178:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800417a:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004184:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418c:	d10b      	bne.n	80041a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b80      	cmp	r3, #128	; 0x80
 8004192:	d919      	bls.n	80041c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2ba0      	cmp	r3, #160	; 0xa0
 8004198:	d902      	bls.n	80041a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800419a:	2302      	movs	r3, #2
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	e013      	b.n	80041c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041a0:	2301      	movs	r3, #1
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	e010      	b.n	80041c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b80      	cmp	r3, #128	; 0x80
 80041aa:	d902      	bls.n	80041b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041ac:	2303      	movs	r3, #3
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	e00a      	b.n	80041c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b80      	cmp	r3, #128	; 0x80
 80041b6:	d102      	bne.n	80041be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041b8:	2302      	movs	r3, #2
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	e004      	b.n	80041c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b70      	cmp	r3, #112	; 0x70
 80041c2:	d101      	bne.n	80041c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041c4:	2301      	movs	r3, #1
 80041c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f023 0207 	bic.w	r2, r3, #7
 80041d0:	4909      	ldr	r1, [pc, #36]	; (80041f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041d8:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d001      	beq.n	80041ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40022000 	.word	0x40022000

080041fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004204:	2300      	movs	r3, #0
 8004206:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004208:	2300      	movs	r3, #0
 800420a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004214:	2b00      	cmp	r3, #0
 8004216:	d041      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800421c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004220:	d02a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004222:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004226:	d824      	bhi.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800422c:	d008      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800422e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004232:	d81e      	bhi.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800423c:	d010      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800423e:	e018      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004240:	4b86      	ldr	r3, [pc, #536]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a85      	ldr	r2, [pc, #532]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800424c:	e015      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3304      	adds	r3, #4
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fabb 	bl	80047d0 <RCCEx_PLLSAI1_Config>
 800425a:	4603      	mov	r3, r0
 800425c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800425e:	e00c      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3320      	adds	r3, #32
 8004264:	2100      	movs	r1, #0
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fba6 	bl	80049b8 <RCCEx_PLLSAI2_Config>
 800426c:	4603      	mov	r3, r0
 800426e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004270:	e003      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	74fb      	strb	r3, [r7, #19]
      break;
 8004276:	e000      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800427a:	7cfb      	ldrb	r3, [r7, #19]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10b      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004280:	4b76      	ldr	r3, [pc, #472]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800428e:	4973      	ldr	r1, [pc, #460]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004296:	e001      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004298:	7cfb      	ldrb	r3, [r7, #19]
 800429a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d041      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042b0:	d02a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042b6:	d824      	bhi.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042bc:	d008      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042c2:	d81e      	bhi.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042cc:	d010      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042ce:	e018      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042d0:	4b62      	ldr	r3, [pc, #392]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4a61      	ldr	r2, [pc, #388]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042dc:	e015      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3304      	adds	r3, #4
 80042e2:	2100      	movs	r1, #0
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fa73 	bl	80047d0 <RCCEx_PLLSAI1_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042ee:	e00c      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3320      	adds	r3, #32
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fb5e 	bl	80049b8 <RCCEx_PLLSAI2_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004300:	e003      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	74fb      	strb	r3, [r7, #19]
      break;
 8004306:	e000      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10b      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004310:	4b52      	ldr	r3, [pc, #328]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800431e:	494f      	ldr	r1, [pc, #316]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004326:	e001      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004328:	7cfb      	ldrb	r3, [r7, #19]
 800432a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 80a0 	beq.w	800447a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800433a:	2300      	movs	r3, #0
 800433c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800433e:	4b47      	ldr	r3, [pc, #284]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800434e:	2300      	movs	r3, #0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00d      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004354:	4b41      	ldr	r3, [pc, #260]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004358:	4a40      	ldr	r2, [pc, #256]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435e:	6593      	str	r3, [r2, #88]	; 0x58
 8004360:	4b3e      	ldr	r3, [pc, #248]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800436c:	2301      	movs	r3, #1
 800436e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004370:	4b3b      	ldr	r3, [pc, #236]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a3a      	ldr	r2, [pc, #232]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800437c:	f7fd ffde 	bl	800233c <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004382:	e009      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004384:	f7fd ffda 	bl	800233c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d902      	bls.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	74fb      	strb	r3, [r7, #19]
        break;
 8004396:	e005      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004398:	4b31      	ldr	r3, [pc, #196]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0ef      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043a4:	7cfb      	ldrb	r3, [r7, #19]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d15c      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043aa:	4b2c      	ldr	r3, [pc, #176]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01f      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d019      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043c8:	4b24      	ldr	r3, [pc, #144]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043d4:	4b21      	ldr	r3, [pc, #132]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043da:	4a20      	ldr	r2, [pc, #128]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043e4:	4b1d      	ldr	r3, [pc, #116]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	4a1c      	ldr	r2, [pc, #112]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043f4:	4a19      	ldr	r2, [pc, #100]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d016      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fd ff99 	bl	800233c <HAL_GetTick>
 800440a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800440c:	e00b      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fd ff95 	bl	800233c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f241 3288 	movw	r2, #5000	; 0x1388
 800441c:	4293      	cmp	r3, r2
 800441e:	d902      	bls.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	74fb      	strb	r3, [r7, #19]
            break;
 8004424:	e006      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004426:	4b0d      	ldr	r3, [pc, #52]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0ec      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004434:	7cfb      	ldrb	r3, [r7, #19]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10c      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800443a:	4b08      	ldr	r3, [pc, #32]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800444a:	4904      	ldr	r1, [pc, #16]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004452:	e009      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004454:	7cfb      	ldrb	r3, [r7, #19]
 8004456:	74bb      	strb	r3, [r7, #18]
 8004458:	e006      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800445a:	bf00      	nop
 800445c:	40021000 	.word	0x40021000
 8004460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	7cfb      	ldrb	r3, [r7, #19]
 8004466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004468:	7c7b      	ldrb	r3, [r7, #17]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d105      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800446e:	4b9e      	ldr	r3, [pc, #632]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004472:	4a9d      	ldr	r2, [pc, #628]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004478:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004486:	4b98      	ldr	r3, [pc, #608]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	f023 0203 	bic.w	r2, r3, #3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	4994      	ldr	r1, [pc, #592]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044a8:	4b8f      	ldr	r3, [pc, #572]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f023 020c 	bic.w	r2, r3, #12
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b6:	498c      	ldr	r1, [pc, #560]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044ca:	4b87      	ldr	r3, [pc, #540]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	4983      	ldr	r1, [pc, #524]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044ec:	4b7e      	ldr	r3, [pc, #504]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	497b      	ldr	r1, [pc, #492]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800450e:	4b76      	ldr	r3, [pc, #472]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451c:	4972      	ldr	r1, [pc, #456]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004530:	4b6d      	ldr	r3, [pc, #436]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453e:	496a      	ldr	r1, [pc, #424]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004552:	4b65      	ldr	r3, [pc, #404]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004558:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004560:	4961      	ldr	r1, [pc, #388]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004574:	4b5c      	ldr	r3, [pc, #368]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004582:	4959      	ldr	r1, [pc, #356]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004596:	4b54      	ldr	r3, [pc, #336]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a4:	4950      	ldr	r1, [pc, #320]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045b8:	4b4b      	ldr	r3, [pc, #300]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c6:	4948      	ldr	r1, [pc, #288]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045da:	4b43      	ldr	r3, [pc, #268]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	493f      	ldr	r1, [pc, #252]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d028      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045fc:	4b3a      	ldr	r3, [pc, #232]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800460a:	4937      	ldr	r1, [pc, #220]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800461a:	d106      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800461c:	4b32      	ldr	r3, [pc, #200]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4a31      	ldr	r2, [pc, #196]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004626:	60d3      	str	r3, [r2, #12]
 8004628:	e011      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004632:	d10c      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3304      	adds	r3, #4
 8004638:	2101      	movs	r1, #1
 800463a:	4618      	mov	r0, r3
 800463c:	f000 f8c8 	bl	80047d0 <RCCEx_PLLSAI1_Config>
 8004640:	4603      	mov	r3, r0
 8004642:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004644:	7cfb      	ldrb	r3, [r7, #19]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800464a:	7cfb      	ldrb	r3, [r7, #19]
 800464c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d028      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800465a:	4b23      	ldr	r3, [pc, #140]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	491f      	ldr	r1, [pc, #124]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004678:	d106      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800467a:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	4a1a      	ldr	r2, [pc, #104]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004684:	60d3      	str	r3, [r2, #12]
 8004686:	e011      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004690:	d10c      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3304      	adds	r3, #4
 8004696:	2101      	movs	r1, #1
 8004698:	4618      	mov	r0, r3
 800469a:	f000 f899 	bl	80047d0 <RCCEx_PLLSAI1_Config>
 800469e:	4603      	mov	r3, r0
 80046a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046a2:	7cfb      	ldrb	r3, [r7, #19]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046a8:	7cfb      	ldrb	r3, [r7, #19]
 80046aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d02b      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c6:	4908      	ldr	r1, [pc, #32]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046d6:	d109      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d8:	4b03      	ldr	r3, [pc, #12]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4a02      	ldr	r2, [pc, #8]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046e2:	60d3      	str	r3, [r2, #12]
 80046e4:	e014      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046f4:	d10c      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3304      	adds	r3, #4
 80046fa:	2101      	movs	r1, #1
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 f867 	bl	80047d0 <RCCEx_PLLSAI1_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004706:	7cfb      	ldrb	r3, [r7, #19]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d02f      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800471c:	4b2b      	ldr	r3, [pc, #172]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800472a:	4928      	ldr	r1, [pc, #160]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800473a:	d10d      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3304      	adds	r3, #4
 8004740:	2102      	movs	r1, #2
 8004742:	4618      	mov	r0, r3
 8004744:	f000 f844 	bl	80047d0 <RCCEx_PLLSAI1_Config>
 8004748:	4603      	mov	r3, r0
 800474a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800474c:	7cfb      	ldrb	r3, [r7, #19]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d014      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004752:	7cfb      	ldrb	r3, [r7, #19]
 8004754:	74bb      	strb	r3, [r7, #18]
 8004756:	e011      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800475c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004760:	d10c      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3320      	adds	r3, #32
 8004766:	2102      	movs	r1, #2
 8004768:	4618      	mov	r0, r3
 800476a:	f000 f925 	bl	80049b8 <RCCEx_PLLSAI2_Config>
 800476e:	4603      	mov	r3, r0
 8004770:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004772:	7cfb      	ldrb	r3, [r7, #19]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004778:	7cfb      	ldrb	r3, [r7, #19]
 800477a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004788:	4b10      	ldr	r3, [pc, #64]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004796:	490d      	ldr	r1, [pc, #52]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047aa:	4b08      	ldr	r3, [pc, #32]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ba:	4904      	ldr	r1, [pc, #16]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000

080047d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047de:	4b75      	ldr	r3, [pc, #468]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d018      	beq.n	800481c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047ea:	4b72      	ldr	r3, [pc, #456]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0203 	and.w	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d10d      	bne.n	8004816 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
       ||
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004802:	4b6c      	ldr	r3, [pc, #432]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
       ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d047      	beq.n	80048a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	73fb      	strb	r3, [r7, #15]
 800481a:	e044      	b.n	80048a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b03      	cmp	r3, #3
 8004822:	d018      	beq.n	8004856 <RCCEx_PLLSAI1_Config+0x86>
 8004824:	2b03      	cmp	r3, #3
 8004826:	d825      	bhi.n	8004874 <RCCEx_PLLSAI1_Config+0xa4>
 8004828:	2b01      	cmp	r3, #1
 800482a:	d002      	beq.n	8004832 <RCCEx_PLLSAI1_Config+0x62>
 800482c:	2b02      	cmp	r3, #2
 800482e:	d009      	beq.n	8004844 <RCCEx_PLLSAI1_Config+0x74>
 8004830:	e020      	b.n	8004874 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004832:	4b60      	ldr	r3, [pc, #384]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d11d      	bne.n	800487a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004842:	e01a      	b.n	800487a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004844:	4b5b      	ldr	r3, [pc, #364]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d116      	bne.n	800487e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004854:	e013      	b.n	800487e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004856:	4b57      	ldr	r3, [pc, #348]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10f      	bne.n	8004882 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004862:	4b54      	ldr	r3, [pc, #336]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004872:	e006      	b.n	8004882 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	73fb      	strb	r3, [r7, #15]
      break;
 8004878:	e004      	b.n	8004884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800487a:	bf00      	nop
 800487c:	e002      	b.n	8004884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800487e:	bf00      	nop
 8004880:	e000      	b.n	8004884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004882:	bf00      	nop
    }

    if(status == HAL_OK)
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10d      	bne.n	80048a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800488a:	4b4a      	ldr	r3, [pc, #296]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6819      	ldr	r1, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	3b01      	subs	r3, #1
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	430b      	orrs	r3, r1
 80048a0:	4944      	ldr	r1, [pc, #272]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d17d      	bne.n	80049a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048ac:	4b41      	ldr	r3, [pc, #260]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a40      	ldr	r2, [pc, #256]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b8:	f7fd fd40 	bl	800233c <HAL_GetTick>
 80048bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048be:	e009      	b.n	80048d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048c0:	f7fd fd3c 	bl	800233c <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d902      	bls.n	80048d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	73fb      	strb	r3, [r7, #15]
        break;
 80048d2:	e005      	b.n	80048e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048d4:	4b37      	ldr	r3, [pc, #220]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1ef      	bne.n	80048c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d160      	bne.n	80049a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d111      	bne.n	8004910 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ec:	4b31      	ldr	r3, [pc, #196]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6892      	ldr	r2, [r2, #8]
 80048fc:	0211      	lsls	r1, r2, #8
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	68d2      	ldr	r2, [r2, #12]
 8004902:	0912      	lsrs	r2, r2, #4
 8004904:	0452      	lsls	r2, r2, #17
 8004906:	430a      	orrs	r2, r1
 8004908:	492a      	ldr	r1, [pc, #168]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800490a:	4313      	orrs	r3, r2
 800490c:	610b      	str	r3, [r1, #16]
 800490e:	e027      	b.n	8004960 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d112      	bne.n	800493c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004916:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800491e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6892      	ldr	r2, [r2, #8]
 8004926:	0211      	lsls	r1, r2, #8
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6912      	ldr	r2, [r2, #16]
 800492c:	0852      	lsrs	r2, r2, #1
 800492e:	3a01      	subs	r2, #1
 8004930:	0552      	lsls	r2, r2, #21
 8004932:	430a      	orrs	r2, r1
 8004934:	491f      	ldr	r1, [pc, #124]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004936:	4313      	orrs	r3, r2
 8004938:	610b      	str	r3, [r1, #16]
 800493a:	e011      	b.n	8004960 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800493c:	4b1d      	ldr	r3, [pc, #116]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004944:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6892      	ldr	r2, [r2, #8]
 800494c:	0211      	lsls	r1, r2, #8
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6952      	ldr	r2, [r2, #20]
 8004952:	0852      	lsrs	r2, r2, #1
 8004954:	3a01      	subs	r2, #1
 8004956:	0652      	lsls	r2, r2, #25
 8004958:	430a      	orrs	r2, r1
 800495a:	4916      	ldr	r1, [pc, #88]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800495c:	4313      	orrs	r3, r2
 800495e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004960:	4b14      	ldr	r3, [pc, #80]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a13      	ldr	r2, [pc, #76]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004966:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800496a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fd fce6 	bl	800233c <HAL_GetTick>
 8004970:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004972:	e009      	b.n	8004988 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004974:	f7fd fce2 	bl	800233c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d902      	bls.n	8004988 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	73fb      	strb	r3, [r7, #15]
          break;
 8004986:	e005      	b.n	8004994 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0ef      	beq.n	8004974 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	4904      	ldr	r1, [pc, #16]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40021000 	.word	0x40021000

080049b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049c6:	4b6a      	ldr	r3, [pc, #424]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d018      	beq.n	8004a04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049d2:	4b67      	ldr	r3, [pc, #412]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f003 0203 	and.w	r2, r3, #3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d10d      	bne.n	80049fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
       ||
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049ea:	4b61      	ldr	r3, [pc, #388]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	091b      	lsrs	r3, r3, #4
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
       ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d047      	beq.n	8004a8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]
 8004a02:	e044      	b.n	8004a8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d018      	beq.n	8004a3e <RCCEx_PLLSAI2_Config+0x86>
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d825      	bhi.n	8004a5c <RCCEx_PLLSAI2_Config+0xa4>
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d002      	beq.n	8004a1a <RCCEx_PLLSAI2_Config+0x62>
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d009      	beq.n	8004a2c <RCCEx_PLLSAI2_Config+0x74>
 8004a18:	e020      	b.n	8004a5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a1a:	4b55      	ldr	r3, [pc, #340]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d11d      	bne.n	8004a62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a2a:	e01a      	b.n	8004a62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a2c:	4b50      	ldr	r3, [pc, #320]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d116      	bne.n	8004a66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a3c:	e013      	b.n	8004a66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a3e:	4b4c      	ldr	r3, [pc, #304]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10f      	bne.n	8004a6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a4a:	4b49      	ldr	r3, [pc, #292]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a5a:	e006      	b.n	8004a6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a60:	e004      	b.n	8004a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a62:	bf00      	nop
 8004a64:	e002      	b.n	8004a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a66:	bf00      	nop
 8004a68:	e000      	b.n	8004a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10d      	bne.n	8004a8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a72:	4b3f      	ldr	r3, [pc, #252]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6819      	ldr	r1, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	430b      	orrs	r3, r1
 8004a88:	4939      	ldr	r1, [pc, #228]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d167      	bne.n	8004b64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a94:	4b36      	ldr	r3, [pc, #216]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a35      	ldr	r2, [pc, #212]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa0:	f7fd fc4c 	bl	800233c <HAL_GetTick>
 8004aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aa6:	e009      	b.n	8004abc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004aa8:	f7fd fc48 	bl	800233c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d902      	bls.n	8004abc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8004aba:	e005      	b.n	8004ac8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004abc:	4b2c      	ldr	r3, [pc, #176]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1ef      	bne.n	8004aa8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d14a      	bne.n	8004b64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d111      	bne.n	8004af8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ad4:	4b26      	ldr	r3, [pc, #152]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6892      	ldr	r2, [r2, #8]
 8004ae4:	0211      	lsls	r1, r2, #8
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	68d2      	ldr	r2, [r2, #12]
 8004aea:	0912      	lsrs	r2, r2, #4
 8004aec:	0452      	lsls	r2, r2, #17
 8004aee:	430a      	orrs	r2, r1
 8004af0:	491f      	ldr	r1, [pc, #124]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	614b      	str	r3, [r1, #20]
 8004af6:	e011      	b.n	8004b1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004af8:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6892      	ldr	r2, [r2, #8]
 8004b08:	0211      	lsls	r1, r2, #8
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6912      	ldr	r2, [r2, #16]
 8004b0e:	0852      	lsrs	r2, r2, #1
 8004b10:	3a01      	subs	r2, #1
 8004b12:	0652      	lsls	r2, r2, #25
 8004b14:	430a      	orrs	r2, r1
 8004b16:	4916      	ldr	r1, [pc, #88]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b1c:	4b14      	ldr	r3, [pc, #80]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a13      	ldr	r2, [pc, #76]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b28:	f7fd fc08 	bl	800233c <HAL_GetTick>
 8004b2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b2e:	e009      	b.n	8004b44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b30:	f7fd fc04 	bl	800233c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d902      	bls.n	8004b44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	73fb      	strb	r3, [r7, #15]
          break;
 8004b42:	e005      	b.n	8004b50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b44:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0ef      	beq.n	8004b30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	4904      	ldr	r1, [pc, #16]	; (8004b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40021000 	.word	0x40021000

08004b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e049      	b.n	8004c1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fd f98a 	bl	8001eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f000 fb02 	bl	80051bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d001      	beq.n	8004c3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e047      	b.n	8004ccc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a23      	ldr	r2, [pc, #140]	; (8004cd8 <HAL_TIM_Base_Start+0xb4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01d      	beq.n	8004c8a <HAL_TIM_Base_Start+0x66>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c56:	d018      	beq.n	8004c8a <HAL_TIM_Base_Start+0x66>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1f      	ldr	r2, [pc, #124]	; (8004cdc <HAL_TIM_Base_Start+0xb8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d013      	beq.n	8004c8a <HAL_TIM_Base_Start+0x66>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1e      	ldr	r2, [pc, #120]	; (8004ce0 <HAL_TIM_Base_Start+0xbc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00e      	beq.n	8004c8a <HAL_TIM_Base_Start+0x66>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <HAL_TIM_Base_Start+0xc0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d009      	beq.n	8004c8a <HAL_TIM_Base_Start+0x66>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <HAL_TIM_Base_Start+0xc4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_TIM_Base_Start+0x66>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a19      	ldr	r2, [pc, #100]	; (8004cec <HAL_TIM_Base_Start+0xc8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d115      	bne.n	8004cb6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <HAL_TIM_Base_Start+0xcc>)
 8004c92:	4013      	ands	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b06      	cmp	r3, #6
 8004c9a:	d015      	beq.n	8004cc8 <HAL_TIM_Base_Start+0xa4>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca2:	d011      	beq.n	8004cc8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	e008      	b.n	8004cc8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0201 	orr.w	r2, r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	e000      	b.n	8004cca <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40013400 	.word	0x40013400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	00010007 	.word	0x00010007

08004cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d001      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e04f      	b.n	8004dac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a23      	ldr	r2, [pc, #140]	; (8004db8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d01d      	beq.n	8004d6a <HAL_TIM_Base_Start_IT+0x76>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d36:	d018      	beq.n	8004d6a <HAL_TIM_Base_Start_IT+0x76>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1f      	ldr	r2, [pc, #124]	; (8004dbc <HAL_TIM_Base_Start_IT+0xc8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d013      	beq.n	8004d6a <HAL_TIM_Base_Start_IT+0x76>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1e      	ldr	r2, [pc, #120]	; (8004dc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00e      	beq.n	8004d6a <HAL_TIM_Base_Start_IT+0x76>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d009      	beq.n	8004d6a <HAL_TIM_Base_Start_IT+0x76>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1b      	ldr	r2, [pc, #108]	; (8004dc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d004      	beq.n	8004d6a <HAL_TIM_Base_Start_IT+0x76>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a19      	ldr	r2, [pc, #100]	; (8004dcc <HAL_TIM_Base_Start_IT+0xd8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d115      	bne.n	8004d96 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	4b17      	ldr	r3, [pc, #92]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b06      	cmp	r3, #6
 8004d7a:	d015      	beq.n	8004da8 <HAL_TIM_Base_Start_IT+0xb4>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d82:	d011      	beq.n	8004da8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d94:	e008      	b.n	8004da8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0201 	orr.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e000      	b.n	8004daa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	40013400 	.word	0x40013400
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	00010007 	.word	0x00010007

08004dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d020      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01b      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0202 	mvn.w	r2, #2
 8004e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f9ad 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 8004e24:	e005      	b.n	8004e32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f99f 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f9b0 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d020      	beq.n	8004e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01b      	beq.n	8004e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0204 	mvn.w	r2, #4
 8004e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f987 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 8004e70:	e005      	b.n	8004e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f979 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f98a 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d020      	beq.n	8004ed0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01b      	beq.n	8004ed0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0208 	mvn.w	r2, #8
 8004ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f961 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 8004ebc:	e005      	b.n	8004eca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f953 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f964 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f003 0310 	and.w	r3, r3, #16
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d020      	beq.n	8004f1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01b      	beq.n	8004f1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0210 	mvn.w	r2, #16
 8004eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2208      	movs	r2, #8
 8004ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f93b 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 8004f08:	e005      	b.n	8004f16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f92d 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f93e 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00c      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0201 	mvn.w	r2, #1
 8004f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fc ff1c 	bl	8001d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00c      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 faf2 	bl	8005548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00c      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 faea 	bl	800555c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00c      	beq.n	8004fac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f8fd 	bl	80051a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00c      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0220 	mvn.w	r2, #32
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fab2 	bl	8005534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e0b6      	b.n	8005162 <HAL_TIM_ConfigClockSource+0x18a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005012:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800501e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005030:	d03e      	beq.n	80050b0 <HAL_TIM_ConfigClockSource+0xd8>
 8005032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005036:	f200 8087 	bhi.w	8005148 <HAL_TIM_ConfigClockSource+0x170>
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503e:	f000 8086 	beq.w	800514e <HAL_TIM_ConfigClockSource+0x176>
 8005042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005046:	d87f      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
 8005048:	2b70      	cmp	r3, #112	; 0x70
 800504a:	d01a      	beq.n	8005082 <HAL_TIM_ConfigClockSource+0xaa>
 800504c:	2b70      	cmp	r3, #112	; 0x70
 800504e:	d87b      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
 8005050:	2b60      	cmp	r3, #96	; 0x60
 8005052:	d050      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x11e>
 8005054:	2b60      	cmp	r3, #96	; 0x60
 8005056:	d877      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
 8005058:	2b50      	cmp	r3, #80	; 0x50
 800505a:	d03c      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0xfe>
 800505c:	2b50      	cmp	r3, #80	; 0x50
 800505e:	d873      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d058      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x13e>
 8005064:	2b40      	cmp	r3, #64	; 0x40
 8005066:	d86f      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
 8005068:	2b30      	cmp	r3, #48	; 0x30
 800506a:	d064      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x15e>
 800506c:	2b30      	cmp	r3, #48	; 0x30
 800506e:	d86b      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
 8005070:	2b20      	cmp	r3, #32
 8005072:	d060      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x15e>
 8005074:	2b20      	cmp	r3, #32
 8005076:	d867      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d05c      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x15e>
 800507c:	2b10      	cmp	r3, #16
 800507e:	d05a      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x15e>
 8005080:	e062      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005092:	f000 f9a7 	bl	80053e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	609a      	str	r2, [r3, #8]
      break;
 80050ae:	e04f      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050c0:	f000 f990 	bl	80053e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050d2:	609a      	str	r2, [r3, #8]
      break;
 80050d4:	e03c      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050e2:	461a      	mov	r2, r3
 80050e4:	f000 f904 	bl	80052f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2150      	movs	r1, #80	; 0x50
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 f95d 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 80050f4:	e02c      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005102:	461a      	mov	r2, r3
 8005104:	f000 f923 	bl	800534e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2160      	movs	r1, #96	; 0x60
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f94d 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 8005114:	e01c      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005122:	461a      	mov	r2, r3
 8005124:	f000 f8e4 	bl	80052f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2140      	movs	r1, #64	; 0x40
 800512e:	4618      	mov	r0, r3
 8005130:	f000 f93d 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 8005134:	e00c      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4619      	mov	r1, r3
 8005140:	4610      	mov	r0, r2
 8005142:	f000 f934 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 8005146:	e003      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	73fb      	strb	r3, [r7, #15]
      break;
 800514c:	e000      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800514e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005160:	7bfb      	ldrb	r3, [r7, #15]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a40      	ldr	r2, [pc, #256]	; (80052d0 <TIM_Base_SetConfig+0x114>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d013      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051da:	d00f      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3d      	ldr	r2, [pc, #244]	; (80052d4 <TIM_Base_SetConfig+0x118>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00b      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3c      	ldr	r2, [pc, #240]	; (80052d8 <TIM_Base_SetConfig+0x11c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d007      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a3b      	ldr	r2, [pc, #236]	; (80052dc <TIM_Base_SetConfig+0x120>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a3a      	ldr	r2, [pc, #232]	; (80052e0 <TIM_Base_SetConfig+0x124>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d108      	bne.n	800520e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2f      	ldr	r2, [pc, #188]	; (80052d0 <TIM_Base_SetConfig+0x114>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01f      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521c:	d01b      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2c      	ldr	r2, [pc, #176]	; (80052d4 <TIM_Base_SetConfig+0x118>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d017      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2b      	ldr	r2, [pc, #172]	; (80052d8 <TIM_Base_SetConfig+0x11c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <TIM_Base_SetConfig+0x120>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00f      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a29      	ldr	r2, [pc, #164]	; (80052e0 <TIM_Base_SetConfig+0x124>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00b      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a28      	ldr	r2, [pc, #160]	; (80052e4 <TIM_Base_SetConfig+0x128>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d007      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a27      	ldr	r2, [pc, #156]	; (80052e8 <TIM_Base_SetConfig+0x12c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d003      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a26      	ldr	r2, [pc, #152]	; (80052ec <TIM_Base_SetConfig+0x130>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d108      	bne.n	8005268 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a10      	ldr	r2, [pc, #64]	; (80052d0 <TIM_Base_SetConfig+0x114>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00f      	beq.n	80052b4 <TIM_Base_SetConfig+0xf8>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <TIM_Base_SetConfig+0x124>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00b      	beq.n	80052b4 <TIM_Base_SetConfig+0xf8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a11      	ldr	r2, [pc, #68]	; (80052e4 <TIM_Base_SetConfig+0x128>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d007      	beq.n	80052b4 <TIM_Base_SetConfig+0xf8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <TIM_Base_SetConfig+0x12c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d003      	beq.n	80052b4 <TIM_Base_SetConfig+0xf8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a0f      	ldr	r2, [pc, #60]	; (80052ec <TIM_Base_SetConfig+0x130>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d103      	bne.n	80052bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	615a      	str	r2, [r3, #20]
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800
 80052dc:	40000c00 	.word	0x40000c00
 80052e0:	40013400 	.word	0x40013400
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800

080052f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f023 0201 	bic.w	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800531a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f023 030a 	bic.w	r3, r3, #10
 800532c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	621a      	str	r2, [r3, #32]
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800534e:	b480      	push	{r7}
 8005350:	b087      	sub	sp, #28
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f023 0210 	bic.w	r2, r3, #16
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005378:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	031b      	lsls	r3, r3, #12
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800538a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	621a      	str	r2, [r3, #32]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f043 0307 	orr.w	r3, r3, #7
 80053d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	609a      	str	r2, [r3, #8]
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	021a      	lsls	r2, r3, #8
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	431a      	orrs	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4313      	orrs	r3, r2
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	609a      	str	r2, [r3, #8]
}
 8005418:	bf00      	nop
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005438:	2302      	movs	r3, #2
 800543a:	e068      	b.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a2e      	ldr	r2, [pc, #184]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d004      	beq.n	8005470 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a2d      	ldr	r2, [pc, #180]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d108      	bne.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005476:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005488:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1e      	ldr	r2, [pc, #120]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d01d      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ae:	d018      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1b      	ldr	r2, [pc, #108]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1a      	ldr	r2, [pc, #104]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00e      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a18      	ldr	r2, [pc, #96]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d009      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a13      	ldr	r2, [pc, #76]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d004      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a14      	ldr	r2, [pc, #80]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d10c      	bne.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40012c00 	.word	0x40012c00
 8005520:	40013400 	.word	0x40013400
 8005524:	40000400 	.word	0x40000400
 8005528:	40000800 	.word	0x40000800
 800552c:	40000c00 	.word	0x40000c00
 8005530:	40014000 	.word	0x40014000

08005534 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e040      	b.n	8005604 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fc fcac 	bl	8001ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2224      	movs	r2, #36	; 0x24
 800559c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0201 	bic.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fb6a 	bl	8005c90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f8af 	bl	8005720 <UART_SetConfig>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e01b      	b.n	8005604 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fbe9 	bl	8005dd4 <UART_CheckIdleState>
 8005602:	4603      	mov	r3, r0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08a      	sub	sp, #40	; 0x28
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	4613      	mov	r3, r2
 800561a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005620:	2b20      	cmp	r3, #32
 8005622:	d178      	bne.n	8005716 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_UART_Transmit+0x24>
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e071      	b.n	8005718 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2221      	movs	r2, #33	; 0x21
 8005640:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005642:	f7fc fe7b 	bl	800233c <HAL_GetTick>
 8005646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	88fa      	ldrh	r2, [r7, #6]
 800564c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005660:	d108      	bne.n	8005674 <HAL_UART_Transmit+0x68>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d104      	bne.n	8005674 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	e003      	b.n	800567c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005678:	2300      	movs	r3, #0
 800567a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800567c:	e030      	b.n	80056e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2200      	movs	r2, #0
 8005686:	2180      	movs	r1, #128	; 0x80
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 fc4b 	bl	8005f24 <UART_WaitOnFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d004      	beq.n	800569e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2220      	movs	r2, #32
 8005698:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e03c      	b.n	8005718 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10b      	bne.n	80056bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	881a      	ldrh	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b0:	b292      	uxth	r2, r2
 80056b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	3302      	adds	r3, #2
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	e008      	b.n	80056ce <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	781a      	ldrb	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	b292      	uxth	r2, r2
 80056c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	3301      	adds	r3, #1
 80056cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1c8      	bne.n	800567e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2200      	movs	r2, #0
 80056f4:	2140      	movs	r1, #64	; 0x40
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 fc14 	bl	8005f24 <UART_WaitOnFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d004      	beq.n	800570c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e005      	b.n	8005718 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2220      	movs	r2, #32
 8005710:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	e000      	b.n	8005718 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005716:	2302      	movs	r3, #2
  }
}
 8005718:	4618      	mov	r0, r3
 800571a:	3720      	adds	r7, #32
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005724:	b08a      	sub	sp, #40	; 0x28
 8005726:	af00      	add	r7, sp, #0
 8005728:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	431a      	orrs	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	431a      	orrs	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	4313      	orrs	r3, r2
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4ba4      	ldr	r3, [pc, #656]	; (80059e0 <UART_SetConfig+0x2c0>)
 8005750:	4013      	ands	r3, r2
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	6812      	ldr	r2, [r2, #0]
 8005756:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005758:	430b      	orrs	r3, r1
 800575a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a99      	ldr	r2, [pc, #612]	; (80059e4 <UART_SetConfig+0x2c4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d004      	beq.n	800578c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005788:	4313      	orrs	r3, r2
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579c:	430a      	orrs	r2, r1
 800579e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a90      	ldr	r2, [pc, #576]	; (80059e8 <UART_SetConfig+0x2c8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d126      	bne.n	80057f8 <UART_SetConfig+0xd8>
 80057aa:	4b90      	ldr	r3, [pc, #576]	; (80059ec <UART_SetConfig+0x2cc>)
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b0:	f003 0303 	and.w	r3, r3, #3
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d81b      	bhi.n	80057f0 <UART_SetConfig+0xd0>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <UART_SetConfig+0xa0>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	080057e1 	.word	0x080057e1
 80057c8:	080057d9 	.word	0x080057d9
 80057cc:	080057e9 	.word	0x080057e9
 80057d0:	2301      	movs	r3, #1
 80057d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057d6:	e116      	b.n	8005a06 <UART_SetConfig+0x2e6>
 80057d8:	2302      	movs	r3, #2
 80057da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057de:	e112      	b.n	8005a06 <UART_SetConfig+0x2e6>
 80057e0:	2304      	movs	r3, #4
 80057e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e6:	e10e      	b.n	8005a06 <UART_SetConfig+0x2e6>
 80057e8:	2308      	movs	r3, #8
 80057ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ee:	e10a      	b.n	8005a06 <UART_SetConfig+0x2e6>
 80057f0:	2310      	movs	r3, #16
 80057f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f6:	e106      	b.n	8005a06 <UART_SetConfig+0x2e6>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a7c      	ldr	r2, [pc, #496]	; (80059f0 <UART_SetConfig+0x2d0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d138      	bne.n	8005874 <UART_SetConfig+0x154>
 8005802:	4b7a      	ldr	r3, [pc, #488]	; (80059ec <UART_SetConfig+0x2cc>)
 8005804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005808:	f003 030c 	and.w	r3, r3, #12
 800580c:	2b0c      	cmp	r3, #12
 800580e:	d82d      	bhi.n	800586c <UART_SetConfig+0x14c>
 8005810:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <UART_SetConfig+0xf8>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	0800584d 	.word	0x0800584d
 800581c:	0800586d 	.word	0x0800586d
 8005820:	0800586d 	.word	0x0800586d
 8005824:	0800586d 	.word	0x0800586d
 8005828:	0800585d 	.word	0x0800585d
 800582c:	0800586d 	.word	0x0800586d
 8005830:	0800586d 	.word	0x0800586d
 8005834:	0800586d 	.word	0x0800586d
 8005838:	08005855 	.word	0x08005855
 800583c:	0800586d 	.word	0x0800586d
 8005840:	0800586d 	.word	0x0800586d
 8005844:	0800586d 	.word	0x0800586d
 8005848:	08005865 	.word	0x08005865
 800584c:	2300      	movs	r3, #0
 800584e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005852:	e0d8      	b.n	8005a06 <UART_SetConfig+0x2e6>
 8005854:	2302      	movs	r3, #2
 8005856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585a:	e0d4      	b.n	8005a06 <UART_SetConfig+0x2e6>
 800585c:	2304      	movs	r3, #4
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005862:	e0d0      	b.n	8005a06 <UART_SetConfig+0x2e6>
 8005864:	2308      	movs	r3, #8
 8005866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800586a:	e0cc      	b.n	8005a06 <UART_SetConfig+0x2e6>
 800586c:	2310      	movs	r3, #16
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005872:	e0c8      	b.n	8005a06 <UART_SetConfig+0x2e6>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a5e      	ldr	r2, [pc, #376]	; (80059f4 <UART_SetConfig+0x2d4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d125      	bne.n	80058ca <UART_SetConfig+0x1aa>
 800587e:	4b5b      	ldr	r3, [pc, #364]	; (80059ec <UART_SetConfig+0x2cc>)
 8005880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005884:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005888:	2b30      	cmp	r3, #48	; 0x30
 800588a:	d016      	beq.n	80058ba <UART_SetConfig+0x19a>
 800588c:	2b30      	cmp	r3, #48	; 0x30
 800588e:	d818      	bhi.n	80058c2 <UART_SetConfig+0x1a2>
 8005890:	2b20      	cmp	r3, #32
 8005892:	d00a      	beq.n	80058aa <UART_SetConfig+0x18a>
 8005894:	2b20      	cmp	r3, #32
 8005896:	d814      	bhi.n	80058c2 <UART_SetConfig+0x1a2>
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <UART_SetConfig+0x182>
 800589c:	2b10      	cmp	r3, #16
 800589e:	d008      	beq.n	80058b2 <UART_SetConfig+0x192>
 80058a0:	e00f      	b.n	80058c2 <UART_SetConfig+0x1a2>
 80058a2:	2300      	movs	r3, #0
 80058a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a8:	e0ad      	b.n	8005a06 <UART_SetConfig+0x2e6>
 80058aa:	2302      	movs	r3, #2
 80058ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b0:	e0a9      	b.n	8005a06 <UART_SetConfig+0x2e6>
 80058b2:	2304      	movs	r3, #4
 80058b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b8:	e0a5      	b.n	8005a06 <UART_SetConfig+0x2e6>
 80058ba:	2308      	movs	r3, #8
 80058bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058c0:	e0a1      	b.n	8005a06 <UART_SetConfig+0x2e6>
 80058c2:	2310      	movs	r3, #16
 80058c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058c8:	e09d      	b.n	8005a06 <UART_SetConfig+0x2e6>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a4a      	ldr	r2, [pc, #296]	; (80059f8 <UART_SetConfig+0x2d8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d125      	bne.n	8005920 <UART_SetConfig+0x200>
 80058d4:	4b45      	ldr	r3, [pc, #276]	; (80059ec <UART_SetConfig+0x2cc>)
 80058d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058de:	2bc0      	cmp	r3, #192	; 0xc0
 80058e0:	d016      	beq.n	8005910 <UART_SetConfig+0x1f0>
 80058e2:	2bc0      	cmp	r3, #192	; 0xc0
 80058e4:	d818      	bhi.n	8005918 <UART_SetConfig+0x1f8>
 80058e6:	2b80      	cmp	r3, #128	; 0x80
 80058e8:	d00a      	beq.n	8005900 <UART_SetConfig+0x1e0>
 80058ea:	2b80      	cmp	r3, #128	; 0x80
 80058ec:	d814      	bhi.n	8005918 <UART_SetConfig+0x1f8>
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <UART_SetConfig+0x1d8>
 80058f2:	2b40      	cmp	r3, #64	; 0x40
 80058f4:	d008      	beq.n	8005908 <UART_SetConfig+0x1e8>
 80058f6:	e00f      	b.n	8005918 <UART_SetConfig+0x1f8>
 80058f8:	2300      	movs	r3, #0
 80058fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058fe:	e082      	b.n	8005a06 <UART_SetConfig+0x2e6>
 8005900:	2302      	movs	r3, #2
 8005902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005906:	e07e      	b.n	8005a06 <UART_SetConfig+0x2e6>
 8005908:	2304      	movs	r3, #4
 800590a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800590e:	e07a      	b.n	8005a06 <UART_SetConfig+0x2e6>
 8005910:	2308      	movs	r3, #8
 8005912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005916:	e076      	b.n	8005a06 <UART_SetConfig+0x2e6>
 8005918:	2310      	movs	r3, #16
 800591a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800591e:	e072      	b.n	8005a06 <UART_SetConfig+0x2e6>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a35      	ldr	r2, [pc, #212]	; (80059fc <UART_SetConfig+0x2dc>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d12a      	bne.n	8005980 <UART_SetConfig+0x260>
 800592a:	4b30      	ldr	r3, [pc, #192]	; (80059ec <UART_SetConfig+0x2cc>)
 800592c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005938:	d01a      	beq.n	8005970 <UART_SetConfig+0x250>
 800593a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800593e:	d81b      	bhi.n	8005978 <UART_SetConfig+0x258>
 8005940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005944:	d00c      	beq.n	8005960 <UART_SetConfig+0x240>
 8005946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594a:	d815      	bhi.n	8005978 <UART_SetConfig+0x258>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <UART_SetConfig+0x238>
 8005950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005954:	d008      	beq.n	8005968 <UART_SetConfig+0x248>
 8005956:	e00f      	b.n	8005978 <UART_SetConfig+0x258>
 8005958:	2300      	movs	r3, #0
 800595a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595e:	e052      	b.n	8005a06 <UART_SetConfig+0x2e6>
 8005960:	2302      	movs	r3, #2
 8005962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005966:	e04e      	b.n	8005a06 <UART_SetConfig+0x2e6>
 8005968:	2304      	movs	r3, #4
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596e:	e04a      	b.n	8005a06 <UART_SetConfig+0x2e6>
 8005970:	2308      	movs	r3, #8
 8005972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005976:	e046      	b.n	8005a06 <UART_SetConfig+0x2e6>
 8005978:	2310      	movs	r3, #16
 800597a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800597e:	e042      	b.n	8005a06 <UART_SetConfig+0x2e6>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <UART_SetConfig+0x2c4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d13a      	bne.n	8005a00 <UART_SetConfig+0x2e0>
 800598a:	4b18      	ldr	r3, [pc, #96]	; (80059ec <UART_SetConfig+0x2cc>)
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005990:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005994:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005998:	d01a      	beq.n	80059d0 <UART_SetConfig+0x2b0>
 800599a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800599e:	d81b      	bhi.n	80059d8 <UART_SetConfig+0x2b8>
 80059a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a4:	d00c      	beq.n	80059c0 <UART_SetConfig+0x2a0>
 80059a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059aa:	d815      	bhi.n	80059d8 <UART_SetConfig+0x2b8>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <UART_SetConfig+0x298>
 80059b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b4:	d008      	beq.n	80059c8 <UART_SetConfig+0x2a8>
 80059b6:	e00f      	b.n	80059d8 <UART_SetConfig+0x2b8>
 80059b8:	2300      	movs	r3, #0
 80059ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059be:	e022      	b.n	8005a06 <UART_SetConfig+0x2e6>
 80059c0:	2302      	movs	r3, #2
 80059c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c6:	e01e      	b.n	8005a06 <UART_SetConfig+0x2e6>
 80059c8:	2304      	movs	r3, #4
 80059ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ce:	e01a      	b.n	8005a06 <UART_SetConfig+0x2e6>
 80059d0:	2308      	movs	r3, #8
 80059d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d6:	e016      	b.n	8005a06 <UART_SetConfig+0x2e6>
 80059d8:	2310      	movs	r3, #16
 80059da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059de:	e012      	b.n	8005a06 <UART_SetConfig+0x2e6>
 80059e0:	efff69f3 	.word	0xefff69f3
 80059e4:	40008000 	.word	0x40008000
 80059e8:	40013800 	.word	0x40013800
 80059ec:	40021000 	.word	0x40021000
 80059f0:	40004400 	.word	0x40004400
 80059f4:	40004800 	.word	0x40004800
 80059f8:	40004c00 	.word	0x40004c00
 80059fc:	40005000 	.word	0x40005000
 8005a00:	2310      	movs	r3, #16
 8005a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a9f      	ldr	r2, [pc, #636]	; (8005c88 <UART_SetConfig+0x568>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d17a      	bne.n	8005b06 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d824      	bhi.n	8005a62 <UART_SetConfig+0x342>
 8005a18:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <UART_SetConfig+0x300>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005a45 	.word	0x08005a45
 8005a24:	08005a63 	.word	0x08005a63
 8005a28:	08005a4d 	.word	0x08005a4d
 8005a2c:	08005a63 	.word	0x08005a63
 8005a30:	08005a53 	.word	0x08005a53
 8005a34:	08005a63 	.word	0x08005a63
 8005a38:	08005a63 	.word	0x08005a63
 8005a3c:	08005a63 	.word	0x08005a63
 8005a40:	08005a5b 	.word	0x08005a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a44:	f7fe fb1c 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 8005a48:	61f8      	str	r0, [r7, #28]
        break;
 8005a4a:	e010      	b.n	8005a6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a4c:	4b8f      	ldr	r3, [pc, #572]	; (8005c8c <UART_SetConfig+0x56c>)
 8005a4e:	61fb      	str	r3, [r7, #28]
        break;
 8005a50:	e00d      	b.n	8005a6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a52:	f7fe fa7d 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8005a56:	61f8      	str	r0, [r7, #28]
        break;
 8005a58:	e009      	b.n	8005a6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a5e:	61fb      	str	r3, [r7, #28]
        break;
 8005a60:	e005      	b.n	8005a6e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80fb 	beq.w	8005c6c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	4413      	add	r3, r2
 8005a80:	69fa      	ldr	r2, [r7, #28]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d305      	bcc.n	8005a92 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d903      	bls.n	8005a9a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a98:	e0e8      	b.n	8005c6c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	461c      	mov	r4, r3
 8005aa0:	4615      	mov	r5, r2
 8005aa2:	f04f 0200 	mov.w	r2, #0
 8005aa6:	f04f 0300 	mov.w	r3, #0
 8005aaa:	022b      	lsls	r3, r5, #8
 8005aac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ab0:	0222      	lsls	r2, r4, #8
 8005ab2:	68f9      	ldr	r1, [r7, #12]
 8005ab4:	6849      	ldr	r1, [r1, #4]
 8005ab6:	0849      	lsrs	r1, r1, #1
 8005ab8:	2000      	movs	r0, #0
 8005aba:	4688      	mov	r8, r1
 8005abc:	4681      	mov	r9, r0
 8005abe:	eb12 0a08 	adds.w	sl, r2, r8
 8005ac2:	eb43 0b09 	adc.w	fp, r3, r9
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	603b      	str	r3, [r7, #0]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad4:	4650      	mov	r0, sl
 8005ad6:	4659      	mov	r1, fp
 8005ad8:	f7fb f8d6 	bl	8000c88 <__aeabi_uldivmod>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aea:	d308      	bcc.n	8005afe <UART_SetConfig+0x3de>
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af2:	d204      	bcs.n	8005afe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	60da      	str	r2, [r3, #12]
 8005afc:	e0b6      	b.n	8005c6c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b04:	e0b2      	b.n	8005c6c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b0e:	d15e      	bne.n	8005bce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005b10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d828      	bhi.n	8005b6a <UART_SetConfig+0x44a>
 8005b18:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <UART_SetConfig+0x400>)
 8005b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005b45 	.word	0x08005b45
 8005b24:	08005b4d 	.word	0x08005b4d
 8005b28:	08005b55 	.word	0x08005b55
 8005b2c:	08005b6b 	.word	0x08005b6b
 8005b30:	08005b5b 	.word	0x08005b5b
 8005b34:	08005b6b 	.word	0x08005b6b
 8005b38:	08005b6b 	.word	0x08005b6b
 8005b3c:	08005b6b 	.word	0x08005b6b
 8005b40:	08005b63 	.word	0x08005b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b44:	f7fe fa9c 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 8005b48:	61f8      	str	r0, [r7, #28]
        break;
 8005b4a:	e014      	b.n	8005b76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b4c:	f7fe faae 	bl	80040ac <HAL_RCC_GetPCLK2Freq>
 8005b50:	61f8      	str	r0, [r7, #28]
        break;
 8005b52:	e010      	b.n	8005b76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b54:	4b4d      	ldr	r3, [pc, #308]	; (8005c8c <UART_SetConfig+0x56c>)
 8005b56:	61fb      	str	r3, [r7, #28]
        break;
 8005b58:	e00d      	b.n	8005b76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b5a:	f7fe f9f9 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8005b5e:	61f8      	str	r0, [r7, #28]
        break;
 8005b60:	e009      	b.n	8005b76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b66:	61fb      	str	r3, [r7, #28]
        break;
 8005b68:	e005      	b.n	8005b76 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d077      	beq.n	8005c6c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	005a      	lsls	r2, r3, #1
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	085b      	lsrs	r3, r3, #1
 8005b86:	441a      	add	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b0f      	cmp	r3, #15
 8005b96:	d916      	bls.n	8005bc6 <UART_SetConfig+0x4a6>
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b9e:	d212      	bcs.n	8005bc6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f023 030f 	bic.w	r3, r3, #15
 8005ba8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	085b      	lsrs	r3, r3, #1
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	8afb      	ldrh	r3, [r7, #22]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	8afa      	ldrh	r2, [r7, #22]
 8005bc2:	60da      	str	r2, [r3, #12]
 8005bc4:	e052      	b.n	8005c6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bcc:	e04e      	b.n	8005c6c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d827      	bhi.n	8005c26 <UART_SetConfig+0x506>
 8005bd6:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <UART_SetConfig+0x4bc>)
 8005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bdc:	08005c01 	.word	0x08005c01
 8005be0:	08005c09 	.word	0x08005c09
 8005be4:	08005c11 	.word	0x08005c11
 8005be8:	08005c27 	.word	0x08005c27
 8005bec:	08005c17 	.word	0x08005c17
 8005bf0:	08005c27 	.word	0x08005c27
 8005bf4:	08005c27 	.word	0x08005c27
 8005bf8:	08005c27 	.word	0x08005c27
 8005bfc:	08005c1f 	.word	0x08005c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c00:	f7fe fa3e 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 8005c04:	61f8      	str	r0, [r7, #28]
        break;
 8005c06:	e014      	b.n	8005c32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c08:	f7fe fa50 	bl	80040ac <HAL_RCC_GetPCLK2Freq>
 8005c0c:	61f8      	str	r0, [r7, #28]
        break;
 8005c0e:	e010      	b.n	8005c32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c10:	4b1e      	ldr	r3, [pc, #120]	; (8005c8c <UART_SetConfig+0x56c>)
 8005c12:	61fb      	str	r3, [r7, #28]
        break;
 8005c14:	e00d      	b.n	8005c32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c16:	f7fe f99b 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8005c1a:	61f8      	str	r0, [r7, #28]
        break;
 8005c1c:	e009      	b.n	8005c32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c22:	61fb      	str	r3, [r7, #28]
        break;
 8005c24:	e005      	b.n	8005c32 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c30:	bf00      	nop
    }

    if (pclk != 0U)
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d019      	beq.n	8005c6c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	085a      	lsrs	r2, r3, #1
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	441a      	add	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b0f      	cmp	r3, #15
 8005c50:	d909      	bls.n	8005c66 <UART_SetConfig+0x546>
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c58:	d205      	bcs.n	8005c66 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60da      	str	r2, [r3, #12]
 8005c64:	e002      	b.n	8005c6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3728      	adds	r7, #40	; 0x28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c86:	bf00      	nop
 8005c88:	40008000 	.word	0x40008000
 8005c8c:	00f42400 	.word	0x00f42400

08005c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01a      	beq.n	8005da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d8e:	d10a      	bne.n	8005da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
  }
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b098      	sub	sp, #96	; 0x60
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005de4:	f7fc faaa 	bl	800233c <HAL_GetTick>
 8005de8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0308 	and.w	r3, r3, #8
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d12e      	bne.n	8005e56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e00:	2200      	movs	r2, #0
 8005e02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f88c 	bl	8005f24 <UART_WaitOnFlagUntilTimeout>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d021      	beq.n	8005e56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	e853 3f00 	ldrex	r3, [r3]
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e26:	653b      	str	r3, [r7, #80]	; 0x50
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e30:	647b      	str	r3, [r7, #68]	; 0x44
 8005e32:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e6      	bne.n	8005e12 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e062      	b.n	8005f1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d149      	bne.n	8005ef8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f856 	bl	8005f24 <UART_WaitOnFlagUntilTimeout>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d03c      	beq.n	8005ef8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e9c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e6      	bne.n	8005e7e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0301 	bic.w	r3, r3, #1
 8005ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ed0:	61fa      	str	r2, [r7, #28]
 8005ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	69b9      	ldr	r1, [r7, #24]
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e5      	bne.n	8005eb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e011      	b.n	8005f1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3758      	adds	r7, #88	; 0x58
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	603b      	str	r3, [r7, #0]
 8005f30:	4613      	mov	r3, r2
 8005f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f34:	e049      	b.n	8005fca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f3c:	d045      	beq.n	8005fca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3e:	f7fc f9fd 	bl	800233c <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d302      	bcc.n	8005f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e048      	b.n	8005fea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d031      	beq.n	8005fca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d110      	bne.n	8005f96 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2208      	movs	r2, #8
 8005f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 f838 	bl	8005ff2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2208      	movs	r2, #8
 8005f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e029      	b.n	8005fea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa4:	d111      	bne.n	8005fca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f81e 	bl	8005ff2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e00f      	b.n	8005fea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69da      	ldr	r2, [r3, #28]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	bf0c      	ite	eq
 8005fda:	2301      	moveq	r3, #1
 8005fdc:	2300      	movne	r3, #0
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d0a6      	beq.n	8005f36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b095      	sub	sp, #84	; 0x54
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006002:	e853 3f00 	ldrex	r3, [r3]
 8006006:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800600e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006018:	643b      	str	r3, [r7, #64]	; 0x40
 800601a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800601e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006020:	e841 2300 	strex	r3, r2, [r1]
 8006024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1e6      	bne.n	8005ffa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3308      	adds	r3, #8
 8006032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	61fb      	str	r3, [r7, #28]
   return(result);
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	f023 0301 	bic.w	r3, r3, #1
 8006042:	64bb      	str	r3, [r7, #72]	; 0x48
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3308      	adds	r3, #8
 800604a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800604c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800604e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e5      	bne.n	800602c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006064:	2b01      	cmp	r3, #1
 8006066:	d118      	bne.n	800609a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	60bb      	str	r3, [r7, #8]
   return(result);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f023 0310 	bic.w	r3, r3, #16
 800607c:	647b      	str	r3, [r7, #68]	; 0x44
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	6979      	ldr	r1, [r7, #20]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	e841 2300 	strex	r3, r2, [r1]
 8006092:	613b      	str	r3, [r7, #16]
   return(result);
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e6      	bne.n	8006068 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	669a      	str	r2, [r3, #104]	; 0x68
}
 80060ae:	bf00      	nop
 80060b0:	3754      	adds	r7, #84	; 0x54
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
	...

080060bc <__NVIC_SetPriority>:
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	4603      	mov	r3, r0
 80060c4:	6039      	str	r1, [r7, #0]
 80060c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	db0a      	blt.n	80060e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	490c      	ldr	r1, [pc, #48]	; (8006108 <__NVIC_SetPriority+0x4c>)
 80060d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060da:	0112      	lsls	r2, r2, #4
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	440b      	add	r3, r1
 80060e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80060e4:	e00a      	b.n	80060fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	4908      	ldr	r1, [pc, #32]	; (800610c <__NVIC_SetPriority+0x50>)
 80060ec:	79fb      	ldrb	r3, [r7, #7]
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	3b04      	subs	r3, #4
 80060f4:	0112      	lsls	r2, r2, #4
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	440b      	add	r3, r1
 80060fa:	761a      	strb	r2, [r3, #24]
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	e000e100 	.word	0xe000e100
 800610c:	e000ed00 	.word	0xe000ed00

08006110 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006114:	4b05      	ldr	r3, [pc, #20]	; (800612c <SysTick_Handler+0x1c>)
 8006116:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006118:	f001 fcd8 	bl	8007acc <xTaskGetSchedulerState>
 800611c:	4603      	mov	r3, r0
 800611e:	2b01      	cmp	r3, #1
 8006120:	d001      	beq.n	8006126 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006122:	f002 fac1 	bl	80086a8 <xPortSysTickHandler>
  }
}
 8006126:	bf00      	nop
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	e000e010 	.word	0xe000e010

08006130 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006134:	2100      	movs	r1, #0
 8006136:	f06f 0004 	mvn.w	r0, #4
 800613a:	f7ff ffbf 	bl	80060bc <__NVIC_SetPriority>
#endif
}
 800613e:	bf00      	nop
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800614a:	f3ef 8305 	mrs	r3, IPSR
 800614e:	603b      	str	r3, [r7, #0]
  return(result);
 8006150:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006156:	f06f 0305 	mvn.w	r3, #5
 800615a:	607b      	str	r3, [r7, #4]
 800615c:	e00c      	b.n	8006178 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800615e:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <osKernelInitialize+0x44>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d105      	bne.n	8006172 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006166:	4b08      	ldr	r3, [pc, #32]	; (8006188 <osKernelInitialize+0x44>)
 8006168:	2201      	movs	r2, #1
 800616a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800616c:	2300      	movs	r3, #0
 800616e:	607b      	str	r3, [r7, #4]
 8006170:	e002      	b.n	8006178 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006176:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006178:	687b      	ldr	r3, [r7, #4]
}
 800617a:	4618      	mov	r0, r3
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	20000504 	.word	0x20000504

0800618c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006192:	f3ef 8305 	mrs	r3, IPSR
 8006196:	603b      	str	r3, [r7, #0]
  return(result);
 8006198:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800619e:	f06f 0305 	mvn.w	r3, #5
 80061a2:	607b      	str	r3, [r7, #4]
 80061a4:	e010      	b.n	80061c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80061a6:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <osKernelStart+0x48>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d109      	bne.n	80061c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80061ae:	f7ff ffbf 	bl	8006130 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80061b2:	4b08      	ldr	r3, [pc, #32]	; (80061d4 <osKernelStart+0x48>)
 80061b4:	2202      	movs	r2, #2
 80061b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80061b8:	f001 f82c 	bl	8007214 <vTaskStartScheduler>
      stat = osOK;
 80061bc:	2300      	movs	r3, #0
 80061be:	607b      	str	r3, [r7, #4]
 80061c0:	e002      	b.n	80061c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80061c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80061c8:	687b      	ldr	r3, [r7, #4]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000504 	.word	0x20000504

080061d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08e      	sub	sp, #56	; 0x38
 80061dc:	af04      	add	r7, sp, #16
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80061e4:	2300      	movs	r3, #0
 80061e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061e8:	f3ef 8305 	mrs	r3, IPSR
 80061ec:	617b      	str	r3, [r7, #20]
  return(result);
 80061ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d17e      	bne.n	80062f2 <osThreadNew+0x11a>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d07b      	beq.n	80062f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80061fa:	2380      	movs	r3, #128	; 0x80
 80061fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80061fe:	2318      	movs	r3, #24
 8006200:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800620a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d045      	beq.n	800629e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <osThreadNew+0x48>
        name = attr->name;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d008      	beq.n	8006246 <osThreadNew+0x6e>
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	2b38      	cmp	r3, #56	; 0x38
 8006238:	d805      	bhi.n	8006246 <osThreadNew+0x6e>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <osThreadNew+0x72>
        return (NULL);
 8006246:	2300      	movs	r3, #0
 8006248:	e054      	b.n	80062f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	089b      	lsrs	r3, r3, #2
 8006258:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00e      	beq.n	8006280 <osThreadNew+0xa8>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	2ba7      	cmp	r3, #167	; 0xa7
 8006268:	d90a      	bls.n	8006280 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800626e:	2b00      	cmp	r3, #0
 8006270:	d006      	beq.n	8006280 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <osThreadNew+0xa8>
        mem = 1;
 800627a:	2301      	movs	r3, #1
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	e010      	b.n	80062a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10c      	bne.n	80062a2 <osThreadNew+0xca>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d108      	bne.n	80062a2 <osThreadNew+0xca>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d104      	bne.n	80062a2 <osThreadNew+0xca>
          mem = 0;
 8006298:	2300      	movs	r3, #0
 800629a:	61bb      	str	r3, [r7, #24]
 800629c:	e001      	b.n	80062a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800629e:	2300      	movs	r3, #0
 80062a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d110      	bne.n	80062ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062b0:	9202      	str	r2, [sp, #8]
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6a3a      	ldr	r2, [r7, #32]
 80062bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fdf0 	bl	8006ea4 <xTaskCreateStatic>
 80062c4:	4603      	mov	r3, r0
 80062c6:	613b      	str	r3, [r7, #16]
 80062c8:	e013      	b.n	80062f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d110      	bne.n	80062f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	f107 0310 	add.w	r3, r7, #16
 80062d8:	9301      	str	r3, [sp, #4]
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 fe3b 	bl	8006f5e <xTaskCreate>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d001      	beq.n	80062f2 <osThreadNew+0x11a>
            hTask = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80062f2:	693b      	ldr	r3, [r7, #16]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3728      	adds	r7, #40	; 0x28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4a07      	ldr	r2, [pc, #28]	; (8006328 <vApplicationGetIdleTaskMemory+0x2c>)
 800630c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4a06      	ldr	r2, [pc, #24]	; (800632c <vApplicationGetIdleTaskMemory+0x30>)
 8006312:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2280      	movs	r2, #128	; 0x80
 8006318:	601a      	str	r2, [r3, #0]
}
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	20000508 	.word	0x20000508
 800632c:	200005b0 	.word	0x200005b0

08006330 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4a07      	ldr	r2, [pc, #28]	; (800635c <vApplicationGetTimerTaskMemory+0x2c>)
 8006340:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	4a06      	ldr	r2, [pc, #24]	; (8006360 <vApplicationGetTimerTaskMemory+0x30>)
 8006346:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800634e:	601a      	str	r2, [r3, #0]
}
 8006350:	bf00      	nop
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	200007b0 	.word	0x200007b0
 8006360:	20000858 	.word	0x20000858

08006364 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f103 0208 	add.w	r2, r3, #8
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800637c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f103 0208 	add.w	r2, r3, #8
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f103 0208 	add.w	r2, r3, #8
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063be:	b480      	push	{r7}
 80063c0:	b085      	sub	sp, #20
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	601a      	str	r2, [r3, #0]
}
 80063fa:	bf00      	nop
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006406:	b480      	push	{r7}
 8006408:	b085      	sub	sp, #20
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800641c:	d103      	bne.n	8006426 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e00c      	b.n	8006440 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3308      	adds	r3, #8
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	e002      	b.n	8006434 <vListInsert+0x2e>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	429a      	cmp	r2, r3
 800643e:	d2f6      	bcs.n	800642e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	601a      	str	r2, [r3, #0]
}
 800646c:	bf00      	nop
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6892      	ldr	r2, [r2, #8]
 800648e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6852      	ldr	r2, [r2, #4]
 8006498:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d103      	bne.n	80064ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	1e5a      	subs	r2, r3, #1
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80064f6:	f002 f845 	bl	8008584 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	68f9      	ldr	r1, [r7, #12]
 8006504:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	441a      	add	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006526:	3b01      	subs	r3, #1
 8006528:	68f9      	ldr	r1, [r7, #12]
 800652a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	441a      	add	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	22ff      	movs	r2, #255	; 0xff
 800653a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	22ff      	movs	r2, #255	; 0xff
 8006542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d114      	bne.n	8006576 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01a      	beq.n	800658a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3310      	adds	r3, #16
 8006558:	4618      	mov	r0, r3
 800655a:	f001 f8f5 	bl	8007748 <xTaskRemoveFromEventList>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d012      	beq.n	800658a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006564:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <xQueueGenericReset+0xcc>)
 8006566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	e009      	b.n	800658a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	3310      	adds	r3, #16
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff fef2 	bl	8006364 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3324      	adds	r3, #36	; 0x24
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff feed 	bl	8006364 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800658a:	f002 f82b 	bl	80085e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800658e:	2301      	movs	r3, #1
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	e000ed04 	.word	0xe000ed04

0800659c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08e      	sub	sp, #56	; 0x38
 80065a0:	af02      	add	r7, sp, #8
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <xQueueGenericCreateStatic+0x52>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <xQueueGenericCreateStatic+0x56>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e000      	b.n	80065f4 <xQueueGenericCreateStatic+0x58>
 80065f2:	2300      	movs	r3, #0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	623b      	str	r3, [r7, #32]
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d102      	bne.n	800661a <xQueueGenericCreateStatic+0x7e>
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <xQueueGenericCreateStatic+0x82>
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <xQueueGenericCreateStatic+0x84>
 800661e:	2300      	movs	r3, #0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	61fb      	str	r3, [r7, #28]
}
 8006636:	bf00      	nop
 8006638:	e7fe      	b.n	8006638 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800663a:	2350      	movs	r3, #80	; 0x50
 800663c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b50      	cmp	r3, #80	; 0x50
 8006642:	d00a      	beq.n	800665a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	61bb      	str	r3, [r7, #24]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800665a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00d      	beq.n	8006682 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800666e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	4613      	mov	r3, r2
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	68b9      	ldr	r1, [r7, #8]
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 f805 	bl	800668c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006684:	4618      	mov	r0, r3
 8006686:	3730      	adds	r7, #48	; 0x30
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d103      	bne.n	80066a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	e002      	b.n	80066ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80066ba:	2101      	movs	r1, #1
 80066bc:	69b8      	ldr	r0, [r7, #24]
 80066be:	f7ff ff05 	bl	80064cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	78fa      	ldrb	r2, [r7, #3]
 80066c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08e      	sub	sp, #56	; 0x38
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80066e2:	2300      	movs	r3, #0
 80066e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <xQueueGenericSend+0x32>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d103      	bne.n	8006714 <xQueueGenericSend+0x40>
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <xQueueGenericSend+0x44>
 8006714:	2301      	movs	r3, #1
 8006716:	e000      	b.n	800671a <xQueueGenericSend+0x46>
 8006718:	2300      	movs	r3, #0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10a      	bne.n	8006734 <xQueueGenericSend+0x60>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006730:	bf00      	nop
 8006732:	e7fe      	b.n	8006732 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d103      	bne.n	8006742 <xQueueGenericSend+0x6e>
 800673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <xQueueGenericSend+0x72>
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <xQueueGenericSend+0x74>
 8006746:	2300      	movs	r3, #0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <xQueueGenericSend+0x8e>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	623b      	str	r3, [r7, #32]
}
 800675e:	bf00      	nop
 8006760:	e7fe      	b.n	8006760 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006762:	f001 f9b3 	bl	8007acc <xTaskGetSchedulerState>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d102      	bne.n	8006772 <xQueueGenericSend+0x9e>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <xQueueGenericSend+0xa2>
 8006772:	2301      	movs	r3, #1
 8006774:	e000      	b.n	8006778 <xQueueGenericSend+0xa4>
 8006776:	2300      	movs	r3, #0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10a      	bne.n	8006792 <xQueueGenericSend+0xbe>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	61fb      	str	r3, [r7, #28]
}
 800678e:	bf00      	nop
 8006790:	e7fe      	b.n	8006790 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006792:	f001 fef7 	bl	8008584 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679e:	429a      	cmp	r2, r3
 80067a0:	d302      	bcc.n	80067a8 <xQueueGenericSend+0xd4>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d129      	bne.n	80067fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067ae:	f000 fa0b 	bl	8006bc8 <prvCopyDataToQueue>
 80067b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d010      	beq.n	80067de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067be:	3324      	adds	r3, #36	; 0x24
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 ffc1 	bl	8007748 <xTaskRemoveFromEventList>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d013      	beq.n	80067f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067cc:	4b3f      	ldr	r3, [pc, #252]	; (80068cc <xQueueGenericSend+0x1f8>)
 80067ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	e00a      	b.n	80067f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80067e4:	4b39      	ldr	r3, [pc, #228]	; (80068cc <xQueueGenericSend+0x1f8>)
 80067e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067f4:	f001 fef6 	bl	80085e4 <vPortExitCritical>
				return pdPASS;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e063      	b.n	80068c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d103      	bne.n	800680a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006802:	f001 feef 	bl	80085e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006806:	2300      	movs	r3, #0
 8006808:	e05c      	b.n	80068c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	2b00      	cmp	r3, #0
 800680e:	d106      	bne.n	800681e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006810:	f107 0314 	add.w	r3, r7, #20
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fffb 	bl	8007810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800681a:	2301      	movs	r3, #1
 800681c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800681e:	f001 fee1 	bl	80085e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006822:	f000 fd67 	bl	80072f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006826:	f001 fead 	bl	8008584 <vPortEnterCritical>
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006830:	b25b      	sxtb	r3, r3
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006836:	d103      	bne.n	8006840 <xQueueGenericSend+0x16c>
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006846:	b25b      	sxtb	r3, r3
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800684c:	d103      	bne.n	8006856 <xQueueGenericSend+0x182>
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006856:	f001 fec5 	bl	80085e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800685a:	1d3a      	adds	r2, r7, #4
 800685c:	f107 0314 	add.w	r3, r7, #20
 8006860:	4611      	mov	r1, r2
 8006862:	4618      	mov	r0, r3
 8006864:	f000 ffea 	bl	800783c <xTaskCheckForTimeOut>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d124      	bne.n	80068b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800686e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006870:	f000 faa2 	bl	8006db8 <prvIsQueueFull>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d018      	beq.n	80068ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	3310      	adds	r3, #16
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	4611      	mov	r1, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f000 ff10 	bl	80076a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800688a:	f000 fa2d 	bl	8006ce8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800688e:	f000 fd3f 	bl	8007310 <xTaskResumeAll>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	f47f af7c 	bne.w	8006792 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800689a:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <xQueueGenericSend+0x1f8>)
 800689c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	e772      	b.n	8006792 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80068ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068ae:	f000 fa1b 	bl	8006ce8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068b2:	f000 fd2d 	bl	8007310 <xTaskResumeAll>
 80068b6:	e76c      	b.n	8006792 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80068b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068ba:	f000 fa15 	bl	8006ce8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068be:	f000 fd27 	bl	8007310 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3738      	adds	r7, #56	; 0x38
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	e000ed04 	.word	0xe000ed04

080068d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b090      	sub	sp, #64	; 0x40
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d103      	bne.n	800690c <xQueueGenericSendFromISR+0x3c>
 8006904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <xQueueGenericSendFromISR+0x40>
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <xQueueGenericSendFromISR+0x42>
 8006910:	2300      	movs	r3, #0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10a      	bne.n	800692c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006928:	bf00      	nop
 800692a:	e7fe      	b.n	800692a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b02      	cmp	r3, #2
 8006930:	d103      	bne.n	800693a <xQueueGenericSendFromISR+0x6a>
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006936:	2b01      	cmp	r3, #1
 8006938:	d101      	bne.n	800693e <xQueueGenericSendFromISR+0x6e>
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <xQueueGenericSendFromISR+0x70>
 800693e:	2300      	movs	r3, #0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	623b      	str	r3, [r7, #32]
}
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800695a:	f001 fef5 	bl	8008748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800695e:	f3ef 8211 	mrs	r2, BASEPRI
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	61fa      	str	r2, [r7, #28]
 8006974:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006976:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006978:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800697a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006982:	429a      	cmp	r2, r3
 8006984:	d302      	bcc.n	800698c <xQueueGenericSendFromISR+0xbc>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d12f      	bne.n	80069ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069a2:	f000 f911 	bl	8006bc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80069a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ae:	d112      	bne.n	80069d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d016      	beq.n	80069e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	3324      	adds	r3, #36	; 0x24
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 fec3 	bl	8007748 <xTaskRemoveFromEventList>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00e      	beq.n	80069e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00b      	beq.n	80069e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	e007      	b.n	80069e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80069da:	3301      	adds	r3, #1
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	b25a      	sxtb	r2, r3
 80069e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80069e6:	2301      	movs	r3, #1
 80069e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80069ea:	e001      	b.n	80069f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069ec:	2300      	movs	r3, #0
 80069ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3740      	adds	r7, #64	; 0x40
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
	...

08006a08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08c      	sub	sp, #48	; 0x30
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a14:	2300      	movs	r3, #0
 8006a16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <xQueueReceive+0x30>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	623b      	str	r3, [r7, #32]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d103      	bne.n	8006a46 <xQueueReceive+0x3e>
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <xQueueReceive+0x42>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <xQueueReceive+0x44>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10a      	bne.n	8006a66 <xQueueReceive+0x5e>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	61fb      	str	r3, [r7, #28]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a66:	f001 f831 	bl	8007acc <xTaskGetSchedulerState>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d102      	bne.n	8006a76 <xQueueReceive+0x6e>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <xQueueReceive+0x72>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <xQueueReceive+0x74>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <xQueueReceive+0x8e>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	61bb      	str	r3, [r7, #24]
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a96:	f001 fd75 	bl	8008584 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d01f      	beq.n	8006ae6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aaa:	f000 f8f7 	bl	8006c9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	1e5a      	subs	r2, r3, #1
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00f      	beq.n	8006ade <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	3310      	adds	r3, #16
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fe40 	bl	8007748 <xTaskRemoveFromEventList>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ace:	4b3d      	ldr	r3, [pc, #244]	; (8006bc4 <xQueueReceive+0x1bc>)
 8006ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ade:	f001 fd81 	bl	80085e4 <vPortExitCritical>
				return pdPASS;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e069      	b.n	8006bba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d103      	bne.n	8006af4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006aec:	f001 fd7a 	bl	80085e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006af0:	2300      	movs	r3, #0
 8006af2:	e062      	b.n	8006bba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d106      	bne.n	8006b08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006afa:	f107 0310 	add.w	r3, r7, #16
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fe86 	bl	8007810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b04:	2301      	movs	r3, #1
 8006b06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b08:	f001 fd6c 	bl	80085e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b0c:	f000 fbf2 	bl	80072f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b10:	f001 fd38 	bl	8008584 <vPortEnterCritical>
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b1a:	b25b      	sxtb	r3, r3
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b20:	d103      	bne.n	8006b2a <xQueueReceive+0x122>
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b30:	b25b      	sxtb	r3, r3
 8006b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b36:	d103      	bne.n	8006b40 <xQueueReceive+0x138>
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b40:	f001 fd50 	bl	80085e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b44:	1d3a      	adds	r2, r7, #4
 8006b46:	f107 0310 	add.w	r3, r7, #16
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fe75 	bl	800783c <xTaskCheckForTimeOut>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d123      	bne.n	8006ba0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b5a:	f000 f917 	bl	8006d8c <prvIsQueueEmpty>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d017      	beq.n	8006b94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	3324      	adds	r3, #36	; 0x24
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 fd9b 	bl	80076a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b74:	f000 f8b8 	bl	8006ce8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b78:	f000 fbca 	bl	8007310 <xTaskResumeAll>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d189      	bne.n	8006a96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006b82:	4b10      	ldr	r3, [pc, #64]	; (8006bc4 <xQueueReceive+0x1bc>)
 8006b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	e780      	b.n	8006a96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b96:	f000 f8a7 	bl	8006ce8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b9a:	f000 fbb9 	bl	8007310 <xTaskResumeAll>
 8006b9e:	e77a      	b.n	8006a96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ba2:	f000 f8a1 	bl	8006ce8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ba6:	f000 fbb3 	bl	8007310 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bac:	f000 f8ee 	bl	8006d8c <prvIsQueueEmpty>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f43f af6f 	beq.w	8006a96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006bb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3730      	adds	r7, #48	; 0x30
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	e000ed04 	.word	0xe000ed04

08006bc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10d      	bne.n	8006c02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d14d      	bne.n	8006c8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 ff88 	bl	8007b08 <xTaskPriorityDisinherit>
 8006bf8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	609a      	str	r2, [r3, #8]
 8006c00:	e043      	b.n	8006c8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d119      	bne.n	8006c3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6858      	ldr	r0, [r3, #4]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	461a      	mov	r2, r3
 8006c12:	68b9      	ldr	r1, [r7, #8]
 8006c14:	f003 f9f9 	bl	800a00a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	441a      	add	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d32b      	bcc.n	8006c8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	605a      	str	r2, [r3, #4]
 8006c3a:	e026      	b.n	8006c8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	68d8      	ldr	r0, [r3, #12]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c44:	461a      	mov	r2, r3
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	f003 f9df 	bl	800a00a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	68da      	ldr	r2, [r3, #12]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c54:	425b      	negs	r3, r3
 8006c56:	441a      	add	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d207      	bcs.n	8006c78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c70:	425b      	negs	r3, r3
 8006c72:	441a      	add	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d105      	bne.n	8006c8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c92:	697b      	ldr	r3, [r7, #20]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d018      	beq.n	8006ce0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	441a      	add	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68da      	ldr	r2, [r3, #12]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d303      	bcc.n	8006cd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68d9      	ldr	r1, [r3, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6838      	ldr	r0, [r7, #0]
 8006cdc:	f003 f995 	bl	800a00a <memcpy>
	}
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006cf0:	f001 fc48 	bl	8008584 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cfc:	e011      	b.n	8006d22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d012      	beq.n	8006d2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3324      	adds	r3, #36	; 0x24
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 fd1c 	bl	8007748 <xTaskRemoveFromEventList>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d16:	f000 fdf3 	bl	8007900 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	dce9      	bgt.n	8006cfe <prvUnlockQueue+0x16>
 8006d2a:	e000      	b.n	8006d2e <prvUnlockQueue+0x46>
					break;
 8006d2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	22ff      	movs	r2, #255	; 0xff
 8006d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d36:	f001 fc55 	bl	80085e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d3a:	f001 fc23 	bl	8008584 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d46:	e011      	b.n	8006d6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d012      	beq.n	8006d76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3310      	adds	r3, #16
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 fcf7 	bl	8007748 <xTaskRemoveFromEventList>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d60:	f000 fdce 	bl	8007900 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	dce9      	bgt.n	8006d48 <prvUnlockQueue+0x60>
 8006d74:	e000      	b.n	8006d78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	22ff      	movs	r2, #255	; 0xff
 8006d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d80:	f001 fc30 	bl	80085e4 <vPortExitCritical>
}
 8006d84:	bf00      	nop
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d94:	f001 fbf6 	bl	8008584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d102      	bne.n	8006da6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006da0:	2301      	movs	r3, #1
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	e001      	b.n	8006daa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006daa:	f001 fc1b 	bl	80085e4 <vPortExitCritical>

	return xReturn;
 8006dae:	68fb      	ldr	r3, [r7, #12]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006dc0:	f001 fbe0 	bl	8008584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d102      	bne.n	8006dd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	e001      	b.n	8006dda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dda:	f001 fc03 	bl	80085e4 <vPortExitCritical>

	return xReturn;
 8006dde:	68fb      	ldr	r3, [r7, #12]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006df2:	2300      	movs	r3, #0
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	e014      	b.n	8006e22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006df8:	4a0f      	ldr	r2, [pc, #60]	; (8006e38 <vQueueAddToRegistry+0x50>)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10b      	bne.n	8006e1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e04:	490c      	ldr	r1, [pc, #48]	; (8006e38 <vQueueAddToRegistry+0x50>)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e0e:	4a0a      	ldr	r2, [pc, #40]	; (8006e38 <vQueueAddToRegistry+0x50>)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	4413      	add	r3, r2
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e1a:	e006      	b.n	8006e2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b07      	cmp	r3, #7
 8006e26:	d9e7      	bls.n	8006df8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	20000c58 	.word	0x20000c58

08006e3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e4c:	f001 fb9a 	bl	8008584 <vPortEnterCritical>
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e56:	b25b      	sxtb	r3, r3
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e5c:	d103      	bne.n	8006e66 <vQueueWaitForMessageRestricted+0x2a>
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e6c:	b25b      	sxtb	r3, r3
 8006e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e72:	d103      	bne.n	8006e7c <vQueueWaitForMessageRestricted+0x40>
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e7c:	f001 fbb2 	bl	80085e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	3324      	adds	r3, #36	; 0x24
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fc2d 	bl	80076f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e96:	6978      	ldr	r0, [r7, #20]
 8006e98:	f7ff ff26 	bl	8006ce8 <prvUnlockQueue>
	}
 8006e9c:	bf00      	nop
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08e      	sub	sp, #56	; 0x38
 8006ea8:	af04      	add	r7, sp, #16
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <xTaskCreateStatic+0x2a>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	623b      	str	r3, [r7, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <xTaskCreateStatic+0x46>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	61fb      	str	r3, [r7, #28]
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006eea:	23a8      	movs	r3, #168	; 0xa8
 8006eec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	2ba8      	cmp	r3, #168	; 0xa8
 8006ef2:	d00a      	beq.n	8006f0a <xTaskCreateStatic+0x66>
	__asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	61bb      	str	r3, [r7, #24]
}
 8006f06:	bf00      	nop
 8006f08:	e7fe      	b.n	8006f08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d01e      	beq.n	8006f50 <xTaskCreateStatic+0xac>
 8006f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01b      	beq.n	8006f50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	2202      	movs	r2, #2
 8006f26:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	9303      	str	r3, [sp, #12]
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	9302      	str	r3, [sp, #8]
 8006f32:	f107 0314 	add.w	r3, r7, #20
 8006f36:	9301      	str	r3, [sp, #4]
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	68b9      	ldr	r1, [r7, #8]
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 f850 	bl	8006fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f4a:	f000 f8f3 	bl	8007134 <prvAddNewTaskToReadyList>
 8006f4e:	e001      	b.n	8006f54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006f50:	2300      	movs	r3, #0
 8006f52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f54:	697b      	ldr	r3, [r7, #20]
	}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3728      	adds	r7, #40	; 0x28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b08c      	sub	sp, #48	; 0x30
 8006f62:	af04      	add	r7, sp, #16
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	603b      	str	r3, [r7, #0]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4618      	mov	r0, r3
 8006f74:	f001 fc28 	bl	80087c8 <pvPortMalloc>
 8006f78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00e      	beq.n	8006f9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f80:	20a8      	movs	r0, #168	; 0xa8
 8006f82:	f001 fc21 	bl	80087c8 <pvPortMalloc>
 8006f86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30
 8006f94:	e005      	b.n	8006fa2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f96:	6978      	ldr	r0, [r7, #20]
 8006f98:	f001 fce2 	bl	8008960 <vPortFree>
 8006f9c:	e001      	b.n	8006fa2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d017      	beq.n	8006fd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006fb0:	88fa      	ldrh	r2, [r7, #6]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	9303      	str	r3, [sp, #12]
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	9302      	str	r3, [sp, #8]
 8006fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbc:	9301      	str	r3, [sp, #4]
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	68b9      	ldr	r1, [r7, #8]
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 f80e 	bl	8006fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fcc:	69f8      	ldr	r0, [r7, #28]
 8006fce:	f000 f8b1 	bl	8007134 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	e002      	b.n	8006fde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fde:	69bb      	ldr	r3, [r7, #24]
	}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3720      	adds	r7, #32
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	461a      	mov	r2, r3
 8007000:	21a5      	movs	r1, #165	; 0xa5
 8007002:	f002 ff1d 	bl	8009e40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007010:	3b01      	subs	r3, #1
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	f023 0307 	bic.w	r3, r3, #7
 800701e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <prvInitialiseNewTask+0x58>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	617b      	str	r3, [r7, #20]
}
 800703c:	bf00      	nop
 800703e:	e7fe      	b.n	800703e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d01f      	beq.n	8007086 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007046:	2300      	movs	r3, #0
 8007048:	61fb      	str	r3, [r7, #28]
 800704a:	e012      	b.n	8007072 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	4413      	add	r3, r2
 8007052:	7819      	ldrb	r1, [r3, #0]
 8007054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	4413      	add	r3, r2
 800705a:	3334      	adds	r3, #52	; 0x34
 800705c:	460a      	mov	r2, r1
 800705e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	4413      	add	r3, r2
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d006      	beq.n	800707a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	3301      	adds	r3, #1
 8007070:	61fb      	str	r3, [r7, #28]
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	2b0f      	cmp	r3, #15
 8007076:	d9e9      	bls.n	800704c <prvInitialiseNewTask+0x64>
 8007078:	e000      	b.n	800707c <prvInitialiseNewTask+0x94>
			{
				break;
 800707a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007084:	e003      	b.n	800708e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	2b37      	cmp	r3, #55	; 0x37
 8007092:	d901      	bls.n	8007098 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007094:	2337      	movs	r3, #55	; 0x37
 8007096:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800709c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	2200      	movs	r2, #0
 80070a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	3304      	adds	r3, #4
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7ff f978 	bl	80063a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	3318      	adds	r3, #24
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7ff f973 	bl	80063a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80070e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e6:	3354      	adds	r3, #84	; 0x54
 80070e8:	224c      	movs	r2, #76	; 0x4c
 80070ea:	2100      	movs	r1, #0
 80070ec:	4618      	mov	r0, r3
 80070ee:	f002 fea7 	bl	8009e40 <memset>
 80070f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f4:	4a0c      	ldr	r2, [pc, #48]	; (8007128 <prvInitialiseNewTask+0x140>)
 80070f6:	659a      	str	r2, [r3, #88]	; 0x58
 80070f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fa:	4a0c      	ldr	r2, [pc, #48]	; (800712c <prvInitialiseNewTask+0x144>)
 80070fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	4a0b      	ldr	r2, [pc, #44]	; (8007130 <prvInitialiseNewTask+0x148>)
 8007102:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	68f9      	ldr	r1, [r7, #12]
 8007108:	69b8      	ldr	r0, [r7, #24]
 800710a:	f001 f90d 	bl	8008328 <pxPortInitialiseStack>
 800710e:	4602      	mov	r2, r0
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800711e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007120:	bf00      	nop
 8007122:	3720      	adds	r7, #32
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	20001eac 	.word	0x20001eac
 800712c:	20001f14 	.word	0x20001f14
 8007130:	20001f7c 	.word	0x20001f7c

08007134 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800713c:	f001 fa22 	bl	8008584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007140:	4b2d      	ldr	r3, [pc, #180]	; (80071f8 <prvAddNewTaskToReadyList+0xc4>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3301      	adds	r3, #1
 8007146:	4a2c      	ldr	r2, [pc, #176]	; (80071f8 <prvAddNewTaskToReadyList+0xc4>)
 8007148:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800714a:	4b2c      	ldr	r3, [pc, #176]	; (80071fc <prvAddNewTaskToReadyList+0xc8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d109      	bne.n	8007166 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007152:	4a2a      	ldr	r2, [pc, #168]	; (80071fc <prvAddNewTaskToReadyList+0xc8>)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007158:	4b27      	ldr	r3, [pc, #156]	; (80071f8 <prvAddNewTaskToReadyList+0xc4>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d110      	bne.n	8007182 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007160:	f000 fbf2 	bl	8007948 <prvInitialiseTaskLists>
 8007164:	e00d      	b.n	8007182 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007166:	4b26      	ldr	r3, [pc, #152]	; (8007200 <prvAddNewTaskToReadyList+0xcc>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d109      	bne.n	8007182 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800716e:	4b23      	ldr	r3, [pc, #140]	; (80071fc <prvAddNewTaskToReadyList+0xc8>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	429a      	cmp	r2, r3
 800717a:	d802      	bhi.n	8007182 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800717c:	4a1f      	ldr	r2, [pc, #124]	; (80071fc <prvAddNewTaskToReadyList+0xc8>)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007182:	4b20      	ldr	r3, [pc, #128]	; (8007204 <prvAddNewTaskToReadyList+0xd0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3301      	adds	r3, #1
 8007188:	4a1e      	ldr	r2, [pc, #120]	; (8007204 <prvAddNewTaskToReadyList+0xd0>)
 800718a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800718c:	4b1d      	ldr	r3, [pc, #116]	; (8007204 <prvAddNewTaskToReadyList+0xd0>)
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007198:	4b1b      	ldr	r3, [pc, #108]	; (8007208 <prvAddNewTaskToReadyList+0xd4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	429a      	cmp	r2, r3
 800719e:	d903      	bls.n	80071a8 <prvAddNewTaskToReadyList+0x74>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	4a18      	ldr	r2, [pc, #96]	; (8007208 <prvAddNewTaskToReadyList+0xd4>)
 80071a6:	6013      	str	r3, [r2, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ac:	4613      	mov	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4a15      	ldr	r2, [pc, #84]	; (800720c <prvAddNewTaskToReadyList+0xd8>)
 80071b6:	441a      	add	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3304      	adds	r3, #4
 80071bc:	4619      	mov	r1, r3
 80071be:	4610      	mov	r0, r2
 80071c0:	f7ff f8fd 	bl	80063be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071c4:	f001 fa0e 	bl	80085e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071c8:	4b0d      	ldr	r3, [pc, #52]	; (8007200 <prvAddNewTaskToReadyList+0xcc>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00e      	beq.n	80071ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071d0:	4b0a      	ldr	r3, [pc, #40]	; (80071fc <prvAddNewTaskToReadyList+0xc8>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	429a      	cmp	r2, r3
 80071dc:	d207      	bcs.n	80071ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071de:	4b0c      	ldr	r3, [pc, #48]	; (8007210 <prvAddNewTaskToReadyList+0xdc>)
 80071e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	2000116c 	.word	0x2000116c
 80071fc:	20000c98 	.word	0x20000c98
 8007200:	20001178 	.word	0x20001178
 8007204:	20001188 	.word	0x20001188
 8007208:	20001174 	.word	0x20001174
 800720c:	20000c9c 	.word	0x20000c9c
 8007210:	e000ed04 	.word	0xe000ed04

08007214 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08a      	sub	sp, #40	; 0x28
 8007218:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800721e:	2300      	movs	r3, #0
 8007220:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007222:	463a      	mov	r2, r7
 8007224:	1d39      	adds	r1, r7, #4
 8007226:	f107 0308 	add.w	r3, r7, #8
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff f866 	bl	80062fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	9202      	str	r2, [sp, #8]
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	2300      	movs	r3, #0
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	2300      	movs	r3, #0
 8007240:	460a      	mov	r2, r1
 8007242:	4924      	ldr	r1, [pc, #144]	; (80072d4 <vTaskStartScheduler+0xc0>)
 8007244:	4824      	ldr	r0, [pc, #144]	; (80072d8 <vTaskStartScheduler+0xc4>)
 8007246:	f7ff fe2d 	bl	8006ea4 <xTaskCreateStatic>
 800724a:	4603      	mov	r3, r0
 800724c:	4a23      	ldr	r2, [pc, #140]	; (80072dc <vTaskStartScheduler+0xc8>)
 800724e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007250:	4b22      	ldr	r3, [pc, #136]	; (80072dc <vTaskStartScheduler+0xc8>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007258:	2301      	movs	r3, #1
 800725a:	617b      	str	r3, [r7, #20]
 800725c:	e001      	b.n	8007262 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800725e:	2300      	movs	r3, #0
 8007260:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d102      	bne.n	800726e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007268:	f000 fd10 	bl	8007c8c <xTimerCreateTimerTask>
 800726c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d11b      	bne.n	80072ac <vTaskStartScheduler+0x98>
	__asm volatile
 8007274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	613b      	str	r3, [r7, #16]
}
 8007286:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007288:	4b15      	ldr	r3, [pc, #84]	; (80072e0 <vTaskStartScheduler+0xcc>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3354      	adds	r3, #84	; 0x54
 800728e:	4a15      	ldr	r2, [pc, #84]	; (80072e4 <vTaskStartScheduler+0xd0>)
 8007290:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007292:	4b15      	ldr	r3, [pc, #84]	; (80072e8 <vTaskStartScheduler+0xd4>)
 8007294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007298:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800729a:	4b14      	ldr	r3, [pc, #80]	; (80072ec <vTaskStartScheduler+0xd8>)
 800729c:	2201      	movs	r2, #1
 800729e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072a0:	4b13      	ldr	r3, [pc, #76]	; (80072f0 <vTaskStartScheduler+0xdc>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072a6:	f001 f8cb 	bl	8008440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072aa:	e00e      	b.n	80072ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072b2:	d10a      	bne.n	80072ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	60fb      	str	r3, [r7, #12]
}
 80072c6:	bf00      	nop
 80072c8:	e7fe      	b.n	80072c8 <vTaskStartScheduler+0xb4>
}
 80072ca:	bf00      	nop
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	0800d6e0 	.word	0x0800d6e0
 80072d8:	08007919 	.word	0x08007919
 80072dc:	20001190 	.word	0x20001190
 80072e0:	20000c98 	.word	0x20000c98
 80072e4:	2000006c 	.word	0x2000006c
 80072e8:	2000118c 	.word	0x2000118c
 80072ec:	20001178 	.word	0x20001178
 80072f0:	20001170 	.word	0x20001170

080072f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80072f4:	b480      	push	{r7}
 80072f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80072f8:	4b04      	ldr	r3, [pc, #16]	; (800730c <vTaskSuspendAll+0x18>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3301      	adds	r3, #1
 80072fe:	4a03      	ldr	r2, [pc, #12]	; (800730c <vTaskSuspendAll+0x18>)
 8007300:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007302:	bf00      	nop
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	20001194 	.word	0x20001194

08007310 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007316:	2300      	movs	r3, #0
 8007318:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800731a:	2300      	movs	r3, #0
 800731c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800731e:	4b42      	ldr	r3, [pc, #264]	; (8007428 <xTaskResumeAll+0x118>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <xTaskResumeAll+0x2c>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	603b      	str	r3, [r7, #0]
}
 8007338:	bf00      	nop
 800733a:	e7fe      	b.n	800733a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800733c:	f001 f922 	bl	8008584 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007340:	4b39      	ldr	r3, [pc, #228]	; (8007428 <xTaskResumeAll+0x118>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3b01      	subs	r3, #1
 8007346:	4a38      	ldr	r2, [pc, #224]	; (8007428 <xTaskResumeAll+0x118>)
 8007348:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800734a:	4b37      	ldr	r3, [pc, #220]	; (8007428 <xTaskResumeAll+0x118>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d162      	bne.n	8007418 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007352:	4b36      	ldr	r3, [pc, #216]	; (800742c <xTaskResumeAll+0x11c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d05e      	beq.n	8007418 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800735a:	e02f      	b.n	80073bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800735c:	4b34      	ldr	r3, [pc, #208]	; (8007430 <xTaskResumeAll+0x120>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	3318      	adds	r3, #24
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff f885 	bl	8006478 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3304      	adds	r3, #4
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff f880 	bl	8006478 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737c:	4b2d      	ldr	r3, [pc, #180]	; (8007434 <xTaskResumeAll+0x124>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d903      	bls.n	800738c <xTaskResumeAll+0x7c>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	4a2a      	ldr	r2, [pc, #168]	; (8007434 <xTaskResumeAll+0x124>)
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4a27      	ldr	r2, [pc, #156]	; (8007438 <xTaskResumeAll+0x128>)
 800739a:	441a      	add	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	3304      	adds	r3, #4
 80073a0:	4619      	mov	r1, r3
 80073a2:	4610      	mov	r0, r2
 80073a4:	f7ff f80b 	bl	80063be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ac:	4b23      	ldr	r3, [pc, #140]	; (800743c <xTaskResumeAll+0x12c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d302      	bcc.n	80073bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80073b6:	4b22      	ldr	r3, [pc, #136]	; (8007440 <xTaskResumeAll+0x130>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073bc:	4b1c      	ldr	r3, [pc, #112]	; (8007430 <xTaskResumeAll+0x120>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1cb      	bne.n	800735c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80073ca:	f000 fb5f 	bl	8007a8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80073ce:	4b1d      	ldr	r3, [pc, #116]	; (8007444 <xTaskResumeAll+0x134>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d010      	beq.n	80073fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80073da:	f000 f847 	bl	800746c <xTaskIncrementTick>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80073e4:	4b16      	ldr	r3, [pc, #88]	; (8007440 <xTaskResumeAll+0x130>)
 80073e6:	2201      	movs	r2, #1
 80073e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1f1      	bne.n	80073da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80073f6:	4b13      	ldr	r3, [pc, #76]	; (8007444 <xTaskResumeAll+0x134>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80073fc:	4b10      	ldr	r3, [pc, #64]	; (8007440 <xTaskResumeAll+0x130>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d009      	beq.n	8007418 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007404:	2301      	movs	r3, #1
 8007406:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007408:	4b0f      	ldr	r3, [pc, #60]	; (8007448 <xTaskResumeAll+0x138>)
 800740a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007418:	f001 f8e4 	bl	80085e4 <vPortExitCritical>

	return xAlreadyYielded;
 800741c:	68bb      	ldr	r3, [r7, #8]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20001194 	.word	0x20001194
 800742c:	2000116c 	.word	0x2000116c
 8007430:	2000112c 	.word	0x2000112c
 8007434:	20001174 	.word	0x20001174
 8007438:	20000c9c 	.word	0x20000c9c
 800743c:	20000c98 	.word	0x20000c98
 8007440:	20001180 	.word	0x20001180
 8007444:	2000117c 	.word	0x2000117c
 8007448:	e000ed04 	.word	0xe000ed04

0800744c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007452:	4b05      	ldr	r3, [pc, #20]	; (8007468 <xTaskGetTickCount+0x1c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007458:	687b      	ldr	r3, [r7, #4]
}
 800745a:	4618      	mov	r0, r3
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	20001170 	.word	0x20001170

0800746c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007472:	2300      	movs	r3, #0
 8007474:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007476:	4b4f      	ldr	r3, [pc, #316]	; (80075b4 <xTaskIncrementTick+0x148>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	f040 808f 	bne.w	800759e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007480:	4b4d      	ldr	r3, [pc, #308]	; (80075b8 <xTaskIncrementTick+0x14c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3301      	adds	r3, #1
 8007486:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007488:	4a4b      	ldr	r2, [pc, #300]	; (80075b8 <xTaskIncrementTick+0x14c>)
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d120      	bne.n	80074d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007494:	4b49      	ldr	r3, [pc, #292]	; (80075bc <xTaskIncrementTick+0x150>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	603b      	str	r3, [r7, #0]
}
 80074b0:	bf00      	nop
 80074b2:	e7fe      	b.n	80074b2 <xTaskIncrementTick+0x46>
 80074b4:	4b41      	ldr	r3, [pc, #260]	; (80075bc <xTaskIncrementTick+0x150>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	4b41      	ldr	r3, [pc, #260]	; (80075c0 <xTaskIncrementTick+0x154>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a3f      	ldr	r2, [pc, #252]	; (80075bc <xTaskIncrementTick+0x150>)
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	4a3f      	ldr	r2, [pc, #252]	; (80075c0 <xTaskIncrementTick+0x154>)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	4b3e      	ldr	r3, [pc, #248]	; (80075c4 <xTaskIncrementTick+0x158>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3301      	adds	r3, #1
 80074ce:	4a3d      	ldr	r2, [pc, #244]	; (80075c4 <xTaskIncrementTick+0x158>)
 80074d0:	6013      	str	r3, [r2, #0]
 80074d2:	f000 fadb 	bl	8007a8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80074d6:	4b3c      	ldr	r3, [pc, #240]	; (80075c8 <xTaskIncrementTick+0x15c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d349      	bcc.n	8007574 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074e0:	4b36      	ldr	r3, [pc, #216]	; (80075bc <xTaskIncrementTick+0x150>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d104      	bne.n	80074f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074ea:	4b37      	ldr	r3, [pc, #220]	; (80075c8 <xTaskIncrementTick+0x15c>)
 80074ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074f0:	601a      	str	r2, [r3, #0]
					break;
 80074f2:	e03f      	b.n	8007574 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f4:	4b31      	ldr	r3, [pc, #196]	; (80075bc <xTaskIncrementTick+0x150>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	429a      	cmp	r2, r3
 800750a:	d203      	bcs.n	8007514 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800750c:	4a2e      	ldr	r2, [pc, #184]	; (80075c8 <xTaskIncrementTick+0x15c>)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007512:	e02f      	b.n	8007574 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	3304      	adds	r3, #4
 8007518:	4618      	mov	r0, r3
 800751a:	f7fe ffad 	bl	8006478 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007522:	2b00      	cmp	r3, #0
 8007524:	d004      	beq.n	8007530 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	3318      	adds	r3, #24
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe ffa4 	bl	8006478 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007534:	4b25      	ldr	r3, [pc, #148]	; (80075cc <xTaskIncrementTick+0x160>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d903      	bls.n	8007544 <xTaskIncrementTick+0xd8>
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	4a22      	ldr	r2, [pc, #136]	; (80075cc <xTaskIncrementTick+0x160>)
 8007542:	6013      	str	r3, [r2, #0]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007548:	4613      	mov	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4a1f      	ldr	r2, [pc, #124]	; (80075d0 <xTaskIncrementTick+0x164>)
 8007552:	441a      	add	r2, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	3304      	adds	r3, #4
 8007558:	4619      	mov	r1, r3
 800755a:	4610      	mov	r0, r2
 800755c:	f7fe ff2f 	bl	80063be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007564:	4b1b      	ldr	r3, [pc, #108]	; (80075d4 <xTaskIncrementTick+0x168>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	429a      	cmp	r2, r3
 800756c:	d3b8      	bcc.n	80074e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800756e:	2301      	movs	r3, #1
 8007570:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007572:	e7b5      	b.n	80074e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007574:	4b17      	ldr	r3, [pc, #92]	; (80075d4 <xTaskIncrementTick+0x168>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757a:	4915      	ldr	r1, [pc, #84]	; (80075d0 <xTaskIncrementTick+0x164>)
 800757c:	4613      	mov	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	440b      	add	r3, r1
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d901      	bls.n	8007590 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800758c:	2301      	movs	r3, #1
 800758e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007590:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <xTaskIncrementTick+0x16c>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d007      	beq.n	80075a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007598:	2301      	movs	r3, #1
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	e004      	b.n	80075a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800759e:	4b0f      	ldr	r3, [pc, #60]	; (80075dc <xTaskIncrementTick+0x170>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3301      	adds	r3, #1
 80075a4:	4a0d      	ldr	r2, [pc, #52]	; (80075dc <xTaskIncrementTick+0x170>)
 80075a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80075a8:	697b      	ldr	r3, [r7, #20]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20001194 	.word	0x20001194
 80075b8:	20001170 	.word	0x20001170
 80075bc:	20001124 	.word	0x20001124
 80075c0:	20001128 	.word	0x20001128
 80075c4:	20001184 	.word	0x20001184
 80075c8:	2000118c 	.word	0x2000118c
 80075cc:	20001174 	.word	0x20001174
 80075d0:	20000c9c 	.word	0x20000c9c
 80075d4:	20000c98 	.word	0x20000c98
 80075d8:	20001180 	.word	0x20001180
 80075dc:	2000117c 	.word	0x2000117c

080075e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80075e6:	4b2a      	ldr	r3, [pc, #168]	; (8007690 <vTaskSwitchContext+0xb0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80075ee:	4b29      	ldr	r3, [pc, #164]	; (8007694 <vTaskSwitchContext+0xb4>)
 80075f0:	2201      	movs	r2, #1
 80075f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80075f4:	e046      	b.n	8007684 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80075f6:	4b27      	ldr	r3, [pc, #156]	; (8007694 <vTaskSwitchContext+0xb4>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075fc:	4b26      	ldr	r3, [pc, #152]	; (8007698 <vTaskSwitchContext+0xb8>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e010      	b.n	8007626 <vTaskSwitchContext+0x46>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10a      	bne.n	8007620 <vTaskSwitchContext+0x40>
	__asm volatile
 800760a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	607b      	str	r3, [r7, #4]
}
 800761c:	bf00      	nop
 800761e:	e7fe      	b.n	800761e <vTaskSwitchContext+0x3e>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	3b01      	subs	r3, #1
 8007624:	60fb      	str	r3, [r7, #12]
 8007626:	491d      	ldr	r1, [pc, #116]	; (800769c <vTaskSwitchContext+0xbc>)
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	4613      	mov	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	440b      	add	r3, r1
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0e4      	beq.n	8007604 <vTaskSwitchContext+0x24>
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	4613      	mov	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4a15      	ldr	r2, [pc, #84]	; (800769c <vTaskSwitchContext+0xbc>)
 8007646:	4413      	add	r3, r2
 8007648:	60bb      	str	r3, [r7, #8]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	605a      	str	r2, [r3, #4]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	3308      	adds	r3, #8
 800765c:	429a      	cmp	r2, r3
 800765e:	d104      	bne.n	800766a <vTaskSwitchContext+0x8a>
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	605a      	str	r2, [r3, #4]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	4a0b      	ldr	r2, [pc, #44]	; (80076a0 <vTaskSwitchContext+0xc0>)
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	4a08      	ldr	r2, [pc, #32]	; (8007698 <vTaskSwitchContext+0xb8>)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800767a:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <vTaskSwitchContext+0xc0>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3354      	adds	r3, #84	; 0x54
 8007680:	4a08      	ldr	r2, [pc, #32]	; (80076a4 <vTaskSwitchContext+0xc4>)
 8007682:	6013      	str	r3, [r2, #0]
}
 8007684:	bf00      	nop
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	20001194 	.word	0x20001194
 8007694:	20001180 	.word	0x20001180
 8007698:	20001174 	.word	0x20001174
 800769c:	20000c9c 	.word	0x20000c9c
 80076a0:	20000c98 	.word	0x20000c98
 80076a4:	2000006c 	.word	0x2000006c

080076a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10a      	bne.n	80076ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	60fb      	str	r3, [r7, #12]
}
 80076ca:	bf00      	nop
 80076cc:	e7fe      	b.n	80076cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076ce:	4b07      	ldr	r3, [pc, #28]	; (80076ec <vTaskPlaceOnEventList+0x44>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3318      	adds	r3, #24
 80076d4:	4619      	mov	r1, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7fe fe95 	bl	8006406 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80076dc:	2101      	movs	r1, #1
 80076de:	6838      	ldr	r0, [r7, #0]
 80076e0:	f000 fa80 	bl	8007be4 <prvAddCurrentTaskToDelayedList>
}
 80076e4:	bf00      	nop
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20000c98 	.word	0x20000c98

080076f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10a      	bne.n	8007718 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	617b      	str	r3, [r7, #20]
}
 8007714:	bf00      	nop
 8007716:	e7fe      	b.n	8007716 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007718:	4b0a      	ldr	r3, [pc, #40]	; (8007744 <vTaskPlaceOnEventListRestricted+0x54>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3318      	adds	r3, #24
 800771e:	4619      	mov	r1, r3
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7fe fe4c 	bl	80063be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800772c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007730:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	68b8      	ldr	r0, [r7, #8]
 8007736:	f000 fa55 	bl	8007be4 <prvAddCurrentTaskToDelayedList>
	}
 800773a:	bf00      	nop
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20000c98 	.word	0x20000c98

08007748 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10a      	bne.n	8007774 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	60fb      	str	r3, [r7, #12]
}
 8007770:	bf00      	nop
 8007772:	e7fe      	b.n	8007772 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	3318      	adds	r3, #24
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe fe7d 	bl	8006478 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800777e:	4b1e      	ldr	r3, [pc, #120]	; (80077f8 <xTaskRemoveFromEventList+0xb0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d11d      	bne.n	80077c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	3304      	adds	r3, #4
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe fe74 	bl	8006478 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	4b19      	ldr	r3, [pc, #100]	; (80077fc <xTaskRemoveFromEventList+0xb4>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	429a      	cmp	r2, r3
 800779a:	d903      	bls.n	80077a4 <xTaskRemoveFromEventList+0x5c>
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	4a16      	ldr	r2, [pc, #88]	; (80077fc <xTaskRemoveFromEventList+0xb4>)
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4a13      	ldr	r2, [pc, #76]	; (8007800 <xTaskRemoveFromEventList+0xb8>)
 80077b2:	441a      	add	r2, r3
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	3304      	adds	r3, #4
 80077b8:	4619      	mov	r1, r3
 80077ba:	4610      	mov	r0, r2
 80077bc:	f7fe fdff 	bl	80063be <vListInsertEnd>
 80077c0:	e005      	b.n	80077ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	3318      	adds	r3, #24
 80077c6:	4619      	mov	r1, r3
 80077c8:	480e      	ldr	r0, [pc, #56]	; (8007804 <xTaskRemoveFromEventList+0xbc>)
 80077ca:	f7fe fdf8 	bl	80063be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d2:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <xTaskRemoveFromEventList+0xc0>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	429a      	cmp	r2, r3
 80077da:	d905      	bls.n	80077e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80077dc:	2301      	movs	r3, #1
 80077de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80077e0:	4b0a      	ldr	r3, [pc, #40]	; (800780c <xTaskRemoveFromEventList+0xc4>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	e001      	b.n	80077ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80077e8:	2300      	movs	r3, #0
 80077ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80077ec:	697b      	ldr	r3, [r7, #20]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20001194 	.word	0x20001194
 80077fc:	20001174 	.word	0x20001174
 8007800:	20000c9c 	.word	0x20000c9c
 8007804:	2000112c 	.word	0x2000112c
 8007808:	20000c98 	.word	0x20000c98
 800780c:	20001180 	.word	0x20001180

08007810 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007818:	4b06      	ldr	r3, [pc, #24]	; (8007834 <vTaskInternalSetTimeOutState+0x24>)
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007820:	4b05      	ldr	r3, [pc, #20]	; (8007838 <vTaskInternalSetTimeOutState+0x28>)
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	605a      	str	r2, [r3, #4]
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	20001184 	.word	0x20001184
 8007838:	20001170 	.word	0x20001170

0800783c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	613b      	str	r3, [r7, #16]
}
 800785e:	bf00      	nop
 8007860:	e7fe      	b.n	8007860 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10a      	bne.n	800787e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	60fb      	str	r3, [r7, #12]
}
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800787e:	f000 fe81 	bl	8008584 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007882:	4b1d      	ldr	r3, [pc, #116]	; (80078f8 <xTaskCheckForTimeOut+0xbc>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800789a:	d102      	bne.n	80078a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800789c:	2300      	movs	r3, #0
 800789e:	61fb      	str	r3, [r7, #28]
 80078a0:	e023      	b.n	80078ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	4b15      	ldr	r3, [pc, #84]	; (80078fc <xTaskCheckForTimeOut+0xc0>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d007      	beq.n	80078be <xTaskCheckForTimeOut+0x82>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d302      	bcc.n	80078be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80078b8:	2301      	movs	r3, #1
 80078ba:	61fb      	str	r3, [r7, #28]
 80078bc:	e015      	b.n	80078ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d20b      	bcs.n	80078e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	1ad2      	subs	r2, r2, r3
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff ff9b 	bl	8007810 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]
 80078de:	e004      	b.n	80078ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80078e6:	2301      	movs	r3, #1
 80078e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80078ea:	f000 fe7b 	bl	80085e4 <vPortExitCritical>

	return xReturn;
 80078ee:	69fb      	ldr	r3, [r7, #28]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3720      	adds	r7, #32
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20001170 	.word	0x20001170
 80078fc:	20001184 	.word	0x20001184

08007900 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007900:	b480      	push	{r7}
 8007902:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007904:	4b03      	ldr	r3, [pc, #12]	; (8007914 <vTaskMissedYield+0x14>)
 8007906:	2201      	movs	r2, #1
 8007908:	601a      	str	r2, [r3, #0]
}
 800790a:	bf00      	nop
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	20001180 	.word	0x20001180

08007918 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007920:	f000 f852 	bl	80079c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007924:	4b06      	ldr	r3, [pc, #24]	; (8007940 <prvIdleTask+0x28>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d9f9      	bls.n	8007920 <prvIdleTask+0x8>
			{
				taskYIELD();
 800792c:	4b05      	ldr	r3, [pc, #20]	; (8007944 <prvIdleTask+0x2c>)
 800792e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800793c:	e7f0      	b.n	8007920 <prvIdleTask+0x8>
 800793e:	bf00      	nop
 8007940:	20000c9c 	.word	0x20000c9c
 8007944:	e000ed04 	.word	0xe000ed04

08007948 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800794e:	2300      	movs	r3, #0
 8007950:	607b      	str	r3, [r7, #4]
 8007952:	e00c      	b.n	800796e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4a12      	ldr	r2, [pc, #72]	; (80079a8 <prvInitialiseTaskLists+0x60>)
 8007960:	4413      	add	r3, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe fcfe 	bl	8006364 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3301      	adds	r3, #1
 800796c:	607b      	str	r3, [r7, #4]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b37      	cmp	r3, #55	; 0x37
 8007972:	d9ef      	bls.n	8007954 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007974:	480d      	ldr	r0, [pc, #52]	; (80079ac <prvInitialiseTaskLists+0x64>)
 8007976:	f7fe fcf5 	bl	8006364 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800797a:	480d      	ldr	r0, [pc, #52]	; (80079b0 <prvInitialiseTaskLists+0x68>)
 800797c:	f7fe fcf2 	bl	8006364 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007980:	480c      	ldr	r0, [pc, #48]	; (80079b4 <prvInitialiseTaskLists+0x6c>)
 8007982:	f7fe fcef 	bl	8006364 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007986:	480c      	ldr	r0, [pc, #48]	; (80079b8 <prvInitialiseTaskLists+0x70>)
 8007988:	f7fe fcec 	bl	8006364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800798c:	480b      	ldr	r0, [pc, #44]	; (80079bc <prvInitialiseTaskLists+0x74>)
 800798e:	f7fe fce9 	bl	8006364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007992:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <prvInitialiseTaskLists+0x78>)
 8007994:	4a05      	ldr	r2, [pc, #20]	; (80079ac <prvInitialiseTaskLists+0x64>)
 8007996:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007998:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <prvInitialiseTaskLists+0x7c>)
 800799a:	4a05      	ldr	r2, [pc, #20]	; (80079b0 <prvInitialiseTaskLists+0x68>)
 800799c:	601a      	str	r2, [r3, #0]
}
 800799e:	bf00      	nop
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20000c9c 	.word	0x20000c9c
 80079ac:	200010fc 	.word	0x200010fc
 80079b0:	20001110 	.word	0x20001110
 80079b4:	2000112c 	.word	0x2000112c
 80079b8:	20001140 	.word	0x20001140
 80079bc:	20001158 	.word	0x20001158
 80079c0:	20001124 	.word	0x20001124
 80079c4:	20001128 	.word	0x20001128

080079c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079ce:	e019      	b.n	8007a04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079d0:	f000 fdd8 	bl	8008584 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d4:	4b10      	ldr	r3, [pc, #64]	; (8007a18 <prvCheckTasksWaitingTermination+0x50>)
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3304      	adds	r3, #4
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe fd49 	bl	8006478 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079e6:	4b0d      	ldr	r3, [pc, #52]	; (8007a1c <prvCheckTasksWaitingTermination+0x54>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3b01      	subs	r3, #1
 80079ec:	4a0b      	ldr	r2, [pc, #44]	; (8007a1c <prvCheckTasksWaitingTermination+0x54>)
 80079ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079f0:	4b0b      	ldr	r3, [pc, #44]	; (8007a20 <prvCheckTasksWaitingTermination+0x58>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3b01      	subs	r3, #1
 80079f6:	4a0a      	ldr	r2, [pc, #40]	; (8007a20 <prvCheckTasksWaitingTermination+0x58>)
 80079f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80079fa:	f000 fdf3 	bl	80085e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f810 	bl	8007a24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a04:	4b06      	ldr	r3, [pc, #24]	; (8007a20 <prvCheckTasksWaitingTermination+0x58>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e1      	bne.n	80079d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a0c:	bf00      	nop
 8007a0e:	bf00      	nop
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20001140 	.word	0x20001140
 8007a1c:	2000116c 	.word	0x2000116c
 8007a20:	20001154 	.word	0x20001154

08007a24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	3354      	adds	r3, #84	; 0x54
 8007a30:	4618      	mov	r0, r3
 8007a32:	f002 fa21 	bl	8009e78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d108      	bne.n	8007a52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 ff8b 	bl	8008960 <vPortFree>
				vPortFree( pxTCB );
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 ff88 	bl	8008960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a50:	e018      	b.n	8007a84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d103      	bne.n	8007a64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 ff7f 	bl	8008960 <vPortFree>
	}
 8007a62:	e00f      	b.n	8007a84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d00a      	beq.n	8007a84 <prvDeleteTCB+0x60>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	60fb      	str	r3, [r7, #12]
}
 8007a80:	bf00      	nop
 8007a82:	e7fe      	b.n	8007a82 <prvDeleteTCB+0x5e>
	}
 8007a84:	bf00      	nop
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a92:	4b0c      	ldr	r3, [pc, #48]	; (8007ac4 <prvResetNextTaskUnblockTime+0x38>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d104      	bne.n	8007aa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ac8 <prvResetNextTaskUnblockTime+0x3c>)
 8007a9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007aa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007aa4:	e008      	b.n	8007ab8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aa6:	4b07      	ldr	r3, [pc, #28]	; (8007ac4 <prvResetNextTaskUnblockTime+0x38>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	4a04      	ldr	r2, [pc, #16]	; (8007ac8 <prvResetNextTaskUnblockTime+0x3c>)
 8007ab6:	6013      	str	r3, [r2, #0]
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	20001124 	.word	0x20001124
 8007ac8:	2000118c 	.word	0x2000118c

08007acc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ad2:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <xTaskGetSchedulerState+0x34>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d102      	bne.n	8007ae0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ada:	2301      	movs	r3, #1
 8007adc:	607b      	str	r3, [r7, #4]
 8007ade:	e008      	b.n	8007af2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ae0:	4b08      	ldr	r3, [pc, #32]	; (8007b04 <xTaskGetSchedulerState+0x38>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	607b      	str	r3, [r7, #4]
 8007aec:	e001      	b.n	8007af2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007aee:	2300      	movs	r3, #0
 8007af0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007af2:	687b      	ldr	r3, [r7, #4]
	}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	20001178 	.word	0x20001178
 8007b04:	20001194 	.word	0x20001194

08007b08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b14:	2300      	movs	r3, #0
 8007b16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d056      	beq.n	8007bcc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b1e:	4b2e      	ldr	r3, [pc, #184]	; (8007bd8 <xTaskPriorityDisinherit+0xd0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d00a      	beq.n	8007b3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	60fb      	str	r3, [r7, #12]
}
 8007b3a:	bf00      	nop
 8007b3c:	e7fe      	b.n	8007b3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10a      	bne.n	8007b5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	60bb      	str	r3, [r7, #8]
}
 8007b58:	bf00      	nop
 8007b5a:	e7fe      	b.n	8007b5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b60:	1e5a      	subs	r2, r3, #1
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d02c      	beq.n	8007bcc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d128      	bne.n	8007bcc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fe fc7a 	bl	8006478 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b9c:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <xTaskPriorityDisinherit+0xd4>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d903      	bls.n	8007bac <xTaskPriorityDisinherit+0xa4>
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	4a0c      	ldr	r2, [pc, #48]	; (8007bdc <xTaskPriorityDisinherit+0xd4>)
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4a09      	ldr	r2, [pc, #36]	; (8007be0 <xTaskPriorityDisinherit+0xd8>)
 8007bba:	441a      	add	r2, r3
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	f7fe fbfb 	bl	80063be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007bcc:	697b      	ldr	r3, [r7, #20]
	}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20000c98 	.word	0x20000c98
 8007bdc:	20001174 	.word	0x20001174
 8007be0:	20000c9c 	.word	0x20000c9c

08007be4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bee:	4b21      	ldr	r3, [pc, #132]	; (8007c74 <prvAddCurrentTaskToDelayedList+0x90>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bf4:	4b20      	ldr	r3, [pc, #128]	; (8007c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe fc3c 	bl	8006478 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c06:	d10a      	bne.n	8007c1e <prvAddCurrentTaskToDelayedList+0x3a>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d007      	beq.n	8007c1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c0e:	4b1a      	ldr	r3, [pc, #104]	; (8007c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4619      	mov	r1, r3
 8007c16:	4819      	ldr	r0, [pc, #100]	; (8007c7c <prvAddCurrentTaskToDelayedList+0x98>)
 8007c18:	f7fe fbd1 	bl	80063be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c1c:	e026      	b.n	8007c6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4413      	add	r3, r2
 8007c24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c26:	4b14      	ldr	r3, [pc, #80]	; (8007c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d209      	bcs.n	8007c4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c36:	4b12      	ldr	r3, [pc, #72]	; (8007c80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4b0f      	ldr	r3, [pc, #60]	; (8007c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	4619      	mov	r1, r3
 8007c42:	4610      	mov	r0, r2
 8007c44:	f7fe fbdf 	bl	8006406 <vListInsert>
}
 8007c48:	e010      	b.n	8007c6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c4a:	4b0e      	ldr	r3, [pc, #56]	; (8007c84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	4b0a      	ldr	r3, [pc, #40]	; (8007c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3304      	adds	r3, #4
 8007c54:	4619      	mov	r1, r3
 8007c56:	4610      	mov	r0, r2
 8007c58:	f7fe fbd5 	bl	8006406 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c5c:	4b0a      	ldr	r3, [pc, #40]	; (8007c88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d202      	bcs.n	8007c6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c66:	4a08      	ldr	r2, [pc, #32]	; (8007c88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	6013      	str	r3, [r2, #0]
}
 8007c6c:	bf00      	nop
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	20001170 	.word	0x20001170
 8007c78:	20000c98 	.word	0x20000c98
 8007c7c:	20001158 	.word	0x20001158
 8007c80:	20001128 	.word	0x20001128
 8007c84:	20001124 	.word	0x20001124
 8007c88:	2000118c 	.word	0x2000118c

08007c8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b08a      	sub	sp, #40	; 0x28
 8007c90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c92:	2300      	movs	r3, #0
 8007c94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c96:	f000 fb07 	bl	80082a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c9a:	4b1c      	ldr	r3, [pc, #112]	; (8007d0c <xTimerCreateTimerTask+0x80>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d021      	beq.n	8007ce6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007caa:	1d3a      	adds	r2, r7, #4
 8007cac:	f107 0108 	add.w	r1, r7, #8
 8007cb0:	f107 030c 	add.w	r3, r7, #12
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fe fb3b 	bl	8006330 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cba:	6879      	ldr	r1, [r7, #4]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	9202      	str	r2, [sp, #8]
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	2300      	movs	r3, #0
 8007cca:	460a      	mov	r2, r1
 8007ccc:	4910      	ldr	r1, [pc, #64]	; (8007d10 <xTimerCreateTimerTask+0x84>)
 8007cce:	4811      	ldr	r0, [pc, #68]	; (8007d14 <xTimerCreateTimerTask+0x88>)
 8007cd0:	f7ff f8e8 	bl	8006ea4 <xTaskCreateStatic>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	4a10      	ldr	r2, [pc, #64]	; (8007d18 <xTimerCreateTimerTask+0x8c>)
 8007cd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007cda:	4b0f      	ldr	r3, [pc, #60]	; (8007d18 <xTimerCreateTimerTask+0x8c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10a      	bne.n	8007d02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	613b      	str	r3, [r7, #16]
}
 8007cfe:	bf00      	nop
 8007d00:	e7fe      	b.n	8007d00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d02:	697b      	ldr	r3, [r7, #20]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3718      	adds	r7, #24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	200011c8 	.word	0x200011c8
 8007d10:	0800d6e8 	.word	0x0800d6e8
 8007d14:	08007e51 	.word	0x08007e51
 8007d18:	200011cc 	.word	0x200011cc

08007d1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08a      	sub	sp, #40	; 0x28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10a      	bne.n	8007d4a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	623b      	str	r3, [r7, #32]
}
 8007d46:	bf00      	nop
 8007d48:	e7fe      	b.n	8007d48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d4a:	4b1a      	ldr	r3, [pc, #104]	; (8007db4 <xTimerGenericCommand+0x98>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d02a      	beq.n	8007da8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2b05      	cmp	r3, #5
 8007d62:	dc18      	bgt.n	8007d96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d64:	f7ff feb2 	bl	8007acc <xTaskGetSchedulerState>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d109      	bne.n	8007d82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d6e:	4b11      	ldr	r3, [pc, #68]	; (8007db4 <xTimerGenericCommand+0x98>)
 8007d70:	6818      	ldr	r0, [r3, #0]
 8007d72:	f107 0110 	add.w	r1, r7, #16
 8007d76:	2300      	movs	r3, #0
 8007d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d7a:	f7fe fcab 	bl	80066d4 <xQueueGenericSend>
 8007d7e:	6278      	str	r0, [r7, #36]	; 0x24
 8007d80:	e012      	b.n	8007da8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d82:	4b0c      	ldr	r3, [pc, #48]	; (8007db4 <xTimerGenericCommand+0x98>)
 8007d84:	6818      	ldr	r0, [r3, #0]
 8007d86:	f107 0110 	add.w	r1, r7, #16
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f7fe fca1 	bl	80066d4 <xQueueGenericSend>
 8007d92:	6278      	str	r0, [r7, #36]	; 0x24
 8007d94:	e008      	b.n	8007da8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d96:	4b07      	ldr	r3, [pc, #28]	; (8007db4 <xTimerGenericCommand+0x98>)
 8007d98:	6818      	ldr	r0, [r3, #0]
 8007d9a:	f107 0110 	add.w	r1, r7, #16
 8007d9e:	2300      	movs	r3, #0
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	f7fe fd95 	bl	80068d0 <xQueueGenericSendFromISR>
 8007da6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3728      	adds	r7, #40	; 0x28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	200011c8 	.word	0x200011c8

08007db8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc2:	4b22      	ldr	r3, [pc, #136]	; (8007e4c <prvProcessExpiredTimer+0x94>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	3304      	adds	r3, #4
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fe fb51 	bl	8006478 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ddc:	f003 0304 	and.w	r3, r3, #4
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d022      	beq.n	8007e2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	699a      	ldr	r2, [r3, #24]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	18d1      	adds	r1, r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	6978      	ldr	r0, [r7, #20]
 8007df2:	f000 f8d1 	bl	8007f98 <prvInsertTimerInActiveList>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01f      	beq.n	8007e3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	2300      	movs	r3, #0
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	2100      	movs	r1, #0
 8007e06:	6978      	ldr	r0, [r7, #20]
 8007e08:	f7ff ff88 	bl	8007d1c <xTimerGenericCommand>
 8007e0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d113      	bne.n	8007e3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	60fb      	str	r3, [r7, #12]
}
 8007e26:	bf00      	nop
 8007e28:	e7fe      	b.n	8007e28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e30:	f023 0301 	bic.w	r3, r3, #1
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	6978      	ldr	r0, [r7, #20]
 8007e42:	4798      	blx	r3
}
 8007e44:	bf00      	nop
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	200011c0 	.word	0x200011c0

08007e50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e58:	f107 0308 	add.w	r3, r7, #8
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 f857 	bl	8007f10 <prvGetNextExpireTime>
 8007e62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	4619      	mov	r1, r3
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 f803 	bl	8007e74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e6e:	f000 f8d5 	bl	800801c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e72:	e7f1      	b.n	8007e58 <prvTimerTask+0x8>

08007e74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e7e:	f7ff fa39 	bl	80072f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e82:	f107 0308 	add.w	r3, r7, #8
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 f866 	bl	8007f58 <prvSampleTimeNow>
 8007e8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d130      	bne.n	8007ef6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <prvProcessTimerOrBlockTask+0x3c>
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d806      	bhi.n	8007eb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007ea2:	f7ff fa35 	bl	8007310 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ea6:	68f9      	ldr	r1, [r7, #12]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff ff85 	bl	8007db8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007eae:	e024      	b.n	8007efa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d008      	beq.n	8007ec8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007eb6:	4b13      	ldr	r3, [pc, #76]	; (8007f04 <prvProcessTimerOrBlockTask+0x90>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <prvProcessTimerOrBlockTask+0x50>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e000      	b.n	8007ec6 <prvProcessTimerOrBlockTask+0x52>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ec8:	4b0f      	ldr	r3, [pc, #60]	; (8007f08 <prvProcessTimerOrBlockTask+0x94>)
 8007eca:	6818      	ldr	r0, [r3, #0]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	f7fe ffb1 	bl	8006e3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007eda:	f7ff fa19 	bl	8007310 <xTaskResumeAll>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10a      	bne.n	8007efa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ee4:	4b09      	ldr	r3, [pc, #36]	; (8007f0c <prvProcessTimerOrBlockTask+0x98>)
 8007ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	f3bf 8f6f 	isb	sy
}
 8007ef4:	e001      	b.n	8007efa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ef6:	f7ff fa0b 	bl	8007310 <xTaskResumeAll>
}
 8007efa:	bf00      	nop
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	200011c4 	.word	0x200011c4
 8007f08:	200011c8 	.word	0x200011c8
 8007f0c:	e000ed04 	.word	0xe000ed04

08007f10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f18:	4b0e      	ldr	r3, [pc, #56]	; (8007f54 <prvGetNextExpireTime+0x44>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <prvGetNextExpireTime+0x16>
 8007f22:	2201      	movs	r2, #1
 8007f24:	e000      	b.n	8007f28 <prvGetNextExpireTime+0x18>
 8007f26:	2200      	movs	r2, #0
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d105      	bne.n	8007f40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f34:	4b07      	ldr	r3, [pc, #28]	; (8007f54 <prvGetNextExpireTime+0x44>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	60fb      	str	r3, [r7, #12]
 8007f3e:	e001      	b.n	8007f44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f44:	68fb      	ldr	r3, [r7, #12]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	200011c0 	.word	0x200011c0

08007f58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f60:	f7ff fa74 	bl	800744c <xTaskGetTickCount>
 8007f64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f66:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <prvSampleTimeNow+0x3c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d205      	bcs.n	8007f7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f70:	f000 f936 	bl	80081e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	e002      	b.n	8007f82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f82:	4a04      	ldr	r2, [pc, #16]	; (8007f94 <prvSampleTimeNow+0x3c>)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f88:	68fb      	ldr	r3, [r7, #12]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	200011d0 	.word	0x200011d0

08007f98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
 8007fa4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d812      	bhi.n	8007fe4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	1ad2      	subs	r2, r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d302      	bcc.n	8007fd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	617b      	str	r3, [r7, #20]
 8007fd0:	e01b      	b.n	800800a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007fd2:	4b10      	ldr	r3, [pc, #64]	; (8008014 <prvInsertTimerInActiveList+0x7c>)
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	3304      	adds	r3, #4
 8007fda:	4619      	mov	r1, r3
 8007fdc:	4610      	mov	r0, r2
 8007fde:	f7fe fa12 	bl	8006406 <vListInsert>
 8007fe2:	e012      	b.n	800800a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d206      	bcs.n	8007ffa <prvInsertTimerInActiveList+0x62>
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d302      	bcc.n	8007ffa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	617b      	str	r3, [r7, #20]
 8007ff8:	e007      	b.n	800800a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ffa:	4b07      	ldr	r3, [pc, #28]	; (8008018 <prvInsertTimerInActiveList+0x80>)
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3304      	adds	r3, #4
 8008002:	4619      	mov	r1, r3
 8008004:	4610      	mov	r0, r2
 8008006:	f7fe f9fe 	bl	8006406 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800800a:	697b      	ldr	r3, [r7, #20]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	200011c4 	.word	0x200011c4
 8008018:	200011c0 	.word	0x200011c0

0800801c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08e      	sub	sp, #56	; 0x38
 8008020:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008022:	e0ca      	b.n	80081ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	da18      	bge.n	800805c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800802a:	1d3b      	adds	r3, r7, #4
 800802c:	3304      	adds	r3, #4
 800802e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10a      	bne.n	800804c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	61fb      	str	r3, [r7, #28]
}
 8008048:	bf00      	nop
 800804a:	e7fe      	b.n	800804a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008052:	6850      	ldr	r0, [r2, #4]
 8008054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008056:	6892      	ldr	r2, [r2, #8]
 8008058:	4611      	mov	r1, r2
 800805a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	f2c0 80ab 	blt.w	80081ba <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d004      	beq.n	800807a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	3304      	adds	r3, #4
 8008074:	4618      	mov	r0, r3
 8008076:	f7fe f9ff 	bl	8006478 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800807a:	463b      	mov	r3, r7
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff ff6b 	bl	8007f58 <prvSampleTimeNow>
 8008082:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b09      	cmp	r3, #9
 8008088:	f200 8096 	bhi.w	80081b8 <prvProcessReceivedCommands+0x19c>
 800808c:	a201      	add	r2, pc, #4	; (adr r2, 8008094 <prvProcessReceivedCommands+0x78>)
 800808e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008092:	bf00      	nop
 8008094:	080080bd 	.word	0x080080bd
 8008098:	080080bd 	.word	0x080080bd
 800809c:	080080bd 	.word	0x080080bd
 80080a0:	08008131 	.word	0x08008131
 80080a4:	08008145 	.word	0x08008145
 80080a8:	0800818f 	.word	0x0800818f
 80080ac:	080080bd 	.word	0x080080bd
 80080b0:	080080bd 	.word	0x080080bd
 80080b4:	08008131 	.word	0x08008131
 80080b8:	08008145 	.word	0x08008145
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080c2:	f043 0301 	orr.w	r3, r3, #1
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	18d1      	adds	r1, r2, r3
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080dc:	f7ff ff5c 	bl	8007f98 <prvInsertTimerInActiveList>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d069      	beq.n	80081ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d05e      	beq.n	80081ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	441a      	add	r2, r3
 8008104:	2300      	movs	r3, #0
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	2300      	movs	r3, #0
 800810a:	2100      	movs	r1, #0
 800810c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800810e:	f7ff fe05 	bl	8007d1c <xTimerGenericCommand>
 8008112:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d14f      	bne.n	80081ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	61bb      	str	r3, [r7, #24]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008136:	f023 0301 	bic.w	r3, r3, #1
 800813a:	b2da      	uxtb	r2, r3
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008142:	e03a      	b.n	80081ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800814a:	f043 0301 	orr.w	r3, r3, #1
 800814e:	b2da      	uxtb	r2, r3
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10a      	bne.n	800817a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	617b      	str	r3, [r7, #20]
}
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	699a      	ldr	r2, [r3, #24]
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	18d1      	adds	r1, r2, r3
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008188:	f7ff ff06 	bl	8007f98 <prvInsertTimerInActiveList>
					break;
 800818c:	e015      	b.n	80081ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d103      	bne.n	80081a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800819c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800819e:	f000 fbdf 	bl	8008960 <vPortFree>
 80081a2:	e00a      	b.n	80081ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081aa:	f023 0301 	bic.w	r3, r3, #1
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081b6:	e000      	b.n	80081ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80081b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081ba:	4b08      	ldr	r3, [pc, #32]	; (80081dc <prvProcessReceivedCommands+0x1c0>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	1d39      	adds	r1, r7, #4
 80081c0:	2200      	movs	r2, #0
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe fc20 	bl	8006a08 <xQueueReceive>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f47f af2a 	bne.w	8008024 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80081d0:	bf00      	nop
 80081d2:	bf00      	nop
 80081d4:	3730      	adds	r7, #48	; 0x30
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	200011c8 	.word	0x200011c8

080081e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081e6:	e048      	b.n	800827a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081e8:	4b2d      	ldr	r3, [pc, #180]	; (80082a0 <prvSwitchTimerLists+0xc0>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081f2:	4b2b      	ldr	r3, [pc, #172]	; (80082a0 <prvSwitchTimerLists+0xc0>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	3304      	adds	r3, #4
 8008200:	4618      	mov	r0, r3
 8008202:	f7fe f939 	bl	8006478 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008214:	f003 0304 	and.w	r3, r3, #4
 8008218:	2b00      	cmp	r3, #0
 800821a:	d02e      	beq.n	800827a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	4413      	add	r3, r2
 8008224:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	429a      	cmp	r2, r3
 800822c:	d90e      	bls.n	800824c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800823a:	4b19      	ldr	r3, [pc, #100]	; (80082a0 <prvSwitchTimerLists+0xc0>)
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3304      	adds	r3, #4
 8008242:	4619      	mov	r1, r3
 8008244:	4610      	mov	r0, r2
 8008246:	f7fe f8de 	bl	8006406 <vListInsert>
 800824a:	e016      	b.n	800827a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800824c:	2300      	movs	r3, #0
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	2300      	movs	r3, #0
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	2100      	movs	r1, #0
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f7ff fd60 	bl	8007d1c <xTimerGenericCommand>
 800825c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10a      	bne.n	800827a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	603b      	str	r3, [r7, #0]
}
 8008276:	bf00      	nop
 8008278:	e7fe      	b.n	8008278 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800827a:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <prvSwitchTimerLists+0xc0>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1b1      	bne.n	80081e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008284:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <prvSwitchTimerLists+0xc0>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800828a:	4b06      	ldr	r3, [pc, #24]	; (80082a4 <prvSwitchTimerLists+0xc4>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a04      	ldr	r2, [pc, #16]	; (80082a0 <prvSwitchTimerLists+0xc0>)
 8008290:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008292:	4a04      	ldr	r2, [pc, #16]	; (80082a4 <prvSwitchTimerLists+0xc4>)
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	6013      	str	r3, [r2, #0]
}
 8008298:	bf00      	nop
 800829a:	3718      	adds	r7, #24
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	200011c0 	.word	0x200011c0
 80082a4:	200011c4 	.word	0x200011c4

080082a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80082ae:	f000 f969 	bl	8008584 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80082b2:	4b15      	ldr	r3, [pc, #84]	; (8008308 <prvCheckForValidListAndQueue+0x60>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d120      	bne.n	80082fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80082ba:	4814      	ldr	r0, [pc, #80]	; (800830c <prvCheckForValidListAndQueue+0x64>)
 80082bc:	f7fe f852 	bl	8006364 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80082c0:	4813      	ldr	r0, [pc, #76]	; (8008310 <prvCheckForValidListAndQueue+0x68>)
 80082c2:	f7fe f84f 	bl	8006364 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80082c6:	4b13      	ldr	r3, [pc, #76]	; (8008314 <prvCheckForValidListAndQueue+0x6c>)
 80082c8:	4a10      	ldr	r2, [pc, #64]	; (800830c <prvCheckForValidListAndQueue+0x64>)
 80082ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80082cc:	4b12      	ldr	r3, [pc, #72]	; (8008318 <prvCheckForValidListAndQueue+0x70>)
 80082ce:	4a10      	ldr	r2, [pc, #64]	; (8008310 <prvCheckForValidListAndQueue+0x68>)
 80082d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80082d2:	2300      	movs	r3, #0
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	4b11      	ldr	r3, [pc, #68]	; (800831c <prvCheckForValidListAndQueue+0x74>)
 80082d8:	4a11      	ldr	r2, [pc, #68]	; (8008320 <prvCheckForValidListAndQueue+0x78>)
 80082da:	2110      	movs	r1, #16
 80082dc:	200a      	movs	r0, #10
 80082de:	f7fe f95d 	bl	800659c <xQueueGenericCreateStatic>
 80082e2:	4603      	mov	r3, r0
 80082e4:	4a08      	ldr	r2, [pc, #32]	; (8008308 <prvCheckForValidListAndQueue+0x60>)
 80082e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80082e8:	4b07      	ldr	r3, [pc, #28]	; (8008308 <prvCheckForValidListAndQueue+0x60>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d005      	beq.n	80082fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80082f0:	4b05      	ldr	r3, [pc, #20]	; (8008308 <prvCheckForValidListAndQueue+0x60>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	490b      	ldr	r1, [pc, #44]	; (8008324 <prvCheckForValidListAndQueue+0x7c>)
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe fd76 	bl	8006de8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082fc:	f000 f972 	bl	80085e4 <vPortExitCritical>
}
 8008300:	bf00      	nop
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	200011c8 	.word	0x200011c8
 800830c:	20001198 	.word	0x20001198
 8008310:	200011ac 	.word	0x200011ac
 8008314:	200011c0 	.word	0x200011c0
 8008318:	200011c4 	.word	0x200011c4
 800831c:	20001274 	.word	0x20001274
 8008320:	200011d4 	.word	0x200011d4
 8008324:	0800d6f0 	.word	0x0800d6f0

08008328 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	3b04      	subs	r3, #4
 8008338:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3b04      	subs	r3, #4
 8008346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f023 0201 	bic.w	r2, r3, #1
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3b04      	subs	r3, #4
 8008356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008358:	4a0c      	ldr	r2, [pc, #48]	; (800838c <pxPortInitialiseStack+0x64>)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	3b14      	subs	r3, #20
 8008362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3b04      	subs	r3, #4
 800836e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f06f 0202 	mvn.w	r2, #2
 8008376:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	3b20      	subs	r3, #32
 800837c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800837e:	68fb      	ldr	r3, [r7, #12]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	08008391 	.word	0x08008391

08008390 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800839a:	4b12      	ldr	r3, [pc, #72]	; (80083e4 <prvTaskExitError+0x54>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083a2:	d00a      	beq.n	80083ba <prvTaskExitError+0x2a>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	60fb      	str	r3, [r7, #12]
}
 80083b6:	bf00      	nop
 80083b8:	e7fe      	b.n	80083b8 <prvTaskExitError+0x28>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	60bb      	str	r3, [r7, #8]
}
 80083cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083ce:	bf00      	nop
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d0fc      	beq.n	80083d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083d6:	bf00      	nop
 80083d8:	bf00      	nop
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	20000010 	.word	0x20000010
	...

080083f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083f0:	4b07      	ldr	r3, [pc, #28]	; (8008410 <pxCurrentTCBConst2>)
 80083f2:	6819      	ldr	r1, [r3, #0]
 80083f4:	6808      	ldr	r0, [r1, #0]
 80083f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fa:	f380 8809 	msr	PSP, r0
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f04f 0000 	mov.w	r0, #0
 8008406:	f380 8811 	msr	BASEPRI, r0
 800840a:	4770      	bx	lr
 800840c:	f3af 8000 	nop.w

08008410 <pxCurrentTCBConst2>:
 8008410:	20000c98 	.word	0x20000c98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop

08008418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008418:	4808      	ldr	r0, [pc, #32]	; (800843c <prvPortStartFirstTask+0x24>)
 800841a:	6800      	ldr	r0, [r0, #0]
 800841c:	6800      	ldr	r0, [r0, #0]
 800841e:	f380 8808 	msr	MSP, r0
 8008422:	f04f 0000 	mov.w	r0, #0
 8008426:	f380 8814 	msr	CONTROL, r0
 800842a:	b662      	cpsie	i
 800842c:	b661      	cpsie	f
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	df00      	svc	0
 8008438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800843a:	bf00      	nop
 800843c:	e000ed08 	.word	0xe000ed08

08008440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008446:	4b46      	ldr	r3, [pc, #280]	; (8008560 <xPortStartScheduler+0x120>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a46      	ldr	r2, [pc, #280]	; (8008564 <xPortStartScheduler+0x124>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d10a      	bne.n	8008466 <xPortStartScheduler+0x26>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	613b      	str	r3, [r7, #16]
}
 8008462:	bf00      	nop
 8008464:	e7fe      	b.n	8008464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008466:	4b3e      	ldr	r3, [pc, #248]	; (8008560 <xPortStartScheduler+0x120>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a3f      	ldr	r2, [pc, #252]	; (8008568 <xPortStartScheduler+0x128>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d10a      	bne.n	8008486 <xPortStartScheduler+0x46>
	__asm volatile
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	60fb      	str	r3, [r7, #12]
}
 8008482:	bf00      	nop
 8008484:	e7fe      	b.n	8008484 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008486:	4b39      	ldr	r3, [pc, #228]	; (800856c <xPortStartScheduler+0x12c>)
 8008488:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	b2db      	uxtb	r3, r3
 8008490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	22ff      	movs	r2, #255	; 0xff
 8008496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084a0:	78fb      	ldrb	r3, [r7, #3]
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	4b31      	ldr	r3, [pc, #196]	; (8008570 <xPortStartScheduler+0x130>)
 80084ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084ae:	4b31      	ldr	r3, [pc, #196]	; (8008574 <xPortStartScheduler+0x134>)
 80084b0:	2207      	movs	r2, #7
 80084b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084b4:	e009      	b.n	80084ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80084b6:	4b2f      	ldr	r3, [pc, #188]	; (8008574 <xPortStartScheduler+0x134>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	4a2d      	ldr	r2, [pc, #180]	; (8008574 <xPortStartScheduler+0x134>)
 80084be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084ca:	78fb      	ldrb	r3, [r7, #3]
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d2:	2b80      	cmp	r3, #128	; 0x80
 80084d4:	d0ef      	beq.n	80084b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084d6:	4b27      	ldr	r3, [pc, #156]	; (8008574 <xPortStartScheduler+0x134>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f1c3 0307 	rsb	r3, r3, #7
 80084de:	2b04      	cmp	r3, #4
 80084e0:	d00a      	beq.n	80084f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	60bb      	str	r3, [r7, #8]
}
 80084f4:	bf00      	nop
 80084f6:	e7fe      	b.n	80084f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084f8:	4b1e      	ldr	r3, [pc, #120]	; (8008574 <xPortStartScheduler+0x134>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	021b      	lsls	r3, r3, #8
 80084fe:	4a1d      	ldr	r2, [pc, #116]	; (8008574 <xPortStartScheduler+0x134>)
 8008500:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008502:	4b1c      	ldr	r3, [pc, #112]	; (8008574 <xPortStartScheduler+0x134>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800850a:	4a1a      	ldr	r2, [pc, #104]	; (8008574 <xPortStartScheduler+0x134>)
 800850c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	b2da      	uxtb	r2, r3
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008516:	4b18      	ldr	r3, [pc, #96]	; (8008578 <xPortStartScheduler+0x138>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a17      	ldr	r2, [pc, #92]	; (8008578 <xPortStartScheduler+0x138>)
 800851c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008522:	4b15      	ldr	r3, [pc, #84]	; (8008578 <xPortStartScheduler+0x138>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a14      	ldr	r2, [pc, #80]	; (8008578 <xPortStartScheduler+0x138>)
 8008528:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800852c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800852e:	f000 f8dd 	bl	80086ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008532:	4b12      	ldr	r3, [pc, #72]	; (800857c <xPortStartScheduler+0x13c>)
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008538:	f000 f8fc 	bl	8008734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800853c:	4b10      	ldr	r3, [pc, #64]	; (8008580 <xPortStartScheduler+0x140>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a0f      	ldr	r2, [pc, #60]	; (8008580 <xPortStartScheduler+0x140>)
 8008542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008546:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008548:	f7ff ff66 	bl	8008418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800854c:	f7ff f848 	bl	80075e0 <vTaskSwitchContext>
	prvTaskExitError();
 8008550:	f7ff ff1e 	bl	8008390 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	e000ed00 	.word	0xe000ed00
 8008564:	410fc271 	.word	0x410fc271
 8008568:	410fc270 	.word	0x410fc270
 800856c:	e000e400 	.word	0xe000e400
 8008570:	200012c4 	.word	0x200012c4
 8008574:	200012c8 	.word	0x200012c8
 8008578:	e000ed20 	.word	0xe000ed20
 800857c:	20000010 	.word	0x20000010
 8008580:	e000ef34 	.word	0xe000ef34

08008584 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	607b      	str	r3, [r7, #4]
}
 800859c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800859e:	4b0f      	ldr	r3, [pc, #60]	; (80085dc <vPortEnterCritical+0x58>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3301      	adds	r3, #1
 80085a4:	4a0d      	ldr	r2, [pc, #52]	; (80085dc <vPortEnterCritical+0x58>)
 80085a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085a8:	4b0c      	ldr	r3, [pc, #48]	; (80085dc <vPortEnterCritical+0x58>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d10f      	bne.n	80085d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085b0:	4b0b      	ldr	r3, [pc, #44]	; (80085e0 <vPortEnterCritical+0x5c>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00a      	beq.n	80085d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	603b      	str	r3, [r7, #0]
}
 80085cc:	bf00      	nop
 80085ce:	e7fe      	b.n	80085ce <vPortEnterCritical+0x4a>
	}
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	20000010 	.word	0x20000010
 80085e0:	e000ed04 	.word	0xe000ed04

080085e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085ea:	4b12      	ldr	r3, [pc, #72]	; (8008634 <vPortExitCritical+0x50>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10a      	bne.n	8008608 <vPortExitCritical+0x24>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	607b      	str	r3, [r7, #4]
}
 8008604:	bf00      	nop
 8008606:	e7fe      	b.n	8008606 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008608:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <vPortExitCritical+0x50>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3b01      	subs	r3, #1
 800860e:	4a09      	ldr	r2, [pc, #36]	; (8008634 <vPortExitCritical+0x50>)
 8008610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008612:	4b08      	ldr	r3, [pc, #32]	; (8008634 <vPortExitCritical+0x50>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d105      	bne.n	8008626 <vPortExitCritical+0x42>
 800861a:	2300      	movs	r3, #0
 800861c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	f383 8811 	msr	BASEPRI, r3
}
 8008624:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	20000010 	.word	0x20000010
	...

08008640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008640:	f3ef 8009 	mrs	r0, PSP
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	4b15      	ldr	r3, [pc, #84]	; (80086a0 <pxCurrentTCBConst>)
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	f01e 0f10 	tst.w	lr, #16
 8008650:	bf08      	it	eq
 8008652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865a:	6010      	str	r0, [r2, #0]
 800865c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008664:	f380 8811 	msr	BASEPRI, r0
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f7fe ffb6 	bl	80075e0 <vTaskSwitchContext>
 8008674:	f04f 0000 	mov.w	r0, #0
 8008678:	f380 8811 	msr	BASEPRI, r0
 800867c:	bc09      	pop	{r0, r3}
 800867e:	6819      	ldr	r1, [r3, #0]
 8008680:	6808      	ldr	r0, [r1, #0]
 8008682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008686:	f01e 0f10 	tst.w	lr, #16
 800868a:	bf08      	it	eq
 800868c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008690:	f380 8809 	msr	PSP, r0
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	f3af 8000 	nop.w

080086a0 <pxCurrentTCBConst>:
 80086a0:	20000c98 	.word	0x20000c98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop

080086a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	607b      	str	r3, [r7, #4]
}
 80086c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086c2:	f7fe fed3 	bl	800746c <xTaskIncrementTick>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086cc:	4b06      	ldr	r3, [pc, #24]	; (80086e8 <xPortSysTickHandler+0x40>)
 80086ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086d2:	601a      	str	r2, [r3, #0]
 80086d4:	2300      	movs	r3, #0
 80086d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	f383 8811 	msr	BASEPRI, r3
}
 80086de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	e000ed04 	.word	0xe000ed04

080086ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086ec:	b480      	push	{r7}
 80086ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086f0:	4b0b      	ldr	r3, [pc, #44]	; (8008720 <vPortSetupTimerInterrupt+0x34>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086f6:	4b0b      	ldr	r3, [pc, #44]	; (8008724 <vPortSetupTimerInterrupt+0x38>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086fc:	4b0a      	ldr	r3, [pc, #40]	; (8008728 <vPortSetupTimerInterrupt+0x3c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a0a      	ldr	r2, [pc, #40]	; (800872c <vPortSetupTimerInterrupt+0x40>)
 8008702:	fba2 2303 	umull	r2, r3, r2, r3
 8008706:	099b      	lsrs	r3, r3, #6
 8008708:	4a09      	ldr	r2, [pc, #36]	; (8008730 <vPortSetupTimerInterrupt+0x44>)
 800870a:	3b01      	subs	r3, #1
 800870c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800870e:	4b04      	ldr	r3, [pc, #16]	; (8008720 <vPortSetupTimerInterrupt+0x34>)
 8008710:	2207      	movs	r2, #7
 8008712:	601a      	str	r2, [r3, #0]
}
 8008714:	bf00      	nop
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	e000e010 	.word	0xe000e010
 8008724:	e000e018 	.word	0xe000e018
 8008728:	20000004 	.word	0x20000004
 800872c:	10624dd3 	.word	0x10624dd3
 8008730:	e000e014 	.word	0xe000e014

08008734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008744 <vPortEnableVFP+0x10>
 8008738:	6801      	ldr	r1, [r0, #0]
 800873a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800873e:	6001      	str	r1, [r0, #0]
 8008740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008742:	bf00      	nop
 8008744:	e000ed88 	.word	0xe000ed88

08008748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800874e:	f3ef 8305 	mrs	r3, IPSR
 8008752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b0f      	cmp	r3, #15
 8008758:	d914      	bls.n	8008784 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800875a:	4a17      	ldr	r2, [pc, #92]	; (80087b8 <vPortValidateInterruptPriority+0x70>)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4413      	add	r3, r2
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008764:	4b15      	ldr	r3, [pc, #84]	; (80087bc <vPortValidateInterruptPriority+0x74>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	7afa      	ldrb	r2, [r7, #11]
 800876a:	429a      	cmp	r2, r3
 800876c:	d20a      	bcs.n	8008784 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	607b      	str	r3, [r7, #4]
}
 8008780:	bf00      	nop
 8008782:	e7fe      	b.n	8008782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008784:	4b0e      	ldr	r3, [pc, #56]	; (80087c0 <vPortValidateInterruptPriority+0x78>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800878c:	4b0d      	ldr	r3, [pc, #52]	; (80087c4 <vPortValidateInterruptPriority+0x7c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	429a      	cmp	r2, r3
 8008792:	d90a      	bls.n	80087aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	603b      	str	r3, [r7, #0]
}
 80087a6:	bf00      	nop
 80087a8:	e7fe      	b.n	80087a8 <vPortValidateInterruptPriority+0x60>
	}
 80087aa:	bf00      	nop
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	e000e3f0 	.word	0xe000e3f0
 80087bc:	200012c4 	.word	0x200012c4
 80087c0:	e000ed0c 	.word	0xe000ed0c
 80087c4:	200012c8 	.word	0x200012c8

080087c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08a      	sub	sp, #40	; 0x28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087d0:	2300      	movs	r3, #0
 80087d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087d4:	f7fe fd8e 	bl	80072f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087d8:	4b5b      	ldr	r3, [pc, #364]	; (8008948 <pvPortMalloc+0x180>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087e0:	f000 f920 	bl	8008a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087e4:	4b59      	ldr	r3, [pc, #356]	; (800894c <pvPortMalloc+0x184>)
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4013      	ands	r3, r2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f040 8093 	bne.w	8008918 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d01d      	beq.n	8008834 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80087f8:	2208      	movs	r2, #8
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4413      	add	r3, r2
 80087fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f003 0307 	and.w	r3, r3, #7
 8008806:	2b00      	cmp	r3, #0
 8008808:	d014      	beq.n	8008834 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f023 0307 	bic.w	r3, r3, #7
 8008810:	3308      	adds	r3, #8
 8008812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00a      	beq.n	8008834 <pvPortMalloc+0x6c>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	617b      	str	r3, [r7, #20]
}
 8008830:	bf00      	nop
 8008832:	e7fe      	b.n	8008832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d06e      	beq.n	8008918 <pvPortMalloc+0x150>
 800883a:	4b45      	ldr	r3, [pc, #276]	; (8008950 <pvPortMalloc+0x188>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	429a      	cmp	r2, r3
 8008842:	d869      	bhi.n	8008918 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008844:	4b43      	ldr	r3, [pc, #268]	; (8008954 <pvPortMalloc+0x18c>)
 8008846:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008848:	4b42      	ldr	r3, [pc, #264]	; (8008954 <pvPortMalloc+0x18c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800884e:	e004      	b.n	800885a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	429a      	cmp	r2, r3
 8008862:	d903      	bls.n	800886c <pvPortMalloc+0xa4>
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1f1      	bne.n	8008850 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800886c:	4b36      	ldr	r3, [pc, #216]	; (8008948 <pvPortMalloc+0x180>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008872:	429a      	cmp	r2, r3
 8008874:	d050      	beq.n	8008918 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008876:	6a3b      	ldr	r3, [r7, #32]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2208      	movs	r2, #8
 800887c:	4413      	add	r3, r2
 800887e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	2308      	movs	r3, #8
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	429a      	cmp	r2, r3
 8008896:	d91f      	bls.n	80088d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4413      	add	r3, r2
 800889e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	f003 0307 	and.w	r3, r3, #7
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00a      	beq.n	80088c0 <pvPortMalloc+0xf8>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	613b      	str	r3, [r7, #16]
}
 80088bc:	bf00      	nop
 80088be:	e7fe      	b.n	80088be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	1ad2      	subs	r2, r2, r3
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088d2:	69b8      	ldr	r0, [r7, #24]
 80088d4:	f000 f908 	bl	8008ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088d8:	4b1d      	ldr	r3, [pc, #116]	; (8008950 <pvPortMalloc+0x188>)
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	4a1b      	ldr	r2, [pc, #108]	; (8008950 <pvPortMalloc+0x188>)
 80088e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088e6:	4b1a      	ldr	r3, [pc, #104]	; (8008950 <pvPortMalloc+0x188>)
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	4b1b      	ldr	r3, [pc, #108]	; (8008958 <pvPortMalloc+0x190>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d203      	bcs.n	80088fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088f2:	4b17      	ldr	r3, [pc, #92]	; (8008950 <pvPortMalloc+0x188>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a18      	ldr	r2, [pc, #96]	; (8008958 <pvPortMalloc+0x190>)
 80088f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	4b13      	ldr	r3, [pc, #76]	; (800894c <pvPortMalloc+0x184>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	431a      	orrs	r2, r3
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	2200      	movs	r2, #0
 800890c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800890e:	4b13      	ldr	r3, [pc, #76]	; (800895c <pvPortMalloc+0x194>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3301      	adds	r3, #1
 8008914:	4a11      	ldr	r2, [pc, #68]	; (800895c <pvPortMalloc+0x194>)
 8008916:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008918:	f7fe fcfa 	bl	8007310 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	f003 0307 	and.w	r3, r3, #7
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <pvPortMalloc+0x174>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	60fb      	str	r3, [r7, #12]
}
 8008938:	bf00      	nop
 800893a:	e7fe      	b.n	800893a <pvPortMalloc+0x172>
	return pvReturn;
 800893c:	69fb      	ldr	r3, [r7, #28]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3728      	adds	r7, #40	; 0x28
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20001e8c 	.word	0x20001e8c
 800894c:	20001ea0 	.word	0x20001ea0
 8008950:	20001e90 	.word	0x20001e90
 8008954:	20001e84 	.word	0x20001e84
 8008958:	20001e94 	.word	0x20001e94
 800895c:	20001e98 	.word	0x20001e98

08008960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d04d      	beq.n	8008a0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008972:	2308      	movs	r3, #8
 8008974:	425b      	negs	r3, r3
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4413      	add	r3, r2
 800897a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	4b24      	ldr	r3, [pc, #144]	; (8008a18 <vPortFree+0xb8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4013      	ands	r3, r2
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10a      	bne.n	80089a4 <vPortFree+0x44>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	60fb      	str	r3, [r7, #12]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00a      	beq.n	80089c2 <vPortFree+0x62>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	60bb      	str	r3, [r7, #8]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	4b14      	ldr	r3, [pc, #80]	; (8008a18 <vPortFree+0xb8>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4013      	ands	r3, r2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01e      	beq.n	8008a0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d11a      	bne.n	8008a0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	4b0e      	ldr	r3, [pc, #56]	; (8008a18 <vPortFree+0xb8>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	43db      	mvns	r3, r3
 80089e2:	401a      	ands	r2, r3
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80089e8:	f7fe fc84 	bl	80072f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <vPortFree+0xbc>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4413      	add	r3, r2
 80089f6:	4a09      	ldr	r2, [pc, #36]	; (8008a1c <vPortFree+0xbc>)
 80089f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089fa:	6938      	ldr	r0, [r7, #16]
 80089fc:	f000 f874 	bl	8008ae8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a00:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <vPortFree+0xc0>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	3301      	adds	r3, #1
 8008a06:	4a06      	ldr	r2, [pc, #24]	; (8008a20 <vPortFree+0xc0>)
 8008a08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a0a:	f7fe fc81 	bl	8007310 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a0e:	bf00      	nop
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	20001ea0 	.word	0x20001ea0
 8008a1c:	20001e90 	.word	0x20001e90
 8008a20:	20001e9c 	.word	0x20001e9c

08008a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a2a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a30:	4b27      	ldr	r3, [pc, #156]	; (8008ad0 <prvHeapInit+0xac>)
 8008a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00c      	beq.n	8008a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3307      	adds	r3, #7
 8008a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f023 0307 	bic.w	r3, r3, #7
 8008a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	4a1f      	ldr	r2, [pc, #124]	; (8008ad0 <prvHeapInit+0xac>)
 8008a54:	4413      	add	r3, r2
 8008a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a5c:	4a1d      	ldr	r2, [pc, #116]	; (8008ad4 <prvHeapInit+0xb0>)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a62:	4b1c      	ldr	r3, [pc, #112]	; (8008ad4 <prvHeapInit+0xb0>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a70:	2208      	movs	r2, #8
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	1a9b      	subs	r3, r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f023 0307 	bic.w	r3, r3, #7
 8008a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	4a15      	ldr	r2, [pc, #84]	; (8008ad8 <prvHeapInit+0xb4>)
 8008a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a86:	4b14      	ldr	r3, [pc, #80]	; (8008ad8 <prvHeapInit+0xb4>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a8e:	4b12      	ldr	r3, [pc, #72]	; (8008ad8 <prvHeapInit+0xb4>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2200      	movs	r2, #0
 8008a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	1ad2      	subs	r2, r2, r3
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008aa4:	4b0c      	ldr	r3, [pc, #48]	; (8008ad8 <prvHeapInit+0xb4>)
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	4a0a      	ldr	r2, [pc, #40]	; (8008adc <prvHeapInit+0xb8>)
 8008ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	4a09      	ldr	r2, [pc, #36]	; (8008ae0 <prvHeapInit+0xbc>)
 8008aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008abc:	4b09      	ldr	r3, [pc, #36]	; (8008ae4 <prvHeapInit+0xc0>)
 8008abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ac2:	601a      	str	r2, [r3, #0]
}
 8008ac4:	bf00      	nop
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	200012cc 	.word	0x200012cc
 8008ad4:	20001e84 	.word	0x20001e84
 8008ad8:	20001e8c 	.word	0x20001e8c
 8008adc:	20001e94 	.word	0x20001e94
 8008ae0:	20001e90 	.word	0x20001e90
 8008ae4:	20001ea0 	.word	0x20001ea0

08008ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008af0:	4b28      	ldr	r3, [pc, #160]	; (8008b94 <prvInsertBlockIntoFreeList+0xac>)
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	e002      	b.n	8008afc <prvInsertBlockIntoFreeList+0x14>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d8f7      	bhi.n	8008af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	4413      	add	r3, r2
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d108      	bne.n	8008b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	441a      	add	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	441a      	add	r2, r3
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d118      	bne.n	8008b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	4b15      	ldr	r3, [pc, #84]	; (8008b98 <prvInsertBlockIntoFreeList+0xb0>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d00d      	beq.n	8008b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	441a      	add	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	e008      	b.n	8008b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b66:	4b0c      	ldr	r3, [pc, #48]	; (8008b98 <prvInsertBlockIntoFreeList+0xb0>)
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	e003      	b.n	8008b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d002      	beq.n	8008b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b86:	bf00      	nop
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	20001e84 	.word	0x20001e84
 8008b98:	20001e8c 	.word	0x20001e8c

08008b9c <malloc>:
 8008b9c:	4b02      	ldr	r3, [pc, #8]	; (8008ba8 <malloc+0xc>)
 8008b9e:	4601      	mov	r1, r0
 8008ba0:	6818      	ldr	r0, [r3, #0]
 8008ba2:	f000 b823 	b.w	8008bec <_malloc_r>
 8008ba6:	bf00      	nop
 8008ba8:	2000006c 	.word	0x2000006c

08008bac <sbrk_aligned>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	4e0e      	ldr	r6, [pc, #56]	; (8008be8 <sbrk_aligned+0x3c>)
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	6831      	ldr	r1, [r6, #0]
 8008bb4:	4605      	mov	r5, r0
 8008bb6:	b911      	cbnz	r1, 8008bbe <sbrk_aligned+0x12>
 8008bb8:	f001 f9d8 	bl	8009f6c <_sbrk_r>
 8008bbc:	6030      	str	r0, [r6, #0]
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f001 f9d3 	bl	8009f6c <_sbrk_r>
 8008bc6:	1c43      	adds	r3, r0, #1
 8008bc8:	d00a      	beq.n	8008be0 <sbrk_aligned+0x34>
 8008bca:	1cc4      	adds	r4, r0, #3
 8008bcc:	f024 0403 	bic.w	r4, r4, #3
 8008bd0:	42a0      	cmp	r0, r4
 8008bd2:	d007      	beq.n	8008be4 <sbrk_aligned+0x38>
 8008bd4:	1a21      	subs	r1, r4, r0
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f001 f9c8 	bl	8009f6c <_sbrk_r>
 8008bdc:	3001      	adds	r0, #1
 8008bde:	d101      	bne.n	8008be4 <sbrk_aligned+0x38>
 8008be0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008be4:	4620      	mov	r0, r4
 8008be6:	bd70      	pop	{r4, r5, r6, pc}
 8008be8:	20001ea8 	.word	0x20001ea8

08008bec <_malloc_r>:
 8008bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf0:	1ccd      	adds	r5, r1, #3
 8008bf2:	f025 0503 	bic.w	r5, r5, #3
 8008bf6:	3508      	adds	r5, #8
 8008bf8:	2d0c      	cmp	r5, #12
 8008bfa:	bf38      	it	cc
 8008bfc:	250c      	movcc	r5, #12
 8008bfe:	2d00      	cmp	r5, #0
 8008c00:	4607      	mov	r7, r0
 8008c02:	db01      	blt.n	8008c08 <_malloc_r+0x1c>
 8008c04:	42a9      	cmp	r1, r5
 8008c06:	d905      	bls.n	8008c14 <_malloc_r+0x28>
 8008c08:	230c      	movs	r3, #12
 8008c0a:	603b      	str	r3, [r7, #0]
 8008c0c:	2600      	movs	r6, #0
 8008c0e:	4630      	mov	r0, r6
 8008c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ce8 <_malloc_r+0xfc>
 8008c18:	f000 f868 	bl	8008cec <__malloc_lock>
 8008c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c20:	461c      	mov	r4, r3
 8008c22:	bb5c      	cbnz	r4, 8008c7c <_malloc_r+0x90>
 8008c24:	4629      	mov	r1, r5
 8008c26:	4638      	mov	r0, r7
 8008c28:	f7ff ffc0 	bl	8008bac <sbrk_aligned>
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	4604      	mov	r4, r0
 8008c30:	d155      	bne.n	8008cde <_malloc_r+0xf2>
 8008c32:	f8d8 4000 	ldr.w	r4, [r8]
 8008c36:	4626      	mov	r6, r4
 8008c38:	2e00      	cmp	r6, #0
 8008c3a:	d145      	bne.n	8008cc8 <_malloc_r+0xdc>
 8008c3c:	2c00      	cmp	r4, #0
 8008c3e:	d048      	beq.n	8008cd2 <_malloc_r+0xe6>
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	4631      	mov	r1, r6
 8008c44:	4638      	mov	r0, r7
 8008c46:	eb04 0903 	add.w	r9, r4, r3
 8008c4a:	f001 f98f 	bl	8009f6c <_sbrk_r>
 8008c4e:	4581      	cmp	r9, r0
 8008c50:	d13f      	bne.n	8008cd2 <_malloc_r+0xe6>
 8008c52:	6821      	ldr	r1, [r4, #0]
 8008c54:	1a6d      	subs	r5, r5, r1
 8008c56:	4629      	mov	r1, r5
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f7ff ffa7 	bl	8008bac <sbrk_aligned>
 8008c5e:	3001      	adds	r0, #1
 8008c60:	d037      	beq.n	8008cd2 <_malloc_r+0xe6>
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	442b      	add	r3, r5
 8008c66:	6023      	str	r3, [r4, #0]
 8008c68:	f8d8 3000 	ldr.w	r3, [r8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d038      	beq.n	8008ce2 <_malloc_r+0xf6>
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	42a2      	cmp	r2, r4
 8008c74:	d12b      	bne.n	8008cce <_malloc_r+0xe2>
 8008c76:	2200      	movs	r2, #0
 8008c78:	605a      	str	r2, [r3, #4]
 8008c7a:	e00f      	b.n	8008c9c <_malloc_r+0xb0>
 8008c7c:	6822      	ldr	r2, [r4, #0]
 8008c7e:	1b52      	subs	r2, r2, r5
 8008c80:	d41f      	bmi.n	8008cc2 <_malloc_r+0xd6>
 8008c82:	2a0b      	cmp	r2, #11
 8008c84:	d917      	bls.n	8008cb6 <_malloc_r+0xca>
 8008c86:	1961      	adds	r1, r4, r5
 8008c88:	42a3      	cmp	r3, r4
 8008c8a:	6025      	str	r5, [r4, #0]
 8008c8c:	bf18      	it	ne
 8008c8e:	6059      	strne	r1, [r3, #4]
 8008c90:	6863      	ldr	r3, [r4, #4]
 8008c92:	bf08      	it	eq
 8008c94:	f8c8 1000 	streq.w	r1, [r8]
 8008c98:	5162      	str	r2, [r4, r5]
 8008c9a:	604b      	str	r3, [r1, #4]
 8008c9c:	4638      	mov	r0, r7
 8008c9e:	f104 060b 	add.w	r6, r4, #11
 8008ca2:	f000 f829 	bl	8008cf8 <__malloc_unlock>
 8008ca6:	f026 0607 	bic.w	r6, r6, #7
 8008caa:	1d23      	adds	r3, r4, #4
 8008cac:	1af2      	subs	r2, r6, r3
 8008cae:	d0ae      	beq.n	8008c0e <_malloc_r+0x22>
 8008cb0:	1b9b      	subs	r3, r3, r6
 8008cb2:	50a3      	str	r3, [r4, r2]
 8008cb4:	e7ab      	b.n	8008c0e <_malloc_r+0x22>
 8008cb6:	42a3      	cmp	r3, r4
 8008cb8:	6862      	ldr	r2, [r4, #4]
 8008cba:	d1dd      	bne.n	8008c78 <_malloc_r+0x8c>
 8008cbc:	f8c8 2000 	str.w	r2, [r8]
 8008cc0:	e7ec      	b.n	8008c9c <_malloc_r+0xb0>
 8008cc2:	4623      	mov	r3, r4
 8008cc4:	6864      	ldr	r4, [r4, #4]
 8008cc6:	e7ac      	b.n	8008c22 <_malloc_r+0x36>
 8008cc8:	4634      	mov	r4, r6
 8008cca:	6876      	ldr	r6, [r6, #4]
 8008ccc:	e7b4      	b.n	8008c38 <_malloc_r+0x4c>
 8008cce:	4613      	mov	r3, r2
 8008cd0:	e7cc      	b.n	8008c6c <_malloc_r+0x80>
 8008cd2:	230c      	movs	r3, #12
 8008cd4:	603b      	str	r3, [r7, #0]
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	f000 f80e 	bl	8008cf8 <__malloc_unlock>
 8008cdc:	e797      	b.n	8008c0e <_malloc_r+0x22>
 8008cde:	6025      	str	r5, [r4, #0]
 8008ce0:	e7dc      	b.n	8008c9c <_malloc_r+0xb0>
 8008ce2:	605b      	str	r3, [r3, #4]
 8008ce4:	deff      	udf	#255	; 0xff
 8008ce6:	bf00      	nop
 8008ce8:	20001ea4 	.word	0x20001ea4

08008cec <__malloc_lock>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__malloc_lock+0x8>)
 8008cee:	f001 b98a 	b.w	800a006 <__retarget_lock_acquire_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	20001fec 	.word	0x20001fec

08008cf8 <__malloc_unlock>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	; (8008d00 <__malloc_unlock+0x8>)
 8008cfa:	f001 b985 	b.w	800a008 <__retarget_lock_release_recursive>
 8008cfe:	bf00      	nop
 8008d00:	20001fec 	.word	0x20001fec

08008d04 <__cvt>:
 8008d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d08:	ec55 4b10 	vmov	r4, r5, d0
 8008d0c:	2d00      	cmp	r5, #0
 8008d0e:	460e      	mov	r6, r1
 8008d10:	4619      	mov	r1, r3
 8008d12:	462b      	mov	r3, r5
 8008d14:	bfbb      	ittet	lt
 8008d16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d1a:	461d      	movlt	r5, r3
 8008d1c:	2300      	movge	r3, #0
 8008d1e:	232d      	movlt	r3, #45	; 0x2d
 8008d20:	700b      	strb	r3, [r1, #0]
 8008d22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d28:	4691      	mov	r9, r2
 8008d2a:	f023 0820 	bic.w	r8, r3, #32
 8008d2e:	bfbc      	itt	lt
 8008d30:	4622      	movlt	r2, r4
 8008d32:	4614      	movlt	r4, r2
 8008d34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d38:	d005      	beq.n	8008d46 <__cvt+0x42>
 8008d3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d3e:	d100      	bne.n	8008d42 <__cvt+0x3e>
 8008d40:	3601      	adds	r6, #1
 8008d42:	2102      	movs	r1, #2
 8008d44:	e000      	b.n	8008d48 <__cvt+0x44>
 8008d46:	2103      	movs	r1, #3
 8008d48:	ab03      	add	r3, sp, #12
 8008d4a:	9301      	str	r3, [sp, #4]
 8008d4c:	ab02      	add	r3, sp, #8
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	ec45 4b10 	vmov	d0, r4, r5
 8008d54:	4653      	mov	r3, sl
 8008d56:	4632      	mov	r2, r6
 8008d58:	f001 f9f6 	bl	800a148 <_dtoa_r>
 8008d5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d60:	4607      	mov	r7, r0
 8008d62:	d102      	bne.n	8008d6a <__cvt+0x66>
 8008d64:	f019 0f01 	tst.w	r9, #1
 8008d68:	d022      	beq.n	8008db0 <__cvt+0xac>
 8008d6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d6e:	eb07 0906 	add.w	r9, r7, r6
 8008d72:	d110      	bne.n	8008d96 <__cvt+0x92>
 8008d74:	783b      	ldrb	r3, [r7, #0]
 8008d76:	2b30      	cmp	r3, #48	; 0x30
 8008d78:	d10a      	bne.n	8008d90 <__cvt+0x8c>
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4629      	mov	r1, r5
 8008d82:	f7f7 fea1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d86:	b918      	cbnz	r0, 8008d90 <__cvt+0x8c>
 8008d88:	f1c6 0601 	rsb	r6, r6, #1
 8008d8c:	f8ca 6000 	str.w	r6, [sl]
 8008d90:	f8da 3000 	ldr.w	r3, [sl]
 8008d94:	4499      	add	r9, r3
 8008d96:	2200      	movs	r2, #0
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	f7f7 fe93 	bl	8000ac8 <__aeabi_dcmpeq>
 8008da2:	b108      	cbz	r0, 8008da8 <__cvt+0xa4>
 8008da4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008da8:	2230      	movs	r2, #48	; 0x30
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	454b      	cmp	r3, r9
 8008dae:	d307      	bcc.n	8008dc0 <__cvt+0xbc>
 8008db0:	9b03      	ldr	r3, [sp, #12]
 8008db2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008db4:	1bdb      	subs	r3, r3, r7
 8008db6:	4638      	mov	r0, r7
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	b004      	add	sp, #16
 8008dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc0:	1c59      	adds	r1, r3, #1
 8008dc2:	9103      	str	r1, [sp, #12]
 8008dc4:	701a      	strb	r2, [r3, #0]
 8008dc6:	e7f0      	b.n	8008daa <__cvt+0xa6>

08008dc8 <__exponent>:
 8008dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2900      	cmp	r1, #0
 8008dce:	bfb8      	it	lt
 8008dd0:	4249      	neglt	r1, r1
 8008dd2:	f803 2b02 	strb.w	r2, [r3], #2
 8008dd6:	bfb4      	ite	lt
 8008dd8:	222d      	movlt	r2, #45	; 0x2d
 8008dda:	222b      	movge	r2, #43	; 0x2b
 8008ddc:	2909      	cmp	r1, #9
 8008dde:	7042      	strb	r2, [r0, #1]
 8008de0:	dd2a      	ble.n	8008e38 <__exponent+0x70>
 8008de2:	f10d 0207 	add.w	r2, sp, #7
 8008de6:	4617      	mov	r7, r2
 8008de8:	260a      	movs	r6, #10
 8008dea:	4694      	mov	ip, r2
 8008dec:	fb91 f5f6 	sdiv	r5, r1, r6
 8008df0:	fb06 1415 	mls	r4, r6, r5, r1
 8008df4:	3430      	adds	r4, #48	; 0x30
 8008df6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	2c63      	cmp	r4, #99	; 0x63
 8008dfe:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008e02:	4629      	mov	r1, r5
 8008e04:	dcf1      	bgt.n	8008dea <__exponent+0x22>
 8008e06:	3130      	adds	r1, #48	; 0x30
 8008e08:	f1ac 0402 	sub.w	r4, ip, #2
 8008e0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008e10:	1c41      	adds	r1, r0, #1
 8008e12:	4622      	mov	r2, r4
 8008e14:	42ba      	cmp	r2, r7
 8008e16:	d30a      	bcc.n	8008e2e <__exponent+0x66>
 8008e18:	f10d 0209 	add.w	r2, sp, #9
 8008e1c:	eba2 020c 	sub.w	r2, r2, ip
 8008e20:	42bc      	cmp	r4, r7
 8008e22:	bf88      	it	hi
 8008e24:	2200      	movhi	r2, #0
 8008e26:	4413      	add	r3, r2
 8008e28:	1a18      	subs	r0, r3, r0
 8008e2a:	b003      	add	sp, #12
 8008e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e2e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008e32:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008e36:	e7ed      	b.n	8008e14 <__exponent+0x4c>
 8008e38:	2330      	movs	r3, #48	; 0x30
 8008e3a:	3130      	adds	r1, #48	; 0x30
 8008e3c:	7083      	strb	r3, [r0, #2]
 8008e3e:	70c1      	strb	r1, [r0, #3]
 8008e40:	1d03      	adds	r3, r0, #4
 8008e42:	e7f1      	b.n	8008e28 <__exponent+0x60>

08008e44 <_printf_float>:
 8008e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e48:	ed2d 8b02 	vpush	{d8}
 8008e4c:	b08d      	sub	sp, #52	; 0x34
 8008e4e:	460c      	mov	r4, r1
 8008e50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e54:	4616      	mov	r6, r2
 8008e56:	461f      	mov	r7, r3
 8008e58:	4605      	mov	r5, r0
 8008e5a:	f000 fff9 	bl	8009e50 <_localeconv_r>
 8008e5e:	f8d0 a000 	ldr.w	sl, [r0]
 8008e62:	4650      	mov	r0, sl
 8008e64:	f7f7 fa04 	bl	8000270 <strlen>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	9305      	str	r3, [sp, #20]
 8008e70:	f8d8 3000 	ldr.w	r3, [r8]
 8008e74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e78:	3307      	adds	r3, #7
 8008e7a:	f023 0307 	bic.w	r3, r3, #7
 8008e7e:	f103 0208 	add.w	r2, r3, #8
 8008e82:	f8c8 2000 	str.w	r2, [r8]
 8008e86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e8e:	9307      	str	r3, [sp, #28]
 8008e90:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e94:	ee08 0a10 	vmov	s16, r0
 8008e98:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008e9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ea0:	4b9e      	ldr	r3, [pc, #632]	; (800911c <_printf_float+0x2d8>)
 8008ea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ea6:	f7f7 fe41 	bl	8000b2c <__aeabi_dcmpun>
 8008eaa:	bb88      	cbnz	r0, 8008f10 <_printf_float+0xcc>
 8008eac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008eb0:	4b9a      	ldr	r3, [pc, #616]	; (800911c <_printf_float+0x2d8>)
 8008eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008eb6:	f7f7 fe1b 	bl	8000af0 <__aeabi_dcmple>
 8008eba:	bb48      	cbnz	r0, 8008f10 <_printf_float+0xcc>
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	f7f7 fe0a 	bl	8000adc <__aeabi_dcmplt>
 8008ec8:	b110      	cbz	r0, 8008ed0 <_printf_float+0x8c>
 8008eca:	232d      	movs	r3, #45	; 0x2d
 8008ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ed0:	4a93      	ldr	r2, [pc, #588]	; (8009120 <_printf_float+0x2dc>)
 8008ed2:	4b94      	ldr	r3, [pc, #592]	; (8009124 <_printf_float+0x2e0>)
 8008ed4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ed8:	bf94      	ite	ls
 8008eda:	4690      	movls	r8, r2
 8008edc:	4698      	movhi	r8, r3
 8008ede:	2303      	movs	r3, #3
 8008ee0:	6123      	str	r3, [r4, #16]
 8008ee2:	9b05      	ldr	r3, [sp, #20]
 8008ee4:	f023 0304 	bic.w	r3, r3, #4
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	f04f 0900 	mov.w	r9, #0
 8008eee:	9700      	str	r7, [sp, #0]
 8008ef0:	4633      	mov	r3, r6
 8008ef2:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	f000 f9da 	bl	80092b0 <_printf_common>
 8008efc:	3001      	adds	r0, #1
 8008efe:	f040 8090 	bne.w	8009022 <_printf_float+0x1de>
 8008f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f06:	b00d      	add	sp, #52	; 0x34
 8008f08:	ecbd 8b02 	vpop	{d8}
 8008f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f10:	4642      	mov	r2, r8
 8008f12:	464b      	mov	r3, r9
 8008f14:	4640      	mov	r0, r8
 8008f16:	4649      	mov	r1, r9
 8008f18:	f7f7 fe08 	bl	8000b2c <__aeabi_dcmpun>
 8008f1c:	b140      	cbz	r0, 8008f30 <_printf_float+0xec>
 8008f1e:	464b      	mov	r3, r9
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	bfbc      	itt	lt
 8008f24:	232d      	movlt	r3, #45	; 0x2d
 8008f26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f2a:	4a7f      	ldr	r2, [pc, #508]	; (8009128 <_printf_float+0x2e4>)
 8008f2c:	4b7f      	ldr	r3, [pc, #508]	; (800912c <_printf_float+0x2e8>)
 8008f2e:	e7d1      	b.n	8008ed4 <_printf_float+0x90>
 8008f30:	6863      	ldr	r3, [r4, #4]
 8008f32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f36:	9206      	str	r2, [sp, #24]
 8008f38:	1c5a      	adds	r2, r3, #1
 8008f3a:	d13f      	bne.n	8008fbc <_printf_float+0x178>
 8008f3c:	2306      	movs	r3, #6
 8008f3e:	6063      	str	r3, [r4, #4]
 8008f40:	9b05      	ldr	r3, [sp, #20]
 8008f42:	6861      	ldr	r1, [r4, #4]
 8008f44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f48:	2300      	movs	r3, #0
 8008f4a:	9303      	str	r3, [sp, #12]
 8008f4c:	ab0a      	add	r3, sp, #40	; 0x28
 8008f4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f52:	ab09      	add	r3, sp, #36	; 0x24
 8008f54:	ec49 8b10 	vmov	d0, r8, r9
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	6022      	str	r2, [r4, #0]
 8008f5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f60:	4628      	mov	r0, r5
 8008f62:	f7ff fecf 	bl	8008d04 <__cvt>
 8008f66:	9b06      	ldr	r3, [sp, #24]
 8008f68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f6a:	2b47      	cmp	r3, #71	; 0x47
 8008f6c:	4680      	mov	r8, r0
 8008f6e:	d108      	bne.n	8008f82 <_printf_float+0x13e>
 8008f70:	1cc8      	adds	r0, r1, #3
 8008f72:	db02      	blt.n	8008f7a <_printf_float+0x136>
 8008f74:	6863      	ldr	r3, [r4, #4]
 8008f76:	4299      	cmp	r1, r3
 8008f78:	dd41      	ble.n	8008ffe <_printf_float+0x1ba>
 8008f7a:	f1ab 0302 	sub.w	r3, fp, #2
 8008f7e:	fa5f fb83 	uxtb.w	fp, r3
 8008f82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f86:	d820      	bhi.n	8008fca <_printf_float+0x186>
 8008f88:	3901      	subs	r1, #1
 8008f8a:	465a      	mov	r2, fp
 8008f8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f90:	9109      	str	r1, [sp, #36]	; 0x24
 8008f92:	f7ff ff19 	bl	8008dc8 <__exponent>
 8008f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f98:	1813      	adds	r3, r2, r0
 8008f9a:	2a01      	cmp	r2, #1
 8008f9c:	4681      	mov	r9, r0
 8008f9e:	6123      	str	r3, [r4, #16]
 8008fa0:	dc02      	bgt.n	8008fa8 <_printf_float+0x164>
 8008fa2:	6822      	ldr	r2, [r4, #0]
 8008fa4:	07d2      	lsls	r2, r2, #31
 8008fa6:	d501      	bpl.n	8008fac <_printf_float+0x168>
 8008fa8:	3301      	adds	r3, #1
 8008faa:	6123      	str	r3, [r4, #16]
 8008fac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d09c      	beq.n	8008eee <_printf_float+0xaa>
 8008fb4:	232d      	movs	r3, #45	; 0x2d
 8008fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fba:	e798      	b.n	8008eee <_printf_float+0xaa>
 8008fbc:	9a06      	ldr	r2, [sp, #24]
 8008fbe:	2a47      	cmp	r2, #71	; 0x47
 8008fc0:	d1be      	bne.n	8008f40 <_printf_float+0xfc>
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1bc      	bne.n	8008f40 <_printf_float+0xfc>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e7b9      	b.n	8008f3e <_printf_float+0xfa>
 8008fca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008fce:	d118      	bne.n	8009002 <_printf_float+0x1be>
 8008fd0:	2900      	cmp	r1, #0
 8008fd2:	6863      	ldr	r3, [r4, #4]
 8008fd4:	dd0b      	ble.n	8008fee <_printf_float+0x1aa>
 8008fd6:	6121      	str	r1, [r4, #16]
 8008fd8:	b913      	cbnz	r3, 8008fe0 <_printf_float+0x19c>
 8008fda:	6822      	ldr	r2, [r4, #0]
 8008fdc:	07d0      	lsls	r0, r2, #31
 8008fde:	d502      	bpl.n	8008fe6 <_printf_float+0x1a2>
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	440b      	add	r3, r1
 8008fe4:	6123      	str	r3, [r4, #16]
 8008fe6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008fe8:	f04f 0900 	mov.w	r9, #0
 8008fec:	e7de      	b.n	8008fac <_printf_float+0x168>
 8008fee:	b913      	cbnz	r3, 8008ff6 <_printf_float+0x1b2>
 8008ff0:	6822      	ldr	r2, [r4, #0]
 8008ff2:	07d2      	lsls	r2, r2, #31
 8008ff4:	d501      	bpl.n	8008ffa <_printf_float+0x1b6>
 8008ff6:	3302      	adds	r3, #2
 8008ff8:	e7f4      	b.n	8008fe4 <_printf_float+0x1a0>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e7f2      	b.n	8008fe4 <_printf_float+0x1a0>
 8008ffe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009004:	4299      	cmp	r1, r3
 8009006:	db05      	blt.n	8009014 <_printf_float+0x1d0>
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	6121      	str	r1, [r4, #16]
 800900c:	07d8      	lsls	r0, r3, #31
 800900e:	d5ea      	bpl.n	8008fe6 <_printf_float+0x1a2>
 8009010:	1c4b      	adds	r3, r1, #1
 8009012:	e7e7      	b.n	8008fe4 <_printf_float+0x1a0>
 8009014:	2900      	cmp	r1, #0
 8009016:	bfd4      	ite	le
 8009018:	f1c1 0202 	rsble	r2, r1, #2
 800901c:	2201      	movgt	r2, #1
 800901e:	4413      	add	r3, r2
 8009020:	e7e0      	b.n	8008fe4 <_printf_float+0x1a0>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	055a      	lsls	r2, r3, #21
 8009026:	d407      	bmi.n	8009038 <_printf_float+0x1f4>
 8009028:	6923      	ldr	r3, [r4, #16]
 800902a:	4642      	mov	r2, r8
 800902c:	4631      	mov	r1, r6
 800902e:	4628      	mov	r0, r5
 8009030:	47b8      	blx	r7
 8009032:	3001      	adds	r0, #1
 8009034:	d12c      	bne.n	8009090 <_printf_float+0x24c>
 8009036:	e764      	b.n	8008f02 <_printf_float+0xbe>
 8009038:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800903c:	f240 80e0 	bls.w	8009200 <_printf_float+0x3bc>
 8009040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009044:	2200      	movs	r2, #0
 8009046:	2300      	movs	r3, #0
 8009048:	f7f7 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800904c:	2800      	cmp	r0, #0
 800904e:	d034      	beq.n	80090ba <_printf_float+0x276>
 8009050:	4a37      	ldr	r2, [pc, #220]	; (8009130 <_printf_float+0x2ec>)
 8009052:	2301      	movs	r3, #1
 8009054:	4631      	mov	r1, r6
 8009056:	4628      	mov	r0, r5
 8009058:	47b8      	blx	r7
 800905a:	3001      	adds	r0, #1
 800905c:	f43f af51 	beq.w	8008f02 <_printf_float+0xbe>
 8009060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009064:	429a      	cmp	r2, r3
 8009066:	db02      	blt.n	800906e <_printf_float+0x22a>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	07d8      	lsls	r0, r3, #31
 800906c:	d510      	bpl.n	8009090 <_printf_float+0x24c>
 800906e:	ee18 3a10 	vmov	r3, s16
 8009072:	4652      	mov	r2, sl
 8009074:	4631      	mov	r1, r6
 8009076:	4628      	mov	r0, r5
 8009078:	47b8      	blx	r7
 800907a:	3001      	adds	r0, #1
 800907c:	f43f af41 	beq.w	8008f02 <_printf_float+0xbe>
 8009080:	f04f 0800 	mov.w	r8, #0
 8009084:	f104 091a 	add.w	r9, r4, #26
 8009088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800908a:	3b01      	subs	r3, #1
 800908c:	4543      	cmp	r3, r8
 800908e:	dc09      	bgt.n	80090a4 <_printf_float+0x260>
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	079b      	lsls	r3, r3, #30
 8009094:	f100 8107 	bmi.w	80092a6 <_printf_float+0x462>
 8009098:	68e0      	ldr	r0, [r4, #12]
 800909a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800909c:	4298      	cmp	r0, r3
 800909e:	bfb8      	it	lt
 80090a0:	4618      	movlt	r0, r3
 80090a2:	e730      	b.n	8008f06 <_printf_float+0xc2>
 80090a4:	2301      	movs	r3, #1
 80090a6:	464a      	mov	r2, r9
 80090a8:	4631      	mov	r1, r6
 80090aa:	4628      	mov	r0, r5
 80090ac:	47b8      	blx	r7
 80090ae:	3001      	adds	r0, #1
 80090b0:	f43f af27 	beq.w	8008f02 <_printf_float+0xbe>
 80090b4:	f108 0801 	add.w	r8, r8, #1
 80090b8:	e7e6      	b.n	8009088 <_printf_float+0x244>
 80090ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090bc:	2b00      	cmp	r3, #0
 80090be:	dc39      	bgt.n	8009134 <_printf_float+0x2f0>
 80090c0:	4a1b      	ldr	r2, [pc, #108]	; (8009130 <_printf_float+0x2ec>)
 80090c2:	2301      	movs	r3, #1
 80090c4:	4631      	mov	r1, r6
 80090c6:	4628      	mov	r0, r5
 80090c8:	47b8      	blx	r7
 80090ca:	3001      	adds	r0, #1
 80090cc:	f43f af19 	beq.w	8008f02 <_printf_float+0xbe>
 80090d0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80090d4:	4313      	orrs	r3, r2
 80090d6:	d102      	bne.n	80090de <_printf_float+0x29a>
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	07d9      	lsls	r1, r3, #31
 80090dc:	d5d8      	bpl.n	8009090 <_printf_float+0x24c>
 80090de:	ee18 3a10 	vmov	r3, s16
 80090e2:	4652      	mov	r2, sl
 80090e4:	4631      	mov	r1, r6
 80090e6:	4628      	mov	r0, r5
 80090e8:	47b8      	blx	r7
 80090ea:	3001      	adds	r0, #1
 80090ec:	f43f af09 	beq.w	8008f02 <_printf_float+0xbe>
 80090f0:	f04f 0900 	mov.w	r9, #0
 80090f4:	f104 0a1a 	add.w	sl, r4, #26
 80090f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090fa:	425b      	negs	r3, r3
 80090fc:	454b      	cmp	r3, r9
 80090fe:	dc01      	bgt.n	8009104 <_printf_float+0x2c0>
 8009100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009102:	e792      	b.n	800902a <_printf_float+0x1e6>
 8009104:	2301      	movs	r3, #1
 8009106:	4652      	mov	r2, sl
 8009108:	4631      	mov	r1, r6
 800910a:	4628      	mov	r0, r5
 800910c:	47b8      	blx	r7
 800910e:	3001      	adds	r0, #1
 8009110:	f43f aef7 	beq.w	8008f02 <_printf_float+0xbe>
 8009114:	f109 0901 	add.w	r9, r9, #1
 8009118:	e7ee      	b.n	80090f8 <_printf_float+0x2b4>
 800911a:	bf00      	nop
 800911c:	7fefffff 	.word	0x7fefffff
 8009120:	0800d764 	.word	0x0800d764
 8009124:	0800d768 	.word	0x0800d768
 8009128:	0800d76c 	.word	0x0800d76c
 800912c:	0800d770 	.word	0x0800d770
 8009130:	0800d774 	.word	0x0800d774
 8009134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009136:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009138:	429a      	cmp	r2, r3
 800913a:	bfa8      	it	ge
 800913c:	461a      	movge	r2, r3
 800913e:	2a00      	cmp	r2, #0
 8009140:	4691      	mov	r9, r2
 8009142:	dc37      	bgt.n	80091b4 <_printf_float+0x370>
 8009144:	f04f 0b00 	mov.w	fp, #0
 8009148:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800914c:	f104 021a 	add.w	r2, r4, #26
 8009150:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009152:	9305      	str	r3, [sp, #20]
 8009154:	eba3 0309 	sub.w	r3, r3, r9
 8009158:	455b      	cmp	r3, fp
 800915a:	dc33      	bgt.n	80091c4 <_printf_float+0x380>
 800915c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009160:	429a      	cmp	r2, r3
 8009162:	db3b      	blt.n	80091dc <_printf_float+0x398>
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	07da      	lsls	r2, r3, #31
 8009168:	d438      	bmi.n	80091dc <_printf_float+0x398>
 800916a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800916e:	eba2 0903 	sub.w	r9, r2, r3
 8009172:	9b05      	ldr	r3, [sp, #20]
 8009174:	1ad2      	subs	r2, r2, r3
 8009176:	4591      	cmp	r9, r2
 8009178:	bfa8      	it	ge
 800917a:	4691      	movge	r9, r2
 800917c:	f1b9 0f00 	cmp.w	r9, #0
 8009180:	dc35      	bgt.n	80091ee <_printf_float+0x3aa>
 8009182:	f04f 0800 	mov.w	r8, #0
 8009186:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800918a:	f104 0a1a 	add.w	sl, r4, #26
 800918e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009192:	1a9b      	subs	r3, r3, r2
 8009194:	eba3 0309 	sub.w	r3, r3, r9
 8009198:	4543      	cmp	r3, r8
 800919a:	f77f af79 	ble.w	8009090 <_printf_float+0x24c>
 800919e:	2301      	movs	r3, #1
 80091a0:	4652      	mov	r2, sl
 80091a2:	4631      	mov	r1, r6
 80091a4:	4628      	mov	r0, r5
 80091a6:	47b8      	blx	r7
 80091a8:	3001      	adds	r0, #1
 80091aa:	f43f aeaa 	beq.w	8008f02 <_printf_float+0xbe>
 80091ae:	f108 0801 	add.w	r8, r8, #1
 80091b2:	e7ec      	b.n	800918e <_printf_float+0x34a>
 80091b4:	4613      	mov	r3, r2
 80091b6:	4631      	mov	r1, r6
 80091b8:	4642      	mov	r2, r8
 80091ba:	4628      	mov	r0, r5
 80091bc:	47b8      	blx	r7
 80091be:	3001      	adds	r0, #1
 80091c0:	d1c0      	bne.n	8009144 <_printf_float+0x300>
 80091c2:	e69e      	b.n	8008f02 <_printf_float+0xbe>
 80091c4:	2301      	movs	r3, #1
 80091c6:	4631      	mov	r1, r6
 80091c8:	4628      	mov	r0, r5
 80091ca:	9205      	str	r2, [sp, #20]
 80091cc:	47b8      	blx	r7
 80091ce:	3001      	adds	r0, #1
 80091d0:	f43f ae97 	beq.w	8008f02 <_printf_float+0xbe>
 80091d4:	9a05      	ldr	r2, [sp, #20]
 80091d6:	f10b 0b01 	add.w	fp, fp, #1
 80091da:	e7b9      	b.n	8009150 <_printf_float+0x30c>
 80091dc:	ee18 3a10 	vmov	r3, s16
 80091e0:	4652      	mov	r2, sl
 80091e2:	4631      	mov	r1, r6
 80091e4:	4628      	mov	r0, r5
 80091e6:	47b8      	blx	r7
 80091e8:	3001      	adds	r0, #1
 80091ea:	d1be      	bne.n	800916a <_printf_float+0x326>
 80091ec:	e689      	b.n	8008f02 <_printf_float+0xbe>
 80091ee:	9a05      	ldr	r2, [sp, #20]
 80091f0:	464b      	mov	r3, r9
 80091f2:	4442      	add	r2, r8
 80091f4:	4631      	mov	r1, r6
 80091f6:	4628      	mov	r0, r5
 80091f8:	47b8      	blx	r7
 80091fa:	3001      	adds	r0, #1
 80091fc:	d1c1      	bne.n	8009182 <_printf_float+0x33e>
 80091fe:	e680      	b.n	8008f02 <_printf_float+0xbe>
 8009200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009202:	2a01      	cmp	r2, #1
 8009204:	dc01      	bgt.n	800920a <_printf_float+0x3c6>
 8009206:	07db      	lsls	r3, r3, #31
 8009208:	d53a      	bpl.n	8009280 <_printf_float+0x43c>
 800920a:	2301      	movs	r3, #1
 800920c:	4642      	mov	r2, r8
 800920e:	4631      	mov	r1, r6
 8009210:	4628      	mov	r0, r5
 8009212:	47b8      	blx	r7
 8009214:	3001      	adds	r0, #1
 8009216:	f43f ae74 	beq.w	8008f02 <_printf_float+0xbe>
 800921a:	ee18 3a10 	vmov	r3, s16
 800921e:	4652      	mov	r2, sl
 8009220:	4631      	mov	r1, r6
 8009222:	4628      	mov	r0, r5
 8009224:	47b8      	blx	r7
 8009226:	3001      	adds	r0, #1
 8009228:	f43f ae6b 	beq.w	8008f02 <_printf_float+0xbe>
 800922c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009230:	2200      	movs	r2, #0
 8009232:	2300      	movs	r3, #0
 8009234:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009238:	f7f7 fc46 	bl	8000ac8 <__aeabi_dcmpeq>
 800923c:	b9d8      	cbnz	r0, 8009276 <_printf_float+0x432>
 800923e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009242:	f108 0201 	add.w	r2, r8, #1
 8009246:	4631      	mov	r1, r6
 8009248:	4628      	mov	r0, r5
 800924a:	47b8      	blx	r7
 800924c:	3001      	adds	r0, #1
 800924e:	d10e      	bne.n	800926e <_printf_float+0x42a>
 8009250:	e657      	b.n	8008f02 <_printf_float+0xbe>
 8009252:	2301      	movs	r3, #1
 8009254:	4652      	mov	r2, sl
 8009256:	4631      	mov	r1, r6
 8009258:	4628      	mov	r0, r5
 800925a:	47b8      	blx	r7
 800925c:	3001      	adds	r0, #1
 800925e:	f43f ae50 	beq.w	8008f02 <_printf_float+0xbe>
 8009262:	f108 0801 	add.w	r8, r8, #1
 8009266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009268:	3b01      	subs	r3, #1
 800926a:	4543      	cmp	r3, r8
 800926c:	dcf1      	bgt.n	8009252 <_printf_float+0x40e>
 800926e:	464b      	mov	r3, r9
 8009270:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009274:	e6da      	b.n	800902c <_printf_float+0x1e8>
 8009276:	f04f 0800 	mov.w	r8, #0
 800927a:	f104 0a1a 	add.w	sl, r4, #26
 800927e:	e7f2      	b.n	8009266 <_printf_float+0x422>
 8009280:	2301      	movs	r3, #1
 8009282:	4642      	mov	r2, r8
 8009284:	e7df      	b.n	8009246 <_printf_float+0x402>
 8009286:	2301      	movs	r3, #1
 8009288:	464a      	mov	r2, r9
 800928a:	4631      	mov	r1, r6
 800928c:	4628      	mov	r0, r5
 800928e:	47b8      	blx	r7
 8009290:	3001      	adds	r0, #1
 8009292:	f43f ae36 	beq.w	8008f02 <_printf_float+0xbe>
 8009296:	f108 0801 	add.w	r8, r8, #1
 800929a:	68e3      	ldr	r3, [r4, #12]
 800929c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800929e:	1a5b      	subs	r3, r3, r1
 80092a0:	4543      	cmp	r3, r8
 80092a2:	dcf0      	bgt.n	8009286 <_printf_float+0x442>
 80092a4:	e6f8      	b.n	8009098 <_printf_float+0x254>
 80092a6:	f04f 0800 	mov.w	r8, #0
 80092aa:	f104 0919 	add.w	r9, r4, #25
 80092ae:	e7f4      	b.n	800929a <_printf_float+0x456>

080092b0 <_printf_common>:
 80092b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b4:	4616      	mov	r6, r2
 80092b6:	4699      	mov	r9, r3
 80092b8:	688a      	ldr	r2, [r1, #8]
 80092ba:	690b      	ldr	r3, [r1, #16]
 80092bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092c0:	4293      	cmp	r3, r2
 80092c2:	bfb8      	it	lt
 80092c4:	4613      	movlt	r3, r2
 80092c6:	6033      	str	r3, [r6, #0]
 80092c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092cc:	4607      	mov	r7, r0
 80092ce:	460c      	mov	r4, r1
 80092d0:	b10a      	cbz	r2, 80092d6 <_printf_common+0x26>
 80092d2:	3301      	adds	r3, #1
 80092d4:	6033      	str	r3, [r6, #0]
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	0699      	lsls	r1, r3, #26
 80092da:	bf42      	ittt	mi
 80092dc:	6833      	ldrmi	r3, [r6, #0]
 80092de:	3302      	addmi	r3, #2
 80092e0:	6033      	strmi	r3, [r6, #0]
 80092e2:	6825      	ldr	r5, [r4, #0]
 80092e4:	f015 0506 	ands.w	r5, r5, #6
 80092e8:	d106      	bne.n	80092f8 <_printf_common+0x48>
 80092ea:	f104 0a19 	add.w	sl, r4, #25
 80092ee:	68e3      	ldr	r3, [r4, #12]
 80092f0:	6832      	ldr	r2, [r6, #0]
 80092f2:	1a9b      	subs	r3, r3, r2
 80092f4:	42ab      	cmp	r3, r5
 80092f6:	dc26      	bgt.n	8009346 <_printf_common+0x96>
 80092f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092fc:	1e13      	subs	r3, r2, #0
 80092fe:	6822      	ldr	r2, [r4, #0]
 8009300:	bf18      	it	ne
 8009302:	2301      	movne	r3, #1
 8009304:	0692      	lsls	r2, r2, #26
 8009306:	d42b      	bmi.n	8009360 <_printf_common+0xb0>
 8009308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800930c:	4649      	mov	r1, r9
 800930e:	4638      	mov	r0, r7
 8009310:	47c0      	blx	r8
 8009312:	3001      	adds	r0, #1
 8009314:	d01e      	beq.n	8009354 <_printf_common+0xa4>
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	6922      	ldr	r2, [r4, #16]
 800931a:	f003 0306 	and.w	r3, r3, #6
 800931e:	2b04      	cmp	r3, #4
 8009320:	bf02      	ittt	eq
 8009322:	68e5      	ldreq	r5, [r4, #12]
 8009324:	6833      	ldreq	r3, [r6, #0]
 8009326:	1aed      	subeq	r5, r5, r3
 8009328:	68a3      	ldr	r3, [r4, #8]
 800932a:	bf0c      	ite	eq
 800932c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009330:	2500      	movne	r5, #0
 8009332:	4293      	cmp	r3, r2
 8009334:	bfc4      	itt	gt
 8009336:	1a9b      	subgt	r3, r3, r2
 8009338:	18ed      	addgt	r5, r5, r3
 800933a:	2600      	movs	r6, #0
 800933c:	341a      	adds	r4, #26
 800933e:	42b5      	cmp	r5, r6
 8009340:	d11a      	bne.n	8009378 <_printf_common+0xc8>
 8009342:	2000      	movs	r0, #0
 8009344:	e008      	b.n	8009358 <_printf_common+0xa8>
 8009346:	2301      	movs	r3, #1
 8009348:	4652      	mov	r2, sl
 800934a:	4649      	mov	r1, r9
 800934c:	4638      	mov	r0, r7
 800934e:	47c0      	blx	r8
 8009350:	3001      	adds	r0, #1
 8009352:	d103      	bne.n	800935c <_printf_common+0xac>
 8009354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935c:	3501      	adds	r5, #1
 800935e:	e7c6      	b.n	80092ee <_printf_common+0x3e>
 8009360:	18e1      	adds	r1, r4, r3
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	2030      	movs	r0, #48	; 0x30
 8009366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800936a:	4422      	add	r2, r4
 800936c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009374:	3302      	adds	r3, #2
 8009376:	e7c7      	b.n	8009308 <_printf_common+0x58>
 8009378:	2301      	movs	r3, #1
 800937a:	4622      	mov	r2, r4
 800937c:	4649      	mov	r1, r9
 800937e:	4638      	mov	r0, r7
 8009380:	47c0      	blx	r8
 8009382:	3001      	adds	r0, #1
 8009384:	d0e6      	beq.n	8009354 <_printf_common+0xa4>
 8009386:	3601      	adds	r6, #1
 8009388:	e7d9      	b.n	800933e <_printf_common+0x8e>
	...

0800938c <_printf_i>:
 800938c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009390:	7e0f      	ldrb	r7, [r1, #24]
 8009392:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009394:	2f78      	cmp	r7, #120	; 0x78
 8009396:	4691      	mov	r9, r2
 8009398:	4680      	mov	r8, r0
 800939a:	460c      	mov	r4, r1
 800939c:	469a      	mov	sl, r3
 800939e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093a2:	d807      	bhi.n	80093b4 <_printf_i+0x28>
 80093a4:	2f62      	cmp	r7, #98	; 0x62
 80093a6:	d80a      	bhi.n	80093be <_printf_i+0x32>
 80093a8:	2f00      	cmp	r7, #0
 80093aa:	f000 80d4 	beq.w	8009556 <_printf_i+0x1ca>
 80093ae:	2f58      	cmp	r7, #88	; 0x58
 80093b0:	f000 80c0 	beq.w	8009534 <_printf_i+0x1a8>
 80093b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093bc:	e03a      	b.n	8009434 <_printf_i+0xa8>
 80093be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093c2:	2b15      	cmp	r3, #21
 80093c4:	d8f6      	bhi.n	80093b4 <_printf_i+0x28>
 80093c6:	a101      	add	r1, pc, #4	; (adr r1, 80093cc <_printf_i+0x40>)
 80093c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093cc:	08009425 	.word	0x08009425
 80093d0:	08009439 	.word	0x08009439
 80093d4:	080093b5 	.word	0x080093b5
 80093d8:	080093b5 	.word	0x080093b5
 80093dc:	080093b5 	.word	0x080093b5
 80093e0:	080093b5 	.word	0x080093b5
 80093e4:	08009439 	.word	0x08009439
 80093e8:	080093b5 	.word	0x080093b5
 80093ec:	080093b5 	.word	0x080093b5
 80093f0:	080093b5 	.word	0x080093b5
 80093f4:	080093b5 	.word	0x080093b5
 80093f8:	0800953d 	.word	0x0800953d
 80093fc:	08009465 	.word	0x08009465
 8009400:	080094f7 	.word	0x080094f7
 8009404:	080093b5 	.word	0x080093b5
 8009408:	080093b5 	.word	0x080093b5
 800940c:	0800955f 	.word	0x0800955f
 8009410:	080093b5 	.word	0x080093b5
 8009414:	08009465 	.word	0x08009465
 8009418:	080093b5 	.word	0x080093b5
 800941c:	080093b5 	.word	0x080093b5
 8009420:	080094ff 	.word	0x080094ff
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	1d1a      	adds	r2, r3, #4
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	602a      	str	r2, [r5, #0]
 800942c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009434:	2301      	movs	r3, #1
 8009436:	e09f      	b.n	8009578 <_printf_i+0x1ec>
 8009438:	6820      	ldr	r0, [r4, #0]
 800943a:	682b      	ldr	r3, [r5, #0]
 800943c:	0607      	lsls	r7, r0, #24
 800943e:	f103 0104 	add.w	r1, r3, #4
 8009442:	6029      	str	r1, [r5, #0]
 8009444:	d501      	bpl.n	800944a <_printf_i+0xbe>
 8009446:	681e      	ldr	r6, [r3, #0]
 8009448:	e003      	b.n	8009452 <_printf_i+0xc6>
 800944a:	0646      	lsls	r6, r0, #25
 800944c:	d5fb      	bpl.n	8009446 <_printf_i+0xba>
 800944e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009452:	2e00      	cmp	r6, #0
 8009454:	da03      	bge.n	800945e <_printf_i+0xd2>
 8009456:	232d      	movs	r3, #45	; 0x2d
 8009458:	4276      	negs	r6, r6
 800945a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800945e:	485a      	ldr	r0, [pc, #360]	; (80095c8 <_printf_i+0x23c>)
 8009460:	230a      	movs	r3, #10
 8009462:	e012      	b.n	800948a <_printf_i+0xfe>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	6820      	ldr	r0, [r4, #0]
 8009468:	1d19      	adds	r1, r3, #4
 800946a:	6029      	str	r1, [r5, #0]
 800946c:	0605      	lsls	r5, r0, #24
 800946e:	d501      	bpl.n	8009474 <_printf_i+0xe8>
 8009470:	681e      	ldr	r6, [r3, #0]
 8009472:	e002      	b.n	800947a <_printf_i+0xee>
 8009474:	0641      	lsls	r1, r0, #25
 8009476:	d5fb      	bpl.n	8009470 <_printf_i+0xe4>
 8009478:	881e      	ldrh	r6, [r3, #0]
 800947a:	4853      	ldr	r0, [pc, #332]	; (80095c8 <_printf_i+0x23c>)
 800947c:	2f6f      	cmp	r7, #111	; 0x6f
 800947e:	bf0c      	ite	eq
 8009480:	2308      	moveq	r3, #8
 8009482:	230a      	movne	r3, #10
 8009484:	2100      	movs	r1, #0
 8009486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800948a:	6865      	ldr	r5, [r4, #4]
 800948c:	60a5      	str	r5, [r4, #8]
 800948e:	2d00      	cmp	r5, #0
 8009490:	bfa2      	ittt	ge
 8009492:	6821      	ldrge	r1, [r4, #0]
 8009494:	f021 0104 	bicge.w	r1, r1, #4
 8009498:	6021      	strge	r1, [r4, #0]
 800949a:	b90e      	cbnz	r6, 80094a0 <_printf_i+0x114>
 800949c:	2d00      	cmp	r5, #0
 800949e:	d04b      	beq.n	8009538 <_printf_i+0x1ac>
 80094a0:	4615      	mov	r5, r2
 80094a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80094a6:	fb03 6711 	mls	r7, r3, r1, r6
 80094aa:	5dc7      	ldrb	r7, [r0, r7]
 80094ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094b0:	4637      	mov	r7, r6
 80094b2:	42bb      	cmp	r3, r7
 80094b4:	460e      	mov	r6, r1
 80094b6:	d9f4      	bls.n	80094a2 <_printf_i+0x116>
 80094b8:	2b08      	cmp	r3, #8
 80094ba:	d10b      	bne.n	80094d4 <_printf_i+0x148>
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	07de      	lsls	r6, r3, #31
 80094c0:	d508      	bpl.n	80094d4 <_printf_i+0x148>
 80094c2:	6923      	ldr	r3, [r4, #16]
 80094c4:	6861      	ldr	r1, [r4, #4]
 80094c6:	4299      	cmp	r1, r3
 80094c8:	bfde      	ittt	le
 80094ca:	2330      	movle	r3, #48	; 0x30
 80094cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80094d4:	1b52      	subs	r2, r2, r5
 80094d6:	6122      	str	r2, [r4, #16]
 80094d8:	f8cd a000 	str.w	sl, [sp]
 80094dc:	464b      	mov	r3, r9
 80094de:	aa03      	add	r2, sp, #12
 80094e0:	4621      	mov	r1, r4
 80094e2:	4640      	mov	r0, r8
 80094e4:	f7ff fee4 	bl	80092b0 <_printf_common>
 80094e8:	3001      	adds	r0, #1
 80094ea:	d14a      	bne.n	8009582 <_printf_i+0x1f6>
 80094ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094f0:	b004      	add	sp, #16
 80094f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	f043 0320 	orr.w	r3, r3, #32
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	4833      	ldr	r0, [pc, #204]	; (80095cc <_printf_i+0x240>)
 8009500:	2778      	movs	r7, #120	; 0x78
 8009502:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	6829      	ldr	r1, [r5, #0]
 800950a:	061f      	lsls	r7, r3, #24
 800950c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009510:	d402      	bmi.n	8009518 <_printf_i+0x18c>
 8009512:	065f      	lsls	r7, r3, #25
 8009514:	bf48      	it	mi
 8009516:	b2b6      	uxthmi	r6, r6
 8009518:	07df      	lsls	r7, r3, #31
 800951a:	bf48      	it	mi
 800951c:	f043 0320 	orrmi.w	r3, r3, #32
 8009520:	6029      	str	r1, [r5, #0]
 8009522:	bf48      	it	mi
 8009524:	6023      	strmi	r3, [r4, #0]
 8009526:	b91e      	cbnz	r6, 8009530 <_printf_i+0x1a4>
 8009528:	6823      	ldr	r3, [r4, #0]
 800952a:	f023 0320 	bic.w	r3, r3, #32
 800952e:	6023      	str	r3, [r4, #0]
 8009530:	2310      	movs	r3, #16
 8009532:	e7a7      	b.n	8009484 <_printf_i+0xf8>
 8009534:	4824      	ldr	r0, [pc, #144]	; (80095c8 <_printf_i+0x23c>)
 8009536:	e7e4      	b.n	8009502 <_printf_i+0x176>
 8009538:	4615      	mov	r5, r2
 800953a:	e7bd      	b.n	80094b8 <_printf_i+0x12c>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	6826      	ldr	r6, [r4, #0]
 8009540:	6961      	ldr	r1, [r4, #20]
 8009542:	1d18      	adds	r0, r3, #4
 8009544:	6028      	str	r0, [r5, #0]
 8009546:	0635      	lsls	r5, r6, #24
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	d501      	bpl.n	8009550 <_printf_i+0x1c4>
 800954c:	6019      	str	r1, [r3, #0]
 800954e:	e002      	b.n	8009556 <_printf_i+0x1ca>
 8009550:	0670      	lsls	r0, r6, #25
 8009552:	d5fb      	bpl.n	800954c <_printf_i+0x1c0>
 8009554:	8019      	strh	r1, [r3, #0]
 8009556:	2300      	movs	r3, #0
 8009558:	6123      	str	r3, [r4, #16]
 800955a:	4615      	mov	r5, r2
 800955c:	e7bc      	b.n	80094d8 <_printf_i+0x14c>
 800955e:	682b      	ldr	r3, [r5, #0]
 8009560:	1d1a      	adds	r2, r3, #4
 8009562:	602a      	str	r2, [r5, #0]
 8009564:	681d      	ldr	r5, [r3, #0]
 8009566:	6862      	ldr	r2, [r4, #4]
 8009568:	2100      	movs	r1, #0
 800956a:	4628      	mov	r0, r5
 800956c:	f7f6 fe30 	bl	80001d0 <memchr>
 8009570:	b108      	cbz	r0, 8009576 <_printf_i+0x1ea>
 8009572:	1b40      	subs	r0, r0, r5
 8009574:	6060      	str	r0, [r4, #4]
 8009576:	6863      	ldr	r3, [r4, #4]
 8009578:	6123      	str	r3, [r4, #16]
 800957a:	2300      	movs	r3, #0
 800957c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009580:	e7aa      	b.n	80094d8 <_printf_i+0x14c>
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	462a      	mov	r2, r5
 8009586:	4649      	mov	r1, r9
 8009588:	4640      	mov	r0, r8
 800958a:	47d0      	blx	sl
 800958c:	3001      	adds	r0, #1
 800958e:	d0ad      	beq.n	80094ec <_printf_i+0x160>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	079b      	lsls	r3, r3, #30
 8009594:	d413      	bmi.n	80095be <_printf_i+0x232>
 8009596:	68e0      	ldr	r0, [r4, #12]
 8009598:	9b03      	ldr	r3, [sp, #12]
 800959a:	4298      	cmp	r0, r3
 800959c:	bfb8      	it	lt
 800959e:	4618      	movlt	r0, r3
 80095a0:	e7a6      	b.n	80094f0 <_printf_i+0x164>
 80095a2:	2301      	movs	r3, #1
 80095a4:	4632      	mov	r2, r6
 80095a6:	4649      	mov	r1, r9
 80095a8:	4640      	mov	r0, r8
 80095aa:	47d0      	blx	sl
 80095ac:	3001      	adds	r0, #1
 80095ae:	d09d      	beq.n	80094ec <_printf_i+0x160>
 80095b0:	3501      	adds	r5, #1
 80095b2:	68e3      	ldr	r3, [r4, #12]
 80095b4:	9903      	ldr	r1, [sp, #12]
 80095b6:	1a5b      	subs	r3, r3, r1
 80095b8:	42ab      	cmp	r3, r5
 80095ba:	dcf2      	bgt.n	80095a2 <_printf_i+0x216>
 80095bc:	e7eb      	b.n	8009596 <_printf_i+0x20a>
 80095be:	2500      	movs	r5, #0
 80095c0:	f104 0619 	add.w	r6, r4, #25
 80095c4:	e7f5      	b.n	80095b2 <_printf_i+0x226>
 80095c6:	bf00      	nop
 80095c8:	0800d776 	.word	0x0800d776
 80095cc:	0800d787 	.word	0x0800d787

080095d0 <_scanf_float>:
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	b087      	sub	sp, #28
 80095d6:	4617      	mov	r7, r2
 80095d8:	9303      	str	r3, [sp, #12]
 80095da:	688b      	ldr	r3, [r1, #8]
 80095dc:	1e5a      	subs	r2, r3, #1
 80095de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80095e2:	bf83      	ittte	hi
 80095e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80095e8:	195b      	addhi	r3, r3, r5
 80095ea:	9302      	strhi	r3, [sp, #8]
 80095ec:	2300      	movls	r3, #0
 80095ee:	bf86      	itte	hi
 80095f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80095f4:	608b      	strhi	r3, [r1, #8]
 80095f6:	9302      	strls	r3, [sp, #8]
 80095f8:	680b      	ldr	r3, [r1, #0]
 80095fa:	468b      	mov	fp, r1
 80095fc:	2500      	movs	r5, #0
 80095fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009602:	f84b 3b1c 	str.w	r3, [fp], #28
 8009606:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800960a:	4680      	mov	r8, r0
 800960c:	460c      	mov	r4, r1
 800960e:	465e      	mov	r6, fp
 8009610:	46aa      	mov	sl, r5
 8009612:	46a9      	mov	r9, r5
 8009614:	9501      	str	r5, [sp, #4]
 8009616:	68a2      	ldr	r2, [r4, #8]
 8009618:	b152      	cbz	r2, 8009630 <_scanf_float+0x60>
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	2b4e      	cmp	r3, #78	; 0x4e
 8009620:	d864      	bhi.n	80096ec <_scanf_float+0x11c>
 8009622:	2b40      	cmp	r3, #64	; 0x40
 8009624:	d83c      	bhi.n	80096a0 <_scanf_float+0xd0>
 8009626:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800962a:	b2c8      	uxtb	r0, r1
 800962c:	280e      	cmp	r0, #14
 800962e:	d93a      	bls.n	80096a6 <_scanf_float+0xd6>
 8009630:	f1b9 0f00 	cmp.w	r9, #0
 8009634:	d003      	beq.n	800963e <_scanf_float+0x6e>
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009642:	f1ba 0f01 	cmp.w	sl, #1
 8009646:	f200 8113 	bhi.w	8009870 <_scanf_float+0x2a0>
 800964a:	455e      	cmp	r6, fp
 800964c:	f200 8105 	bhi.w	800985a <_scanf_float+0x28a>
 8009650:	2501      	movs	r5, #1
 8009652:	4628      	mov	r0, r5
 8009654:	b007      	add	sp, #28
 8009656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800965e:	2a0d      	cmp	r2, #13
 8009660:	d8e6      	bhi.n	8009630 <_scanf_float+0x60>
 8009662:	a101      	add	r1, pc, #4	; (adr r1, 8009668 <_scanf_float+0x98>)
 8009664:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009668:	080097a7 	.word	0x080097a7
 800966c:	08009631 	.word	0x08009631
 8009670:	08009631 	.word	0x08009631
 8009674:	08009631 	.word	0x08009631
 8009678:	08009807 	.word	0x08009807
 800967c:	080097df 	.word	0x080097df
 8009680:	08009631 	.word	0x08009631
 8009684:	08009631 	.word	0x08009631
 8009688:	080097b5 	.word	0x080097b5
 800968c:	08009631 	.word	0x08009631
 8009690:	08009631 	.word	0x08009631
 8009694:	08009631 	.word	0x08009631
 8009698:	08009631 	.word	0x08009631
 800969c:	0800976d 	.word	0x0800976d
 80096a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80096a4:	e7db      	b.n	800965e <_scanf_float+0x8e>
 80096a6:	290e      	cmp	r1, #14
 80096a8:	d8c2      	bhi.n	8009630 <_scanf_float+0x60>
 80096aa:	a001      	add	r0, pc, #4	; (adr r0, 80096b0 <_scanf_float+0xe0>)
 80096ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80096b0:	0800975f 	.word	0x0800975f
 80096b4:	08009631 	.word	0x08009631
 80096b8:	0800975f 	.word	0x0800975f
 80096bc:	080097f3 	.word	0x080097f3
 80096c0:	08009631 	.word	0x08009631
 80096c4:	0800970d 	.word	0x0800970d
 80096c8:	08009749 	.word	0x08009749
 80096cc:	08009749 	.word	0x08009749
 80096d0:	08009749 	.word	0x08009749
 80096d4:	08009749 	.word	0x08009749
 80096d8:	08009749 	.word	0x08009749
 80096dc:	08009749 	.word	0x08009749
 80096e0:	08009749 	.word	0x08009749
 80096e4:	08009749 	.word	0x08009749
 80096e8:	08009749 	.word	0x08009749
 80096ec:	2b6e      	cmp	r3, #110	; 0x6e
 80096ee:	d809      	bhi.n	8009704 <_scanf_float+0x134>
 80096f0:	2b60      	cmp	r3, #96	; 0x60
 80096f2:	d8b2      	bhi.n	800965a <_scanf_float+0x8a>
 80096f4:	2b54      	cmp	r3, #84	; 0x54
 80096f6:	d077      	beq.n	80097e8 <_scanf_float+0x218>
 80096f8:	2b59      	cmp	r3, #89	; 0x59
 80096fa:	d199      	bne.n	8009630 <_scanf_float+0x60>
 80096fc:	2d07      	cmp	r5, #7
 80096fe:	d197      	bne.n	8009630 <_scanf_float+0x60>
 8009700:	2508      	movs	r5, #8
 8009702:	e029      	b.n	8009758 <_scanf_float+0x188>
 8009704:	2b74      	cmp	r3, #116	; 0x74
 8009706:	d06f      	beq.n	80097e8 <_scanf_float+0x218>
 8009708:	2b79      	cmp	r3, #121	; 0x79
 800970a:	e7f6      	b.n	80096fa <_scanf_float+0x12a>
 800970c:	6821      	ldr	r1, [r4, #0]
 800970e:	05c8      	lsls	r0, r1, #23
 8009710:	d51a      	bpl.n	8009748 <_scanf_float+0x178>
 8009712:	9b02      	ldr	r3, [sp, #8]
 8009714:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009718:	6021      	str	r1, [r4, #0]
 800971a:	f109 0901 	add.w	r9, r9, #1
 800971e:	b11b      	cbz	r3, 8009728 <_scanf_float+0x158>
 8009720:	3b01      	subs	r3, #1
 8009722:	3201      	adds	r2, #1
 8009724:	9302      	str	r3, [sp, #8]
 8009726:	60a2      	str	r2, [r4, #8]
 8009728:	68a3      	ldr	r3, [r4, #8]
 800972a:	3b01      	subs	r3, #1
 800972c:	60a3      	str	r3, [r4, #8]
 800972e:	6923      	ldr	r3, [r4, #16]
 8009730:	3301      	adds	r3, #1
 8009732:	6123      	str	r3, [r4, #16]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3b01      	subs	r3, #1
 8009738:	2b00      	cmp	r3, #0
 800973a:	607b      	str	r3, [r7, #4]
 800973c:	f340 8084 	ble.w	8009848 <_scanf_float+0x278>
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	3301      	adds	r3, #1
 8009744:	603b      	str	r3, [r7, #0]
 8009746:	e766      	b.n	8009616 <_scanf_float+0x46>
 8009748:	eb1a 0f05 	cmn.w	sl, r5
 800974c:	f47f af70 	bne.w	8009630 <_scanf_float+0x60>
 8009750:	6822      	ldr	r2, [r4, #0]
 8009752:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009756:	6022      	str	r2, [r4, #0]
 8009758:	f806 3b01 	strb.w	r3, [r6], #1
 800975c:	e7e4      	b.n	8009728 <_scanf_float+0x158>
 800975e:	6822      	ldr	r2, [r4, #0]
 8009760:	0610      	lsls	r0, r2, #24
 8009762:	f57f af65 	bpl.w	8009630 <_scanf_float+0x60>
 8009766:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800976a:	e7f4      	b.n	8009756 <_scanf_float+0x186>
 800976c:	f1ba 0f00 	cmp.w	sl, #0
 8009770:	d10e      	bne.n	8009790 <_scanf_float+0x1c0>
 8009772:	f1b9 0f00 	cmp.w	r9, #0
 8009776:	d10e      	bne.n	8009796 <_scanf_float+0x1c6>
 8009778:	6822      	ldr	r2, [r4, #0]
 800977a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800977e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009782:	d108      	bne.n	8009796 <_scanf_float+0x1c6>
 8009784:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009788:	6022      	str	r2, [r4, #0]
 800978a:	f04f 0a01 	mov.w	sl, #1
 800978e:	e7e3      	b.n	8009758 <_scanf_float+0x188>
 8009790:	f1ba 0f02 	cmp.w	sl, #2
 8009794:	d055      	beq.n	8009842 <_scanf_float+0x272>
 8009796:	2d01      	cmp	r5, #1
 8009798:	d002      	beq.n	80097a0 <_scanf_float+0x1d0>
 800979a:	2d04      	cmp	r5, #4
 800979c:	f47f af48 	bne.w	8009630 <_scanf_float+0x60>
 80097a0:	3501      	adds	r5, #1
 80097a2:	b2ed      	uxtb	r5, r5
 80097a4:	e7d8      	b.n	8009758 <_scanf_float+0x188>
 80097a6:	f1ba 0f01 	cmp.w	sl, #1
 80097aa:	f47f af41 	bne.w	8009630 <_scanf_float+0x60>
 80097ae:	f04f 0a02 	mov.w	sl, #2
 80097b2:	e7d1      	b.n	8009758 <_scanf_float+0x188>
 80097b4:	b97d      	cbnz	r5, 80097d6 <_scanf_float+0x206>
 80097b6:	f1b9 0f00 	cmp.w	r9, #0
 80097ba:	f47f af3c 	bne.w	8009636 <_scanf_float+0x66>
 80097be:	6822      	ldr	r2, [r4, #0]
 80097c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80097c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80097c8:	f47f af39 	bne.w	800963e <_scanf_float+0x6e>
 80097cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097d0:	6022      	str	r2, [r4, #0]
 80097d2:	2501      	movs	r5, #1
 80097d4:	e7c0      	b.n	8009758 <_scanf_float+0x188>
 80097d6:	2d03      	cmp	r5, #3
 80097d8:	d0e2      	beq.n	80097a0 <_scanf_float+0x1d0>
 80097da:	2d05      	cmp	r5, #5
 80097dc:	e7de      	b.n	800979c <_scanf_float+0x1cc>
 80097de:	2d02      	cmp	r5, #2
 80097e0:	f47f af26 	bne.w	8009630 <_scanf_float+0x60>
 80097e4:	2503      	movs	r5, #3
 80097e6:	e7b7      	b.n	8009758 <_scanf_float+0x188>
 80097e8:	2d06      	cmp	r5, #6
 80097ea:	f47f af21 	bne.w	8009630 <_scanf_float+0x60>
 80097ee:	2507      	movs	r5, #7
 80097f0:	e7b2      	b.n	8009758 <_scanf_float+0x188>
 80097f2:	6822      	ldr	r2, [r4, #0]
 80097f4:	0591      	lsls	r1, r2, #22
 80097f6:	f57f af1b 	bpl.w	8009630 <_scanf_float+0x60>
 80097fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80097fe:	6022      	str	r2, [r4, #0]
 8009800:	f8cd 9004 	str.w	r9, [sp, #4]
 8009804:	e7a8      	b.n	8009758 <_scanf_float+0x188>
 8009806:	6822      	ldr	r2, [r4, #0]
 8009808:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800980c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009810:	d006      	beq.n	8009820 <_scanf_float+0x250>
 8009812:	0550      	lsls	r0, r2, #21
 8009814:	f57f af0c 	bpl.w	8009630 <_scanf_float+0x60>
 8009818:	f1b9 0f00 	cmp.w	r9, #0
 800981c:	f43f af0f 	beq.w	800963e <_scanf_float+0x6e>
 8009820:	0591      	lsls	r1, r2, #22
 8009822:	bf58      	it	pl
 8009824:	9901      	ldrpl	r1, [sp, #4]
 8009826:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800982a:	bf58      	it	pl
 800982c:	eba9 0101 	subpl.w	r1, r9, r1
 8009830:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009834:	bf58      	it	pl
 8009836:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800983a:	6022      	str	r2, [r4, #0]
 800983c:	f04f 0900 	mov.w	r9, #0
 8009840:	e78a      	b.n	8009758 <_scanf_float+0x188>
 8009842:	f04f 0a03 	mov.w	sl, #3
 8009846:	e787      	b.n	8009758 <_scanf_float+0x188>
 8009848:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800984c:	4639      	mov	r1, r7
 800984e:	4640      	mov	r0, r8
 8009850:	4798      	blx	r3
 8009852:	2800      	cmp	r0, #0
 8009854:	f43f aedf 	beq.w	8009616 <_scanf_float+0x46>
 8009858:	e6ea      	b.n	8009630 <_scanf_float+0x60>
 800985a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800985e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009862:	463a      	mov	r2, r7
 8009864:	4640      	mov	r0, r8
 8009866:	4798      	blx	r3
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	3b01      	subs	r3, #1
 800986c:	6123      	str	r3, [r4, #16]
 800986e:	e6ec      	b.n	800964a <_scanf_float+0x7a>
 8009870:	1e6b      	subs	r3, r5, #1
 8009872:	2b06      	cmp	r3, #6
 8009874:	d825      	bhi.n	80098c2 <_scanf_float+0x2f2>
 8009876:	2d02      	cmp	r5, #2
 8009878:	d836      	bhi.n	80098e8 <_scanf_float+0x318>
 800987a:	455e      	cmp	r6, fp
 800987c:	f67f aee8 	bls.w	8009650 <_scanf_float+0x80>
 8009880:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009884:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009888:	463a      	mov	r2, r7
 800988a:	4640      	mov	r0, r8
 800988c:	4798      	blx	r3
 800988e:	6923      	ldr	r3, [r4, #16]
 8009890:	3b01      	subs	r3, #1
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	e7f1      	b.n	800987a <_scanf_float+0x2aa>
 8009896:	9802      	ldr	r0, [sp, #8]
 8009898:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800989c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80098a0:	9002      	str	r0, [sp, #8]
 80098a2:	463a      	mov	r2, r7
 80098a4:	4640      	mov	r0, r8
 80098a6:	4798      	blx	r3
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	6123      	str	r3, [r4, #16]
 80098ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80098b2:	fa5f fa8a 	uxtb.w	sl, sl
 80098b6:	f1ba 0f02 	cmp.w	sl, #2
 80098ba:	d1ec      	bne.n	8009896 <_scanf_float+0x2c6>
 80098bc:	3d03      	subs	r5, #3
 80098be:	b2ed      	uxtb	r5, r5
 80098c0:	1b76      	subs	r6, r6, r5
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	05da      	lsls	r2, r3, #23
 80098c6:	d52f      	bpl.n	8009928 <_scanf_float+0x358>
 80098c8:	055b      	lsls	r3, r3, #21
 80098ca:	d510      	bpl.n	80098ee <_scanf_float+0x31e>
 80098cc:	455e      	cmp	r6, fp
 80098ce:	f67f aebf 	bls.w	8009650 <_scanf_float+0x80>
 80098d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098da:	463a      	mov	r2, r7
 80098dc:	4640      	mov	r0, r8
 80098de:	4798      	blx	r3
 80098e0:	6923      	ldr	r3, [r4, #16]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	6123      	str	r3, [r4, #16]
 80098e6:	e7f1      	b.n	80098cc <_scanf_float+0x2fc>
 80098e8:	46aa      	mov	sl, r5
 80098ea:	9602      	str	r6, [sp, #8]
 80098ec:	e7df      	b.n	80098ae <_scanf_float+0x2de>
 80098ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	2965      	cmp	r1, #101	; 0x65
 80098f6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80098fa:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80098fe:	6123      	str	r3, [r4, #16]
 8009900:	d00c      	beq.n	800991c <_scanf_float+0x34c>
 8009902:	2945      	cmp	r1, #69	; 0x45
 8009904:	d00a      	beq.n	800991c <_scanf_float+0x34c>
 8009906:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800990a:	463a      	mov	r2, r7
 800990c:	4640      	mov	r0, r8
 800990e:	4798      	blx	r3
 8009910:	6923      	ldr	r3, [r4, #16]
 8009912:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009916:	3b01      	subs	r3, #1
 8009918:	1eb5      	subs	r5, r6, #2
 800991a:	6123      	str	r3, [r4, #16]
 800991c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009920:	463a      	mov	r2, r7
 8009922:	4640      	mov	r0, r8
 8009924:	4798      	blx	r3
 8009926:	462e      	mov	r6, r5
 8009928:	6825      	ldr	r5, [r4, #0]
 800992a:	f015 0510 	ands.w	r5, r5, #16
 800992e:	d158      	bne.n	80099e2 <_scanf_float+0x412>
 8009930:	7035      	strb	r5, [r6, #0]
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800993c:	d11c      	bne.n	8009978 <_scanf_float+0x3a8>
 800993e:	9b01      	ldr	r3, [sp, #4]
 8009940:	454b      	cmp	r3, r9
 8009942:	eba3 0209 	sub.w	r2, r3, r9
 8009946:	d124      	bne.n	8009992 <_scanf_float+0x3c2>
 8009948:	2200      	movs	r2, #0
 800994a:	4659      	mov	r1, fp
 800994c:	4640      	mov	r0, r8
 800994e:	f002 fcf3 	bl	800c338 <_strtod_r>
 8009952:	9b03      	ldr	r3, [sp, #12]
 8009954:	6821      	ldr	r1, [r4, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f011 0f02 	tst.w	r1, #2
 800995c:	ec57 6b10 	vmov	r6, r7, d0
 8009960:	f103 0204 	add.w	r2, r3, #4
 8009964:	d020      	beq.n	80099a8 <_scanf_float+0x3d8>
 8009966:	9903      	ldr	r1, [sp, #12]
 8009968:	600a      	str	r2, [r1, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	e9c3 6700 	strd	r6, r7, [r3]
 8009970:	68e3      	ldr	r3, [r4, #12]
 8009972:	3301      	adds	r3, #1
 8009974:	60e3      	str	r3, [r4, #12]
 8009976:	e66c      	b.n	8009652 <_scanf_float+0x82>
 8009978:	9b04      	ldr	r3, [sp, #16]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0e4      	beq.n	8009948 <_scanf_float+0x378>
 800997e:	9905      	ldr	r1, [sp, #20]
 8009980:	230a      	movs	r3, #10
 8009982:	462a      	mov	r2, r5
 8009984:	3101      	adds	r1, #1
 8009986:	4640      	mov	r0, r8
 8009988:	f002 fd5e 	bl	800c448 <_strtol_r>
 800998c:	9b04      	ldr	r3, [sp, #16]
 800998e:	9e05      	ldr	r6, [sp, #20]
 8009990:	1ac2      	subs	r2, r0, r3
 8009992:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009996:	429e      	cmp	r6, r3
 8009998:	bf28      	it	cs
 800999a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800999e:	4912      	ldr	r1, [pc, #72]	; (80099e8 <_scanf_float+0x418>)
 80099a0:	4630      	mov	r0, r6
 80099a2:	f000 f955 	bl	8009c50 <siprintf>
 80099a6:	e7cf      	b.n	8009948 <_scanf_float+0x378>
 80099a8:	f011 0f04 	tst.w	r1, #4
 80099ac:	9903      	ldr	r1, [sp, #12]
 80099ae:	600a      	str	r2, [r1, #0]
 80099b0:	d1db      	bne.n	800996a <_scanf_float+0x39a>
 80099b2:	f8d3 8000 	ldr.w	r8, [r3]
 80099b6:	ee10 2a10 	vmov	r2, s0
 80099ba:	ee10 0a10 	vmov	r0, s0
 80099be:	463b      	mov	r3, r7
 80099c0:	4639      	mov	r1, r7
 80099c2:	f7f7 f8b3 	bl	8000b2c <__aeabi_dcmpun>
 80099c6:	b128      	cbz	r0, 80099d4 <_scanf_float+0x404>
 80099c8:	4808      	ldr	r0, [pc, #32]	; (80099ec <_scanf_float+0x41c>)
 80099ca:	f000 fb2d 	bl	800a028 <nanf>
 80099ce:	ed88 0a00 	vstr	s0, [r8]
 80099d2:	e7cd      	b.n	8009970 <_scanf_float+0x3a0>
 80099d4:	4630      	mov	r0, r6
 80099d6:	4639      	mov	r1, r7
 80099d8:	f7f7 f906 	bl	8000be8 <__aeabi_d2f>
 80099dc:	f8c8 0000 	str.w	r0, [r8]
 80099e0:	e7c6      	b.n	8009970 <_scanf_float+0x3a0>
 80099e2:	2500      	movs	r5, #0
 80099e4:	e635      	b.n	8009652 <_scanf_float+0x82>
 80099e6:	bf00      	nop
 80099e8:	0800d798 	.word	0x0800d798
 80099ec:	0800db2d 	.word	0x0800db2d

080099f0 <std>:
 80099f0:	2300      	movs	r3, #0
 80099f2:	b510      	push	{r4, lr}
 80099f4:	4604      	mov	r4, r0
 80099f6:	e9c0 3300 	strd	r3, r3, [r0]
 80099fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099fe:	6083      	str	r3, [r0, #8]
 8009a00:	8181      	strh	r1, [r0, #12]
 8009a02:	6643      	str	r3, [r0, #100]	; 0x64
 8009a04:	81c2      	strh	r2, [r0, #14]
 8009a06:	6183      	str	r3, [r0, #24]
 8009a08:	4619      	mov	r1, r3
 8009a0a:	2208      	movs	r2, #8
 8009a0c:	305c      	adds	r0, #92	; 0x5c
 8009a0e:	f000 fa17 	bl	8009e40 <memset>
 8009a12:	4b0d      	ldr	r3, [pc, #52]	; (8009a48 <std+0x58>)
 8009a14:	6263      	str	r3, [r4, #36]	; 0x24
 8009a16:	4b0d      	ldr	r3, [pc, #52]	; (8009a4c <std+0x5c>)
 8009a18:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a1a:	4b0d      	ldr	r3, [pc, #52]	; (8009a50 <std+0x60>)
 8009a1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a1e:	4b0d      	ldr	r3, [pc, #52]	; (8009a54 <std+0x64>)
 8009a20:	6323      	str	r3, [r4, #48]	; 0x30
 8009a22:	4b0d      	ldr	r3, [pc, #52]	; (8009a58 <std+0x68>)
 8009a24:	6224      	str	r4, [r4, #32]
 8009a26:	429c      	cmp	r4, r3
 8009a28:	d006      	beq.n	8009a38 <std+0x48>
 8009a2a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009a2e:	4294      	cmp	r4, r2
 8009a30:	d002      	beq.n	8009a38 <std+0x48>
 8009a32:	33d0      	adds	r3, #208	; 0xd0
 8009a34:	429c      	cmp	r4, r3
 8009a36:	d105      	bne.n	8009a44 <std+0x54>
 8009a38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a40:	f000 bae0 	b.w	800a004 <__retarget_lock_init_recursive>
 8009a44:	bd10      	pop	{r4, pc}
 8009a46:	bf00      	nop
 8009a48:	08009c91 	.word	0x08009c91
 8009a4c:	08009cb3 	.word	0x08009cb3
 8009a50:	08009ceb 	.word	0x08009ceb
 8009a54:	08009d0f 	.word	0x08009d0f
 8009a58:	20001eac 	.word	0x20001eac

08009a5c <stdio_exit_handler>:
 8009a5c:	4a02      	ldr	r2, [pc, #8]	; (8009a68 <stdio_exit_handler+0xc>)
 8009a5e:	4903      	ldr	r1, [pc, #12]	; (8009a6c <stdio_exit_handler+0x10>)
 8009a60:	4803      	ldr	r0, [pc, #12]	; (8009a70 <stdio_exit_handler+0x14>)
 8009a62:	f000 b869 	b.w	8009b38 <_fwalk_sglue>
 8009a66:	bf00      	nop
 8009a68:	20000014 	.word	0x20000014
 8009a6c:	0800ca91 	.word	0x0800ca91
 8009a70:	20000020 	.word	0x20000020

08009a74 <cleanup_stdio>:
 8009a74:	6841      	ldr	r1, [r0, #4]
 8009a76:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <cleanup_stdio+0x34>)
 8009a78:	4299      	cmp	r1, r3
 8009a7a:	b510      	push	{r4, lr}
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	d001      	beq.n	8009a84 <cleanup_stdio+0x10>
 8009a80:	f003 f806 	bl	800ca90 <_fflush_r>
 8009a84:	68a1      	ldr	r1, [r4, #8]
 8009a86:	4b09      	ldr	r3, [pc, #36]	; (8009aac <cleanup_stdio+0x38>)
 8009a88:	4299      	cmp	r1, r3
 8009a8a:	d002      	beq.n	8009a92 <cleanup_stdio+0x1e>
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f002 ffff 	bl	800ca90 <_fflush_r>
 8009a92:	68e1      	ldr	r1, [r4, #12]
 8009a94:	4b06      	ldr	r3, [pc, #24]	; (8009ab0 <cleanup_stdio+0x3c>)
 8009a96:	4299      	cmp	r1, r3
 8009a98:	d004      	beq.n	8009aa4 <cleanup_stdio+0x30>
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aa0:	f002 bff6 	b.w	800ca90 <_fflush_r>
 8009aa4:	bd10      	pop	{r4, pc}
 8009aa6:	bf00      	nop
 8009aa8:	20001eac 	.word	0x20001eac
 8009aac:	20001f14 	.word	0x20001f14
 8009ab0:	20001f7c 	.word	0x20001f7c

08009ab4 <global_stdio_init.part.0>:
 8009ab4:	b510      	push	{r4, lr}
 8009ab6:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <global_stdio_init.part.0+0x30>)
 8009ab8:	4c0b      	ldr	r4, [pc, #44]	; (8009ae8 <global_stdio_init.part.0+0x34>)
 8009aba:	4a0c      	ldr	r2, [pc, #48]	; (8009aec <global_stdio_init.part.0+0x38>)
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	4620      	mov	r0, r4
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	2104      	movs	r1, #4
 8009ac4:	f7ff ff94 	bl	80099f0 <std>
 8009ac8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009acc:	2201      	movs	r2, #1
 8009ace:	2109      	movs	r1, #9
 8009ad0:	f7ff ff8e 	bl	80099f0 <std>
 8009ad4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009ad8:	2202      	movs	r2, #2
 8009ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ade:	2112      	movs	r1, #18
 8009ae0:	f7ff bf86 	b.w	80099f0 <std>
 8009ae4:	20001fe4 	.word	0x20001fe4
 8009ae8:	20001eac 	.word	0x20001eac
 8009aec:	08009a5d 	.word	0x08009a5d

08009af0 <__sfp_lock_acquire>:
 8009af0:	4801      	ldr	r0, [pc, #4]	; (8009af8 <__sfp_lock_acquire+0x8>)
 8009af2:	f000 ba88 	b.w	800a006 <__retarget_lock_acquire_recursive>
 8009af6:	bf00      	nop
 8009af8:	20001fed 	.word	0x20001fed

08009afc <__sfp_lock_release>:
 8009afc:	4801      	ldr	r0, [pc, #4]	; (8009b04 <__sfp_lock_release+0x8>)
 8009afe:	f000 ba83 	b.w	800a008 <__retarget_lock_release_recursive>
 8009b02:	bf00      	nop
 8009b04:	20001fed 	.word	0x20001fed

08009b08 <__sinit>:
 8009b08:	b510      	push	{r4, lr}
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	f7ff fff0 	bl	8009af0 <__sfp_lock_acquire>
 8009b10:	6a23      	ldr	r3, [r4, #32]
 8009b12:	b11b      	cbz	r3, 8009b1c <__sinit+0x14>
 8009b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b18:	f7ff bff0 	b.w	8009afc <__sfp_lock_release>
 8009b1c:	4b04      	ldr	r3, [pc, #16]	; (8009b30 <__sinit+0x28>)
 8009b1e:	6223      	str	r3, [r4, #32]
 8009b20:	4b04      	ldr	r3, [pc, #16]	; (8009b34 <__sinit+0x2c>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1f5      	bne.n	8009b14 <__sinit+0xc>
 8009b28:	f7ff ffc4 	bl	8009ab4 <global_stdio_init.part.0>
 8009b2c:	e7f2      	b.n	8009b14 <__sinit+0xc>
 8009b2e:	bf00      	nop
 8009b30:	08009a75 	.word	0x08009a75
 8009b34:	20001fe4 	.word	0x20001fe4

08009b38 <_fwalk_sglue>:
 8009b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b3c:	4607      	mov	r7, r0
 8009b3e:	4688      	mov	r8, r1
 8009b40:	4614      	mov	r4, r2
 8009b42:	2600      	movs	r6, #0
 8009b44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b48:	f1b9 0901 	subs.w	r9, r9, #1
 8009b4c:	d505      	bpl.n	8009b5a <_fwalk_sglue+0x22>
 8009b4e:	6824      	ldr	r4, [r4, #0]
 8009b50:	2c00      	cmp	r4, #0
 8009b52:	d1f7      	bne.n	8009b44 <_fwalk_sglue+0xc>
 8009b54:	4630      	mov	r0, r6
 8009b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b5a:	89ab      	ldrh	r3, [r5, #12]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d907      	bls.n	8009b70 <_fwalk_sglue+0x38>
 8009b60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b64:	3301      	adds	r3, #1
 8009b66:	d003      	beq.n	8009b70 <_fwalk_sglue+0x38>
 8009b68:	4629      	mov	r1, r5
 8009b6a:	4638      	mov	r0, r7
 8009b6c:	47c0      	blx	r8
 8009b6e:	4306      	orrs	r6, r0
 8009b70:	3568      	adds	r5, #104	; 0x68
 8009b72:	e7e9      	b.n	8009b48 <_fwalk_sglue+0x10>

08009b74 <iprintf>:
 8009b74:	b40f      	push	{r0, r1, r2, r3}
 8009b76:	b507      	push	{r0, r1, r2, lr}
 8009b78:	4906      	ldr	r1, [pc, #24]	; (8009b94 <iprintf+0x20>)
 8009b7a:	ab04      	add	r3, sp, #16
 8009b7c:	6808      	ldr	r0, [r1, #0]
 8009b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b82:	6881      	ldr	r1, [r0, #8]
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	f002 fde3 	bl	800c750 <_vfiprintf_r>
 8009b8a:	b003      	add	sp, #12
 8009b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b90:	b004      	add	sp, #16
 8009b92:	4770      	bx	lr
 8009b94:	2000006c 	.word	0x2000006c

08009b98 <_puts_r>:
 8009b98:	6a03      	ldr	r3, [r0, #32]
 8009b9a:	b570      	push	{r4, r5, r6, lr}
 8009b9c:	6884      	ldr	r4, [r0, #8]
 8009b9e:	4605      	mov	r5, r0
 8009ba0:	460e      	mov	r6, r1
 8009ba2:	b90b      	cbnz	r3, 8009ba8 <_puts_r+0x10>
 8009ba4:	f7ff ffb0 	bl	8009b08 <__sinit>
 8009ba8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009baa:	07db      	lsls	r3, r3, #31
 8009bac:	d405      	bmi.n	8009bba <_puts_r+0x22>
 8009bae:	89a3      	ldrh	r3, [r4, #12]
 8009bb0:	0598      	lsls	r0, r3, #22
 8009bb2:	d402      	bmi.n	8009bba <_puts_r+0x22>
 8009bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bb6:	f000 fa26 	bl	800a006 <__retarget_lock_acquire_recursive>
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	0719      	lsls	r1, r3, #28
 8009bbe:	d513      	bpl.n	8009be8 <_puts_r+0x50>
 8009bc0:	6923      	ldr	r3, [r4, #16]
 8009bc2:	b18b      	cbz	r3, 8009be8 <_puts_r+0x50>
 8009bc4:	3e01      	subs	r6, #1
 8009bc6:	68a3      	ldr	r3, [r4, #8]
 8009bc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	60a3      	str	r3, [r4, #8]
 8009bd0:	b9e9      	cbnz	r1, 8009c0e <_puts_r+0x76>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	da2e      	bge.n	8009c34 <_puts_r+0x9c>
 8009bd6:	4622      	mov	r2, r4
 8009bd8:	210a      	movs	r1, #10
 8009bda:	4628      	mov	r0, r5
 8009bdc:	f000 f89b 	bl	8009d16 <__swbuf_r>
 8009be0:	3001      	adds	r0, #1
 8009be2:	d007      	beq.n	8009bf4 <_puts_r+0x5c>
 8009be4:	250a      	movs	r5, #10
 8009be6:	e007      	b.n	8009bf8 <_puts_r+0x60>
 8009be8:	4621      	mov	r1, r4
 8009bea:	4628      	mov	r0, r5
 8009bec:	f000 f8d0 	bl	8009d90 <__swsetup_r>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d0e7      	beq.n	8009bc4 <_puts_r+0x2c>
 8009bf4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009bf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bfa:	07da      	lsls	r2, r3, #31
 8009bfc:	d405      	bmi.n	8009c0a <_puts_r+0x72>
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	059b      	lsls	r3, r3, #22
 8009c02:	d402      	bmi.n	8009c0a <_puts_r+0x72>
 8009c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c06:	f000 f9ff 	bl	800a008 <__retarget_lock_release_recursive>
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	bd70      	pop	{r4, r5, r6, pc}
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	da04      	bge.n	8009c1c <_puts_r+0x84>
 8009c12:	69a2      	ldr	r2, [r4, #24]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	dc06      	bgt.n	8009c26 <_puts_r+0x8e>
 8009c18:	290a      	cmp	r1, #10
 8009c1a:	d004      	beq.n	8009c26 <_puts_r+0x8e>
 8009c1c:	6823      	ldr	r3, [r4, #0]
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	6022      	str	r2, [r4, #0]
 8009c22:	7019      	strb	r1, [r3, #0]
 8009c24:	e7cf      	b.n	8009bc6 <_puts_r+0x2e>
 8009c26:	4622      	mov	r2, r4
 8009c28:	4628      	mov	r0, r5
 8009c2a:	f000 f874 	bl	8009d16 <__swbuf_r>
 8009c2e:	3001      	adds	r0, #1
 8009c30:	d1c9      	bne.n	8009bc6 <_puts_r+0x2e>
 8009c32:	e7df      	b.n	8009bf4 <_puts_r+0x5c>
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	250a      	movs	r5, #10
 8009c38:	1c5a      	adds	r2, r3, #1
 8009c3a:	6022      	str	r2, [r4, #0]
 8009c3c:	701d      	strb	r5, [r3, #0]
 8009c3e:	e7db      	b.n	8009bf8 <_puts_r+0x60>

08009c40 <puts>:
 8009c40:	4b02      	ldr	r3, [pc, #8]	; (8009c4c <puts+0xc>)
 8009c42:	4601      	mov	r1, r0
 8009c44:	6818      	ldr	r0, [r3, #0]
 8009c46:	f7ff bfa7 	b.w	8009b98 <_puts_r>
 8009c4a:	bf00      	nop
 8009c4c:	2000006c 	.word	0x2000006c

08009c50 <siprintf>:
 8009c50:	b40e      	push	{r1, r2, r3}
 8009c52:	b500      	push	{lr}
 8009c54:	b09c      	sub	sp, #112	; 0x70
 8009c56:	ab1d      	add	r3, sp, #116	; 0x74
 8009c58:	9002      	str	r0, [sp, #8]
 8009c5a:	9006      	str	r0, [sp, #24]
 8009c5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c60:	4809      	ldr	r0, [pc, #36]	; (8009c88 <siprintf+0x38>)
 8009c62:	9107      	str	r1, [sp, #28]
 8009c64:	9104      	str	r1, [sp, #16]
 8009c66:	4909      	ldr	r1, [pc, #36]	; (8009c8c <siprintf+0x3c>)
 8009c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c6c:	9105      	str	r1, [sp, #20]
 8009c6e:	6800      	ldr	r0, [r0, #0]
 8009c70:	9301      	str	r3, [sp, #4]
 8009c72:	a902      	add	r1, sp, #8
 8009c74:	f002 fc44 	bl	800c500 <_svfiprintf_r>
 8009c78:	9b02      	ldr	r3, [sp, #8]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	701a      	strb	r2, [r3, #0]
 8009c7e:	b01c      	add	sp, #112	; 0x70
 8009c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c84:	b003      	add	sp, #12
 8009c86:	4770      	bx	lr
 8009c88:	2000006c 	.word	0x2000006c
 8009c8c:	ffff0208 	.word	0xffff0208

08009c90 <__sread>:
 8009c90:	b510      	push	{r4, lr}
 8009c92:	460c      	mov	r4, r1
 8009c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c98:	f000 f956 	bl	8009f48 <_read_r>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	bfab      	itete	ge
 8009ca0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ca4:	181b      	addge	r3, r3, r0
 8009ca6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009caa:	bfac      	ite	ge
 8009cac:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cae:	81a3      	strhlt	r3, [r4, #12]
 8009cb0:	bd10      	pop	{r4, pc}

08009cb2 <__swrite>:
 8009cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb6:	461f      	mov	r7, r3
 8009cb8:	898b      	ldrh	r3, [r1, #12]
 8009cba:	05db      	lsls	r3, r3, #23
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	4616      	mov	r6, r2
 8009cc2:	d505      	bpl.n	8009cd0 <__swrite+0x1e>
 8009cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc8:	2302      	movs	r3, #2
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f000 f92a 	bl	8009f24 <_lseek_r>
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cda:	81a3      	strh	r3, [r4, #12]
 8009cdc:	4632      	mov	r2, r6
 8009cde:	463b      	mov	r3, r7
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce6:	f000 b951 	b.w	8009f8c <_write_r>

08009cea <__sseek>:
 8009cea:	b510      	push	{r4, lr}
 8009cec:	460c      	mov	r4, r1
 8009cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf2:	f000 f917 	bl	8009f24 <_lseek_r>
 8009cf6:	1c43      	adds	r3, r0, #1
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	bf15      	itete	ne
 8009cfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009cfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d06:	81a3      	strheq	r3, [r4, #12]
 8009d08:	bf18      	it	ne
 8009d0a:	81a3      	strhne	r3, [r4, #12]
 8009d0c:	bd10      	pop	{r4, pc}

08009d0e <__sclose>:
 8009d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d12:	f000 b8a1 	b.w	8009e58 <_close_r>

08009d16 <__swbuf_r>:
 8009d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d18:	460e      	mov	r6, r1
 8009d1a:	4614      	mov	r4, r2
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	b118      	cbz	r0, 8009d28 <__swbuf_r+0x12>
 8009d20:	6a03      	ldr	r3, [r0, #32]
 8009d22:	b90b      	cbnz	r3, 8009d28 <__swbuf_r+0x12>
 8009d24:	f7ff fef0 	bl	8009b08 <__sinit>
 8009d28:	69a3      	ldr	r3, [r4, #24]
 8009d2a:	60a3      	str	r3, [r4, #8]
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	071a      	lsls	r2, r3, #28
 8009d30:	d525      	bpl.n	8009d7e <__swbuf_r+0x68>
 8009d32:	6923      	ldr	r3, [r4, #16]
 8009d34:	b31b      	cbz	r3, 8009d7e <__swbuf_r+0x68>
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	6922      	ldr	r2, [r4, #16]
 8009d3a:	1a98      	subs	r0, r3, r2
 8009d3c:	6963      	ldr	r3, [r4, #20]
 8009d3e:	b2f6      	uxtb	r6, r6
 8009d40:	4283      	cmp	r3, r0
 8009d42:	4637      	mov	r7, r6
 8009d44:	dc04      	bgt.n	8009d50 <__swbuf_r+0x3a>
 8009d46:	4621      	mov	r1, r4
 8009d48:	4628      	mov	r0, r5
 8009d4a:	f002 fea1 	bl	800ca90 <_fflush_r>
 8009d4e:	b9e0      	cbnz	r0, 8009d8a <__swbuf_r+0x74>
 8009d50:	68a3      	ldr	r3, [r4, #8]
 8009d52:	3b01      	subs	r3, #1
 8009d54:	60a3      	str	r3, [r4, #8]
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	1c5a      	adds	r2, r3, #1
 8009d5a:	6022      	str	r2, [r4, #0]
 8009d5c:	701e      	strb	r6, [r3, #0]
 8009d5e:	6962      	ldr	r2, [r4, #20]
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d004      	beq.n	8009d70 <__swbuf_r+0x5a>
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	07db      	lsls	r3, r3, #31
 8009d6a:	d506      	bpl.n	8009d7a <__swbuf_r+0x64>
 8009d6c:	2e0a      	cmp	r6, #10
 8009d6e:	d104      	bne.n	8009d7a <__swbuf_r+0x64>
 8009d70:	4621      	mov	r1, r4
 8009d72:	4628      	mov	r0, r5
 8009d74:	f002 fe8c 	bl	800ca90 <_fflush_r>
 8009d78:	b938      	cbnz	r0, 8009d8a <__swbuf_r+0x74>
 8009d7a:	4638      	mov	r0, r7
 8009d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d7e:	4621      	mov	r1, r4
 8009d80:	4628      	mov	r0, r5
 8009d82:	f000 f805 	bl	8009d90 <__swsetup_r>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	d0d5      	beq.n	8009d36 <__swbuf_r+0x20>
 8009d8a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009d8e:	e7f4      	b.n	8009d7a <__swbuf_r+0x64>

08009d90 <__swsetup_r>:
 8009d90:	b538      	push	{r3, r4, r5, lr}
 8009d92:	4b2a      	ldr	r3, [pc, #168]	; (8009e3c <__swsetup_r+0xac>)
 8009d94:	4605      	mov	r5, r0
 8009d96:	6818      	ldr	r0, [r3, #0]
 8009d98:	460c      	mov	r4, r1
 8009d9a:	b118      	cbz	r0, 8009da4 <__swsetup_r+0x14>
 8009d9c:	6a03      	ldr	r3, [r0, #32]
 8009d9e:	b90b      	cbnz	r3, 8009da4 <__swsetup_r+0x14>
 8009da0:	f7ff feb2 	bl	8009b08 <__sinit>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009daa:	0718      	lsls	r0, r3, #28
 8009dac:	d422      	bmi.n	8009df4 <__swsetup_r+0x64>
 8009dae:	06d9      	lsls	r1, r3, #27
 8009db0:	d407      	bmi.n	8009dc2 <__swsetup_r+0x32>
 8009db2:	2309      	movs	r3, #9
 8009db4:	602b      	str	r3, [r5, #0]
 8009db6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009dba:	81a3      	strh	r3, [r4, #12]
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dc0:	e034      	b.n	8009e2c <__swsetup_r+0x9c>
 8009dc2:	0758      	lsls	r0, r3, #29
 8009dc4:	d512      	bpl.n	8009dec <__swsetup_r+0x5c>
 8009dc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dc8:	b141      	cbz	r1, 8009ddc <__swsetup_r+0x4c>
 8009dca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dce:	4299      	cmp	r1, r3
 8009dd0:	d002      	beq.n	8009dd8 <__swsetup_r+0x48>
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f000 ffaa 	bl	800ad2c <_free_r>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	6363      	str	r3, [r4, #52]	; 0x34
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009de2:	81a3      	strh	r3, [r4, #12]
 8009de4:	2300      	movs	r3, #0
 8009de6:	6063      	str	r3, [r4, #4]
 8009de8:	6923      	ldr	r3, [r4, #16]
 8009dea:	6023      	str	r3, [r4, #0]
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	f043 0308 	orr.w	r3, r3, #8
 8009df2:	81a3      	strh	r3, [r4, #12]
 8009df4:	6923      	ldr	r3, [r4, #16]
 8009df6:	b94b      	cbnz	r3, 8009e0c <__swsetup_r+0x7c>
 8009df8:	89a3      	ldrh	r3, [r4, #12]
 8009dfa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e02:	d003      	beq.n	8009e0c <__swsetup_r+0x7c>
 8009e04:	4621      	mov	r1, r4
 8009e06:	4628      	mov	r0, r5
 8009e08:	f002 fe90 	bl	800cb2c <__smakebuf_r>
 8009e0c:	89a0      	ldrh	r0, [r4, #12]
 8009e0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e12:	f010 0301 	ands.w	r3, r0, #1
 8009e16:	d00a      	beq.n	8009e2e <__swsetup_r+0x9e>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	60a3      	str	r3, [r4, #8]
 8009e1c:	6963      	ldr	r3, [r4, #20]
 8009e1e:	425b      	negs	r3, r3
 8009e20:	61a3      	str	r3, [r4, #24]
 8009e22:	6923      	ldr	r3, [r4, #16]
 8009e24:	b943      	cbnz	r3, 8009e38 <__swsetup_r+0xa8>
 8009e26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e2a:	d1c4      	bne.n	8009db6 <__swsetup_r+0x26>
 8009e2c:	bd38      	pop	{r3, r4, r5, pc}
 8009e2e:	0781      	lsls	r1, r0, #30
 8009e30:	bf58      	it	pl
 8009e32:	6963      	ldrpl	r3, [r4, #20]
 8009e34:	60a3      	str	r3, [r4, #8]
 8009e36:	e7f4      	b.n	8009e22 <__swsetup_r+0x92>
 8009e38:	2000      	movs	r0, #0
 8009e3a:	e7f7      	b.n	8009e2c <__swsetup_r+0x9c>
 8009e3c:	2000006c 	.word	0x2000006c

08009e40 <memset>:
 8009e40:	4402      	add	r2, r0
 8009e42:	4603      	mov	r3, r0
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d100      	bne.n	8009e4a <memset+0xa>
 8009e48:	4770      	bx	lr
 8009e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e4e:	e7f9      	b.n	8009e44 <memset+0x4>

08009e50 <_localeconv_r>:
 8009e50:	4800      	ldr	r0, [pc, #0]	; (8009e54 <_localeconv_r+0x4>)
 8009e52:	4770      	bx	lr
 8009e54:	20000160 	.word	0x20000160

08009e58 <_close_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d06      	ldr	r5, [pc, #24]	; (8009e74 <_close_r+0x1c>)
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4604      	mov	r4, r0
 8009e60:	4608      	mov	r0, r1
 8009e62:	602b      	str	r3, [r5, #0]
 8009e64:	f7f8 f98f 	bl	8002186 <_close>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d102      	bne.n	8009e72 <_close_r+0x1a>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	b103      	cbz	r3, 8009e72 <_close_r+0x1a>
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	20001fe8 	.word	0x20001fe8

08009e78 <_reclaim_reent>:
 8009e78:	4b29      	ldr	r3, [pc, #164]	; (8009f20 <_reclaim_reent+0xa8>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4283      	cmp	r3, r0
 8009e7e:	b570      	push	{r4, r5, r6, lr}
 8009e80:	4604      	mov	r4, r0
 8009e82:	d04b      	beq.n	8009f1c <_reclaim_reent+0xa4>
 8009e84:	69c3      	ldr	r3, [r0, #28]
 8009e86:	b143      	cbz	r3, 8009e9a <_reclaim_reent+0x22>
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d144      	bne.n	8009f18 <_reclaim_reent+0xa0>
 8009e8e:	69e3      	ldr	r3, [r4, #28]
 8009e90:	6819      	ldr	r1, [r3, #0]
 8009e92:	b111      	cbz	r1, 8009e9a <_reclaim_reent+0x22>
 8009e94:	4620      	mov	r0, r4
 8009e96:	f000 ff49 	bl	800ad2c <_free_r>
 8009e9a:	6961      	ldr	r1, [r4, #20]
 8009e9c:	b111      	cbz	r1, 8009ea4 <_reclaim_reent+0x2c>
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f000 ff44 	bl	800ad2c <_free_r>
 8009ea4:	69e1      	ldr	r1, [r4, #28]
 8009ea6:	b111      	cbz	r1, 8009eae <_reclaim_reent+0x36>
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f000 ff3f 	bl	800ad2c <_free_r>
 8009eae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009eb0:	b111      	cbz	r1, 8009eb8 <_reclaim_reent+0x40>
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f000 ff3a 	bl	800ad2c <_free_r>
 8009eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009eba:	b111      	cbz	r1, 8009ec2 <_reclaim_reent+0x4a>
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f000 ff35 	bl	800ad2c <_free_r>
 8009ec2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ec4:	b111      	cbz	r1, 8009ecc <_reclaim_reent+0x54>
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f000 ff30 	bl	800ad2c <_free_r>
 8009ecc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009ece:	b111      	cbz	r1, 8009ed6 <_reclaim_reent+0x5e>
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f000 ff2b 	bl	800ad2c <_free_r>
 8009ed6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009ed8:	b111      	cbz	r1, 8009ee0 <_reclaim_reent+0x68>
 8009eda:	4620      	mov	r0, r4
 8009edc:	f000 ff26 	bl	800ad2c <_free_r>
 8009ee0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009ee2:	b111      	cbz	r1, 8009eea <_reclaim_reent+0x72>
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f000 ff21 	bl	800ad2c <_free_r>
 8009eea:	6a23      	ldr	r3, [r4, #32]
 8009eec:	b1b3      	cbz	r3, 8009f1c <_reclaim_reent+0xa4>
 8009eee:	4620      	mov	r0, r4
 8009ef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ef4:	4718      	bx	r3
 8009ef6:	5949      	ldr	r1, [r1, r5]
 8009ef8:	b941      	cbnz	r1, 8009f0c <_reclaim_reent+0x94>
 8009efa:	3504      	adds	r5, #4
 8009efc:	69e3      	ldr	r3, [r4, #28]
 8009efe:	2d80      	cmp	r5, #128	; 0x80
 8009f00:	68d9      	ldr	r1, [r3, #12]
 8009f02:	d1f8      	bne.n	8009ef6 <_reclaim_reent+0x7e>
 8009f04:	4620      	mov	r0, r4
 8009f06:	f000 ff11 	bl	800ad2c <_free_r>
 8009f0a:	e7c0      	b.n	8009e8e <_reclaim_reent+0x16>
 8009f0c:	680e      	ldr	r6, [r1, #0]
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f000 ff0c 	bl	800ad2c <_free_r>
 8009f14:	4631      	mov	r1, r6
 8009f16:	e7ef      	b.n	8009ef8 <_reclaim_reent+0x80>
 8009f18:	2500      	movs	r5, #0
 8009f1a:	e7ef      	b.n	8009efc <_reclaim_reent+0x84>
 8009f1c:	bd70      	pop	{r4, r5, r6, pc}
 8009f1e:	bf00      	nop
 8009f20:	2000006c 	.word	0x2000006c

08009f24 <_lseek_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4d07      	ldr	r5, [pc, #28]	; (8009f44 <_lseek_r+0x20>)
 8009f28:	4604      	mov	r4, r0
 8009f2a:	4608      	mov	r0, r1
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	2200      	movs	r2, #0
 8009f30:	602a      	str	r2, [r5, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	f7f8 f94e 	bl	80021d4 <_lseek>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d102      	bne.n	8009f42 <_lseek_r+0x1e>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	b103      	cbz	r3, 8009f42 <_lseek_r+0x1e>
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	bd38      	pop	{r3, r4, r5, pc}
 8009f44:	20001fe8 	.word	0x20001fe8

08009f48 <_read_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d07      	ldr	r5, [pc, #28]	; (8009f68 <_read_r+0x20>)
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	4608      	mov	r0, r1
 8009f50:	4611      	mov	r1, r2
 8009f52:	2200      	movs	r2, #0
 8009f54:	602a      	str	r2, [r5, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	f7f8 f8dc 	bl	8002114 <_read>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d102      	bne.n	8009f66 <_read_r+0x1e>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	b103      	cbz	r3, 8009f66 <_read_r+0x1e>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	20001fe8 	.word	0x20001fe8

08009f6c <_sbrk_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4d06      	ldr	r5, [pc, #24]	; (8009f88 <_sbrk_r+0x1c>)
 8009f70:	2300      	movs	r3, #0
 8009f72:	4604      	mov	r4, r0
 8009f74:	4608      	mov	r0, r1
 8009f76:	602b      	str	r3, [r5, #0]
 8009f78:	f7f8 f93a 	bl	80021f0 <_sbrk>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d102      	bne.n	8009f86 <_sbrk_r+0x1a>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	b103      	cbz	r3, 8009f86 <_sbrk_r+0x1a>
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	bd38      	pop	{r3, r4, r5, pc}
 8009f88:	20001fe8 	.word	0x20001fe8

08009f8c <_write_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4d07      	ldr	r5, [pc, #28]	; (8009fac <_write_r+0x20>)
 8009f90:	4604      	mov	r4, r0
 8009f92:	4608      	mov	r0, r1
 8009f94:	4611      	mov	r1, r2
 8009f96:	2200      	movs	r2, #0
 8009f98:	602a      	str	r2, [r5, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f7f8 f8d7 	bl	800214e <_write>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	d102      	bne.n	8009faa <_write_r+0x1e>
 8009fa4:	682b      	ldr	r3, [r5, #0]
 8009fa6:	b103      	cbz	r3, 8009faa <_write_r+0x1e>
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	bd38      	pop	{r3, r4, r5, pc}
 8009fac:	20001fe8 	.word	0x20001fe8

08009fb0 <__errno>:
 8009fb0:	4b01      	ldr	r3, [pc, #4]	; (8009fb8 <__errno+0x8>)
 8009fb2:	6818      	ldr	r0, [r3, #0]
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	2000006c 	.word	0x2000006c

08009fbc <__libc_init_array>:
 8009fbc:	b570      	push	{r4, r5, r6, lr}
 8009fbe:	4d0d      	ldr	r5, [pc, #52]	; (8009ff4 <__libc_init_array+0x38>)
 8009fc0:	4c0d      	ldr	r4, [pc, #52]	; (8009ff8 <__libc_init_array+0x3c>)
 8009fc2:	1b64      	subs	r4, r4, r5
 8009fc4:	10a4      	asrs	r4, r4, #2
 8009fc6:	2600      	movs	r6, #0
 8009fc8:	42a6      	cmp	r6, r4
 8009fca:	d109      	bne.n	8009fe0 <__libc_init_array+0x24>
 8009fcc:	4d0b      	ldr	r5, [pc, #44]	; (8009ffc <__libc_init_array+0x40>)
 8009fce:	4c0c      	ldr	r4, [pc, #48]	; (800a000 <__libc_init_array+0x44>)
 8009fd0:	f003 faa0 	bl	800d514 <_init>
 8009fd4:	1b64      	subs	r4, r4, r5
 8009fd6:	10a4      	asrs	r4, r4, #2
 8009fd8:	2600      	movs	r6, #0
 8009fda:	42a6      	cmp	r6, r4
 8009fdc:	d105      	bne.n	8009fea <__libc_init_array+0x2e>
 8009fde:	bd70      	pop	{r4, r5, r6, pc}
 8009fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fe4:	4798      	blx	r3
 8009fe6:	3601      	adds	r6, #1
 8009fe8:	e7ee      	b.n	8009fc8 <__libc_init_array+0xc>
 8009fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fee:	4798      	blx	r3
 8009ff0:	3601      	adds	r6, #1
 8009ff2:	e7f2      	b.n	8009fda <__libc_init_array+0x1e>
 8009ff4:	0800db98 	.word	0x0800db98
 8009ff8:	0800db98 	.word	0x0800db98
 8009ffc:	0800db98 	.word	0x0800db98
 800a000:	0800db9c 	.word	0x0800db9c

0800a004 <__retarget_lock_init_recursive>:
 800a004:	4770      	bx	lr

0800a006 <__retarget_lock_acquire_recursive>:
 800a006:	4770      	bx	lr

0800a008 <__retarget_lock_release_recursive>:
 800a008:	4770      	bx	lr

0800a00a <memcpy>:
 800a00a:	440a      	add	r2, r1
 800a00c:	4291      	cmp	r1, r2
 800a00e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a012:	d100      	bne.n	800a016 <memcpy+0xc>
 800a014:	4770      	bx	lr
 800a016:	b510      	push	{r4, lr}
 800a018:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a01c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a020:	4291      	cmp	r1, r2
 800a022:	d1f9      	bne.n	800a018 <memcpy+0xe>
 800a024:	bd10      	pop	{r4, pc}
	...

0800a028 <nanf>:
 800a028:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a030 <nanf+0x8>
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	7fc00000 	.word	0x7fc00000

0800a034 <quorem>:
 800a034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a038:	6903      	ldr	r3, [r0, #16]
 800a03a:	690c      	ldr	r4, [r1, #16]
 800a03c:	42a3      	cmp	r3, r4
 800a03e:	4607      	mov	r7, r0
 800a040:	db7e      	blt.n	800a140 <quorem+0x10c>
 800a042:	3c01      	subs	r4, #1
 800a044:	f101 0814 	add.w	r8, r1, #20
 800a048:	f100 0514 	add.w	r5, r0, #20
 800a04c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a050:	9301      	str	r3, [sp, #4]
 800a052:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a056:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a05a:	3301      	adds	r3, #1
 800a05c:	429a      	cmp	r2, r3
 800a05e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a062:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a066:	fbb2 f6f3 	udiv	r6, r2, r3
 800a06a:	d331      	bcc.n	800a0d0 <quorem+0x9c>
 800a06c:	f04f 0e00 	mov.w	lr, #0
 800a070:	4640      	mov	r0, r8
 800a072:	46ac      	mov	ip, r5
 800a074:	46f2      	mov	sl, lr
 800a076:	f850 2b04 	ldr.w	r2, [r0], #4
 800a07a:	b293      	uxth	r3, r2
 800a07c:	fb06 e303 	mla	r3, r6, r3, lr
 800a080:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a084:	0c1a      	lsrs	r2, r3, #16
 800a086:	b29b      	uxth	r3, r3
 800a088:	ebaa 0303 	sub.w	r3, sl, r3
 800a08c:	f8dc a000 	ldr.w	sl, [ip]
 800a090:	fa13 f38a 	uxtah	r3, r3, sl
 800a094:	fb06 220e 	mla	r2, r6, lr, r2
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	9b00      	ldr	r3, [sp, #0]
 800a09c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0a0:	b292      	uxth	r2, r2
 800a0a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a0a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0aa:	f8bd 3000 	ldrh.w	r3, [sp]
 800a0ae:	4581      	cmp	r9, r0
 800a0b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0b4:	f84c 3b04 	str.w	r3, [ip], #4
 800a0b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a0bc:	d2db      	bcs.n	800a076 <quorem+0x42>
 800a0be:	f855 300b 	ldr.w	r3, [r5, fp]
 800a0c2:	b92b      	cbnz	r3, 800a0d0 <quorem+0x9c>
 800a0c4:	9b01      	ldr	r3, [sp, #4]
 800a0c6:	3b04      	subs	r3, #4
 800a0c8:	429d      	cmp	r5, r3
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	d32c      	bcc.n	800a128 <quorem+0xf4>
 800a0ce:	613c      	str	r4, [r7, #16]
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	f001 f93d 	bl	800b350 <__mcmp>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	db22      	blt.n	800a120 <quorem+0xec>
 800a0da:	3601      	adds	r6, #1
 800a0dc:	4629      	mov	r1, r5
 800a0de:	2000      	movs	r0, #0
 800a0e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0e4:	f8d1 c000 	ldr.w	ip, [r1]
 800a0e8:	b293      	uxth	r3, r2
 800a0ea:	1ac3      	subs	r3, r0, r3
 800a0ec:	0c12      	lsrs	r2, r2, #16
 800a0ee:	fa13 f38c 	uxtah	r3, r3, ip
 800a0f2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a0f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a100:	45c1      	cmp	r9, r8
 800a102:	f841 3b04 	str.w	r3, [r1], #4
 800a106:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a10a:	d2e9      	bcs.n	800a0e0 <quorem+0xac>
 800a10c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a110:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a114:	b922      	cbnz	r2, 800a120 <quorem+0xec>
 800a116:	3b04      	subs	r3, #4
 800a118:	429d      	cmp	r5, r3
 800a11a:	461a      	mov	r2, r3
 800a11c:	d30a      	bcc.n	800a134 <quorem+0x100>
 800a11e:	613c      	str	r4, [r7, #16]
 800a120:	4630      	mov	r0, r6
 800a122:	b003      	add	sp, #12
 800a124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a128:	6812      	ldr	r2, [r2, #0]
 800a12a:	3b04      	subs	r3, #4
 800a12c:	2a00      	cmp	r2, #0
 800a12e:	d1ce      	bne.n	800a0ce <quorem+0x9a>
 800a130:	3c01      	subs	r4, #1
 800a132:	e7c9      	b.n	800a0c8 <quorem+0x94>
 800a134:	6812      	ldr	r2, [r2, #0]
 800a136:	3b04      	subs	r3, #4
 800a138:	2a00      	cmp	r2, #0
 800a13a:	d1f0      	bne.n	800a11e <quorem+0xea>
 800a13c:	3c01      	subs	r4, #1
 800a13e:	e7eb      	b.n	800a118 <quorem+0xe4>
 800a140:	2000      	movs	r0, #0
 800a142:	e7ee      	b.n	800a122 <quorem+0xee>
 800a144:	0000      	movs	r0, r0
	...

0800a148 <_dtoa_r>:
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	ed2d 8b04 	vpush	{d8-d9}
 800a150:	69c5      	ldr	r5, [r0, #28]
 800a152:	b093      	sub	sp, #76	; 0x4c
 800a154:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a158:	ec57 6b10 	vmov	r6, r7, d0
 800a15c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a160:	9107      	str	r1, [sp, #28]
 800a162:	4604      	mov	r4, r0
 800a164:	920a      	str	r2, [sp, #40]	; 0x28
 800a166:	930d      	str	r3, [sp, #52]	; 0x34
 800a168:	b975      	cbnz	r5, 800a188 <_dtoa_r+0x40>
 800a16a:	2010      	movs	r0, #16
 800a16c:	f7fe fd16 	bl	8008b9c <malloc>
 800a170:	4602      	mov	r2, r0
 800a172:	61e0      	str	r0, [r4, #28]
 800a174:	b920      	cbnz	r0, 800a180 <_dtoa_r+0x38>
 800a176:	4bae      	ldr	r3, [pc, #696]	; (800a430 <_dtoa_r+0x2e8>)
 800a178:	21ef      	movs	r1, #239	; 0xef
 800a17a:	48ae      	ldr	r0, [pc, #696]	; (800a434 <_dtoa_r+0x2ec>)
 800a17c:	f002 fd68 	bl	800cc50 <__assert_func>
 800a180:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a184:	6005      	str	r5, [r0, #0]
 800a186:	60c5      	str	r5, [r0, #12]
 800a188:	69e3      	ldr	r3, [r4, #28]
 800a18a:	6819      	ldr	r1, [r3, #0]
 800a18c:	b151      	cbz	r1, 800a1a4 <_dtoa_r+0x5c>
 800a18e:	685a      	ldr	r2, [r3, #4]
 800a190:	604a      	str	r2, [r1, #4]
 800a192:	2301      	movs	r3, #1
 800a194:	4093      	lsls	r3, r2
 800a196:	608b      	str	r3, [r1, #8]
 800a198:	4620      	mov	r0, r4
 800a19a:	f000 fe53 	bl	800ae44 <_Bfree>
 800a19e:	69e3      	ldr	r3, [r4, #28]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	1e3b      	subs	r3, r7, #0
 800a1a6:	bfbb      	ittet	lt
 800a1a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a1ac:	9303      	strlt	r3, [sp, #12]
 800a1ae:	2300      	movge	r3, #0
 800a1b0:	2201      	movlt	r2, #1
 800a1b2:	bfac      	ite	ge
 800a1b4:	f8c8 3000 	strge.w	r3, [r8]
 800a1b8:	f8c8 2000 	strlt.w	r2, [r8]
 800a1bc:	4b9e      	ldr	r3, [pc, #632]	; (800a438 <_dtoa_r+0x2f0>)
 800a1be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a1c2:	ea33 0308 	bics.w	r3, r3, r8
 800a1c6:	d11b      	bne.n	800a200 <_dtoa_r+0xb8>
 800a1c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1ca:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a1d4:	4333      	orrs	r3, r6
 800a1d6:	f000 8593 	beq.w	800ad00 <_dtoa_r+0xbb8>
 800a1da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1dc:	b963      	cbnz	r3, 800a1f8 <_dtoa_r+0xb0>
 800a1de:	4b97      	ldr	r3, [pc, #604]	; (800a43c <_dtoa_r+0x2f4>)
 800a1e0:	e027      	b.n	800a232 <_dtoa_r+0xea>
 800a1e2:	4b97      	ldr	r3, [pc, #604]	; (800a440 <_dtoa_r+0x2f8>)
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	3308      	adds	r3, #8
 800a1e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1ea:	6013      	str	r3, [r2, #0]
 800a1ec:	9800      	ldr	r0, [sp, #0]
 800a1ee:	b013      	add	sp, #76	; 0x4c
 800a1f0:	ecbd 8b04 	vpop	{d8-d9}
 800a1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f8:	4b90      	ldr	r3, [pc, #576]	; (800a43c <_dtoa_r+0x2f4>)
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	3303      	adds	r3, #3
 800a1fe:	e7f3      	b.n	800a1e8 <_dtoa_r+0xa0>
 800a200:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a204:	2200      	movs	r2, #0
 800a206:	ec51 0b17 	vmov	r0, r1, d7
 800a20a:	eeb0 8a47 	vmov.f32	s16, s14
 800a20e:	eef0 8a67 	vmov.f32	s17, s15
 800a212:	2300      	movs	r3, #0
 800a214:	f7f6 fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 800a218:	4681      	mov	r9, r0
 800a21a:	b160      	cbz	r0, 800a236 <_dtoa_r+0xee>
 800a21c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a21e:	2301      	movs	r3, #1
 800a220:	6013      	str	r3, [r2, #0]
 800a222:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a224:	2b00      	cmp	r3, #0
 800a226:	f000 8568 	beq.w	800acfa <_dtoa_r+0xbb2>
 800a22a:	4b86      	ldr	r3, [pc, #536]	; (800a444 <_dtoa_r+0x2fc>)
 800a22c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a22e:	6013      	str	r3, [r2, #0]
 800a230:	3b01      	subs	r3, #1
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	e7da      	b.n	800a1ec <_dtoa_r+0xa4>
 800a236:	aa10      	add	r2, sp, #64	; 0x40
 800a238:	a911      	add	r1, sp, #68	; 0x44
 800a23a:	4620      	mov	r0, r4
 800a23c:	eeb0 0a48 	vmov.f32	s0, s16
 800a240:	eef0 0a68 	vmov.f32	s1, s17
 800a244:	f001 f99a 	bl	800b57c <__d2b>
 800a248:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a24c:	4682      	mov	sl, r0
 800a24e:	2d00      	cmp	r5, #0
 800a250:	d07f      	beq.n	800a352 <_dtoa_r+0x20a>
 800a252:	ee18 3a90 	vmov	r3, s17
 800a256:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a25a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a25e:	ec51 0b18 	vmov	r0, r1, d8
 800a262:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a266:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a26a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a26e:	4619      	mov	r1, r3
 800a270:	2200      	movs	r2, #0
 800a272:	4b75      	ldr	r3, [pc, #468]	; (800a448 <_dtoa_r+0x300>)
 800a274:	f7f6 f808 	bl	8000288 <__aeabi_dsub>
 800a278:	a367      	add	r3, pc, #412	; (adr r3, 800a418 <_dtoa_r+0x2d0>)
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	f7f6 f9bb 	bl	80005f8 <__aeabi_dmul>
 800a282:	a367      	add	r3, pc, #412	; (adr r3, 800a420 <_dtoa_r+0x2d8>)
 800a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a288:	f7f6 f800 	bl	800028c <__adddf3>
 800a28c:	4606      	mov	r6, r0
 800a28e:	4628      	mov	r0, r5
 800a290:	460f      	mov	r7, r1
 800a292:	f7f6 f947 	bl	8000524 <__aeabi_i2d>
 800a296:	a364      	add	r3, pc, #400	; (adr r3, 800a428 <_dtoa_r+0x2e0>)
 800a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29c:	f7f6 f9ac 	bl	80005f8 <__aeabi_dmul>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	4639      	mov	r1, r7
 800a2a8:	f7f5 fff0 	bl	800028c <__adddf3>
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	460f      	mov	r7, r1
 800a2b0:	f7f6 fc52 	bl	8000b58 <__aeabi_d2iz>
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	4683      	mov	fp, r0
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	4639      	mov	r1, r7
 800a2be:	f7f6 fc0d 	bl	8000adc <__aeabi_dcmplt>
 800a2c2:	b148      	cbz	r0, 800a2d8 <_dtoa_r+0x190>
 800a2c4:	4658      	mov	r0, fp
 800a2c6:	f7f6 f92d 	bl	8000524 <__aeabi_i2d>
 800a2ca:	4632      	mov	r2, r6
 800a2cc:	463b      	mov	r3, r7
 800a2ce:	f7f6 fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2d2:	b908      	cbnz	r0, 800a2d8 <_dtoa_r+0x190>
 800a2d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a2d8:	f1bb 0f16 	cmp.w	fp, #22
 800a2dc:	d857      	bhi.n	800a38e <_dtoa_r+0x246>
 800a2de:	4b5b      	ldr	r3, [pc, #364]	; (800a44c <_dtoa_r+0x304>)
 800a2e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e8:	ec51 0b18 	vmov	r0, r1, d8
 800a2ec:	f7f6 fbf6 	bl	8000adc <__aeabi_dcmplt>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d04e      	beq.n	800a392 <_dtoa_r+0x24a>
 800a2f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	930c      	str	r3, [sp, #48]	; 0x30
 800a2fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2fe:	1b5b      	subs	r3, r3, r5
 800a300:	1e5a      	subs	r2, r3, #1
 800a302:	bf45      	ittet	mi
 800a304:	f1c3 0301 	rsbmi	r3, r3, #1
 800a308:	9305      	strmi	r3, [sp, #20]
 800a30a:	2300      	movpl	r3, #0
 800a30c:	2300      	movmi	r3, #0
 800a30e:	9206      	str	r2, [sp, #24]
 800a310:	bf54      	ite	pl
 800a312:	9305      	strpl	r3, [sp, #20]
 800a314:	9306      	strmi	r3, [sp, #24]
 800a316:	f1bb 0f00 	cmp.w	fp, #0
 800a31a:	db3c      	blt.n	800a396 <_dtoa_r+0x24e>
 800a31c:	9b06      	ldr	r3, [sp, #24]
 800a31e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a322:	445b      	add	r3, fp
 800a324:	9306      	str	r3, [sp, #24]
 800a326:	2300      	movs	r3, #0
 800a328:	9308      	str	r3, [sp, #32]
 800a32a:	9b07      	ldr	r3, [sp, #28]
 800a32c:	2b09      	cmp	r3, #9
 800a32e:	d868      	bhi.n	800a402 <_dtoa_r+0x2ba>
 800a330:	2b05      	cmp	r3, #5
 800a332:	bfc4      	itt	gt
 800a334:	3b04      	subgt	r3, #4
 800a336:	9307      	strgt	r3, [sp, #28]
 800a338:	9b07      	ldr	r3, [sp, #28]
 800a33a:	f1a3 0302 	sub.w	r3, r3, #2
 800a33e:	bfcc      	ite	gt
 800a340:	2500      	movgt	r5, #0
 800a342:	2501      	movle	r5, #1
 800a344:	2b03      	cmp	r3, #3
 800a346:	f200 8085 	bhi.w	800a454 <_dtoa_r+0x30c>
 800a34a:	e8df f003 	tbb	[pc, r3]
 800a34e:	3b2e      	.short	0x3b2e
 800a350:	5839      	.short	0x5839
 800a352:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a356:	441d      	add	r5, r3
 800a358:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a35c:	2b20      	cmp	r3, #32
 800a35e:	bfc1      	itttt	gt
 800a360:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a364:	fa08 f803 	lslgt.w	r8, r8, r3
 800a368:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a36c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a370:	bfd6      	itet	le
 800a372:	f1c3 0320 	rsble	r3, r3, #32
 800a376:	ea48 0003 	orrgt.w	r0, r8, r3
 800a37a:	fa06 f003 	lslle.w	r0, r6, r3
 800a37e:	f7f6 f8c1 	bl	8000504 <__aeabi_ui2d>
 800a382:	2201      	movs	r2, #1
 800a384:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a388:	3d01      	subs	r5, #1
 800a38a:	920e      	str	r2, [sp, #56]	; 0x38
 800a38c:	e76f      	b.n	800a26e <_dtoa_r+0x126>
 800a38e:	2301      	movs	r3, #1
 800a390:	e7b3      	b.n	800a2fa <_dtoa_r+0x1b2>
 800a392:	900c      	str	r0, [sp, #48]	; 0x30
 800a394:	e7b2      	b.n	800a2fc <_dtoa_r+0x1b4>
 800a396:	9b05      	ldr	r3, [sp, #20]
 800a398:	eba3 030b 	sub.w	r3, r3, fp
 800a39c:	9305      	str	r3, [sp, #20]
 800a39e:	f1cb 0300 	rsb	r3, fp, #0
 800a3a2:	9308      	str	r3, [sp, #32]
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3a8:	e7bf      	b.n	800a32a <_dtoa_r+0x1e2>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	dc52      	bgt.n	800a45a <_dtoa_r+0x312>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	9301      	str	r3, [sp, #4]
 800a3b8:	9304      	str	r3, [sp, #16]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	920a      	str	r2, [sp, #40]	; 0x28
 800a3be:	e00b      	b.n	800a3d8 <_dtoa_r+0x290>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e7f3      	b.n	800a3ac <_dtoa_r+0x264>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ca:	445b      	add	r3, fp
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	9304      	str	r3, [sp, #16]
 800a3d4:	bfb8      	it	lt
 800a3d6:	2301      	movlt	r3, #1
 800a3d8:	69e0      	ldr	r0, [r4, #28]
 800a3da:	2100      	movs	r1, #0
 800a3dc:	2204      	movs	r2, #4
 800a3de:	f102 0614 	add.w	r6, r2, #20
 800a3e2:	429e      	cmp	r6, r3
 800a3e4:	d93d      	bls.n	800a462 <_dtoa_r+0x31a>
 800a3e6:	6041      	str	r1, [r0, #4]
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f000 fceb 	bl	800adc4 <_Balloc>
 800a3ee:	9000      	str	r0, [sp, #0]
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d139      	bne.n	800a468 <_dtoa_r+0x320>
 800a3f4:	4b16      	ldr	r3, [pc, #88]	; (800a450 <_dtoa_r+0x308>)
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	f240 11af 	movw	r1, #431	; 0x1af
 800a3fc:	e6bd      	b.n	800a17a <_dtoa_r+0x32>
 800a3fe:	2301      	movs	r3, #1
 800a400:	e7e1      	b.n	800a3c6 <_dtoa_r+0x27e>
 800a402:	2501      	movs	r5, #1
 800a404:	2300      	movs	r3, #0
 800a406:	9307      	str	r3, [sp, #28]
 800a408:	9509      	str	r5, [sp, #36]	; 0x24
 800a40a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a40e:	9301      	str	r3, [sp, #4]
 800a410:	9304      	str	r3, [sp, #16]
 800a412:	2200      	movs	r2, #0
 800a414:	2312      	movs	r3, #18
 800a416:	e7d1      	b.n	800a3bc <_dtoa_r+0x274>
 800a418:	636f4361 	.word	0x636f4361
 800a41c:	3fd287a7 	.word	0x3fd287a7
 800a420:	8b60c8b3 	.word	0x8b60c8b3
 800a424:	3fc68a28 	.word	0x3fc68a28
 800a428:	509f79fb 	.word	0x509f79fb
 800a42c:	3fd34413 	.word	0x3fd34413
 800a430:	0800d7aa 	.word	0x0800d7aa
 800a434:	0800d7c1 	.word	0x0800d7c1
 800a438:	7ff00000 	.word	0x7ff00000
 800a43c:	0800d7a6 	.word	0x0800d7a6
 800a440:	0800d79d 	.word	0x0800d79d
 800a444:	0800d775 	.word	0x0800d775
 800a448:	3ff80000 	.word	0x3ff80000
 800a44c:	0800d8b0 	.word	0x0800d8b0
 800a450:	0800d819 	.word	0x0800d819
 800a454:	2301      	movs	r3, #1
 800a456:	9309      	str	r3, [sp, #36]	; 0x24
 800a458:	e7d7      	b.n	800a40a <_dtoa_r+0x2c2>
 800a45a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a45c:	9301      	str	r3, [sp, #4]
 800a45e:	9304      	str	r3, [sp, #16]
 800a460:	e7ba      	b.n	800a3d8 <_dtoa_r+0x290>
 800a462:	3101      	adds	r1, #1
 800a464:	0052      	lsls	r2, r2, #1
 800a466:	e7ba      	b.n	800a3de <_dtoa_r+0x296>
 800a468:	69e3      	ldr	r3, [r4, #28]
 800a46a:	9a00      	ldr	r2, [sp, #0]
 800a46c:	601a      	str	r2, [r3, #0]
 800a46e:	9b04      	ldr	r3, [sp, #16]
 800a470:	2b0e      	cmp	r3, #14
 800a472:	f200 80a8 	bhi.w	800a5c6 <_dtoa_r+0x47e>
 800a476:	2d00      	cmp	r5, #0
 800a478:	f000 80a5 	beq.w	800a5c6 <_dtoa_r+0x47e>
 800a47c:	f1bb 0f00 	cmp.w	fp, #0
 800a480:	dd38      	ble.n	800a4f4 <_dtoa_r+0x3ac>
 800a482:	4bc0      	ldr	r3, [pc, #768]	; (800a784 <_dtoa_r+0x63c>)
 800a484:	f00b 020f 	and.w	r2, fp, #15
 800a488:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a48c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a490:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a494:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a498:	d019      	beq.n	800a4ce <_dtoa_r+0x386>
 800a49a:	4bbb      	ldr	r3, [pc, #748]	; (800a788 <_dtoa_r+0x640>)
 800a49c:	ec51 0b18 	vmov	r0, r1, d8
 800a4a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4a4:	f7f6 f9d2 	bl	800084c <__aeabi_ddiv>
 800a4a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4ac:	f008 080f 	and.w	r8, r8, #15
 800a4b0:	2503      	movs	r5, #3
 800a4b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a788 <_dtoa_r+0x640>
 800a4b6:	f1b8 0f00 	cmp.w	r8, #0
 800a4ba:	d10a      	bne.n	800a4d2 <_dtoa_r+0x38a>
 800a4bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4c0:	4632      	mov	r2, r6
 800a4c2:	463b      	mov	r3, r7
 800a4c4:	f7f6 f9c2 	bl	800084c <__aeabi_ddiv>
 800a4c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4cc:	e02b      	b.n	800a526 <_dtoa_r+0x3de>
 800a4ce:	2502      	movs	r5, #2
 800a4d0:	e7ef      	b.n	800a4b2 <_dtoa_r+0x36a>
 800a4d2:	f018 0f01 	tst.w	r8, #1
 800a4d6:	d008      	beq.n	800a4ea <_dtoa_r+0x3a2>
 800a4d8:	4630      	mov	r0, r6
 800a4da:	4639      	mov	r1, r7
 800a4dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a4e0:	f7f6 f88a 	bl	80005f8 <__aeabi_dmul>
 800a4e4:	3501      	adds	r5, #1
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	460f      	mov	r7, r1
 800a4ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a4ee:	f109 0908 	add.w	r9, r9, #8
 800a4f2:	e7e0      	b.n	800a4b6 <_dtoa_r+0x36e>
 800a4f4:	f000 809f 	beq.w	800a636 <_dtoa_r+0x4ee>
 800a4f8:	f1cb 0600 	rsb	r6, fp, #0
 800a4fc:	4ba1      	ldr	r3, [pc, #644]	; (800a784 <_dtoa_r+0x63c>)
 800a4fe:	4fa2      	ldr	r7, [pc, #648]	; (800a788 <_dtoa_r+0x640>)
 800a500:	f006 020f 	and.w	r2, r6, #15
 800a504:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	ec51 0b18 	vmov	r0, r1, d8
 800a510:	f7f6 f872 	bl	80005f8 <__aeabi_dmul>
 800a514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a518:	1136      	asrs	r6, r6, #4
 800a51a:	2300      	movs	r3, #0
 800a51c:	2502      	movs	r5, #2
 800a51e:	2e00      	cmp	r6, #0
 800a520:	d17e      	bne.n	800a620 <_dtoa_r+0x4d8>
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1d0      	bne.n	800a4c8 <_dtoa_r+0x380>
 800a526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a528:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 8084 	beq.w	800a63a <_dtoa_r+0x4f2>
 800a532:	4b96      	ldr	r3, [pc, #600]	; (800a78c <_dtoa_r+0x644>)
 800a534:	2200      	movs	r2, #0
 800a536:	4640      	mov	r0, r8
 800a538:	4649      	mov	r1, r9
 800a53a:	f7f6 facf 	bl	8000adc <__aeabi_dcmplt>
 800a53e:	2800      	cmp	r0, #0
 800a540:	d07b      	beq.n	800a63a <_dtoa_r+0x4f2>
 800a542:	9b04      	ldr	r3, [sp, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d078      	beq.n	800a63a <_dtoa_r+0x4f2>
 800a548:	9b01      	ldr	r3, [sp, #4]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	dd39      	ble.n	800a5c2 <_dtoa_r+0x47a>
 800a54e:	4b90      	ldr	r3, [pc, #576]	; (800a790 <_dtoa_r+0x648>)
 800a550:	2200      	movs	r2, #0
 800a552:	4640      	mov	r0, r8
 800a554:	4649      	mov	r1, r9
 800a556:	f7f6 f84f 	bl	80005f8 <__aeabi_dmul>
 800a55a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a55e:	9e01      	ldr	r6, [sp, #4]
 800a560:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a564:	3501      	adds	r5, #1
 800a566:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a56a:	4628      	mov	r0, r5
 800a56c:	f7f5 ffda 	bl	8000524 <__aeabi_i2d>
 800a570:	4642      	mov	r2, r8
 800a572:	464b      	mov	r3, r9
 800a574:	f7f6 f840 	bl	80005f8 <__aeabi_dmul>
 800a578:	4b86      	ldr	r3, [pc, #536]	; (800a794 <_dtoa_r+0x64c>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	f7f5 fe86 	bl	800028c <__adddf3>
 800a580:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a588:	9303      	str	r3, [sp, #12]
 800a58a:	2e00      	cmp	r6, #0
 800a58c:	d158      	bne.n	800a640 <_dtoa_r+0x4f8>
 800a58e:	4b82      	ldr	r3, [pc, #520]	; (800a798 <_dtoa_r+0x650>)
 800a590:	2200      	movs	r2, #0
 800a592:	4640      	mov	r0, r8
 800a594:	4649      	mov	r1, r9
 800a596:	f7f5 fe77 	bl	8000288 <__aeabi_dsub>
 800a59a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a59e:	4680      	mov	r8, r0
 800a5a0:	4689      	mov	r9, r1
 800a5a2:	f7f6 fab9 	bl	8000b18 <__aeabi_dcmpgt>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	f040 8296 	bne.w	800aad8 <_dtoa_r+0x990>
 800a5ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a5b0:	4640      	mov	r0, r8
 800a5b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5b6:	4649      	mov	r1, r9
 800a5b8:	f7f6 fa90 	bl	8000adc <__aeabi_dcmplt>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	f040 8289 	bne.w	800aad4 <_dtoa_r+0x98c>
 800a5c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a5c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f2c0 814e 	blt.w	800a86a <_dtoa_r+0x722>
 800a5ce:	f1bb 0f0e 	cmp.w	fp, #14
 800a5d2:	f300 814a 	bgt.w	800a86a <_dtoa_r+0x722>
 800a5d6:	4b6b      	ldr	r3, [pc, #428]	; (800a784 <_dtoa_r+0x63c>)
 800a5d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a5dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f280 80dc 	bge.w	800a7a0 <_dtoa_r+0x658>
 800a5e8:	9b04      	ldr	r3, [sp, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f300 80d8 	bgt.w	800a7a0 <_dtoa_r+0x658>
 800a5f0:	f040 826f 	bne.w	800aad2 <_dtoa_r+0x98a>
 800a5f4:	4b68      	ldr	r3, [pc, #416]	; (800a798 <_dtoa_r+0x650>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	f7f5 fffc 	bl	80005f8 <__aeabi_dmul>
 800a600:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a604:	f7f6 fa7e 	bl	8000b04 <__aeabi_dcmpge>
 800a608:	9e04      	ldr	r6, [sp, #16]
 800a60a:	4637      	mov	r7, r6
 800a60c:	2800      	cmp	r0, #0
 800a60e:	f040 8245 	bne.w	800aa9c <_dtoa_r+0x954>
 800a612:	9d00      	ldr	r5, [sp, #0]
 800a614:	2331      	movs	r3, #49	; 0x31
 800a616:	f805 3b01 	strb.w	r3, [r5], #1
 800a61a:	f10b 0b01 	add.w	fp, fp, #1
 800a61e:	e241      	b.n	800aaa4 <_dtoa_r+0x95c>
 800a620:	07f2      	lsls	r2, r6, #31
 800a622:	d505      	bpl.n	800a630 <_dtoa_r+0x4e8>
 800a624:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a628:	f7f5 ffe6 	bl	80005f8 <__aeabi_dmul>
 800a62c:	3501      	adds	r5, #1
 800a62e:	2301      	movs	r3, #1
 800a630:	1076      	asrs	r6, r6, #1
 800a632:	3708      	adds	r7, #8
 800a634:	e773      	b.n	800a51e <_dtoa_r+0x3d6>
 800a636:	2502      	movs	r5, #2
 800a638:	e775      	b.n	800a526 <_dtoa_r+0x3de>
 800a63a:	9e04      	ldr	r6, [sp, #16]
 800a63c:	465f      	mov	r7, fp
 800a63e:	e792      	b.n	800a566 <_dtoa_r+0x41e>
 800a640:	9900      	ldr	r1, [sp, #0]
 800a642:	4b50      	ldr	r3, [pc, #320]	; (800a784 <_dtoa_r+0x63c>)
 800a644:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a648:	4431      	add	r1, r6
 800a64a:	9102      	str	r1, [sp, #8]
 800a64c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a64e:	eeb0 9a47 	vmov.f32	s18, s14
 800a652:	eef0 9a67 	vmov.f32	s19, s15
 800a656:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a65a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a65e:	2900      	cmp	r1, #0
 800a660:	d044      	beq.n	800a6ec <_dtoa_r+0x5a4>
 800a662:	494e      	ldr	r1, [pc, #312]	; (800a79c <_dtoa_r+0x654>)
 800a664:	2000      	movs	r0, #0
 800a666:	f7f6 f8f1 	bl	800084c <__aeabi_ddiv>
 800a66a:	ec53 2b19 	vmov	r2, r3, d9
 800a66e:	f7f5 fe0b 	bl	8000288 <__aeabi_dsub>
 800a672:	9d00      	ldr	r5, [sp, #0]
 800a674:	ec41 0b19 	vmov	d9, r0, r1
 800a678:	4649      	mov	r1, r9
 800a67a:	4640      	mov	r0, r8
 800a67c:	f7f6 fa6c 	bl	8000b58 <__aeabi_d2iz>
 800a680:	4606      	mov	r6, r0
 800a682:	f7f5 ff4f 	bl	8000524 <__aeabi_i2d>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	4640      	mov	r0, r8
 800a68c:	4649      	mov	r1, r9
 800a68e:	f7f5 fdfb 	bl	8000288 <__aeabi_dsub>
 800a692:	3630      	adds	r6, #48	; 0x30
 800a694:	f805 6b01 	strb.w	r6, [r5], #1
 800a698:	ec53 2b19 	vmov	r2, r3, d9
 800a69c:	4680      	mov	r8, r0
 800a69e:	4689      	mov	r9, r1
 800a6a0:	f7f6 fa1c 	bl	8000adc <__aeabi_dcmplt>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d164      	bne.n	800a772 <_dtoa_r+0x62a>
 800a6a8:	4642      	mov	r2, r8
 800a6aa:	464b      	mov	r3, r9
 800a6ac:	4937      	ldr	r1, [pc, #220]	; (800a78c <_dtoa_r+0x644>)
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	f7f5 fdea 	bl	8000288 <__aeabi_dsub>
 800a6b4:	ec53 2b19 	vmov	r2, r3, d9
 800a6b8:	f7f6 fa10 	bl	8000adc <__aeabi_dcmplt>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	f040 80b6 	bne.w	800a82e <_dtoa_r+0x6e6>
 800a6c2:	9b02      	ldr	r3, [sp, #8]
 800a6c4:	429d      	cmp	r5, r3
 800a6c6:	f43f af7c 	beq.w	800a5c2 <_dtoa_r+0x47a>
 800a6ca:	4b31      	ldr	r3, [pc, #196]	; (800a790 <_dtoa_r+0x648>)
 800a6cc:	ec51 0b19 	vmov	r0, r1, d9
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f7f5 ff91 	bl	80005f8 <__aeabi_dmul>
 800a6d6:	4b2e      	ldr	r3, [pc, #184]	; (800a790 <_dtoa_r+0x648>)
 800a6d8:	ec41 0b19 	vmov	d9, r0, r1
 800a6dc:	2200      	movs	r2, #0
 800a6de:	4640      	mov	r0, r8
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	f7f5 ff89 	bl	80005f8 <__aeabi_dmul>
 800a6e6:	4680      	mov	r8, r0
 800a6e8:	4689      	mov	r9, r1
 800a6ea:	e7c5      	b.n	800a678 <_dtoa_r+0x530>
 800a6ec:	ec51 0b17 	vmov	r0, r1, d7
 800a6f0:	f7f5 ff82 	bl	80005f8 <__aeabi_dmul>
 800a6f4:	9b02      	ldr	r3, [sp, #8]
 800a6f6:	9d00      	ldr	r5, [sp, #0]
 800a6f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6fa:	ec41 0b19 	vmov	d9, r0, r1
 800a6fe:	4649      	mov	r1, r9
 800a700:	4640      	mov	r0, r8
 800a702:	f7f6 fa29 	bl	8000b58 <__aeabi_d2iz>
 800a706:	4606      	mov	r6, r0
 800a708:	f7f5 ff0c 	bl	8000524 <__aeabi_i2d>
 800a70c:	3630      	adds	r6, #48	; 0x30
 800a70e:	4602      	mov	r2, r0
 800a710:	460b      	mov	r3, r1
 800a712:	4640      	mov	r0, r8
 800a714:	4649      	mov	r1, r9
 800a716:	f7f5 fdb7 	bl	8000288 <__aeabi_dsub>
 800a71a:	f805 6b01 	strb.w	r6, [r5], #1
 800a71e:	9b02      	ldr	r3, [sp, #8]
 800a720:	429d      	cmp	r5, r3
 800a722:	4680      	mov	r8, r0
 800a724:	4689      	mov	r9, r1
 800a726:	f04f 0200 	mov.w	r2, #0
 800a72a:	d124      	bne.n	800a776 <_dtoa_r+0x62e>
 800a72c:	4b1b      	ldr	r3, [pc, #108]	; (800a79c <_dtoa_r+0x654>)
 800a72e:	ec51 0b19 	vmov	r0, r1, d9
 800a732:	f7f5 fdab 	bl	800028c <__adddf3>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	4640      	mov	r0, r8
 800a73c:	4649      	mov	r1, r9
 800a73e:	f7f6 f9eb 	bl	8000b18 <__aeabi_dcmpgt>
 800a742:	2800      	cmp	r0, #0
 800a744:	d173      	bne.n	800a82e <_dtoa_r+0x6e6>
 800a746:	ec53 2b19 	vmov	r2, r3, d9
 800a74a:	4914      	ldr	r1, [pc, #80]	; (800a79c <_dtoa_r+0x654>)
 800a74c:	2000      	movs	r0, #0
 800a74e:	f7f5 fd9b 	bl	8000288 <__aeabi_dsub>
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	4640      	mov	r0, r8
 800a758:	4649      	mov	r1, r9
 800a75a:	f7f6 f9bf 	bl	8000adc <__aeabi_dcmplt>
 800a75e:	2800      	cmp	r0, #0
 800a760:	f43f af2f 	beq.w	800a5c2 <_dtoa_r+0x47a>
 800a764:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a766:	1e6b      	subs	r3, r5, #1
 800a768:	930f      	str	r3, [sp, #60]	; 0x3c
 800a76a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a76e:	2b30      	cmp	r3, #48	; 0x30
 800a770:	d0f8      	beq.n	800a764 <_dtoa_r+0x61c>
 800a772:	46bb      	mov	fp, r7
 800a774:	e04a      	b.n	800a80c <_dtoa_r+0x6c4>
 800a776:	4b06      	ldr	r3, [pc, #24]	; (800a790 <_dtoa_r+0x648>)
 800a778:	f7f5 ff3e 	bl	80005f8 <__aeabi_dmul>
 800a77c:	4680      	mov	r8, r0
 800a77e:	4689      	mov	r9, r1
 800a780:	e7bd      	b.n	800a6fe <_dtoa_r+0x5b6>
 800a782:	bf00      	nop
 800a784:	0800d8b0 	.word	0x0800d8b0
 800a788:	0800d888 	.word	0x0800d888
 800a78c:	3ff00000 	.word	0x3ff00000
 800a790:	40240000 	.word	0x40240000
 800a794:	401c0000 	.word	0x401c0000
 800a798:	40140000 	.word	0x40140000
 800a79c:	3fe00000 	.word	0x3fe00000
 800a7a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a7a4:	9d00      	ldr	r5, [sp, #0]
 800a7a6:	4642      	mov	r2, r8
 800a7a8:	464b      	mov	r3, r9
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	f7f6 f84d 	bl	800084c <__aeabi_ddiv>
 800a7b2:	f7f6 f9d1 	bl	8000b58 <__aeabi_d2iz>
 800a7b6:	9001      	str	r0, [sp, #4]
 800a7b8:	f7f5 feb4 	bl	8000524 <__aeabi_i2d>
 800a7bc:	4642      	mov	r2, r8
 800a7be:	464b      	mov	r3, r9
 800a7c0:	f7f5 ff1a 	bl	80005f8 <__aeabi_dmul>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	4639      	mov	r1, r7
 800a7cc:	f7f5 fd5c 	bl	8000288 <__aeabi_dsub>
 800a7d0:	9e01      	ldr	r6, [sp, #4]
 800a7d2:	9f04      	ldr	r7, [sp, #16]
 800a7d4:	3630      	adds	r6, #48	; 0x30
 800a7d6:	f805 6b01 	strb.w	r6, [r5], #1
 800a7da:	9e00      	ldr	r6, [sp, #0]
 800a7dc:	1bae      	subs	r6, r5, r6
 800a7de:	42b7      	cmp	r7, r6
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	d134      	bne.n	800a850 <_dtoa_r+0x708>
 800a7e6:	f7f5 fd51 	bl	800028c <__adddf3>
 800a7ea:	4642      	mov	r2, r8
 800a7ec:	464b      	mov	r3, r9
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	460f      	mov	r7, r1
 800a7f2:	f7f6 f991 	bl	8000b18 <__aeabi_dcmpgt>
 800a7f6:	b9c8      	cbnz	r0, 800a82c <_dtoa_r+0x6e4>
 800a7f8:	4642      	mov	r2, r8
 800a7fa:	464b      	mov	r3, r9
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	4639      	mov	r1, r7
 800a800:	f7f6 f962 	bl	8000ac8 <__aeabi_dcmpeq>
 800a804:	b110      	cbz	r0, 800a80c <_dtoa_r+0x6c4>
 800a806:	9b01      	ldr	r3, [sp, #4]
 800a808:	07db      	lsls	r3, r3, #31
 800a80a:	d40f      	bmi.n	800a82c <_dtoa_r+0x6e4>
 800a80c:	4651      	mov	r1, sl
 800a80e:	4620      	mov	r0, r4
 800a810:	f000 fb18 	bl	800ae44 <_Bfree>
 800a814:	2300      	movs	r3, #0
 800a816:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a818:	702b      	strb	r3, [r5, #0]
 800a81a:	f10b 0301 	add.w	r3, fp, #1
 800a81e:	6013      	str	r3, [r2, #0]
 800a820:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a822:	2b00      	cmp	r3, #0
 800a824:	f43f ace2 	beq.w	800a1ec <_dtoa_r+0xa4>
 800a828:	601d      	str	r5, [r3, #0]
 800a82a:	e4df      	b.n	800a1ec <_dtoa_r+0xa4>
 800a82c:	465f      	mov	r7, fp
 800a82e:	462b      	mov	r3, r5
 800a830:	461d      	mov	r5, r3
 800a832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a836:	2a39      	cmp	r2, #57	; 0x39
 800a838:	d106      	bne.n	800a848 <_dtoa_r+0x700>
 800a83a:	9a00      	ldr	r2, [sp, #0]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d1f7      	bne.n	800a830 <_dtoa_r+0x6e8>
 800a840:	9900      	ldr	r1, [sp, #0]
 800a842:	2230      	movs	r2, #48	; 0x30
 800a844:	3701      	adds	r7, #1
 800a846:	700a      	strb	r2, [r1, #0]
 800a848:	781a      	ldrb	r2, [r3, #0]
 800a84a:	3201      	adds	r2, #1
 800a84c:	701a      	strb	r2, [r3, #0]
 800a84e:	e790      	b.n	800a772 <_dtoa_r+0x62a>
 800a850:	4ba3      	ldr	r3, [pc, #652]	; (800aae0 <_dtoa_r+0x998>)
 800a852:	2200      	movs	r2, #0
 800a854:	f7f5 fed0 	bl	80005f8 <__aeabi_dmul>
 800a858:	2200      	movs	r2, #0
 800a85a:	2300      	movs	r3, #0
 800a85c:	4606      	mov	r6, r0
 800a85e:	460f      	mov	r7, r1
 800a860:	f7f6 f932 	bl	8000ac8 <__aeabi_dcmpeq>
 800a864:	2800      	cmp	r0, #0
 800a866:	d09e      	beq.n	800a7a6 <_dtoa_r+0x65e>
 800a868:	e7d0      	b.n	800a80c <_dtoa_r+0x6c4>
 800a86a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a86c:	2a00      	cmp	r2, #0
 800a86e:	f000 80ca 	beq.w	800aa06 <_dtoa_r+0x8be>
 800a872:	9a07      	ldr	r2, [sp, #28]
 800a874:	2a01      	cmp	r2, #1
 800a876:	f300 80ad 	bgt.w	800a9d4 <_dtoa_r+0x88c>
 800a87a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a87c:	2a00      	cmp	r2, #0
 800a87e:	f000 80a5 	beq.w	800a9cc <_dtoa_r+0x884>
 800a882:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a886:	9e08      	ldr	r6, [sp, #32]
 800a888:	9d05      	ldr	r5, [sp, #20]
 800a88a:	9a05      	ldr	r2, [sp, #20]
 800a88c:	441a      	add	r2, r3
 800a88e:	9205      	str	r2, [sp, #20]
 800a890:	9a06      	ldr	r2, [sp, #24]
 800a892:	2101      	movs	r1, #1
 800a894:	441a      	add	r2, r3
 800a896:	4620      	mov	r0, r4
 800a898:	9206      	str	r2, [sp, #24]
 800a89a:	f000 fbd3 	bl	800b044 <__i2b>
 800a89e:	4607      	mov	r7, r0
 800a8a0:	b165      	cbz	r5, 800a8bc <_dtoa_r+0x774>
 800a8a2:	9b06      	ldr	r3, [sp, #24]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	dd09      	ble.n	800a8bc <_dtoa_r+0x774>
 800a8a8:	42ab      	cmp	r3, r5
 800a8aa:	9a05      	ldr	r2, [sp, #20]
 800a8ac:	bfa8      	it	ge
 800a8ae:	462b      	movge	r3, r5
 800a8b0:	1ad2      	subs	r2, r2, r3
 800a8b2:	9205      	str	r2, [sp, #20]
 800a8b4:	9a06      	ldr	r2, [sp, #24]
 800a8b6:	1aed      	subs	r5, r5, r3
 800a8b8:	1ad3      	subs	r3, r2, r3
 800a8ba:	9306      	str	r3, [sp, #24]
 800a8bc:	9b08      	ldr	r3, [sp, #32]
 800a8be:	b1f3      	cbz	r3, 800a8fe <_dtoa_r+0x7b6>
 800a8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f000 80a3 	beq.w	800aa0e <_dtoa_r+0x8c6>
 800a8c8:	2e00      	cmp	r6, #0
 800a8ca:	dd10      	ble.n	800a8ee <_dtoa_r+0x7a6>
 800a8cc:	4639      	mov	r1, r7
 800a8ce:	4632      	mov	r2, r6
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f000 fc77 	bl	800b1c4 <__pow5mult>
 800a8d6:	4652      	mov	r2, sl
 800a8d8:	4601      	mov	r1, r0
 800a8da:	4607      	mov	r7, r0
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 fbc7 	bl	800b070 <__multiply>
 800a8e2:	4651      	mov	r1, sl
 800a8e4:	4680      	mov	r8, r0
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f000 faac 	bl	800ae44 <_Bfree>
 800a8ec:	46c2      	mov	sl, r8
 800a8ee:	9b08      	ldr	r3, [sp, #32]
 800a8f0:	1b9a      	subs	r2, r3, r6
 800a8f2:	d004      	beq.n	800a8fe <_dtoa_r+0x7b6>
 800a8f4:	4651      	mov	r1, sl
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 fc64 	bl	800b1c4 <__pow5mult>
 800a8fc:	4682      	mov	sl, r0
 800a8fe:	2101      	movs	r1, #1
 800a900:	4620      	mov	r0, r4
 800a902:	f000 fb9f 	bl	800b044 <__i2b>
 800a906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a908:	2b00      	cmp	r3, #0
 800a90a:	4606      	mov	r6, r0
 800a90c:	f340 8081 	ble.w	800aa12 <_dtoa_r+0x8ca>
 800a910:	461a      	mov	r2, r3
 800a912:	4601      	mov	r1, r0
 800a914:	4620      	mov	r0, r4
 800a916:	f000 fc55 	bl	800b1c4 <__pow5mult>
 800a91a:	9b07      	ldr	r3, [sp, #28]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	4606      	mov	r6, r0
 800a920:	dd7a      	ble.n	800aa18 <_dtoa_r+0x8d0>
 800a922:	f04f 0800 	mov.w	r8, #0
 800a926:	6933      	ldr	r3, [r6, #16]
 800a928:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a92c:	6918      	ldr	r0, [r3, #16]
 800a92e:	f000 fb3b 	bl	800afa8 <__hi0bits>
 800a932:	f1c0 0020 	rsb	r0, r0, #32
 800a936:	9b06      	ldr	r3, [sp, #24]
 800a938:	4418      	add	r0, r3
 800a93a:	f010 001f 	ands.w	r0, r0, #31
 800a93e:	f000 8094 	beq.w	800aa6a <_dtoa_r+0x922>
 800a942:	f1c0 0320 	rsb	r3, r0, #32
 800a946:	2b04      	cmp	r3, #4
 800a948:	f340 8085 	ble.w	800aa56 <_dtoa_r+0x90e>
 800a94c:	9b05      	ldr	r3, [sp, #20]
 800a94e:	f1c0 001c 	rsb	r0, r0, #28
 800a952:	4403      	add	r3, r0
 800a954:	9305      	str	r3, [sp, #20]
 800a956:	9b06      	ldr	r3, [sp, #24]
 800a958:	4403      	add	r3, r0
 800a95a:	4405      	add	r5, r0
 800a95c:	9306      	str	r3, [sp, #24]
 800a95e:	9b05      	ldr	r3, [sp, #20]
 800a960:	2b00      	cmp	r3, #0
 800a962:	dd05      	ble.n	800a970 <_dtoa_r+0x828>
 800a964:	4651      	mov	r1, sl
 800a966:	461a      	mov	r2, r3
 800a968:	4620      	mov	r0, r4
 800a96a:	f000 fc85 	bl	800b278 <__lshift>
 800a96e:	4682      	mov	sl, r0
 800a970:	9b06      	ldr	r3, [sp, #24]
 800a972:	2b00      	cmp	r3, #0
 800a974:	dd05      	ble.n	800a982 <_dtoa_r+0x83a>
 800a976:	4631      	mov	r1, r6
 800a978:	461a      	mov	r2, r3
 800a97a:	4620      	mov	r0, r4
 800a97c:	f000 fc7c 	bl	800b278 <__lshift>
 800a980:	4606      	mov	r6, r0
 800a982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a984:	2b00      	cmp	r3, #0
 800a986:	d072      	beq.n	800aa6e <_dtoa_r+0x926>
 800a988:	4631      	mov	r1, r6
 800a98a:	4650      	mov	r0, sl
 800a98c:	f000 fce0 	bl	800b350 <__mcmp>
 800a990:	2800      	cmp	r0, #0
 800a992:	da6c      	bge.n	800aa6e <_dtoa_r+0x926>
 800a994:	2300      	movs	r3, #0
 800a996:	4651      	mov	r1, sl
 800a998:	220a      	movs	r2, #10
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 fa74 	bl	800ae88 <__multadd>
 800a9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a9a6:	4682      	mov	sl, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 81b0 	beq.w	800ad0e <_dtoa_r+0xbc6>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	220a      	movs	r2, #10
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f000 fa67 	bl	800ae88 <__multadd>
 800a9ba:	9b01      	ldr	r3, [sp, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	4607      	mov	r7, r0
 800a9c0:	f300 8096 	bgt.w	800aaf0 <_dtoa_r+0x9a8>
 800a9c4:	9b07      	ldr	r3, [sp, #28]
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	dc59      	bgt.n	800aa7e <_dtoa_r+0x936>
 800a9ca:	e091      	b.n	800aaf0 <_dtoa_r+0x9a8>
 800a9cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9d2:	e758      	b.n	800a886 <_dtoa_r+0x73e>
 800a9d4:	9b04      	ldr	r3, [sp, #16]
 800a9d6:	1e5e      	subs	r6, r3, #1
 800a9d8:	9b08      	ldr	r3, [sp, #32]
 800a9da:	42b3      	cmp	r3, r6
 800a9dc:	bfbf      	itttt	lt
 800a9de:	9b08      	ldrlt	r3, [sp, #32]
 800a9e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a9e2:	9608      	strlt	r6, [sp, #32]
 800a9e4:	1af3      	sublt	r3, r6, r3
 800a9e6:	bfb4      	ite	lt
 800a9e8:	18d2      	addlt	r2, r2, r3
 800a9ea:	1b9e      	subge	r6, r3, r6
 800a9ec:	9b04      	ldr	r3, [sp, #16]
 800a9ee:	bfbc      	itt	lt
 800a9f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a9f2:	2600      	movlt	r6, #0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	bfb7      	itett	lt
 800a9f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a9fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800aa00:	1a9d      	sublt	r5, r3, r2
 800aa02:	2300      	movlt	r3, #0
 800aa04:	e741      	b.n	800a88a <_dtoa_r+0x742>
 800aa06:	9e08      	ldr	r6, [sp, #32]
 800aa08:	9d05      	ldr	r5, [sp, #20]
 800aa0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa0c:	e748      	b.n	800a8a0 <_dtoa_r+0x758>
 800aa0e:	9a08      	ldr	r2, [sp, #32]
 800aa10:	e770      	b.n	800a8f4 <_dtoa_r+0x7ac>
 800aa12:	9b07      	ldr	r3, [sp, #28]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	dc19      	bgt.n	800aa4c <_dtoa_r+0x904>
 800aa18:	9b02      	ldr	r3, [sp, #8]
 800aa1a:	b9bb      	cbnz	r3, 800aa4c <_dtoa_r+0x904>
 800aa1c:	9b03      	ldr	r3, [sp, #12]
 800aa1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa22:	b99b      	cbnz	r3, 800aa4c <_dtoa_r+0x904>
 800aa24:	9b03      	ldr	r3, [sp, #12]
 800aa26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa2a:	0d1b      	lsrs	r3, r3, #20
 800aa2c:	051b      	lsls	r3, r3, #20
 800aa2e:	b183      	cbz	r3, 800aa52 <_dtoa_r+0x90a>
 800aa30:	9b05      	ldr	r3, [sp, #20]
 800aa32:	3301      	adds	r3, #1
 800aa34:	9305      	str	r3, [sp, #20]
 800aa36:	9b06      	ldr	r3, [sp, #24]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	9306      	str	r3, [sp, #24]
 800aa3c:	f04f 0801 	mov.w	r8, #1
 800aa40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f47f af6f 	bne.w	800a926 <_dtoa_r+0x7de>
 800aa48:	2001      	movs	r0, #1
 800aa4a:	e774      	b.n	800a936 <_dtoa_r+0x7ee>
 800aa4c:	f04f 0800 	mov.w	r8, #0
 800aa50:	e7f6      	b.n	800aa40 <_dtoa_r+0x8f8>
 800aa52:	4698      	mov	r8, r3
 800aa54:	e7f4      	b.n	800aa40 <_dtoa_r+0x8f8>
 800aa56:	d082      	beq.n	800a95e <_dtoa_r+0x816>
 800aa58:	9a05      	ldr	r2, [sp, #20]
 800aa5a:	331c      	adds	r3, #28
 800aa5c:	441a      	add	r2, r3
 800aa5e:	9205      	str	r2, [sp, #20]
 800aa60:	9a06      	ldr	r2, [sp, #24]
 800aa62:	441a      	add	r2, r3
 800aa64:	441d      	add	r5, r3
 800aa66:	9206      	str	r2, [sp, #24]
 800aa68:	e779      	b.n	800a95e <_dtoa_r+0x816>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	e7f4      	b.n	800aa58 <_dtoa_r+0x910>
 800aa6e:	9b04      	ldr	r3, [sp, #16]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	dc37      	bgt.n	800aae4 <_dtoa_r+0x99c>
 800aa74:	9b07      	ldr	r3, [sp, #28]
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	dd34      	ble.n	800aae4 <_dtoa_r+0x99c>
 800aa7a:	9b04      	ldr	r3, [sp, #16]
 800aa7c:	9301      	str	r3, [sp, #4]
 800aa7e:	9b01      	ldr	r3, [sp, #4]
 800aa80:	b963      	cbnz	r3, 800aa9c <_dtoa_r+0x954>
 800aa82:	4631      	mov	r1, r6
 800aa84:	2205      	movs	r2, #5
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 f9fe 	bl	800ae88 <__multadd>
 800aa8c:	4601      	mov	r1, r0
 800aa8e:	4606      	mov	r6, r0
 800aa90:	4650      	mov	r0, sl
 800aa92:	f000 fc5d 	bl	800b350 <__mcmp>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	f73f adbb 	bgt.w	800a612 <_dtoa_r+0x4ca>
 800aa9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa9e:	9d00      	ldr	r5, [sp, #0]
 800aaa0:	ea6f 0b03 	mvn.w	fp, r3
 800aaa4:	f04f 0800 	mov.w	r8, #0
 800aaa8:	4631      	mov	r1, r6
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f000 f9ca 	bl	800ae44 <_Bfree>
 800aab0:	2f00      	cmp	r7, #0
 800aab2:	f43f aeab 	beq.w	800a80c <_dtoa_r+0x6c4>
 800aab6:	f1b8 0f00 	cmp.w	r8, #0
 800aaba:	d005      	beq.n	800aac8 <_dtoa_r+0x980>
 800aabc:	45b8      	cmp	r8, r7
 800aabe:	d003      	beq.n	800aac8 <_dtoa_r+0x980>
 800aac0:	4641      	mov	r1, r8
 800aac2:	4620      	mov	r0, r4
 800aac4:	f000 f9be 	bl	800ae44 <_Bfree>
 800aac8:	4639      	mov	r1, r7
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 f9ba 	bl	800ae44 <_Bfree>
 800aad0:	e69c      	b.n	800a80c <_dtoa_r+0x6c4>
 800aad2:	2600      	movs	r6, #0
 800aad4:	4637      	mov	r7, r6
 800aad6:	e7e1      	b.n	800aa9c <_dtoa_r+0x954>
 800aad8:	46bb      	mov	fp, r7
 800aada:	4637      	mov	r7, r6
 800aadc:	e599      	b.n	800a612 <_dtoa_r+0x4ca>
 800aade:	bf00      	nop
 800aae0:	40240000 	.word	0x40240000
 800aae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f000 80c8 	beq.w	800ac7c <_dtoa_r+0xb34>
 800aaec:	9b04      	ldr	r3, [sp, #16]
 800aaee:	9301      	str	r3, [sp, #4]
 800aaf0:	2d00      	cmp	r5, #0
 800aaf2:	dd05      	ble.n	800ab00 <_dtoa_r+0x9b8>
 800aaf4:	4639      	mov	r1, r7
 800aaf6:	462a      	mov	r2, r5
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f000 fbbd 	bl	800b278 <__lshift>
 800aafe:	4607      	mov	r7, r0
 800ab00:	f1b8 0f00 	cmp.w	r8, #0
 800ab04:	d05b      	beq.n	800abbe <_dtoa_r+0xa76>
 800ab06:	6879      	ldr	r1, [r7, #4]
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f000 f95b 	bl	800adc4 <_Balloc>
 800ab0e:	4605      	mov	r5, r0
 800ab10:	b928      	cbnz	r0, 800ab1e <_dtoa_r+0x9d6>
 800ab12:	4b83      	ldr	r3, [pc, #524]	; (800ad20 <_dtoa_r+0xbd8>)
 800ab14:	4602      	mov	r2, r0
 800ab16:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ab1a:	f7ff bb2e 	b.w	800a17a <_dtoa_r+0x32>
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	3202      	adds	r2, #2
 800ab22:	0092      	lsls	r2, r2, #2
 800ab24:	f107 010c 	add.w	r1, r7, #12
 800ab28:	300c      	adds	r0, #12
 800ab2a:	f7ff fa6e 	bl	800a00a <memcpy>
 800ab2e:	2201      	movs	r2, #1
 800ab30:	4629      	mov	r1, r5
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 fba0 	bl	800b278 <__lshift>
 800ab38:	9b00      	ldr	r3, [sp, #0]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	9304      	str	r3, [sp, #16]
 800ab3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab42:	4413      	add	r3, r2
 800ab44:	9308      	str	r3, [sp, #32]
 800ab46:	9b02      	ldr	r3, [sp, #8]
 800ab48:	f003 0301 	and.w	r3, r3, #1
 800ab4c:	46b8      	mov	r8, r7
 800ab4e:	9306      	str	r3, [sp, #24]
 800ab50:	4607      	mov	r7, r0
 800ab52:	9b04      	ldr	r3, [sp, #16]
 800ab54:	4631      	mov	r1, r6
 800ab56:	3b01      	subs	r3, #1
 800ab58:	4650      	mov	r0, sl
 800ab5a:	9301      	str	r3, [sp, #4]
 800ab5c:	f7ff fa6a 	bl	800a034 <quorem>
 800ab60:	4641      	mov	r1, r8
 800ab62:	9002      	str	r0, [sp, #8]
 800ab64:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ab68:	4650      	mov	r0, sl
 800ab6a:	f000 fbf1 	bl	800b350 <__mcmp>
 800ab6e:	463a      	mov	r2, r7
 800ab70:	9005      	str	r0, [sp, #20]
 800ab72:	4631      	mov	r1, r6
 800ab74:	4620      	mov	r0, r4
 800ab76:	f000 fc07 	bl	800b388 <__mdiff>
 800ab7a:	68c2      	ldr	r2, [r0, #12]
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	bb02      	cbnz	r2, 800abc2 <_dtoa_r+0xa7a>
 800ab80:	4601      	mov	r1, r0
 800ab82:	4650      	mov	r0, sl
 800ab84:	f000 fbe4 	bl	800b350 <__mcmp>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	4629      	mov	r1, r5
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	9209      	str	r2, [sp, #36]	; 0x24
 800ab90:	f000 f958 	bl	800ae44 <_Bfree>
 800ab94:	9b07      	ldr	r3, [sp, #28]
 800ab96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab98:	9d04      	ldr	r5, [sp, #16]
 800ab9a:	ea43 0102 	orr.w	r1, r3, r2
 800ab9e:	9b06      	ldr	r3, [sp, #24]
 800aba0:	4319      	orrs	r1, r3
 800aba2:	d110      	bne.n	800abc6 <_dtoa_r+0xa7e>
 800aba4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aba8:	d029      	beq.n	800abfe <_dtoa_r+0xab6>
 800abaa:	9b05      	ldr	r3, [sp, #20]
 800abac:	2b00      	cmp	r3, #0
 800abae:	dd02      	ble.n	800abb6 <_dtoa_r+0xa6e>
 800abb0:	9b02      	ldr	r3, [sp, #8]
 800abb2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800abb6:	9b01      	ldr	r3, [sp, #4]
 800abb8:	f883 9000 	strb.w	r9, [r3]
 800abbc:	e774      	b.n	800aaa8 <_dtoa_r+0x960>
 800abbe:	4638      	mov	r0, r7
 800abc0:	e7ba      	b.n	800ab38 <_dtoa_r+0x9f0>
 800abc2:	2201      	movs	r2, #1
 800abc4:	e7e1      	b.n	800ab8a <_dtoa_r+0xa42>
 800abc6:	9b05      	ldr	r3, [sp, #20]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	db04      	blt.n	800abd6 <_dtoa_r+0xa8e>
 800abcc:	9907      	ldr	r1, [sp, #28]
 800abce:	430b      	orrs	r3, r1
 800abd0:	9906      	ldr	r1, [sp, #24]
 800abd2:	430b      	orrs	r3, r1
 800abd4:	d120      	bne.n	800ac18 <_dtoa_r+0xad0>
 800abd6:	2a00      	cmp	r2, #0
 800abd8:	dded      	ble.n	800abb6 <_dtoa_r+0xa6e>
 800abda:	4651      	mov	r1, sl
 800abdc:	2201      	movs	r2, #1
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 fb4a 	bl	800b278 <__lshift>
 800abe4:	4631      	mov	r1, r6
 800abe6:	4682      	mov	sl, r0
 800abe8:	f000 fbb2 	bl	800b350 <__mcmp>
 800abec:	2800      	cmp	r0, #0
 800abee:	dc03      	bgt.n	800abf8 <_dtoa_r+0xab0>
 800abf0:	d1e1      	bne.n	800abb6 <_dtoa_r+0xa6e>
 800abf2:	f019 0f01 	tst.w	r9, #1
 800abf6:	d0de      	beq.n	800abb6 <_dtoa_r+0xa6e>
 800abf8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800abfc:	d1d8      	bne.n	800abb0 <_dtoa_r+0xa68>
 800abfe:	9a01      	ldr	r2, [sp, #4]
 800ac00:	2339      	movs	r3, #57	; 0x39
 800ac02:	7013      	strb	r3, [r2, #0]
 800ac04:	462b      	mov	r3, r5
 800ac06:	461d      	mov	r5, r3
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac0e:	2a39      	cmp	r2, #57	; 0x39
 800ac10:	d06c      	beq.n	800acec <_dtoa_r+0xba4>
 800ac12:	3201      	adds	r2, #1
 800ac14:	701a      	strb	r2, [r3, #0]
 800ac16:	e747      	b.n	800aaa8 <_dtoa_r+0x960>
 800ac18:	2a00      	cmp	r2, #0
 800ac1a:	dd07      	ble.n	800ac2c <_dtoa_r+0xae4>
 800ac1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac20:	d0ed      	beq.n	800abfe <_dtoa_r+0xab6>
 800ac22:	9a01      	ldr	r2, [sp, #4]
 800ac24:	f109 0301 	add.w	r3, r9, #1
 800ac28:	7013      	strb	r3, [r2, #0]
 800ac2a:	e73d      	b.n	800aaa8 <_dtoa_r+0x960>
 800ac2c:	9b04      	ldr	r3, [sp, #16]
 800ac2e:	9a08      	ldr	r2, [sp, #32]
 800ac30:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d043      	beq.n	800acc0 <_dtoa_r+0xb78>
 800ac38:	4651      	mov	r1, sl
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	220a      	movs	r2, #10
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f000 f922 	bl	800ae88 <__multadd>
 800ac44:	45b8      	cmp	r8, r7
 800ac46:	4682      	mov	sl, r0
 800ac48:	f04f 0300 	mov.w	r3, #0
 800ac4c:	f04f 020a 	mov.w	r2, #10
 800ac50:	4641      	mov	r1, r8
 800ac52:	4620      	mov	r0, r4
 800ac54:	d107      	bne.n	800ac66 <_dtoa_r+0xb1e>
 800ac56:	f000 f917 	bl	800ae88 <__multadd>
 800ac5a:	4680      	mov	r8, r0
 800ac5c:	4607      	mov	r7, r0
 800ac5e:	9b04      	ldr	r3, [sp, #16]
 800ac60:	3301      	adds	r3, #1
 800ac62:	9304      	str	r3, [sp, #16]
 800ac64:	e775      	b.n	800ab52 <_dtoa_r+0xa0a>
 800ac66:	f000 f90f 	bl	800ae88 <__multadd>
 800ac6a:	4639      	mov	r1, r7
 800ac6c:	4680      	mov	r8, r0
 800ac6e:	2300      	movs	r3, #0
 800ac70:	220a      	movs	r2, #10
 800ac72:	4620      	mov	r0, r4
 800ac74:	f000 f908 	bl	800ae88 <__multadd>
 800ac78:	4607      	mov	r7, r0
 800ac7a:	e7f0      	b.n	800ac5e <_dtoa_r+0xb16>
 800ac7c:	9b04      	ldr	r3, [sp, #16]
 800ac7e:	9301      	str	r3, [sp, #4]
 800ac80:	9d00      	ldr	r5, [sp, #0]
 800ac82:	4631      	mov	r1, r6
 800ac84:	4650      	mov	r0, sl
 800ac86:	f7ff f9d5 	bl	800a034 <quorem>
 800ac8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ac8e:	9b00      	ldr	r3, [sp, #0]
 800ac90:	f805 9b01 	strb.w	r9, [r5], #1
 800ac94:	1aea      	subs	r2, r5, r3
 800ac96:	9b01      	ldr	r3, [sp, #4]
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	dd07      	ble.n	800acac <_dtoa_r+0xb64>
 800ac9c:	4651      	mov	r1, sl
 800ac9e:	2300      	movs	r3, #0
 800aca0:	220a      	movs	r2, #10
 800aca2:	4620      	mov	r0, r4
 800aca4:	f000 f8f0 	bl	800ae88 <__multadd>
 800aca8:	4682      	mov	sl, r0
 800acaa:	e7ea      	b.n	800ac82 <_dtoa_r+0xb3a>
 800acac:	9b01      	ldr	r3, [sp, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	bfc8      	it	gt
 800acb2:	461d      	movgt	r5, r3
 800acb4:	9b00      	ldr	r3, [sp, #0]
 800acb6:	bfd8      	it	le
 800acb8:	2501      	movle	r5, #1
 800acba:	441d      	add	r5, r3
 800acbc:	f04f 0800 	mov.w	r8, #0
 800acc0:	4651      	mov	r1, sl
 800acc2:	2201      	movs	r2, #1
 800acc4:	4620      	mov	r0, r4
 800acc6:	f000 fad7 	bl	800b278 <__lshift>
 800acca:	4631      	mov	r1, r6
 800accc:	4682      	mov	sl, r0
 800acce:	f000 fb3f 	bl	800b350 <__mcmp>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	dc96      	bgt.n	800ac04 <_dtoa_r+0xabc>
 800acd6:	d102      	bne.n	800acde <_dtoa_r+0xb96>
 800acd8:	f019 0f01 	tst.w	r9, #1
 800acdc:	d192      	bne.n	800ac04 <_dtoa_r+0xabc>
 800acde:	462b      	mov	r3, r5
 800ace0:	461d      	mov	r5, r3
 800ace2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ace6:	2a30      	cmp	r2, #48	; 0x30
 800ace8:	d0fa      	beq.n	800ace0 <_dtoa_r+0xb98>
 800acea:	e6dd      	b.n	800aaa8 <_dtoa_r+0x960>
 800acec:	9a00      	ldr	r2, [sp, #0]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d189      	bne.n	800ac06 <_dtoa_r+0xabe>
 800acf2:	f10b 0b01 	add.w	fp, fp, #1
 800acf6:	2331      	movs	r3, #49	; 0x31
 800acf8:	e796      	b.n	800ac28 <_dtoa_r+0xae0>
 800acfa:	4b0a      	ldr	r3, [pc, #40]	; (800ad24 <_dtoa_r+0xbdc>)
 800acfc:	f7ff ba99 	b.w	800a232 <_dtoa_r+0xea>
 800ad00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f47f aa6d 	bne.w	800a1e2 <_dtoa_r+0x9a>
 800ad08:	4b07      	ldr	r3, [pc, #28]	; (800ad28 <_dtoa_r+0xbe0>)
 800ad0a:	f7ff ba92 	b.w	800a232 <_dtoa_r+0xea>
 800ad0e:	9b01      	ldr	r3, [sp, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	dcb5      	bgt.n	800ac80 <_dtoa_r+0xb38>
 800ad14:	9b07      	ldr	r3, [sp, #28]
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	f73f aeb1 	bgt.w	800aa7e <_dtoa_r+0x936>
 800ad1c:	e7b0      	b.n	800ac80 <_dtoa_r+0xb38>
 800ad1e:	bf00      	nop
 800ad20:	0800d819 	.word	0x0800d819
 800ad24:	0800d774 	.word	0x0800d774
 800ad28:	0800d79d 	.word	0x0800d79d

0800ad2c <_free_r>:
 800ad2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad2e:	2900      	cmp	r1, #0
 800ad30:	d044      	beq.n	800adbc <_free_r+0x90>
 800ad32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad36:	9001      	str	r0, [sp, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad3e:	bfb8      	it	lt
 800ad40:	18e4      	addlt	r4, r4, r3
 800ad42:	f7fd ffd3 	bl	8008cec <__malloc_lock>
 800ad46:	4a1e      	ldr	r2, [pc, #120]	; (800adc0 <_free_r+0x94>)
 800ad48:	9801      	ldr	r0, [sp, #4]
 800ad4a:	6813      	ldr	r3, [r2, #0]
 800ad4c:	b933      	cbnz	r3, 800ad5c <_free_r+0x30>
 800ad4e:	6063      	str	r3, [r4, #4]
 800ad50:	6014      	str	r4, [r2, #0]
 800ad52:	b003      	add	sp, #12
 800ad54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad58:	f7fd bfce 	b.w	8008cf8 <__malloc_unlock>
 800ad5c:	42a3      	cmp	r3, r4
 800ad5e:	d908      	bls.n	800ad72 <_free_r+0x46>
 800ad60:	6825      	ldr	r5, [r4, #0]
 800ad62:	1961      	adds	r1, r4, r5
 800ad64:	428b      	cmp	r3, r1
 800ad66:	bf01      	itttt	eq
 800ad68:	6819      	ldreq	r1, [r3, #0]
 800ad6a:	685b      	ldreq	r3, [r3, #4]
 800ad6c:	1949      	addeq	r1, r1, r5
 800ad6e:	6021      	streq	r1, [r4, #0]
 800ad70:	e7ed      	b.n	800ad4e <_free_r+0x22>
 800ad72:	461a      	mov	r2, r3
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	b10b      	cbz	r3, 800ad7c <_free_r+0x50>
 800ad78:	42a3      	cmp	r3, r4
 800ad7a:	d9fa      	bls.n	800ad72 <_free_r+0x46>
 800ad7c:	6811      	ldr	r1, [r2, #0]
 800ad7e:	1855      	adds	r5, r2, r1
 800ad80:	42a5      	cmp	r5, r4
 800ad82:	d10b      	bne.n	800ad9c <_free_r+0x70>
 800ad84:	6824      	ldr	r4, [r4, #0]
 800ad86:	4421      	add	r1, r4
 800ad88:	1854      	adds	r4, r2, r1
 800ad8a:	42a3      	cmp	r3, r4
 800ad8c:	6011      	str	r1, [r2, #0]
 800ad8e:	d1e0      	bne.n	800ad52 <_free_r+0x26>
 800ad90:	681c      	ldr	r4, [r3, #0]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	6053      	str	r3, [r2, #4]
 800ad96:	440c      	add	r4, r1
 800ad98:	6014      	str	r4, [r2, #0]
 800ad9a:	e7da      	b.n	800ad52 <_free_r+0x26>
 800ad9c:	d902      	bls.n	800ada4 <_free_r+0x78>
 800ad9e:	230c      	movs	r3, #12
 800ada0:	6003      	str	r3, [r0, #0]
 800ada2:	e7d6      	b.n	800ad52 <_free_r+0x26>
 800ada4:	6825      	ldr	r5, [r4, #0]
 800ada6:	1961      	adds	r1, r4, r5
 800ada8:	428b      	cmp	r3, r1
 800adaa:	bf04      	itt	eq
 800adac:	6819      	ldreq	r1, [r3, #0]
 800adae:	685b      	ldreq	r3, [r3, #4]
 800adb0:	6063      	str	r3, [r4, #4]
 800adb2:	bf04      	itt	eq
 800adb4:	1949      	addeq	r1, r1, r5
 800adb6:	6021      	streq	r1, [r4, #0]
 800adb8:	6054      	str	r4, [r2, #4]
 800adba:	e7ca      	b.n	800ad52 <_free_r+0x26>
 800adbc:	b003      	add	sp, #12
 800adbe:	bd30      	pop	{r4, r5, pc}
 800adc0:	20001ea4 	.word	0x20001ea4

0800adc4 <_Balloc>:
 800adc4:	b570      	push	{r4, r5, r6, lr}
 800adc6:	69c6      	ldr	r6, [r0, #28]
 800adc8:	4604      	mov	r4, r0
 800adca:	460d      	mov	r5, r1
 800adcc:	b976      	cbnz	r6, 800adec <_Balloc+0x28>
 800adce:	2010      	movs	r0, #16
 800add0:	f7fd fee4 	bl	8008b9c <malloc>
 800add4:	4602      	mov	r2, r0
 800add6:	61e0      	str	r0, [r4, #28]
 800add8:	b920      	cbnz	r0, 800ade4 <_Balloc+0x20>
 800adda:	4b18      	ldr	r3, [pc, #96]	; (800ae3c <_Balloc+0x78>)
 800addc:	4818      	ldr	r0, [pc, #96]	; (800ae40 <_Balloc+0x7c>)
 800adde:	216b      	movs	r1, #107	; 0x6b
 800ade0:	f001 ff36 	bl	800cc50 <__assert_func>
 800ade4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ade8:	6006      	str	r6, [r0, #0]
 800adea:	60c6      	str	r6, [r0, #12]
 800adec:	69e6      	ldr	r6, [r4, #28]
 800adee:	68f3      	ldr	r3, [r6, #12]
 800adf0:	b183      	cbz	r3, 800ae14 <_Balloc+0x50>
 800adf2:	69e3      	ldr	r3, [r4, #28]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adfa:	b9b8      	cbnz	r0, 800ae2c <_Balloc+0x68>
 800adfc:	2101      	movs	r1, #1
 800adfe:	fa01 f605 	lsl.w	r6, r1, r5
 800ae02:	1d72      	adds	r2, r6, #5
 800ae04:	0092      	lsls	r2, r2, #2
 800ae06:	4620      	mov	r0, r4
 800ae08:	f001 ff40 	bl	800cc8c <_calloc_r>
 800ae0c:	b160      	cbz	r0, 800ae28 <_Balloc+0x64>
 800ae0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae12:	e00e      	b.n	800ae32 <_Balloc+0x6e>
 800ae14:	2221      	movs	r2, #33	; 0x21
 800ae16:	2104      	movs	r1, #4
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f001 ff37 	bl	800cc8c <_calloc_r>
 800ae1e:	69e3      	ldr	r3, [r4, #28]
 800ae20:	60f0      	str	r0, [r6, #12]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1e4      	bne.n	800adf2 <_Balloc+0x2e>
 800ae28:	2000      	movs	r0, #0
 800ae2a:	bd70      	pop	{r4, r5, r6, pc}
 800ae2c:	6802      	ldr	r2, [r0, #0]
 800ae2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae32:	2300      	movs	r3, #0
 800ae34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae38:	e7f7      	b.n	800ae2a <_Balloc+0x66>
 800ae3a:	bf00      	nop
 800ae3c:	0800d7aa 	.word	0x0800d7aa
 800ae40:	0800d82a 	.word	0x0800d82a

0800ae44 <_Bfree>:
 800ae44:	b570      	push	{r4, r5, r6, lr}
 800ae46:	69c6      	ldr	r6, [r0, #28]
 800ae48:	4605      	mov	r5, r0
 800ae4a:	460c      	mov	r4, r1
 800ae4c:	b976      	cbnz	r6, 800ae6c <_Bfree+0x28>
 800ae4e:	2010      	movs	r0, #16
 800ae50:	f7fd fea4 	bl	8008b9c <malloc>
 800ae54:	4602      	mov	r2, r0
 800ae56:	61e8      	str	r0, [r5, #28]
 800ae58:	b920      	cbnz	r0, 800ae64 <_Bfree+0x20>
 800ae5a:	4b09      	ldr	r3, [pc, #36]	; (800ae80 <_Bfree+0x3c>)
 800ae5c:	4809      	ldr	r0, [pc, #36]	; (800ae84 <_Bfree+0x40>)
 800ae5e:	218f      	movs	r1, #143	; 0x8f
 800ae60:	f001 fef6 	bl	800cc50 <__assert_func>
 800ae64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae68:	6006      	str	r6, [r0, #0]
 800ae6a:	60c6      	str	r6, [r0, #12]
 800ae6c:	b13c      	cbz	r4, 800ae7e <_Bfree+0x3a>
 800ae6e:	69eb      	ldr	r3, [r5, #28]
 800ae70:	6862      	ldr	r2, [r4, #4]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae78:	6021      	str	r1, [r4, #0]
 800ae7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}
 800ae80:	0800d7aa 	.word	0x0800d7aa
 800ae84:	0800d82a 	.word	0x0800d82a

0800ae88 <__multadd>:
 800ae88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8c:	690d      	ldr	r5, [r1, #16]
 800ae8e:	4607      	mov	r7, r0
 800ae90:	460c      	mov	r4, r1
 800ae92:	461e      	mov	r6, r3
 800ae94:	f101 0c14 	add.w	ip, r1, #20
 800ae98:	2000      	movs	r0, #0
 800ae9a:	f8dc 3000 	ldr.w	r3, [ip]
 800ae9e:	b299      	uxth	r1, r3
 800aea0:	fb02 6101 	mla	r1, r2, r1, r6
 800aea4:	0c1e      	lsrs	r6, r3, #16
 800aea6:	0c0b      	lsrs	r3, r1, #16
 800aea8:	fb02 3306 	mla	r3, r2, r6, r3
 800aeac:	b289      	uxth	r1, r1
 800aeae:	3001      	adds	r0, #1
 800aeb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aeb4:	4285      	cmp	r5, r0
 800aeb6:	f84c 1b04 	str.w	r1, [ip], #4
 800aeba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aebe:	dcec      	bgt.n	800ae9a <__multadd+0x12>
 800aec0:	b30e      	cbz	r6, 800af06 <__multadd+0x7e>
 800aec2:	68a3      	ldr	r3, [r4, #8]
 800aec4:	42ab      	cmp	r3, r5
 800aec6:	dc19      	bgt.n	800aefc <__multadd+0x74>
 800aec8:	6861      	ldr	r1, [r4, #4]
 800aeca:	4638      	mov	r0, r7
 800aecc:	3101      	adds	r1, #1
 800aece:	f7ff ff79 	bl	800adc4 <_Balloc>
 800aed2:	4680      	mov	r8, r0
 800aed4:	b928      	cbnz	r0, 800aee2 <__multadd+0x5a>
 800aed6:	4602      	mov	r2, r0
 800aed8:	4b0c      	ldr	r3, [pc, #48]	; (800af0c <__multadd+0x84>)
 800aeda:	480d      	ldr	r0, [pc, #52]	; (800af10 <__multadd+0x88>)
 800aedc:	21ba      	movs	r1, #186	; 0xba
 800aede:	f001 feb7 	bl	800cc50 <__assert_func>
 800aee2:	6922      	ldr	r2, [r4, #16]
 800aee4:	3202      	adds	r2, #2
 800aee6:	f104 010c 	add.w	r1, r4, #12
 800aeea:	0092      	lsls	r2, r2, #2
 800aeec:	300c      	adds	r0, #12
 800aeee:	f7ff f88c 	bl	800a00a <memcpy>
 800aef2:	4621      	mov	r1, r4
 800aef4:	4638      	mov	r0, r7
 800aef6:	f7ff ffa5 	bl	800ae44 <_Bfree>
 800aefa:	4644      	mov	r4, r8
 800aefc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af00:	3501      	adds	r5, #1
 800af02:	615e      	str	r6, [r3, #20]
 800af04:	6125      	str	r5, [r4, #16]
 800af06:	4620      	mov	r0, r4
 800af08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af0c:	0800d819 	.word	0x0800d819
 800af10:	0800d82a 	.word	0x0800d82a

0800af14 <__s2b>:
 800af14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af18:	460c      	mov	r4, r1
 800af1a:	4615      	mov	r5, r2
 800af1c:	461f      	mov	r7, r3
 800af1e:	2209      	movs	r2, #9
 800af20:	3308      	adds	r3, #8
 800af22:	4606      	mov	r6, r0
 800af24:	fb93 f3f2 	sdiv	r3, r3, r2
 800af28:	2100      	movs	r1, #0
 800af2a:	2201      	movs	r2, #1
 800af2c:	429a      	cmp	r2, r3
 800af2e:	db09      	blt.n	800af44 <__s2b+0x30>
 800af30:	4630      	mov	r0, r6
 800af32:	f7ff ff47 	bl	800adc4 <_Balloc>
 800af36:	b940      	cbnz	r0, 800af4a <__s2b+0x36>
 800af38:	4602      	mov	r2, r0
 800af3a:	4b19      	ldr	r3, [pc, #100]	; (800afa0 <__s2b+0x8c>)
 800af3c:	4819      	ldr	r0, [pc, #100]	; (800afa4 <__s2b+0x90>)
 800af3e:	21d3      	movs	r1, #211	; 0xd3
 800af40:	f001 fe86 	bl	800cc50 <__assert_func>
 800af44:	0052      	lsls	r2, r2, #1
 800af46:	3101      	adds	r1, #1
 800af48:	e7f0      	b.n	800af2c <__s2b+0x18>
 800af4a:	9b08      	ldr	r3, [sp, #32]
 800af4c:	6143      	str	r3, [r0, #20]
 800af4e:	2d09      	cmp	r5, #9
 800af50:	f04f 0301 	mov.w	r3, #1
 800af54:	6103      	str	r3, [r0, #16]
 800af56:	dd16      	ble.n	800af86 <__s2b+0x72>
 800af58:	f104 0909 	add.w	r9, r4, #9
 800af5c:	46c8      	mov	r8, r9
 800af5e:	442c      	add	r4, r5
 800af60:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af64:	4601      	mov	r1, r0
 800af66:	3b30      	subs	r3, #48	; 0x30
 800af68:	220a      	movs	r2, #10
 800af6a:	4630      	mov	r0, r6
 800af6c:	f7ff ff8c 	bl	800ae88 <__multadd>
 800af70:	45a0      	cmp	r8, r4
 800af72:	d1f5      	bne.n	800af60 <__s2b+0x4c>
 800af74:	f1a5 0408 	sub.w	r4, r5, #8
 800af78:	444c      	add	r4, r9
 800af7a:	1b2d      	subs	r5, r5, r4
 800af7c:	1963      	adds	r3, r4, r5
 800af7e:	42bb      	cmp	r3, r7
 800af80:	db04      	blt.n	800af8c <__s2b+0x78>
 800af82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af86:	340a      	adds	r4, #10
 800af88:	2509      	movs	r5, #9
 800af8a:	e7f6      	b.n	800af7a <__s2b+0x66>
 800af8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af90:	4601      	mov	r1, r0
 800af92:	3b30      	subs	r3, #48	; 0x30
 800af94:	220a      	movs	r2, #10
 800af96:	4630      	mov	r0, r6
 800af98:	f7ff ff76 	bl	800ae88 <__multadd>
 800af9c:	e7ee      	b.n	800af7c <__s2b+0x68>
 800af9e:	bf00      	nop
 800afa0:	0800d819 	.word	0x0800d819
 800afa4:	0800d82a 	.word	0x0800d82a

0800afa8 <__hi0bits>:
 800afa8:	0c03      	lsrs	r3, r0, #16
 800afaa:	041b      	lsls	r3, r3, #16
 800afac:	b9d3      	cbnz	r3, 800afe4 <__hi0bits+0x3c>
 800afae:	0400      	lsls	r0, r0, #16
 800afb0:	2310      	movs	r3, #16
 800afb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800afb6:	bf04      	itt	eq
 800afb8:	0200      	lsleq	r0, r0, #8
 800afba:	3308      	addeq	r3, #8
 800afbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800afc0:	bf04      	itt	eq
 800afc2:	0100      	lsleq	r0, r0, #4
 800afc4:	3304      	addeq	r3, #4
 800afc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800afca:	bf04      	itt	eq
 800afcc:	0080      	lsleq	r0, r0, #2
 800afce:	3302      	addeq	r3, #2
 800afd0:	2800      	cmp	r0, #0
 800afd2:	db05      	blt.n	800afe0 <__hi0bits+0x38>
 800afd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800afd8:	f103 0301 	add.w	r3, r3, #1
 800afdc:	bf08      	it	eq
 800afde:	2320      	moveq	r3, #32
 800afe0:	4618      	mov	r0, r3
 800afe2:	4770      	bx	lr
 800afe4:	2300      	movs	r3, #0
 800afe6:	e7e4      	b.n	800afb2 <__hi0bits+0xa>

0800afe8 <__lo0bits>:
 800afe8:	6803      	ldr	r3, [r0, #0]
 800afea:	f013 0207 	ands.w	r2, r3, #7
 800afee:	d00c      	beq.n	800b00a <__lo0bits+0x22>
 800aff0:	07d9      	lsls	r1, r3, #31
 800aff2:	d422      	bmi.n	800b03a <__lo0bits+0x52>
 800aff4:	079a      	lsls	r2, r3, #30
 800aff6:	bf49      	itett	mi
 800aff8:	085b      	lsrmi	r3, r3, #1
 800affa:	089b      	lsrpl	r3, r3, #2
 800affc:	6003      	strmi	r3, [r0, #0]
 800affe:	2201      	movmi	r2, #1
 800b000:	bf5c      	itt	pl
 800b002:	6003      	strpl	r3, [r0, #0]
 800b004:	2202      	movpl	r2, #2
 800b006:	4610      	mov	r0, r2
 800b008:	4770      	bx	lr
 800b00a:	b299      	uxth	r1, r3
 800b00c:	b909      	cbnz	r1, 800b012 <__lo0bits+0x2a>
 800b00e:	0c1b      	lsrs	r3, r3, #16
 800b010:	2210      	movs	r2, #16
 800b012:	b2d9      	uxtb	r1, r3
 800b014:	b909      	cbnz	r1, 800b01a <__lo0bits+0x32>
 800b016:	3208      	adds	r2, #8
 800b018:	0a1b      	lsrs	r3, r3, #8
 800b01a:	0719      	lsls	r1, r3, #28
 800b01c:	bf04      	itt	eq
 800b01e:	091b      	lsreq	r3, r3, #4
 800b020:	3204      	addeq	r2, #4
 800b022:	0799      	lsls	r1, r3, #30
 800b024:	bf04      	itt	eq
 800b026:	089b      	lsreq	r3, r3, #2
 800b028:	3202      	addeq	r2, #2
 800b02a:	07d9      	lsls	r1, r3, #31
 800b02c:	d403      	bmi.n	800b036 <__lo0bits+0x4e>
 800b02e:	085b      	lsrs	r3, r3, #1
 800b030:	f102 0201 	add.w	r2, r2, #1
 800b034:	d003      	beq.n	800b03e <__lo0bits+0x56>
 800b036:	6003      	str	r3, [r0, #0]
 800b038:	e7e5      	b.n	800b006 <__lo0bits+0x1e>
 800b03a:	2200      	movs	r2, #0
 800b03c:	e7e3      	b.n	800b006 <__lo0bits+0x1e>
 800b03e:	2220      	movs	r2, #32
 800b040:	e7e1      	b.n	800b006 <__lo0bits+0x1e>
	...

0800b044 <__i2b>:
 800b044:	b510      	push	{r4, lr}
 800b046:	460c      	mov	r4, r1
 800b048:	2101      	movs	r1, #1
 800b04a:	f7ff febb 	bl	800adc4 <_Balloc>
 800b04e:	4602      	mov	r2, r0
 800b050:	b928      	cbnz	r0, 800b05e <__i2b+0x1a>
 800b052:	4b05      	ldr	r3, [pc, #20]	; (800b068 <__i2b+0x24>)
 800b054:	4805      	ldr	r0, [pc, #20]	; (800b06c <__i2b+0x28>)
 800b056:	f240 1145 	movw	r1, #325	; 0x145
 800b05a:	f001 fdf9 	bl	800cc50 <__assert_func>
 800b05e:	2301      	movs	r3, #1
 800b060:	6144      	str	r4, [r0, #20]
 800b062:	6103      	str	r3, [r0, #16]
 800b064:	bd10      	pop	{r4, pc}
 800b066:	bf00      	nop
 800b068:	0800d819 	.word	0x0800d819
 800b06c:	0800d82a 	.word	0x0800d82a

0800b070 <__multiply>:
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	4691      	mov	r9, r2
 800b076:	690a      	ldr	r2, [r1, #16]
 800b078:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	bfb8      	it	lt
 800b080:	460b      	movlt	r3, r1
 800b082:	460c      	mov	r4, r1
 800b084:	bfbc      	itt	lt
 800b086:	464c      	movlt	r4, r9
 800b088:	4699      	movlt	r9, r3
 800b08a:	6927      	ldr	r7, [r4, #16]
 800b08c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b090:	68a3      	ldr	r3, [r4, #8]
 800b092:	6861      	ldr	r1, [r4, #4]
 800b094:	eb07 060a 	add.w	r6, r7, sl
 800b098:	42b3      	cmp	r3, r6
 800b09a:	b085      	sub	sp, #20
 800b09c:	bfb8      	it	lt
 800b09e:	3101      	addlt	r1, #1
 800b0a0:	f7ff fe90 	bl	800adc4 <_Balloc>
 800b0a4:	b930      	cbnz	r0, 800b0b4 <__multiply+0x44>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	4b44      	ldr	r3, [pc, #272]	; (800b1bc <__multiply+0x14c>)
 800b0aa:	4845      	ldr	r0, [pc, #276]	; (800b1c0 <__multiply+0x150>)
 800b0ac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b0b0:	f001 fdce 	bl	800cc50 <__assert_func>
 800b0b4:	f100 0514 	add.w	r5, r0, #20
 800b0b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0bc:	462b      	mov	r3, r5
 800b0be:	2200      	movs	r2, #0
 800b0c0:	4543      	cmp	r3, r8
 800b0c2:	d321      	bcc.n	800b108 <__multiply+0x98>
 800b0c4:	f104 0314 	add.w	r3, r4, #20
 800b0c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b0cc:	f109 0314 	add.w	r3, r9, #20
 800b0d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b0d4:	9202      	str	r2, [sp, #8]
 800b0d6:	1b3a      	subs	r2, r7, r4
 800b0d8:	3a15      	subs	r2, #21
 800b0da:	f022 0203 	bic.w	r2, r2, #3
 800b0de:	3204      	adds	r2, #4
 800b0e0:	f104 0115 	add.w	r1, r4, #21
 800b0e4:	428f      	cmp	r7, r1
 800b0e6:	bf38      	it	cc
 800b0e8:	2204      	movcc	r2, #4
 800b0ea:	9201      	str	r2, [sp, #4]
 800b0ec:	9a02      	ldr	r2, [sp, #8]
 800b0ee:	9303      	str	r3, [sp, #12]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d80c      	bhi.n	800b10e <__multiply+0x9e>
 800b0f4:	2e00      	cmp	r6, #0
 800b0f6:	dd03      	ble.n	800b100 <__multiply+0x90>
 800b0f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d05b      	beq.n	800b1b8 <__multiply+0x148>
 800b100:	6106      	str	r6, [r0, #16]
 800b102:	b005      	add	sp, #20
 800b104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b108:	f843 2b04 	str.w	r2, [r3], #4
 800b10c:	e7d8      	b.n	800b0c0 <__multiply+0x50>
 800b10e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b112:	f1ba 0f00 	cmp.w	sl, #0
 800b116:	d024      	beq.n	800b162 <__multiply+0xf2>
 800b118:	f104 0e14 	add.w	lr, r4, #20
 800b11c:	46a9      	mov	r9, r5
 800b11e:	f04f 0c00 	mov.w	ip, #0
 800b122:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b126:	f8d9 1000 	ldr.w	r1, [r9]
 800b12a:	fa1f fb82 	uxth.w	fp, r2
 800b12e:	b289      	uxth	r1, r1
 800b130:	fb0a 110b 	mla	r1, sl, fp, r1
 800b134:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b138:	f8d9 2000 	ldr.w	r2, [r9]
 800b13c:	4461      	add	r1, ip
 800b13e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b142:	fb0a c20b 	mla	r2, sl, fp, ip
 800b146:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b14a:	b289      	uxth	r1, r1
 800b14c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b150:	4577      	cmp	r7, lr
 800b152:	f849 1b04 	str.w	r1, [r9], #4
 800b156:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b15a:	d8e2      	bhi.n	800b122 <__multiply+0xb2>
 800b15c:	9a01      	ldr	r2, [sp, #4]
 800b15e:	f845 c002 	str.w	ip, [r5, r2]
 800b162:	9a03      	ldr	r2, [sp, #12]
 800b164:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b168:	3304      	adds	r3, #4
 800b16a:	f1b9 0f00 	cmp.w	r9, #0
 800b16e:	d021      	beq.n	800b1b4 <__multiply+0x144>
 800b170:	6829      	ldr	r1, [r5, #0]
 800b172:	f104 0c14 	add.w	ip, r4, #20
 800b176:	46ae      	mov	lr, r5
 800b178:	f04f 0a00 	mov.w	sl, #0
 800b17c:	f8bc b000 	ldrh.w	fp, [ip]
 800b180:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b184:	fb09 220b 	mla	r2, r9, fp, r2
 800b188:	4452      	add	r2, sl
 800b18a:	b289      	uxth	r1, r1
 800b18c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b190:	f84e 1b04 	str.w	r1, [lr], #4
 800b194:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b198:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b19c:	f8be 1000 	ldrh.w	r1, [lr]
 800b1a0:	fb09 110a 	mla	r1, r9, sl, r1
 800b1a4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b1a8:	4567      	cmp	r7, ip
 800b1aa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1ae:	d8e5      	bhi.n	800b17c <__multiply+0x10c>
 800b1b0:	9a01      	ldr	r2, [sp, #4]
 800b1b2:	50a9      	str	r1, [r5, r2]
 800b1b4:	3504      	adds	r5, #4
 800b1b6:	e799      	b.n	800b0ec <__multiply+0x7c>
 800b1b8:	3e01      	subs	r6, #1
 800b1ba:	e79b      	b.n	800b0f4 <__multiply+0x84>
 800b1bc:	0800d819 	.word	0x0800d819
 800b1c0:	0800d82a 	.word	0x0800d82a

0800b1c4 <__pow5mult>:
 800b1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1c8:	4615      	mov	r5, r2
 800b1ca:	f012 0203 	ands.w	r2, r2, #3
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	460f      	mov	r7, r1
 800b1d2:	d007      	beq.n	800b1e4 <__pow5mult+0x20>
 800b1d4:	4c25      	ldr	r4, [pc, #148]	; (800b26c <__pow5mult+0xa8>)
 800b1d6:	3a01      	subs	r2, #1
 800b1d8:	2300      	movs	r3, #0
 800b1da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1de:	f7ff fe53 	bl	800ae88 <__multadd>
 800b1e2:	4607      	mov	r7, r0
 800b1e4:	10ad      	asrs	r5, r5, #2
 800b1e6:	d03d      	beq.n	800b264 <__pow5mult+0xa0>
 800b1e8:	69f4      	ldr	r4, [r6, #28]
 800b1ea:	b97c      	cbnz	r4, 800b20c <__pow5mult+0x48>
 800b1ec:	2010      	movs	r0, #16
 800b1ee:	f7fd fcd5 	bl	8008b9c <malloc>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	61f0      	str	r0, [r6, #28]
 800b1f6:	b928      	cbnz	r0, 800b204 <__pow5mult+0x40>
 800b1f8:	4b1d      	ldr	r3, [pc, #116]	; (800b270 <__pow5mult+0xac>)
 800b1fa:	481e      	ldr	r0, [pc, #120]	; (800b274 <__pow5mult+0xb0>)
 800b1fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b200:	f001 fd26 	bl	800cc50 <__assert_func>
 800b204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b208:	6004      	str	r4, [r0, #0]
 800b20a:	60c4      	str	r4, [r0, #12]
 800b20c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b214:	b94c      	cbnz	r4, 800b22a <__pow5mult+0x66>
 800b216:	f240 2171 	movw	r1, #625	; 0x271
 800b21a:	4630      	mov	r0, r6
 800b21c:	f7ff ff12 	bl	800b044 <__i2b>
 800b220:	2300      	movs	r3, #0
 800b222:	f8c8 0008 	str.w	r0, [r8, #8]
 800b226:	4604      	mov	r4, r0
 800b228:	6003      	str	r3, [r0, #0]
 800b22a:	f04f 0900 	mov.w	r9, #0
 800b22e:	07eb      	lsls	r3, r5, #31
 800b230:	d50a      	bpl.n	800b248 <__pow5mult+0x84>
 800b232:	4639      	mov	r1, r7
 800b234:	4622      	mov	r2, r4
 800b236:	4630      	mov	r0, r6
 800b238:	f7ff ff1a 	bl	800b070 <__multiply>
 800b23c:	4639      	mov	r1, r7
 800b23e:	4680      	mov	r8, r0
 800b240:	4630      	mov	r0, r6
 800b242:	f7ff fdff 	bl	800ae44 <_Bfree>
 800b246:	4647      	mov	r7, r8
 800b248:	106d      	asrs	r5, r5, #1
 800b24a:	d00b      	beq.n	800b264 <__pow5mult+0xa0>
 800b24c:	6820      	ldr	r0, [r4, #0]
 800b24e:	b938      	cbnz	r0, 800b260 <__pow5mult+0x9c>
 800b250:	4622      	mov	r2, r4
 800b252:	4621      	mov	r1, r4
 800b254:	4630      	mov	r0, r6
 800b256:	f7ff ff0b 	bl	800b070 <__multiply>
 800b25a:	6020      	str	r0, [r4, #0]
 800b25c:	f8c0 9000 	str.w	r9, [r0]
 800b260:	4604      	mov	r4, r0
 800b262:	e7e4      	b.n	800b22e <__pow5mult+0x6a>
 800b264:	4638      	mov	r0, r7
 800b266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b26a:	bf00      	nop
 800b26c:	0800d978 	.word	0x0800d978
 800b270:	0800d7aa 	.word	0x0800d7aa
 800b274:	0800d82a 	.word	0x0800d82a

0800b278 <__lshift>:
 800b278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b27c:	460c      	mov	r4, r1
 800b27e:	6849      	ldr	r1, [r1, #4]
 800b280:	6923      	ldr	r3, [r4, #16]
 800b282:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b286:	68a3      	ldr	r3, [r4, #8]
 800b288:	4607      	mov	r7, r0
 800b28a:	4691      	mov	r9, r2
 800b28c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b290:	f108 0601 	add.w	r6, r8, #1
 800b294:	42b3      	cmp	r3, r6
 800b296:	db0b      	blt.n	800b2b0 <__lshift+0x38>
 800b298:	4638      	mov	r0, r7
 800b29a:	f7ff fd93 	bl	800adc4 <_Balloc>
 800b29e:	4605      	mov	r5, r0
 800b2a0:	b948      	cbnz	r0, 800b2b6 <__lshift+0x3e>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	4b28      	ldr	r3, [pc, #160]	; (800b348 <__lshift+0xd0>)
 800b2a6:	4829      	ldr	r0, [pc, #164]	; (800b34c <__lshift+0xd4>)
 800b2a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b2ac:	f001 fcd0 	bl	800cc50 <__assert_func>
 800b2b0:	3101      	adds	r1, #1
 800b2b2:	005b      	lsls	r3, r3, #1
 800b2b4:	e7ee      	b.n	800b294 <__lshift+0x1c>
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	f100 0114 	add.w	r1, r0, #20
 800b2bc:	f100 0210 	add.w	r2, r0, #16
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	4553      	cmp	r3, sl
 800b2c4:	db33      	blt.n	800b32e <__lshift+0xb6>
 800b2c6:	6920      	ldr	r0, [r4, #16]
 800b2c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2cc:	f104 0314 	add.w	r3, r4, #20
 800b2d0:	f019 091f 	ands.w	r9, r9, #31
 800b2d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2dc:	d02b      	beq.n	800b336 <__lshift+0xbe>
 800b2de:	f1c9 0e20 	rsb	lr, r9, #32
 800b2e2:	468a      	mov	sl, r1
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	6818      	ldr	r0, [r3, #0]
 800b2e8:	fa00 f009 	lsl.w	r0, r0, r9
 800b2ec:	4310      	orrs	r0, r2
 800b2ee:	f84a 0b04 	str.w	r0, [sl], #4
 800b2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2f6:	459c      	cmp	ip, r3
 800b2f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2fc:	d8f3      	bhi.n	800b2e6 <__lshift+0x6e>
 800b2fe:	ebac 0304 	sub.w	r3, ip, r4
 800b302:	3b15      	subs	r3, #21
 800b304:	f023 0303 	bic.w	r3, r3, #3
 800b308:	3304      	adds	r3, #4
 800b30a:	f104 0015 	add.w	r0, r4, #21
 800b30e:	4584      	cmp	ip, r0
 800b310:	bf38      	it	cc
 800b312:	2304      	movcc	r3, #4
 800b314:	50ca      	str	r2, [r1, r3]
 800b316:	b10a      	cbz	r2, 800b31c <__lshift+0xa4>
 800b318:	f108 0602 	add.w	r6, r8, #2
 800b31c:	3e01      	subs	r6, #1
 800b31e:	4638      	mov	r0, r7
 800b320:	612e      	str	r6, [r5, #16]
 800b322:	4621      	mov	r1, r4
 800b324:	f7ff fd8e 	bl	800ae44 <_Bfree>
 800b328:	4628      	mov	r0, r5
 800b32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b32e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b332:	3301      	adds	r3, #1
 800b334:	e7c5      	b.n	800b2c2 <__lshift+0x4a>
 800b336:	3904      	subs	r1, #4
 800b338:	f853 2b04 	ldr.w	r2, [r3], #4
 800b33c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b340:	459c      	cmp	ip, r3
 800b342:	d8f9      	bhi.n	800b338 <__lshift+0xc0>
 800b344:	e7ea      	b.n	800b31c <__lshift+0xa4>
 800b346:	bf00      	nop
 800b348:	0800d819 	.word	0x0800d819
 800b34c:	0800d82a 	.word	0x0800d82a

0800b350 <__mcmp>:
 800b350:	b530      	push	{r4, r5, lr}
 800b352:	6902      	ldr	r2, [r0, #16]
 800b354:	690c      	ldr	r4, [r1, #16]
 800b356:	1b12      	subs	r2, r2, r4
 800b358:	d10e      	bne.n	800b378 <__mcmp+0x28>
 800b35a:	f100 0314 	add.w	r3, r0, #20
 800b35e:	3114      	adds	r1, #20
 800b360:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b364:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b368:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b36c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b370:	42a5      	cmp	r5, r4
 800b372:	d003      	beq.n	800b37c <__mcmp+0x2c>
 800b374:	d305      	bcc.n	800b382 <__mcmp+0x32>
 800b376:	2201      	movs	r2, #1
 800b378:	4610      	mov	r0, r2
 800b37a:	bd30      	pop	{r4, r5, pc}
 800b37c:	4283      	cmp	r3, r0
 800b37e:	d3f3      	bcc.n	800b368 <__mcmp+0x18>
 800b380:	e7fa      	b.n	800b378 <__mcmp+0x28>
 800b382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b386:	e7f7      	b.n	800b378 <__mcmp+0x28>

0800b388 <__mdiff>:
 800b388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	460c      	mov	r4, r1
 800b38e:	4606      	mov	r6, r0
 800b390:	4611      	mov	r1, r2
 800b392:	4620      	mov	r0, r4
 800b394:	4690      	mov	r8, r2
 800b396:	f7ff ffdb 	bl	800b350 <__mcmp>
 800b39a:	1e05      	subs	r5, r0, #0
 800b39c:	d110      	bne.n	800b3c0 <__mdiff+0x38>
 800b39e:	4629      	mov	r1, r5
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	f7ff fd0f 	bl	800adc4 <_Balloc>
 800b3a6:	b930      	cbnz	r0, 800b3b6 <__mdiff+0x2e>
 800b3a8:	4b3a      	ldr	r3, [pc, #232]	; (800b494 <__mdiff+0x10c>)
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	f240 2137 	movw	r1, #567	; 0x237
 800b3b0:	4839      	ldr	r0, [pc, #228]	; (800b498 <__mdiff+0x110>)
 800b3b2:	f001 fc4d 	bl	800cc50 <__assert_func>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c0:	bfa4      	itt	ge
 800b3c2:	4643      	movge	r3, r8
 800b3c4:	46a0      	movge	r8, r4
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b3cc:	bfa6      	itte	ge
 800b3ce:	461c      	movge	r4, r3
 800b3d0:	2500      	movge	r5, #0
 800b3d2:	2501      	movlt	r5, #1
 800b3d4:	f7ff fcf6 	bl	800adc4 <_Balloc>
 800b3d8:	b920      	cbnz	r0, 800b3e4 <__mdiff+0x5c>
 800b3da:	4b2e      	ldr	r3, [pc, #184]	; (800b494 <__mdiff+0x10c>)
 800b3dc:	4602      	mov	r2, r0
 800b3de:	f240 2145 	movw	r1, #581	; 0x245
 800b3e2:	e7e5      	b.n	800b3b0 <__mdiff+0x28>
 800b3e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b3e8:	6926      	ldr	r6, [r4, #16]
 800b3ea:	60c5      	str	r5, [r0, #12]
 800b3ec:	f104 0914 	add.w	r9, r4, #20
 800b3f0:	f108 0514 	add.w	r5, r8, #20
 800b3f4:	f100 0e14 	add.w	lr, r0, #20
 800b3f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b3fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b400:	f108 0210 	add.w	r2, r8, #16
 800b404:	46f2      	mov	sl, lr
 800b406:	2100      	movs	r1, #0
 800b408:	f859 3b04 	ldr.w	r3, [r9], #4
 800b40c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b410:	fa11 f88b 	uxtah	r8, r1, fp
 800b414:	b299      	uxth	r1, r3
 800b416:	0c1b      	lsrs	r3, r3, #16
 800b418:	eba8 0801 	sub.w	r8, r8, r1
 800b41c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b420:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b424:	fa1f f888 	uxth.w	r8, r8
 800b428:	1419      	asrs	r1, r3, #16
 800b42a:	454e      	cmp	r6, r9
 800b42c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b430:	f84a 3b04 	str.w	r3, [sl], #4
 800b434:	d8e8      	bhi.n	800b408 <__mdiff+0x80>
 800b436:	1b33      	subs	r3, r6, r4
 800b438:	3b15      	subs	r3, #21
 800b43a:	f023 0303 	bic.w	r3, r3, #3
 800b43e:	3304      	adds	r3, #4
 800b440:	3415      	adds	r4, #21
 800b442:	42a6      	cmp	r6, r4
 800b444:	bf38      	it	cc
 800b446:	2304      	movcc	r3, #4
 800b448:	441d      	add	r5, r3
 800b44a:	4473      	add	r3, lr
 800b44c:	469e      	mov	lr, r3
 800b44e:	462e      	mov	r6, r5
 800b450:	4566      	cmp	r6, ip
 800b452:	d30e      	bcc.n	800b472 <__mdiff+0xea>
 800b454:	f10c 0203 	add.w	r2, ip, #3
 800b458:	1b52      	subs	r2, r2, r5
 800b45a:	f022 0203 	bic.w	r2, r2, #3
 800b45e:	3d03      	subs	r5, #3
 800b460:	45ac      	cmp	ip, r5
 800b462:	bf38      	it	cc
 800b464:	2200      	movcc	r2, #0
 800b466:	4413      	add	r3, r2
 800b468:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b46c:	b17a      	cbz	r2, 800b48e <__mdiff+0x106>
 800b46e:	6107      	str	r7, [r0, #16]
 800b470:	e7a4      	b.n	800b3bc <__mdiff+0x34>
 800b472:	f856 8b04 	ldr.w	r8, [r6], #4
 800b476:	fa11 f288 	uxtah	r2, r1, r8
 800b47a:	1414      	asrs	r4, r2, #16
 800b47c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b480:	b292      	uxth	r2, r2
 800b482:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b486:	f84e 2b04 	str.w	r2, [lr], #4
 800b48a:	1421      	asrs	r1, r4, #16
 800b48c:	e7e0      	b.n	800b450 <__mdiff+0xc8>
 800b48e:	3f01      	subs	r7, #1
 800b490:	e7ea      	b.n	800b468 <__mdiff+0xe0>
 800b492:	bf00      	nop
 800b494:	0800d819 	.word	0x0800d819
 800b498:	0800d82a 	.word	0x0800d82a

0800b49c <__ulp>:
 800b49c:	b082      	sub	sp, #8
 800b49e:	ed8d 0b00 	vstr	d0, [sp]
 800b4a2:	9a01      	ldr	r2, [sp, #4]
 800b4a4:	4b0f      	ldr	r3, [pc, #60]	; (800b4e4 <__ulp+0x48>)
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	dc08      	bgt.n	800b4c2 <__ulp+0x26>
 800b4b0:	425b      	negs	r3, r3
 800b4b2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b4b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b4ba:	da04      	bge.n	800b4c6 <__ulp+0x2a>
 800b4bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b4c0:	4113      	asrs	r3, r2
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	e008      	b.n	800b4d8 <__ulp+0x3c>
 800b4c6:	f1a2 0314 	sub.w	r3, r2, #20
 800b4ca:	2b1e      	cmp	r3, #30
 800b4cc:	bfda      	itte	le
 800b4ce:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b4d2:	40da      	lsrle	r2, r3
 800b4d4:	2201      	movgt	r2, #1
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	ec41 0b10 	vmov	d0, r0, r1
 800b4e0:	b002      	add	sp, #8
 800b4e2:	4770      	bx	lr
 800b4e4:	7ff00000 	.word	0x7ff00000

0800b4e8 <__b2d>:
 800b4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ec:	6906      	ldr	r6, [r0, #16]
 800b4ee:	f100 0814 	add.w	r8, r0, #20
 800b4f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b4f6:	1f37      	subs	r7, r6, #4
 800b4f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	f7ff fd53 	bl	800afa8 <__hi0bits>
 800b502:	f1c0 0320 	rsb	r3, r0, #32
 800b506:	280a      	cmp	r0, #10
 800b508:	600b      	str	r3, [r1, #0]
 800b50a:	491b      	ldr	r1, [pc, #108]	; (800b578 <__b2d+0x90>)
 800b50c:	dc15      	bgt.n	800b53a <__b2d+0x52>
 800b50e:	f1c0 0c0b 	rsb	ip, r0, #11
 800b512:	fa22 f30c 	lsr.w	r3, r2, ip
 800b516:	45b8      	cmp	r8, r7
 800b518:	ea43 0501 	orr.w	r5, r3, r1
 800b51c:	bf34      	ite	cc
 800b51e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b522:	2300      	movcs	r3, #0
 800b524:	3015      	adds	r0, #21
 800b526:	fa02 f000 	lsl.w	r0, r2, r0
 800b52a:	fa23 f30c 	lsr.w	r3, r3, ip
 800b52e:	4303      	orrs	r3, r0
 800b530:	461c      	mov	r4, r3
 800b532:	ec45 4b10 	vmov	d0, r4, r5
 800b536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b53a:	45b8      	cmp	r8, r7
 800b53c:	bf3a      	itte	cc
 800b53e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b542:	f1a6 0708 	subcc.w	r7, r6, #8
 800b546:	2300      	movcs	r3, #0
 800b548:	380b      	subs	r0, #11
 800b54a:	d012      	beq.n	800b572 <__b2d+0x8a>
 800b54c:	f1c0 0120 	rsb	r1, r0, #32
 800b550:	fa23 f401 	lsr.w	r4, r3, r1
 800b554:	4082      	lsls	r2, r0
 800b556:	4322      	orrs	r2, r4
 800b558:	4547      	cmp	r7, r8
 800b55a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b55e:	bf8c      	ite	hi
 800b560:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b564:	2200      	movls	r2, #0
 800b566:	4083      	lsls	r3, r0
 800b568:	40ca      	lsrs	r2, r1
 800b56a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b56e:	4313      	orrs	r3, r2
 800b570:	e7de      	b.n	800b530 <__b2d+0x48>
 800b572:	ea42 0501 	orr.w	r5, r2, r1
 800b576:	e7db      	b.n	800b530 <__b2d+0x48>
 800b578:	3ff00000 	.word	0x3ff00000

0800b57c <__d2b>:
 800b57c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b580:	460f      	mov	r7, r1
 800b582:	2101      	movs	r1, #1
 800b584:	ec59 8b10 	vmov	r8, r9, d0
 800b588:	4616      	mov	r6, r2
 800b58a:	f7ff fc1b 	bl	800adc4 <_Balloc>
 800b58e:	4604      	mov	r4, r0
 800b590:	b930      	cbnz	r0, 800b5a0 <__d2b+0x24>
 800b592:	4602      	mov	r2, r0
 800b594:	4b24      	ldr	r3, [pc, #144]	; (800b628 <__d2b+0xac>)
 800b596:	4825      	ldr	r0, [pc, #148]	; (800b62c <__d2b+0xb0>)
 800b598:	f240 310f 	movw	r1, #783	; 0x30f
 800b59c:	f001 fb58 	bl	800cc50 <__assert_func>
 800b5a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b5a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5a8:	bb2d      	cbnz	r5, 800b5f6 <__d2b+0x7a>
 800b5aa:	9301      	str	r3, [sp, #4]
 800b5ac:	f1b8 0300 	subs.w	r3, r8, #0
 800b5b0:	d026      	beq.n	800b600 <__d2b+0x84>
 800b5b2:	4668      	mov	r0, sp
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	f7ff fd17 	bl	800afe8 <__lo0bits>
 800b5ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b5be:	b1e8      	cbz	r0, 800b5fc <__d2b+0x80>
 800b5c0:	f1c0 0320 	rsb	r3, r0, #32
 800b5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c8:	430b      	orrs	r3, r1
 800b5ca:	40c2      	lsrs	r2, r0
 800b5cc:	6163      	str	r3, [r4, #20]
 800b5ce:	9201      	str	r2, [sp, #4]
 800b5d0:	9b01      	ldr	r3, [sp, #4]
 800b5d2:	61a3      	str	r3, [r4, #24]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	bf14      	ite	ne
 800b5d8:	2202      	movne	r2, #2
 800b5da:	2201      	moveq	r2, #1
 800b5dc:	6122      	str	r2, [r4, #16]
 800b5de:	b1bd      	cbz	r5, 800b610 <__d2b+0x94>
 800b5e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5e4:	4405      	add	r5, r0
 800b5e6:	603d      	str	r5, [r7, #0]
 800b5e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5ec:	6030      	str	r0, [r6, #0]
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	b003      	add	sp, #12
 800b5f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5fa:	e7d6      	b.n	800b5aa <__d2b+0x2e>
 800b5fc:	6161      	str	r1, [r4, #20]
 800b5fe:	e7e7      	b.n	800b5d0 <__d2b+0x54>
 800b600:	a801      	add	r0, sp, #4
 800b602:	f7ff fcf1 	bl	800afe8 <__lo0bits>
 800b606:	9b01      	ldr	r3, [sp, #4]
 800b608:	6163      	str	r3, [r4, #20]
 800b60a:	3020      	adds	r0, #32
 800b60c:	2201      	movs	r2, #1
 800b60e:	e7e5      	b.n	800b5dc <__d2b+0x60>
 800b610:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b614:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b618:	6038      	str	r0, [r7, #0]
 800b61a:	6918      	ldr	r0, [r3, #16]
 800b61c:	f7ff fcc4 	bl	800afa8 <__hi0bits>
 800b620:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b624:	e7e2      	b.n	800b5ec <__d2b+0x70>
 800b626:	bf00      	nop
 800b628:	0800d819 	.word	0x0800d819
 800b62c:	0800d82a 	.word	0x0800d82a

0800b630 <__ratio>:
 800b630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b634:	4688      	mov	r8, r1
 800b636:	4669      	mov	r1, sp
 800b638:	4681      	mov	r9, r0
 800b63a:	f7ff ff55 	bl	800b4e8 <__b2d>
 800b63e:	a901      	add	r1, sp, #4
 800b640:	4640      	mov	r0, r8
 800b642:	ec55 4b10 	vmov	r4, r5, d0
 800b646:	f7ff ff4f 	bl	800b4e8 <__b2d>
 800b64a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b64e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b652:	eba3 0c02 	sub.w	ip, r3, r2
 800b656:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b65a:	1a9b      	subs	r3, r3, r2
 800b65c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b660:	ec51 0b10 	vmov	r0, r1, d0
 800b664:	2b00      	cmp	r3, #0
 800b666:	bfd6      	itet	le
 800b668:	460a      	movle	r2, r1
 800b66a:	462a      	movgt	r2, r5
 800b66c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b670:	468b      	mov	fp, r1
 800b672:	462f      	mov	r7, r5
 800b674:	bfd4      	ite	le
 800b676:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b67a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b67e:	4620      	mov	r0, r4
 800b680:	ee10 2a10 	vmov	r2, s0
 800b684:	465b      	mov	r3, fp
 800b686:	4639      	mov	r1, r7
 800b688:	f7f5 f8e0 	bl	800084c <__aeabi_ddiv>
 800b68c:	ec41 0b10 	vmov	d0, r0, r1
 800b690:	b003      	add	sp, #12
 800b692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b696 <__copybits>:
 800b696:	3901      	subs	r1, #1
 800b698:	b570      	push	{r4, r5, r6, lr}
 800b69a:	1149      	asrs	r1, r1, #5
 800b69c:	6914      	ldr	r4, [r2, #16]
 800b69e:	3101      	adds	r1, #1
 800b6a0:	f102 0314 	add.w	r3, r2, #20
 800b6a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b6ac:	1f05      	subs	r5, r0, #4
 800b6ae:	42a3      	cmp	r3, r4
 800b6b0:	d30c      	bcc.n	800b6cc <__copybits+0x36>
 800b6b2:	1aa3      	subs	r3, r4, r2
 800b6b4:	3b11      	subs	r3, #17
 800b6b6:	f023 0303 	bic.w	r3, r3, #3
 800b6ba:	3211      	adds	r2, #17
 800b6bc:	42a2      	cmp	r2, r4
 800b6be:	bf88      	it	hi
 800b6c0:	2300      	movhi	r3, #0
 800b6c2:	4418      	add	r0, r3
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	4288      	cmp	r0, r1
 800b6c8:	d305      	bcc.n	800b6d6 <__copybits+0x40>
 800b6ca:	bd70      	pop	{r4, r5, r6, pc}
 800b6cc:	f853 6b04 	ldr.w	r6, [r3], #4
 800b6d0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b6d4:	e7eb      	b.n	800b6ae <__copybits+0x18>
 800b6d6:	f840 3b04 	str.w	r3, [r0], #4
 800b6da:	e7f4      	b.n	800b6c6 <__copybits+0x30>

0800b6dc <__any_on>:
 800b6dc:	f100 0214 	add.w	r2, r0, #20
 800b6e0:	6900      	ldr	r0, [r0, #16]
 800b6e2:	114b      	asrs	r3, r1, #5
 800b6e4:	4298      	cmp	r0, r3
 800b6e6:	b510      	push	{r4, lr}
 800b6e8:	db11      	blt.n	800b70e <__any_on+0x32>
 800b6ea:	dd0a      	ble.n	800b702 <__any_on+0x26>
 800b6ec:	f011 011f 	ands.w	r1, r1, #31
 800b6f0:	d007      	beq.n	800b702 <__any_on+0x26>
 800b6f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b6f6:	fa24 f001 	lsr.w	r0, r4, r1
 800b6fa:	fa00 f101 	lsl.w	r1, r0, r1
 800b6fe:	428c      	cmp	r4, r1
 800b700:	d10b      	bne.n	800b71a <__any_on+0x3e>
 800b702:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b706:	4293      	cmp	r3, r2
 800b708:	d803      	bhi.n	800b712 <__any_on+0x36>
 800b70a:	2000      	movs	r0, #0
 800b70c:	bd10      	pop	{r4, pc}
 800b70e:	4603      	mov	r3, r0
 800b710:	e7f7      	b.n	800b702 <__any_on+0x26>
 800b712:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b716:	2900      	cmp	r1, #0
 800b718:	d0f5      	beq.n	800b706 <__any_on+0x2a>
 800b71a:	2001      	movs	r0, #1
 800b71c:	e7f6      	b.n	800b70c <__any_on+0x30>

0800b71e <sulp>:
 800b71e:	b570      	push	{r4, r5, r6, lr}
 800b720:	4604      	mov	r4, r0
 800b722:	460d      	mov	r5, r1
 800b724:	ec45 4b10 	vmov	d0, r4, r5
 800b728:	4616      	mov	r6, r2
 800b72a:	f7ff feb7 	bl	800b49c <__ulp>
 800b72e:	ec51 0b10 	vmov	r0, r1, d0
 800b732:	b17e      	cbz	r6, 800b754 <sulp+0x36>
 800b734:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b738:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	dd09      	ble.n	800b754 <sulp+0x36>
 800b740:	051b      	lsls	r3, r3, #20
 800b742:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b746:	2400      	movs	r4, #0
 800b748:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b74c:	4622      	mov	r2, r4
 800b74e:	462b      	mov	r3, r5
 800b750:	f7f4 ff52 	bl	80005f8 <__aeabi_dmul>
 800b754:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b758 <_strtod_l>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	ed2d 8b02 	vpush	{d8}
 800b760:	b09b      	sub	sp, #108	; 0x6c
 800b762:	4604      	mov	r4, r0
 800b764:	9213      	str	r2, [sp, #76]	; 0x4c
 800b766:	2200      	movs	r2, #0
 800b768:	9216      	str	r2, [sp, #88]	; 0x58
 800b76a:	460d      	mov	r5, r1
 800b76c:	f04f 0800 	mov.w	r8, #0
 800b770:	f04f 0900 	mov.w	r9, #0
 800b774:	460a      	mov	r2, r1
 800b776:	9215      	str	r2, [sp, #84]	; 0x54
 800b778:	7811      	ldrb	r1, [r2, #0]
 800b77a:	292b      	cmp	r1, #43	; 0x2b
 800b77c:	d04c      	beq.n	800b818 <_strtod_l+0xc0>
 800b77e:	d83a      	bhi.n	800b7f6 <_strtod_l+0x9e>
 800b780:	290d      	cmp	r1, #13
 800b782:	d834      	bhi.n	800b7ee <_strtod_l+0x96>
 800b784:	2908      	cmp	r1, #8
 800b786:	d834      	bhi.n	800b7f2 <_strtod_l+0x9a>
 800b788:	2900      	cmp	r1, #0
 800b78a:	d03d      	beq.n	800b808 <_strtod_l+0xb0>
 800b78c:	2200      	movs	r2, #0
 800b78e:	920a      	str	r2, [sp, #40]	; 0x28
 800b790:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b792:	7832      	ldrb	r2, [r6, #0]
 800b794:	2a30      	cmp	r2, #48	; 0x30
 800b796:	f040 80b4 	bne.w	800b902 <_strtod_l+0x1aa>
 800b79a:	7872      	ldrb	r2, [r6, #1]
 800b79c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b7a0:	2a58      	cmp	r2, #88	; 0x58
 800b7a2:	d170      	bne.n	800b886 <_strtod_l+0x12e>
 800b7a4:	9302      	str	r3, [sp, #8]
 800b7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7a8:	9301      	str	r3, [sp, #4]
 800b7aa:	ab16      	add	r3, sp, #88	; 0x58
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	4a8e      	ldr	r2, [pc, #568]	; (800b9e8 <_strtod_l+0x290>)
 800b7b0:	ab17      	add	r3, sp, #92	; 0x5c
 800b7b2:	a915      	add	r1, sp, #84	; 0x54
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f001 fae7 	bl	800cd88 <__gethex>
 800b7ba:	f010 070f 	ands.w	r7, r0, #15
 800b7be:	4605      	mov	r5, r0
 800b7c0:	d005      	beq.n	800b7ce <_strtod_l+0x76>
 800b7c2:	2f06      	cmp	r7, #6
 800b7c4:	d12a      	bne.n	800b81c <_strtod_l+0xc4>
 800b7c6:	3601      	adds	r6, #1
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	9615      	str	r6, [sp, #84]	; 0x54
 800b7cc:	930a      	str	r3, [sp, #40]	; 0x28
 800b7ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f040 857f 	bne.w	800c2d4 <_strtod_l+0xb7c>
 800b7d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7d8:	b1db      	cbz	r3, 800b812 <_strtod_l+0xba>
 800b7da:	4642      	mov	r2, r8
 800b7dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b7e0:	ec43 2b10 	vmov	d0, r2, r3
 800b7e4:	b01b      	add	sp, #108	; 0x6c
 800b7e6:	ecbd 8b02 	vpop	{d8}
 800b7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ee:	2920      	cmp	r1, #32
 800b7f0:	d1cc      	bne.n	800b78c <_strtod_l+0x34>
 800b7f2:	3201      	adds	r2, #1
 800b7f4:	e7bf      	b.n	800b776 <_strtod_l+0x1e>
 800b7f6:	292d      	cmp	r1, #45	; 0x2d
 800b7f8:	d1c8      	bne.n	800b78c <_strtod_l+0x34>
 800b7fa:	2101      	movs	r1, #1
 800b7fc:	910a      	str	r1, [sp, #40]	; 0x28
 800b7fe:	1c51      	adds	r1, r2, #1
 800b800:	9115      	str	r1, [sp, #84]	; 0x54
 800b802:	7852      	ldrb	r2, [r2, #1]
 800b804:	2a00      	cmp	r2, #0
 800b806:	d1c3      	bne.n	800b790 <_strtod_l+0x38>
 800b808:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b80a:	9515      	str	r5, [sp, #84]	; 0x54
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f040 855f 	bne.w	800c2d0 <_strtod_l+0xb78>
 800b812:	4642      	mov	r2, r8
 800b814:	464b      	mov	r3, r9
 800b816:	e7e3      	b.n	800b7e0 <_strtod_l+0x88>
 800b818:	2100      	movs	r1, #0
 800b81a:	e7ef      	b.n	800b7fc <_strtod_l+0xa4>
 800b81c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b81e:	b13a      	cbz	r2, 800b830 <_strtod_l+0xd8>
 800b820:	2135      	movs	r1, #53	; 0x35
 800b822:	a818      	add	r0, sp, #96	; 0x60
 800b824:	f7ff ff37 	bl	800b696 <__copybits>
 800b828:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b82a:	4620      	mov	r0, r4
 800b82c:	f7ff fb0a 	bl	800ae44 <_Bfree>
 800b830:	3f01      	subs	r7, #1
 800b832:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b834:	2f04      	cmp	r7, #4
 800b836:	d806      	bhi.n	800b846 <_strtod_l+0xee>
 800b838:	e8df f007 	tbb	[pc, r7]
 800b83c:	201d0314 	.word	0x201d0314
 800b840:	14          	.byte	0x14
 800b841:	00          	.byte	0x00
 800b842:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b846:	05e9      	lsls	r1, r5, #23
 800b848:	bf48      	it	mi
 800b84a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b84e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b852:	0d1b      	lsrs	r3, r3, #20
 800b854:	051b      	lsls	r3, r3, #20
 800b856:	2b00      	cmp	r3, #0
 800b858:	d1b9      	bne.n	800b7ce <_strtod_l+0x76>
 800b85a:	f7fe fba9 	bl	8009fb0 <__errno>
 800b85e:	2322      	movs	r3, #34	; 0x22
 800b860:	6003      	str	r3, [r0, #0]
 800b862:	e7b4      	b.n	800b7ce <_strtod_l+0x76>
 800b864:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b868:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b86c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b870:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b874:	e7e7      	b.n	800b846 <_strtod_l+0xee>
 800b876:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b9f0 <_strtod_l+0x298>
 800b87a:	e7e4      	b.n	800b846 <_strtod_l+0xee>
 800b87c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b880:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b884:	e7df      	b.n	800b846 <_strtod_l+0xee>
 800b886:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b888:	1c5a      	adds	r2, r3, #1
 800b88a:	9215      	str	r2, [sp, #84]	; 0x54
 800b88c:	785b      	ldrb	r3, [r3, #1]
 800b88e:	2b30      	cmp	r3, #48	; 0x30
 800b890:	d0f9      	beq.n	800b886 <_strtod_l+0x12e>
 800b892:	2b00      	cmp	r3, #0
 800b894:	d09b      	beq.n	800b7ce <_strtod_l+0x76>
 800b896:	2301      	movs	r3, #1
 800b898:	f04f 0a00 	mov.w	sl, #0
 800b89c:	9304      	str	r3, [sp, #16]
 800b89e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b8a6:	46d3      	mov	fp, sl
 800b8a8:	220a      	movs	r2, #10
 800b8aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b8ac:	7806      	ldrb	r6, [r0, #0]
 800b8ae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b8b2:	b2d9      	uxtb	r1, r3
 800b8b4:	2909      	cmp	r1, #9
 800b8b6:	d926      	bls.n	800b906 <_strtod_l+0x1ae>
 800b8b8:	494c      	ldr	r1, [pc, #304]	; (800b9ec <_strtod_l+0x294>)
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f001 f98c 	bl	800cbd8 <strncmp>
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	d030      	beq.n	800b926 <_strtod_l+0x1ce>
 800b8c4:	2000      	movs	r0, #0
 800b8c6:	4632      	mov	r2, r6
 800b8c8:	9005      	str	r0, [sp, #20]
 800b8ca:	465e      	mov	r6, fp
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2a65      	cmp	r2, #101	; 0x65
 800b8d0:	d001      	beq.n	800b8d6 <_strtod_l+0x17e>
 800b8d2:	2a45      	cmp	r2, #69	; 0x45
 800b8d4:	d113      	bne.n	800b8fe <_strtod_l+0x1a6>
 800b8d6:	b91e      	cbnz	r6, 800b8e0 <_strtod_l+0x188>
 800b8d8:	9a04      	ldr	r2, [sp, #16]
 800b8da:	4302      	orrs	r2, r0
 800b8dc:	d094      	beq.n	800b808 <_strtod_l+0xb0>
 800b8de:	2600      	movs	r6, #0
 800b8e0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b8e2:	1c6a      	adds	r2, r5, #1
 800b8e4:	9215      	str	r2, [sp, #84]	; 0x54
 800b8e6:	786a      	ldrb	r2, [r5, #1]
 800b8e8:	2a2b      	cmp	r2, #43	; 0x2b
 800b8ea:	d074      	beq.n	800b9d6 <_strtod_l+0x27e>
 800b8ec:	2a2d      	cmp	r2, #45	; 0x2d
 800b8ee:	d078      	beq.n	800b9e2 <_strtod_l+0x28a>
 800b8f0:	f04f 0c00 	mov.w	ip, #0
 800b8f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b8f8:	2909      	cmp	r1, #9
 800b8fa:	d97f      	bls.n	800b9fc <_strtod_l+0x2a4>
 800b8fc:	9515      	str	r5, [sp, #84]	; 0x54
 800b8fe:	2700      	movs	r7, #0
 800b900:	e09e      	b.n	800ba40 <_strtod_l+0x2e8>
 800b902:	2300      	movs	r3, #0
 800b904:	e7c8      	b.n	800b898 <_strtod_l+0x140>
 800b906:	f1bb 0f08 	cmp.w	fp, #8
 800b90a:	bfd8      	it	le
 800b90c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b90e:	f100 0001 	add.w	r0, r0, #1
 800b912:	bfda      	itte	le
 800b914:	fb02 3301 	mlale	r3, r2, r1, r3
 800b918:	9309      	strle	r3, [sp, #36]	; 0x24
 800b91a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b91e:	f10b 0b01 	add.w	fp, fp, #1
 800b922:	9015      	str	r0, [sp, #84]	; 0x54
 800b924:	e7c1      	b.n	800b8aa <_strtod_l+0x152>
 800b926:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b928:	1c5a      	adds	r2, r3, #1
 800b92a:	9215      	str	r2, [sp, #84]	; 0x54
 800b92c:	785a      	ldrb	r2, [r3, #1]
 800b92e:	f1bb 0f00 	cmp.w	fp, #0
 800b932:	d037      	beq.n	800b9a4 <_strtod_l+0x24c>
 800b934:	9005      	str	r0, [sp, #20]
 800b936:	465e      	mov	r6, fp
 800b938:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b93c:	2b09      	cmp	r3, #9
 800b93e:	d912      	bls.n	800b966 <_strtod_l+0x20e>
 800b940:	2301      	movs	r3, #1
 800b942:	e7c4      	b.n	800b8ce <_strtod_l+0x176>
 800b944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	9215      	str	r2, [sp, #84]	; 0x54
 800b94a:	785a      	ldrb	r2, [r3, #1]
 800b94c:	3001      	adds	r0, #1
 800b94e:	2a30      	cmp	r2, #48	; 0x30
 800b950:	d0f8      	beq.n	800b944 <_strtod_l+0x1ec>
 800b952:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b956:	2b08      	cmp	r3, #8
 800b958:	f200 84c1 	bhi.w	800c2de <_strtod_l+0xb86>
 800b95c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b95e:	9005      	str	r0, [sp, #20]
 800b960:	2000      	movs	r0, #0
 800b962:	930b      	str	r3, [sp, #44]	; 0x2c
 800b964:	4606      	mov	r6, r0
 800b966:	3a30      	subs	r2, #48	; 0x30
 800b968:	f100 0301 	add.w	r3, r0, #1
 800b96c:	d014      	beq.n	800b998 <_strtod_l+0x240>
 800b96e:	9905      	ldr	r1, [sp, #20]
 800b970:	4419      	add	r1, r3
 800b972:	9105      	str	r1, [sp, #20]
 800b974:	4633      	mov	r3, r6
 800b976:	eb00 0c06 	add.w	ip, r0, r6
 800b97a:	210a      	movs	r1, #10
 800b97c:	4563      	cmp	r3, ip
 800b97e:	d113      	bne.n	800b9a8 <_strtod_l+0x250>
 800b980:	1833      	adds	r3, r6, r0
 800b982:	2b08      	cmp	r3, #8
 800b984:	f106 0601 	add.w	r6, r6, #1
 800b988:	4406      	add	r6, r0
 800b98a:	dc1a      	bgt.n	800b9c2 <_strtod_l+0x26a>
 800b98c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b98e:	230a      	movs	r3, #10
 800b990:	fb03 2301 	mla	r3, r3, r1, r2
 800b994:	9309      	str	r3, [sp, #36]	; 0x24
 800b996:	2300      	movs	r3, #0
 800b998:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b99a:	1c51      	adds	r1, r2, #1
 800b99c:	9115      	str	r1, [sp, #84]	; 0x54
 800b99e:	7852      	ldrb	r2, [r2, #1]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	e7c9      	b.n	800b938 <_strtod_l+0x1e0>
 800b9a4:	4658      	mov	r0, fp
 800b9a6:	e7d2      	b.n	800b94e <_strtod_l+0x1f6>
 800b9a8:	2b08      	cmp	r3, #8
 800b9aa:	f103 0301 	add.w	r3, r3, #1
 800b9ae:	dc03      	bgt.n	800b9b8 <_strtod_l+0x260>
 800b9b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b9b2:	434f      	muls	r7, r1
 800b9b4:	9709      	str	r7, [sp, #36]	; 0x24
 800b9b6:	e7e1      	b.n	800b97c <_strtod_l+0x224>
 800b9b8:	2b10      	cmp	r3, #16
 800b9ba:	bfd8      	it	le
 800b9bc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b9c0:	e7dc      	b.n	800b97c <_strtod_l+0x224>
 800b9c2:	2e10      	cmp	r6, #16
 800b9c4:	bfdc      	itt	le
 800b9c6:	230a      	movle	r3, #10
 800b9c8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b9cc:	e7e3      	b.n	800b996 <_strtod_l+0x23e>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	9305      	str	r3, [sp, #20]
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e780      	b.n	800b8d8 <_strtod_l+0x180>
 800b9d6:	f04f 0c00 	mov.w	ip, #0
 800b9da:	1caa      	adds	r2, r5, #2
 800b9dc:	9215      	str	r2, [sp, #84]	; 0x54
 800b9de:	78aa      	ldrb	r2, [r5, #2]
 800b9e0:	e788      	b.n	800b8f4 <_strtod_l+0x19c>
 800b9e2:	f04f 0c01 	mov.w	ip, #1
 800b9e6:	e7f8      	b.n	800b9da <_strtod_l+0x282>
 800b9e8:	0800d988 	.word	0x0800d988
 800b9ec:	0800d984 	.word	0x0800d984
 800b9f0:	7ff00000 	.word	0x7ff00000
 800b9f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b9f6:	1c51      	adds	r1, r2, #1
 800b9f8:	9115      	str	r1, [sp, #84]	; 0x54
 800b9fa:	7852      	ldrb	r2, [r2, #1]
 800b9fc:	2a30      	cmp	r2, #48	; 0x30
 800b9fe:	d0f9      	beq.n	800b9f4 <_strtod_l+0x29c>
 800ba00:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ba04:	2908      	cmp	r1, #8
 800ba06:	f63f af7a 	bhi.w	800b8fe <_strtod_l+0x1a6>
 800ba0a:	3a30      	subs	r2, #48	; 0x30
 800ba0c:	9208      	str	r2, [sp, #32]
 800ba0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba10:	920c      	str	r2, [sp, #48]	; 0x30
 800ba12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba14:	1c57      	adds	r7, r2, #1
 800ba16:	9715      	str	r7, [sp, #84]	; 0x54
 800ba18:	7852      	ldrb	r2, [r2, #1]
 800ba1a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ba1e:	f1be 0f09 	cmp.w	lr, #9
 800ba22:	d938      	bls.n	800ba96 <_strtod_l+0x33e>
 800ba24:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ba26:	1a7f      	subs	r7, r7, r1
 800ba28:	2f08      	cmp	r7, #8
 800ba2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ba2e:	dc03      	bgt.n	800ba38 <_strtod_l+0x2e0>
 800ba30:	9908      	ldr	r1, [sp, #32]
 800ba32:	428f      	cmp	r7, r1
 800ba34:	bfa8      	it	ge
 800ba36:	460f      	movge	r7, r1
 800ba38:	f1bc 0f00 	cmp.w	ip, #0
 800ba3c:	d000      	beq.n	800ba40 <_strtod_l+0x2e8>
 800ba3e:	427f      	negs	r7, r7
 800ba40:	2e00      	cmp	r6, #0
 800ba42:	d14f      	bne.n	800bae4 <_strtod_l+0x38c>
 800ba44:	9904      	ldr	r1, [sp, #16]
 800ba46:	4301      	orrs	r1, r0
 800ba48:	f47f aec1 	bne.w	800b7ce <_strtod_l+0x76>
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f47f aedb 	bne.w	800b808 <_strtod_l+0xb0>
 800ba52:	2a69      	cmp	r2, #105	; 0x69
 800ba54:	d029      	beq.n	800baaa <_strtod_l+0x352>
 800ba56:	dc26      	bgt.n	800baa6 <_strtod_l+0x34e>
 800ba58:	2a49      	cmp	r2, #73	; 0x49
 800ba5a:	d026      	beq.n	800baaa <_strtod_l+0x352>
 800ba5c:	2a4e      	cmp	r2, #78	; 0x4e
 800ba5e:	f47f aed3 	bne.w	800b808 <_strtod_l+0xb0>
 800ba62:	499b      	ldr	r1, [pc, #620]	; (800bcd0 <_strtod_l+0x578>)
 800ba64:	a815      	add	r0, sp, #84	; 0x54
 800ba66:	f001 fbcf 	bl	800d208 <__match>
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	f43f aecc 	beq.w	800b808 <_strtod_l+0xb0>
 800ba70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	2b28      	cmp	r3, #40	; 0x28
 800ba76:	d12f      	bne.n	800bad8 <_strtod_l+0x380>
 800ba78:	4996      	ldr	r1, [pc, #600]	; (800bcd4 <_strtod_l+0x57c>)
 800ba7a:	aa18      	add	r2, sp, #96	; 0x60
 800ba7c:	a815      	add	r0, sp, #84	; 0x54
 800ba7e:	f001 fbd7 	bl	800d230 <__hexnan>
 800ba82:	2805      	cmp	r0, #5
 800ba84:	d128      	bne.n	800bad8 <_strtod_l+0x380>
 800ba86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ba8c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ba90:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ba94:	e69b      	b.n	800b7ce <_strtod_l+0x76>
 800ba96:	9f08      	ldr	r7, [sp, #32]
 800ba98:	210a      	movs	r1, #10
 800ba9a:	fb01 2107 	mla	r1, r1, r7, r2
 800ba9e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800baa2:	9208      	str	r2, [sp, #32]
 800baa4:	e7b5      	b.n	800ba12 <_strtod_l+0x2ba>
 800baa6:	2a6e      	cmp	r2, #110	; 0x6e
 800baa8:	e7d9      	b.n	800ba5e <_strtod_l+0x306>
 800baaa:	498b      	ldr	r1, [pc, #556]	; (800bcd8 <_strtod_l+0x580>)
 800baac:	a815      	add	r0, sp, #84	; 0x54
 800baae:	f001 fbab 	bl	800d208 <__match>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	f43f aea8 	beq.w	800b808 <_strtod_l+0xb0>
 800bab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800baba:	4988      	ldr	r1, [pc, #544]	; (800bcdc <_strtod_l+0x584>)
 800babc:	3b01      	subs	r3, #1
 800babe:	a815      	add	r0, sp, #84	; 0x54
 800bac0:	9315      	str	r3, [sp, #84]	; 0x54
 800bac2:	f001 fba1 	bl	800d208 <__match>
 800bac6:	b910      	cbnz	r0, 800bace <_strtod_l+0x376>
 800bac8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800baca:	3301      	adds	r3, #1
 800bacc:	9315      	str	r3, [sp, #84]	; 0x54
 800bace:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bcec <_strtod_l+0x594>
 800bad2:	f04f 0800 	mov.w	r8, #0
 800bad6:	e67a      	b.n	800b7ce <_strtod_l+0x76>
 800bad8:	4881      	ldr	r0, [pc, #516]	; (800bce0 <_strtod_l+0x588>)
 800bada:	f001 f8b1 	bl	800cc40 <nan>
 800bade:	ec59 8b10 	vmov	r8, r9, d0
 800bae2:	e674      	b.n	800b7ce <_strtod_l+0x76>
 800bae4:	9b05      	ldr	r3, [sp, #20]
 800bae6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bae8:	1afb      	subs	r3, r7, r3
 800baea:	f1bb 0f00 	cmp.w	fp, #0
 800baee:	bf08      	it	eq
 800baf0:	46b3      	moveq	fp, r6
 800baf2:	2e10      	cmp	r6, #16
 800baf4:	9308      	str	r3, [sp, #32]
 800baf6:	4635      	mov	r5, r6
 800baf8:	bfa8      	it	ge
 800bafa:	2510      	movge	r5, #16
 800bafc:	f7f4 fd02 	bl	8000504 <__aeabi_ui2d>
 800bb00:	2e09      	cmp	r6, #9
 800bb02:	4680      	mov	r8, r0
 800bb04:	4689      	mov	r9, r1
 800bb06:	dd13      	ble.n	800bb30 <_strtod_l+0x3d8>
 800bb08:	4b76      	ldr	r3, [pc, #472]	; (800bce4 <_strtod_l+0x58c>)
 800bb0a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bb0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bb12:	f7f4 fd71 	bl	80005f8 <__aeabi_dmul>
 800bb16:	4680      	mov	r8, r0
 800bb18:	4650      	mov	r0, sl
 800bb1a:	4689      	mov	r9, r1
 800bb1c:	f7f4 fcf2 	bl	8000504 <__aeabi_ui2d>
 800bb20:	4602      	mov	r2, r0
 800bb22:	460b      	mov	r3, r1
 800bb24:	4640      	mov	r0, r8
 800bb26:	4649      	mov	r1, r9
 800bb28:	f7f4 fbb0 	bl	800028c <__adddf3>
 800bb2c:	4680      	mov	r8, r0
 800bb2e:	4689      	mov	r9, r1
 800bb30:	2e0f      	cmp	r6, #15
 800bb32:	dc38      	bgt.n	800bba6 <_strtod_l+0x44e>
 800bb34:	9b08      	ldr	r3, [sp, #32]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f43f ae49 	beq.w	800b7ce <_strtod_l+0x76>
 800bb3c:	dd24      	ble.n	800bb88 <_strtod_l+0x430>
 800bb3e:	2b16      	cmp	r3, #22
 800bb40:	dc0b      	bgt.n	800bb5a <_strtod_l+0x402>
 800bb42:	4968      	ldr	r1, [pc, #416]	; (800bce4 <_strtod_l+0x58c>)
 800bb44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb4c:	4642      	mov	r2, r8
 800bb4e:	464b      	mov	r3, r9
 800bb50:	f7f4 fd52 	bl	80005f8 <__aeabi_dmul>
 800bb54:	4680      	mov	r8, r0
 800bb56:	4689      	mov	r9, r1
 800bb58:	e639      	b.n	800b7ce <_strtod_l+0x76>
 800bb5a:	9a08      	ldr	r2, [sp, #32]
 800bb5c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800bb60:	4293      	cmp	r3, r2
 800bb62:	db20      	blt.n	800bba6 <_strtod_l+0x44e>
 800bb64:	4c5f      	ldr	r4, [pc, #380]	; (800bce4 <_strtod_l+0x58c>)
 800bb66:	f1c6 060f 	rsb	r6, r6, #15
 800bb6a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800bb6e:	4642      	mov	r2, r8
 800bb70:	464b      	mov	r3, r9
 800bb72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb76:	f7f4 fd3f 	bl	80005f8 <__aeabi_dmul>
 800bb7a:	9b08      	ldr	r3, [sp, #32]
 800bb7c:	1b9e      	subs	r6, r3, r6
 800bb7e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800bb82:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bb86:	e7e3      	b.n	800bb50 <_strtod_l+0x3f8>
 800bb88:	9b08      	ldr	r3, [sp, #32]
 800bb8a:	3316      	adds	r3, #22
 800bb8c:	db0b      	blt.n	800bba6 <_strtod_l+0x44e>
 800bb8e:	9b05      	ldr	r3, [sp, #20]
 800bb90:	1bdf      	subs	r7, r3, r7
 800bb92:	4b54      	ldr	r3, [pc, #336]	; (800bce4 <_strtod_l+0x58c>)
 800bb94:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bb98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb9c:	4640      	mov	r0, r8
 800bb9e:	4649      	mov	r1, r9
 800bba0:	f7f4 fe54 	bl	800084c <__aeabi_ddiv>
 800bba4:	e7d6      	b.n	800bb54 <_strtod_l+0x3fc>
 800bba6:	9b08      	ldr	r3, [sp, #32]
 800bba8:	1b75      	subs	r5, r6, r5
 800bbaa:	441d      	add	r5, r3
 800bbac:	2d00      	cmp	r5, #0
 800bbae:	dd70      	ble.n	800bc92 <_strtod_l+0x53a>
 800bbb0:	f015 030f 	ands.w	r3, r5, #15
 800bbb4:	d00a      	beq.n	800bbcc <_strtod_l+0x474>
 800bbb6:	494b      	ldr	r1, [pc, #300]	; (800bce4 <_strtod_l+0x58c>)
 800bbb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bbbc:	4642      	mov	r2, r8
 800bbbe:	464b      	mov	r3, r9
 800bbc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbc4:	f7f4 fd18 	bl	80005f8 <__aeabi_dmul>
 800bbc8:	4680      	mov	r8, r0
 800bbca:	4689      	mov	r9, r1
 800bbcc:	f035 050f 	bics.w	r5, r5, #15
 800bbd0:	d04d      	beq.n	800bc6e <_strtod_l+0x516>
 800bbd2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800bbd6:	dd22      	ble.n	800bc1e <_strtod_l+0x4c6>
 800bbd8:	2500      	movs	r5, #0
 800bbda:	46ab      	mov	fp, r5
 800bbdc:	9509      	str	r5, [sp, #36]	; 0x24
 800bbde:	9505      	str	r5, [sp, #20]
 800bbe0:	2322      	movs	r3, #34	; 0x22
 800bbe2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bcec <_strtod_l+0x594>
 800bbe6:	6023      	str	r3, [r4, #0]
 800bbe8:	f04f 0800 	mov.w	r8, #0
 800bbec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	f43f aded 	beq.w	800b7ce <_strtod_l+0x76>
 800bbf4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f7ff f924 	bl	800ae44 <_Bfree>
 800bbfc:	9905      	ldr	r1, [sp, #20]
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f7ff f920 	bl	800ae44 <_Bfree>
 800bc04:	4659      	mov	r1, fp
 800bc06:	4620      	mov	r0, r4
 800bc08:	f7ff f91c 	bl	800ae44 <_Bfree>
 800bc0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f7ff f918 	bl	800ae44 <_Bfree>
 800bc14:	4629      	mov	r1, r5
 800bc16:	4620      	mov	r0, r4
 800bc18:	f7ff f914 	bl	800ae44 <_Bfree>
 800bc1c:	e5d7      	b.n	800b7ce <_strtod_l+0x76>
 800bc1e:	4b32      	ldr	r3, [pc, #200]	; (800bce8 <_strtod_l+0x590>)
 800bc20:	9304      	str	r3, [sp, #16]
 800bc22:	2300      	movs	r3, #0
 800bc24:	112d      	asrs	r5, r5, #4
 800bc26:	4640      	mov	r0, r8
 800bc28:	4649      	mov	r1, r9
 800bc2a:	469a      	mov	sl, r3
 800bc2c:	2d01      	cmp	r5, #1
 800bc2e:	dc21      	bgt.n	800bc74 <_strtod_l+0x51c>
 800bc30:	b10b      	cbz	r3, 800bc36 <_strtod_l+0x4de>
 800bc32:	4680      	mov	r8, r0
 800bc34:	4689      	mov	r9, r1
 800bc36:	492c      	ldr	r1, [pc, #176]	; (800bce8 <_strtod_l+0x590>)
 800bc38:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bc3c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bc40:	4642      	mov	r2, r8
 800bc42:	464b      	mov	r3, r9
 800bc44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc48:	f7f4 fcd6 	bl	80005f8 <__aeabi_dmul>
 800bc4c:	4b27      	ldr	r3, [pc, #156]	; (800bcec <_strtod_l+0x594>)
 800bc4e:	460a      	mov	r2, r1
 800bc50:	400b      	ands	r3, r1
 800bc52:	4927      	ldr	r1, [pc, #156]	; (800bcf0 <_strtod_l+0x598>)
 800bc54:	428b      	cmp	r3, r1
 800bc56:	4680      	mov	r8, r0
 800bc58:	d8be      	bhi.n	800bbd8 <_strtod_l+0x480>
 800bc5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bc5e:	428b      	cmp	r3, r1
 800bc60:	bf86      	itte	hi
 800bc62:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bcf4 <_strtod_l+0x59c>
 800bc66:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800bc6a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bc6e:	2300      	movs	r3, #0
 800bc70:	9304      	str	r3, [sp, #16]
 800bc72:	e07b      	b.n	800bd6c <_strtod_l+0x614>
 800bc74:	07ea      	lsls	r2, r5, #31
 800bc76:	d505      	bpl.n	800bc84 <_strtod_l+0x52c>
 800bc78:	9b04      	ldr	r3, [sp, #16]
 800bc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7e:	f7f4 fcbb 	bl	80005f8 <__aeabi_dmul>
 800bc82:	2301      	movs	r3, #1
 800bc84:	9a04      	ldr	r2, [sp, #16]
 800bc86:	3208      	adds	r2, #8
 800bc88:	f10a 0a01 	add.w	sl, sl, #1
 800bc8c:	106d      	asrs	r5, r5, #1
 800bc8e:	9204      	str	r2, [sp, #16]
 800bc90:	e7cc      	b.n	800bc2c <_strtod_l+0x4d4>
 800bc92:	d0ec      	beq.n	800bc6e <_strtod_l+0x516>
 800bc94:	426d      	negs	r5, r5
 800bc96:	f015 020f 	ands.w	r2, r5, #15
 800bc9a:	d00a      	beq.n	800bcb2 <_strtod_l+0x55a>
 800bc9c:	4b11      	ldr	r3, [pc, #68]	; (800bce4 <_strtod_l+0x58c>)
 800bc9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bca2:	4640      	mov	r0, r8
 800bca4:	4649      	mov	r1, r9
 800bca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcaa:	f7f4 fdcf 	bl	800084c <__aeabi_ddiv>
 800bcae:	4680      	mov	r8, r0
 800bcb0:	4689      	mov	r9, r1
 800bcb2:	112d      	asrs	r5, r5, #4
 800bcb4:	d0db      	beq.n	800bc6e <_strtod_l+0x516>
 800bcb6:	2d1f      	cmp	r5, #31
 800bcb8:	dd1e      	ble.n	800bcf8 <_strtod_l+0x5a0>
 800bcba:	2500      	movs	r5, #0
 800bcbc:	46ab      	mov	fp, r5
 800bcbe:	9509      	str	r5, [sp, #36]	; 0x24
 800bcc0:	9505      	str	r5, [sp, #20]
 800bcc2:	2322      	movs	r3, #34	; 0x22
 800bcc4:	f04f 0800 	mov.w	r8, #0
 800bcc8:	f04f 0900 	mov.w	r9, #0
 800bccc:	6023      	str	r3, [r4, #0]
 800bcce:	e78d      	b.n	800bbec <_strtod_l+0x494>
 800bcd0:	0800d771 	.word	0x0800d771
 800bcd4:	0800d99c 	.word	0x0800d99c
 800bcd8:	0800d769 	.word	0x0800d769
 800bcdc:	0800d7a0 	.word	0x0800d7a0
 800bce0:	0800db2d 	.word	0x0800db2d
 800bce4:	0800d8b0 	.word	0x0800d8b0
 800bce8:	0800d888 	.word	0x0800d888
 800bcec:	7ff00000 	.word	0x7ff00000
 800bcf0:	7ca00000 	.word	0x7ca00000
 800bcf4:	7fefffff 	.word	0x7fefffff
 800bcf8:	f015 0310 	ands.w	r3, r5, #16
 800bcfc:	bf18      	it	ne
 800bcfe:	236a      	movne	r3, #106	; 0x6a
 800bd00:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c0a4 <_strtod_l+0x94c>
 800bd04:	9304      	str	r3, [sp, #16]
 800bd06:	4640      	mov	r0, r8
 800bd08:	4649      	mov	r1, r9
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	07ea      	lsls	r2, r5, #31
 800bd0e:	d504      	bpl.n	800bd1a <_strtod_l+0x5c2>
 800bd10:	e9da 2300 	ldrd	r2, r3, [sl]
 800bd14:	f7f4 fc70 	bl	80005f8 <__aeabi_dmul>
 800bd18:	2301      	movs	r3, #1
 800bd1a:	106d      	asrs	r5, r5, #1
 800bd1c:	f10a 0a08 	add.w	sl, sl, #8
 800bd20:	d1f4      	bne.n	800bd0c <_strtod_l+0x5b4>
 800bd22:	b10b      	cbz	r3, 800bd28 <_strtod_l+0x5d0>
 800bd24:	4680      	mov	r8, r0
 800bd26:	4689      	mov	r9, r1
 800bd28:	9b04      	ldr	r3, [sp, #16]
 800bd2a:	b1bb      	cbz	r3, 800bd5c <_strtod_l+0x604>
 800bd2c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bd30:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	4649      	mov	r1, r9
 800bd38:	dd10      	ble.n	800bd5c <_strtod_l+0x604>
 800bd3a:	2b1f      	cmp	r3, #31
 800bd3c:	f340 811e 	ble.w	800bf7c <_strtod_l+0x824>
 800bd40:	2b34      	cmp	r3, #52	; 0x34
 800bd42:	bfde      	ittt	le
 800bd44:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800bd48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bd4c:	4093      	lslle	r3, r2
 800bd4e:	f04f 0800 	mov.w	r8, #0
 800bd52:	bfcc      	ite	gt
 800bd54:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bd58:	ea03 0901 	andle.w	r9, r3, r1
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	2300      	movs	r3, #0
 800bd60:	4640      	mov	r0, r8
 800bd62:	4649      	mov	r1, r9
 800bd64:	f7f4 feb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d1a6      	bne.n	800bcba <_strtod_l+0x562>
 800bd6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd72:	4633      	mov	r3, r6
 800bd74:	465a      	mov	r2, fp
 800bd76:	4620      	mov	r0, r4
 800bd78:	f7ff f8cc 	bl	800af14 <__s2b>
 800bd7c:	9009      	str	r0, [sp, #36]	; 0x24
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	f43f af2a 	beq.w	800bbd8 <_strtod_l+0x480>
 800bd84:	9a08      	ldr	r2, [sp, #32]
 800bd86:	9b05      	ldr	r3, [sp, #20]
 800bd88:	2a00      	cmp	r2, #0
 800bd8a:	eba3 0307 	sub.w	r3, r3, r7
 800bd8e:	bfa8      	it	ge
 800bd90:	2300      	movge	r3, #0
 800bd92:	930c      	str	r3, [sp, #48]	; 0x30
 800bd94:	2500      	movs	r5, #0
 800bd96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bd9a:	9312      	str	r3, [sp, #72]	; 0x48
 800bd9c:	46ab      	mov	fp, r5
 800bd9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bda0:	4620      	mov	r0, r4
 800bda2:	6859      	ldr	r1, [r3, #4]
 800bda4:	f7ff f80e 	bl	800adc4 <_Balloc>
 800bda8:	9005      	str	r0, [sp, #20]
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	f43f af18 	beq.w	800bbe0 <_strtod_l+0x488>
 800bdb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb2:	691a      	ldr	r2, [r3, #16]
 800bdb4:	3202      	adds	r2, #2
 800bdb6:	f103 010c 	add.w	r1, r3, #12
 800bdba:	0092      	lsls	r2, r2, #2
 800bdbc:	300c      	adds	r0, #12
 800bdbe:	f7fe f924 	bl	800a00a <memcpy>
 800bdc2:	ec49 8b10 	vmov	d0, r8, r9
 800bdc6:	aa18      	add	r2, sp, #96	; 0x60
 800bdc8:	a917      	add	r1, sp, #92	; 0x5c
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f7ff fbd6 	bl	800b57c <__d2b>
 800bdd0:	ec49 8b18 	vmov	d8, r8, r9
 800bdd4:	9016      	str	r0, [sp, #88]	; 0x58
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	f43f af02 	beq.w	800bbe0 <_strtod_l+0x488>
 800bddc:	2101      	movs	r1, #1
 800bdde:	4620      	mov	r0, r4
 800bde0:	f7ff f930 	bl	800b044 <__i2b>
 800bde4:	4683      	mov	fp, r0
 800bde6:	2800      	cmp	r0, #0
 800bde8:	f43f aefa 	beq.w	800bbe0 <_strtod_l+0x488>
 800bdec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bdee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bdf0:	2e00      	cmp	r6, #0
 800bdf2:	bfab      	itete	ge
 800bdf4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800bdf6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800bdf8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bdfa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800bdfe:	bfac      	ite	ge
 800be00:	eb06 0a03 	addge.w	sl, r6, r3
 800be04:	1b9f      	sublt	r7, r3, r6
 800be06:	9b04      	ldr	r3, [sp, #16]
 800be08:	1af6      	subs	r6, r6, r3
 800be0a:	4416      	add	r6, r2
 800be0c:	4ba0      	ldr	r3, [pc, #640]	; (800c090 <_strtod_l+0x938>)
 800be0e:	3e01      	subs	r6, #1
 800be10:	429e      	cmp	r6, r3
 800be12:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800be16:	f280 80c4 	bge.w	800bfa2 <_strtod_l+0x84a>
 800be1a:	1b9b      	subs	r3, r3, r6
 800be1c:	2b1f      	cmp	r3, #31
 800be1e:	eba2 0203 	sub.w	r2, r2, r3
 800be22:	f04f 0101 	mov.w	r1, #1
 800be26:	f300 80b0 	bgt.w	800bf8a <_strtod_l+0x832>
 800be2a:	fa01 f303 	lsl.w	r3, r1, r3
 800be2e:	930e      	str	r3, [sp, #56]	; 0x38
 800be30:	2300      	movs	r3, #0
 800be32:	930d      	str	r3, [sp, #52]	; 0x34
 800be34:	eb0a 0602 	add.w	r6, sl, r2
 800be38:	9b04      	ldr	r3, [sp, #16]
 800be3a:	45b2      	cmp	sl, r6
 800be3c:	4417      	add	r7, r2
 800be3e:	441f      	add	r7, r3
 800be40:	4653      	mov	r3, sl
 800be42:	bfa8      	it	ge
 800be44:	4633      	movge	r3, r6
 800be46:	42bb      	cmp	r3, r7
 800be48:	bfa8      	it	ge
 800be4a:	463b      	movge	r3, r7
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	bfc2      	ittt	gt
 800be50:	1af6      	subgt	r6, r6, r3
 800be52:	1aff      	subgt	r7, r7, r3
 800be54:	ebaa 0a03 	subgt.w	sl, sl, r3
 800be58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	dd17      	ble.n	800be8e <_strtod_l+0x736>
 800be5e:	4659      	mov	r1, fp
 800be60:	461a      	mov	r2, r3
 800be62:	4620      	mov	r0, r4
 800be64:	f7ff f9ae 	bl	800b1c4 <__pow5mult>
 800be68:	4683      	mov	fp, r0
 800be6a:	2800      	cmp	r0, #0
 800be6c:	f43f aeb8 	beq.w	800bbe0 <_strtod_l+0x488>
 800be70:	4601      	mov	r1, r0
 800be72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800be74:	4620      	mov	r0, r4
 800be76:	f7ff f8fb 	bl	800b070 <__multiply>
 800be7a:	900b      	str	r0, [sp, #44]	; 0x2c
 800be7c:	2800      	cmp	r0, #0
 800be7e:	f43f aeaf 	beq.w	800bbe0 <_strtod_l+0x488>
 800be82:	9916      	ldr	r1, [sp, #88]	; 0x58
 800be84:	4620      	mov	r0, r4
 800be86:	f7fe ffdd 	bl	800ae44 <_Bfree>
 800be8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be8c:	9316      	str	r3, [sp, #88]	; 0x58
 800be8e:	2e00      	cmp	r6, #0
 800be90:	f300 808c 	bgt.w	800bfac <_strtod_l+0x854>
 800be94:	9b08      	ldr	r3, [sp, #32]
 800be96:	2b00      	cmp	r3, #0
 800be98:	dd08      	ble.n	800beac <_strtod_l+0x754>
 800be9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be9c:	9905      	ldr	r1, [sp, #20]
 800be9e:	4620      	mov	r0, r4
 800bea0:	f7ff f990 	bl	800b1c4 <__pow5mult>
 800bea4:	9005      	str	r0, [sp, #20]
 800bea6:	2800      	cmp	r0, #0
 800bea8:	f43f ae9a 	beq.w	800bbe0 <_strtod_l+0x488>
 800beac:	2f00      	cmp	r7, #0
 800beae:	dd08      	ble.n	800bec2 <_strtod_l+0x76a>
 800beb0:	9905      	ldr	r1, [sp, #20]
 800beb2:	463a      	mov	r2, r7
 800beb4:	4620      	mov	r0, r4
 800beb6:	f7ff f9df 	bl	800b278 <__lshift>
 800beba:	9005      	str	r0, [sp, #20]
 800bebc:	2800      	cmp	r0, #0
 800bebe:	f43f ae8f 	beq.w	800bbe0 <_strtod_l+0x488>
 800bec2:	f1ba 0f00 	cmp.w	sl, #0
 800bec6:	dd08      	ble.n	800beda <_strtod_l+0x782>
 800bec8:	4659      	mov	r1, fp
 800beca:	4652      	mov	r2, sl
 800becc:	4620      	mov	r0, r4
 800bece:	f7ff f9d3 	bl	800b278 <__lshift>
 800bed2:	4683      	mov	fp, r0
 800bed4:	2800      	cmp	r0, #0
 800bed6:	f43f ae83 	beq.w	800bbe0 <_strtod_l+0x488>
 800beda:	9a05      	ldr	r2, [sp, #20]
 800bedc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bede:	4620      	mov	r0, r4
 800bee0:	f7ff fa52 	bl	800b388 <__mdiff>
 800bee4:	4605      	mov	r5, r0
 800bee6:	2800      	cmp	r0, #0
 800bee8:	f43f ae7a 	beq.w	800bbe0 <_strtod_l+0x488>
 800beec:	68c3      	ldr	r3, [r0, #12]
 800beee:	930b      	str	r3, [sp, #44]	; 0x2c
 800bef0:	2300      	movs	r3, #0
 800bef2:	60c3      	str	r3, [r0, #12]
 800bef4:	4659      	mov	r1, fp
 800bef6:	f7ff fa2b 	bl	800b350 <__mcmp>
 800befa:	2800      	cmp	r0, #0
 800befc:	da60      	bge.n	800bfc0 <_strtod_l+0x868>
 800befe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf00:	ea53 0308 	orrs.w	r3, r3, r8
 800bf04:	f040 8084 	bne.w	800c010 <_strtod_l+0x8b8>
 800bf08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d17f      	bne.n	800c010 <_strtod_l+0x8b8>
 800bf10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf14:	0d1b      	lsrs	r3, r3, #20
 800bf16:	051b      	lsls	r3, r3, #20
 800bf18:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bf1c:	d978      	bls.n	800c010 <_strtod_l+0x8b8>
 800bf1e:	696b      	ldr	r3, [r5, #20]
 800bf20:	b913      	cbnz	r3, 800bf28 <_strtod_l+0x7d0>
 800bf22:	692b      	ldr	r3, [r5, #16]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	dd73      	ble.n	800c010 <_strtod_l+0x8b8>
 800bf28:	4629      	mov	r1, r5
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f7ff f9a3 	bl	800b278 <__lshift>
 800bf32:	4659      	mov	r1, fp
 800bf34:	4605      	mov	r5, r0
 800bf36:	f7ff fa0b 	bl	800b350 <__mcmp>
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	dd68      	ble.n	800c010 <_strtod_l+0x8b8>
 800bf3e:	9904      	ldr	r1, [sp, #16]
 800bf40:	4a54      	ldr	r2, [pc, #336]	; (800c094 <_strtod_l+0x93c>)
 800bf42:	464b      	mov	r3, r9
 800bf44:	2900      	cmp	r1, #0
 800bf46:	f000 8084 	beq.w	800c052 <_strtod_l+0x8fa>
 800bf4a:	ea02 0109 	and.w	r1, r2, r9
 800bf4e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bf52:	dc7e      	bgt.n	800c052 <_strtod_l+0x8fa>
 800bf54:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bf58:	f77f aeb3 	ble.w	800bcc2 <_strtod_l+0x56a>
 800bf5c:	4b4e      	ldr	r3, [pc, #312]	; (800c098 <_strtod_l+0x940>)
 800bf5e:	4640      	mov	r0, r8
 800bf60:	4649      	mov	r1, r9
 800bf62:	2200      	movs	r2, #0
 800bf64:	f7f4 fb48 	bl	80005f8 <__aeabi_dmul>
 800bf68:	4b4a      	ldr	r3, [pc, #296]	; (800c094 <_strtod_l+0x93c>)
 800bf6a:	400b      	ands	r3, r1
 800bf6c:	4680      	mov	r8, r0
 800bf6e:	4689      	mov	r9, r1
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f47f ae3f 	bne.w	800bbf4 <_strtod_l+0x49c>
 800bf76:	2322      	movs	r3, #34	; 0x22
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	e63b      	b.n	800bbf4 <_strtod_l+0x49c>
 800bf7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf80:	fa02 f303 	lsl.w	r3, r2, r3
 800bf84:	ea03 0808 	and.w	r8, r3, r8
 800bf88:	e6e8      	b.n	800bd5c <_strtod_l+0x604>
 800bf8a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bf8e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800bf92:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800bf96:	36e2      	adds	r6, #226	; 0xe2
 800bf98:	fa01 f306 	lsl.w	r3, r1, r6
 800bf9c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800bfa0:	e748      	b.n	800be34 <_strtod_l+0x6dc>
 800bfa2:	2100      	movs	r1, #0
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800bfaa:	e743      	b.n	800be34 <_strtod_l+0x6dc>
 800bfac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bfae:	4632      	mov	r2, r6
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	f7ff f961 	bl	800b278 <__lshift>
 800bfb6:	9016      	str	r0, [sp, #88]	; 0x58
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	f47f af6b 	bne.w	800be94 <_strtod_l+0x73c>
 800bfbe:	e60f      	b.n	800bbe0 <_strtod_l+0x488>
 800bfc0:	46ca      	mov	sl, r9
 800bfc2:	d171      	bne.n	800c0a8 <_strtod_l+0x950>
 800bfc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bfc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfca:	b352      	cbz	r2, 800c022 <_strtod_l+0x8ca>
 800bfcc:	4a33      	ldr	r2, [pc, #204]	; (800c09c <_strtod_l+0x944>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d12a      	bne.n	800c028 <_strtod_l+0x8d0>
 800bfd2:	9b04      	ldr	r3, [sp, #16]
 800bfd4:	4641      	mov	r1, r8
 800bfd6:	b1fb      	cbz	r3, 800c018 <_strtod_l+0x8c0>
 800bfd8:	4b2e      	ldr	r3, [pc, #184]	; (800c094 <_strtod_l+0x93c>)
 800bfda:	ea09 0303 	and.w	r3, r9, r3
 800bfde:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bfe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfe6:	d81a      	bhi.n	800c01e <_strtod_l+0x8c6>
 800bfe8:	0d1b      	lsrs	r3, r3, #20
 800bfea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bfee:	fa02 f303 	lsl.w	r3, r2, r3
 800bff2:	4299      	cmp	r1, r3
 800bff4:	d118      	bne.n	800c028 <_strtod_l+0x8d0>
 800bff6:	4b2a      	ldr	r3, [pc, #168]	; (800c0a0 <_strtod_l+0x948>)
 800bff8:	459a      	cmp	sl, r3
 800bffa:	d102      	bne.n	800c002 <_strtod_l+0x8aa>
 800bffc:	3101      	adds	r1, #1
 800bffe:	f43f adef 	beq.w	800bbe0 <_strtod_l+0x488>
 800c002:	4b24      	ldr	r3, [pc, #144]	; (800c094 <_strtod_l+0x93c>)
 800c004:	ea0a 0303 	and.w	r3, sl, r3
 800c008:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c00c:	f04f 0800 	mov.w	r8, #0
 800c010:	9b04      	ldr	r3, [sp, #16]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1a2      	bne.n	800bf5c <_strtod_l+0x804>
 800c016:	e5ed      	b.n	800bbf4 <_strtod_l+0x49c>
 800c018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c01c:	e7e9      	b.n	800bff2 <_strtod_l+0x89a>
 800c01e:	4613      	mov	r3, r2
 800c020:	e7e7      	b.n	800bff2 <_strtod_l+0x89a>
 800c022:	ea53 0308 	orrs.w	r3, r3, r8
 800c026:	d08a      	beq.n	800bf3e <_strtod_l+0x7e6>
 800c028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c02a:	b1e3      	cbz	r3, 800c066 <_strtod_l+0x90e>
 800c02c:	ea13 0f0a 	tst.w	r3, sl
 800c030:	d0ee      	beq.n	800c010 <_strtod_l+0x8b8>
 800c032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c034:	9a04      	ldr	r2, [sp, #16]
 800c036:	4640      	mov	r0, r8
 800c038:	4649      	mov	r1, r9
 800c03a:	b1c3      	cbz	r3, 800c06e <_strtod_l+0x916>
 800c03c:	f7ff fb6f 	bl	800b71e <sulp>
 800c040:	4602      	mov	r2, r0
 800c042:	460b      	mov	r3, r1
 800c044:	ec51 0b18 	vmov	r0, r1, d8
 800c048:	f7f4 f920 	bl	800028c <__adddf3>
 800c04c:	4680      	mov	r8, r0
 800c04e:	4689      	mov	r9, r1
 800c050:	e7de      	b.n	800c010 <_strtod_l+0x8b8>
 800c052:	4013      	ands	r3, r2
 800c054:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c058:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c05c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c060:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c064:	e7d4      	b.n	800c010 <_strtod_l+0x8b8>
 800c066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c068:	ea13 0f08 	tst.w	r3, r8
 800c06c:	e7e0      	b.n	800c030 <_strtod_l+0x8d8>
 800c06e:	f7ff fb56 	bl	800b71e <sulp>
 800c072:	4602      	mov	r2, r0
 800c074:	460b      	mov	r3, r1
 800c076:	ec51 0b18 	vmov	r0, r1, d8
 800c07a:	f7f4 f905 	bl	8000288 <__aeabi_dsub>
 800c07e:	2200      	movs	r2, #0
 800c080:	2300      	movs	r3, #0
 800c082:	4680      	mov	r8, r0
 800c084:	4689      	mov	r9, r1
 800c086:	f7f4 fd1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c08a:	2800      	cmp	r0, #0
 800c08c:	d0c0      	beq.n	800c010 <_strtod_l+0x8b8>
 800c08e:	e618      	b.n	800bcc2 <_strtod_l+0x56a>
 800c090:	fffffc02 	.word	0xfffffc02
 800c094:	7ff00000 	.word	0x7ff00000
 800c098:	39500000 	.word	0x39500000
 800c09c:	000fffff 	.word	0x000fffff
 800c0a0:	7fefffff 	.word	0x7fefffff
 800c0a4:	0800d9b0 	.word	0x0800d9b0
 800c0a8:	4659      	mov	r1, fp
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	f7ff fac0 	bl	800b630 <__ratio>
 800c0b0:	ec57 6b10 	vmov	r6, r7, d0
 800c0b4:	ee10 0a10 	vmov	r0, s0
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0be:	4639      	mov	r1, r7
 800c0c0:	f7f4 fd16 	bl	8000af0 <__aeabi_dcmple>
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	d071      	beq.n	800c1ac <_strtod_l+0xa54>
 800c0c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d17c      	bne.n	800c1c8 <_strtod_l+0xa70>
 800c0ce:	f1b8 0f00 	cmp.w	r8, #0
 800c0d2:	d15a      	bne.n	800c18a <_strtod_l+0xa32>
 800c0d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d15d      	bne.n	800c198 <_strtod_l+0xa40>
 800c0dc:	4b90      	ldr	r3, [pc, #576]	; (800c320 <_strtod_l+0xbc8>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	4639      	mov	r1, r7
 800c0e4:	f7f4 fcfa 	bl	8000adc <__aeabi_dcmplt>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d15c      	bne.n	800c1a6 <_strtod_l+0xa4e>
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	4639      	mov	r1, r7
 800c0f0:	4b8c      	ldr	r3, [pc, #560]	; (800c324 <_strtod_l+0xbcc>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f7f4 fa80 	bl	80005f8 <__aeabi_dmul>
 800c0f8:	4606      	mov	r6, r0
 800c0fa:	460f      	mov	r7, r1
 800c0fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c100:	9606      	str	r6, [sp, #24]
 800c102:	9307      	str	r3, [sp, #28]
 800c104:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c108:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c10c:	4b86      	ldr	r3, [pc, #536]	; (800c328 <_strtod_l+0xbd0>)
 800c10e:	ea0a 0303 	and.w	r3, sl, r3
 800c112:	930d      	str	r3, [sp, #52]	; 0x34
 800c114:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c116:	4b85      	ldr	r3, [pc, #532]	; (800c32c <_strtod_l+0xbd4>)
 800c118:	429a      	cmp	r2, r3
 800c11a:	f040 8090 	bne.w	800c23e <_strtod_l+0xae6>
 800c11e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c122:	ec49 8b10 	vmov	d0, r8, r9
 800c126:	f7ff f9b9 	bl	800b49c <__ulp>
 800c12a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c12e:	ec51 0b10 	vmov	r0, r1, d0
 800c132:	f7f4 fa61 	bl	80005f8 <__aeabi_dmul>
 800c136:	4642      	mov	r2, r8
 800c138:	464b      	mov	r3, r9
 800c13a:	f7f4 f8a7 	bl	800028c <__adddf3>
 800c13e:	460b      	mov	r3, r1
 800c140:	4979      	ldr	r1, [pc, #484]	; (800c328 <_strtod_l+0xbd0>)
 800c142:	4a7b      	ldr	r2, [pc, #492]	; (800c330 <_strtod_l+0xbd8>)
 800c144:	4019      	ands	r1, r3
 800c146:	4291      	cmp	r1, r2
 800c148:	4680      	mov	r8, r0
 800c14a:	d944      	bls.n	800c1d6 <_strtod_l+0xa7e>
 800c14c:	ee18 2a90 	vmov	r2, s17
 800c150:	4b78      	ldr	r3, [pc, #480]	; (800c334 <_strtod_l+0xbdc>)
 800c152:	429a      	cmp	r2, r3
 800c154:	d104      	bne.n	800c160 <_strtod_l+0xa08>
 800c156:	ee18 3a10 	vmov	r3, s16
 800c15a:	3301      	adds	r3, #1
 800c15c:	f43f ad40 	beq.w	800bbe0 <_strtod_l+0x488>
 800c160:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c334 <_strtod_l+0xbdc>
 800c164:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c168:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c16a:	4620      	mov	r0, r4
 800c16c:	f7fe fe6a 	bl	800ae44 <_Bfree>
 800c170:	9905      	ldr	r1, [sp, #20]
 800c172:	4620      	mov	r0, r4
 800c174:	f7fe fe66 	bl	800ae44 <_Bfree>
 800c178:	4659      	mov	r1, fp
 800c17a:	4620      	mov	r0, r4
 800c17c:	f7fe fe62 	bl	800ae44 <_Bfree>
 800c180:	4629      	mov	r1, r5
 800c182:	4620      	mov	r0, r4
 800c184:	f7fe fe5e 	bl	800ae44 <_Bfree>
 800c188:	e609      	b.n	800bd9e <_strtod_l+0x646>
 800c18a:	f1b8 0f01 	cmp.w	r8, #1
 800c18e:	d103      	bne.n	800c198 <_strtod_l+0xa40>
 800c190:	f1b9 0f00 	cmp.w	r9, #0
 800c194:	f43f ad95 	beq.w	800bcc2 <_strtod_l+0x56a>
 800c198:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c2f0 <_strtod_l+0xb98>
 800c19c:	4f60      	ldr	r7, [pc, #384]	; (800c320 <_strtod_l+0xbc8>)
 800c19e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1a2:	2600      	movs	r6, #0
 800c1a4:	e7ae      	b.n	800c104 <_strtod_l+0x9ac>
 800c1a6:	4f5f      	ldr	r7, [pc, #380]	; (800c324 <_strtod_l+0xbcc>)
 800c1a8:	2600      	movs	r6, #0
 800c1aa:	e7a7      	b.n	800c0fc <_strtod_l+0x9a4>
 800c1ac:	4b5d      	ldr	r3, [pc, #372]	; (800c324 <_strtod_l+0xbcc>)
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	4639      	mov	r1, r7
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f7f4 fa20 	bl	80005f8 <__aeabi_dmul>
 800c1b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	460f      	mov	r7, r1
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d09c      	beq.n	800c0fc <_strtod_l+0x9a4>
 800c1c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c1c6:	e79d      	b.n	800c104 <_strtod_l+0x9ac>
 800c1c8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c2f8 <_strtod_l+0xba0>
 800c1cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1d0:	ec57 6b17 	vmov	r6, r7, d7
 800c1d4:	e796      	b.n	800c104 <_strtod_l+0x9ac>
 800c1d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c1da:	9b04      	ldr	r3, [sp, #16]
 800c1dc:	46ca      	mov	sl, r9
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1c2      	bne.n	800c168 <_strtod_l+0xa10>
 800c1e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c1e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1e8:	0d1b      	lsrs	r3, r3, #20
 800c1ea:	051b      	lsls	r3, r3, #20
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d1bb      	bne.n	800c168 <_strtod_l+0xa10>
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	4639      	mov	r1, r7
 800c1f4:	f7f4 fd60 	bl	8000cb8 <__aeabi_d2lz>
 800c1f8:	f7f4 f9d0 	bl	800059c <__aeabi_l2d>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	460b      	mov	r3, r1
 800c200:	4630      	mov	r0, r6
 800c202:	4639      	mov	r1, r7
 800c204:	f7f4 f840 	bl	8000288 <__aeabi_dsub>
 800c208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c20a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c20e:	ea43 0308 	orr.w	r3, r3, r8
 800c212:	4313      	orrs	r3, r2
 800c214:	4606      	mov	r6, r0
 800c216:	460f      	mov	r7, r1
 800c218:	d054      	beq.n	800c2c4 <_strtod_l+0xb6c>
 800c21a:	a339      	add	r3, pc, #228	; (adr r3, 800c300 <_strtod_l+0xba8>)
 800c21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c220:	f7f4 fc5c 	bl	8000adc <__aeabi_dcmplt>
 800c224:	2800      	cmp	r0, #0
 800c226:	f47f ace5 	bne.w	800bbf4 <_strtod_l+0x49c>
 800c22a:	a337      	add	r3, pc, #220	; (adr r3, 800c308 <_strtod_l+0xbb0>)
 800c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c230:	4630      	mov	r0, r6
 800c232:	4639      	mov	r1, r7
 800c234:	f7f4 fc70 	bl	8000b18 <__aeabi_dcmpgt>
 800c238:	2800      	cmp	r0, #0
 800c23a:	d095      	beq.n	800c168 <_strtod_l+0xa10>
 800c23c:	e4da      	b.n	800bbf4 <_strtod_l+0x49c>
 800c23e:	9b04      	ldr	r3, [sp, #16]
 800c240:	b333      	cbz	r3, 800c290 <_strtod_l+0xb38>
 800c242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c244:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c248:	d822      	bhi.n	800c290 <_strtod_l+0xb38>
 800c24a:	a331      	add	r3, pc, #196	; (adr r3, 800c310 <_strtod_l+0xbb8>)
 800c24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c250:	4630      	mov	r0, r6
 800c252:	4639      	mov	r1, r7
 800c254:	f7f4 fc4c 	bl	8000af0 <__aeabi_dcmple>
 800c258:	b1a0      	cbz	r0, 800c284 <_strtod_l+0xb2c>
 800c25a:	4639      	mov	r1, r7
 800c25c:	4630      	mov	r0, r6
 800c25e:	f7f4 fca3 	bl	8000ba8 <__aeabi_d2uiz>
 800c262:	2801      	cmp	r0, #1
 800c264:	bf38      	it	cc
 800c266:	2001      	movcc	r0, #1
 800c268:	f7f4 f94c 	bl	8000504 <__aeabi_ui2d>
 800c26c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c26e:	4606      	mov	r6, r0
 800c270:	460f      	mov	r7, r1
 800c272:	bb23      	cbnz	r3, 800c2be <_strtod_l+0xb66>
 800c274:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c278:	9010      	str	r0, [sp, #64]	; 0x40
 800c27a:	9311      	str	r3, [sp, #68]	; 0x44
 800c27c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c280:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c288:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c28c:	1a9b      	subs	r3, r3, r2
 800c28e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c290:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c294:	eeb0 0a48 	vmov.f32	s0, s16
 800c298:	eef0 0a68 	vmov.f32	s1, s17
 800c29c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c2a0:	f7ff f8fc 	bl	800b49c <__ulp>
 800c2a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c2a8:	ec53 2b10 	vmov	r2, r3, d0
 800c2ac:	f7f4 f9a4 	bl	80005f8 <__aeabi_dmul>
 800c2b0:	ec53 2b18 	vmov	r2, r3, d8
 800c2b4:	f7f3 ffea 	bl	800028c <__adddf3>
 800c2b8:	4680      	mov	r8, r0
 800c2ba:	4689      	mov	r9, r1
 800c2bc:	e78d      	b.n	800c1da <_strtod_l+0xa82>
 800c2be:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c2c2:	e7db      	b.n	800c27c <_strtod_l+0xb24>
 800c2c4:	a314      	add	r3, pc, #80	; (adr r3, 800c318 <_strtod_l+0xbc0>)
 800c2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ca:	f7f4 fc07 	bl	8000adc <__aeabi_dcmplt>
 800c2ce:	e7b3      	b.n	800c238 <_strtod_l+0xae0>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	930a      	str	r3, [sp, #40]	; 0x28
 800c2d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c2d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2d8:	6013      	str	r3, [r2, #0]
 800c2da:	f7ff ba7c 	b.w	800b7d6 <_strtod_l+0x7e>
 800c2de:	2a65      	cmp	r2, #101	; 0x65
 800c2e0:	f43f ab75 	beq.w	800b9ce <_strtod_l+0x276>
 800c2e4:	2a45      	cmp	r2, #69	; 0x45
 800c2e6:	f43f ab72 	beq.w	800b9ce <_strtod_l+0x276>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	f7ff bbaa 	b.w	800ba44 <_strtod_l+0x2ec>
 800c2f0:	00000000 	.word	0x00000000
 800c2f4:	bff00000 	.word	0xbff00000
 800c2f8:	00000000 	.word	0x00000000
 800c2fc:	3ff00000 	.word	0x3ff00000
 800c300:	94a03595 	.word	0x94a03595
 800c304:	3fdfffff 	.word	0x3fdfffff
 800c308:	35afe535 	.word	0x35afe535
 800c30c:	3fe00000 	.word	0x3fe00000
 800c310:	ffc00000 	.word	0xffc00000
 800c314:	41dfffff 	.word	0x41dfffff
 800c318:	94a03595 	.word	0x94a03595
 800c31c:	3fcfffff 	.word	0x3fcfffff
 800c320:	3ff00000 	.word	0x3ff00000
 800c324:	3fe00000 	.word	0x3fe00000
 800c328:	7ff00000 	.word	0x7ff00000
 800c32c:	7fe00000 	.word	0x7fe00000
 800c330:	7c9fffff 	.word	0x7c9fffff
 800c334:	7fefffff 	.word	0x7fefffff

0800c338 <_strtod_r>:
 800c338:	4b01      	ldr	r3, [pc, #4]	; (800c340 <_strtod_r+0x8>)
 800c33a:	f7ff ba0d 	b.w	800b758 <_strtod_l>
 800c33e:	bf00      	nop
 800c340:	20000070 	.word	0x20000070

0800c344 <_strtol_l.constprop.0>:
 800c344:	2b01      	cmp	r3, #1
 800c346:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c34a:	d001      	beq.n	800c350 <_strtol_l.constprop.0+0xc>
 800c34c:	2b24      	cmp	r3, #36	; 0x24
 800c34e:	d906      	bls.n	800c35e <_strtol_l.constprop.0+0x1a>
 800c350:	f7fd fe2e 	bl	8009fb0 <__errno>
 800c354:	2316      	movs	r3, #22
 800c356:	6003      	str	r3, [r0, #0]
 800c358:	2000      	movs	r0, #0
 800c35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c35e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c444 <_strtol_l.constprop.0+0x100>
 800c362:	460d      	mov	r5, r1
 800c364:	462e      	mov	r6, r5
 800c366:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c36a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c36e:	f017 0708 	ands.w	r7, r7, #8
 800c372:	d1f7      	bne.n	800c364 <_strtol_l.constprop.0+0x20>
 800c374:	2c2d      	cmp	r4, #45	; 0x2d
 800c376:	d132      	bne.n	800c3de <_strtol_l.constprop.0+0x9a>
 800c378:	782c      	ldrb	r4, [r5, #0]
 800c37a:	2701      	movs	r7, #1
 800c37c:	1cb5      	adds	r5, r6, #2
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d05b      	beq.n	800c43a <_strtol_l.constprop.0+0xf6>
 800c382:	2b10      	cmp	r3, #16
 800c384:	d109      	bne.n	800c39a <_strtol_l.constprop.0+0x56>
 800c386:	2c30      	cmp	r4, #48	; 0x30
 800c388:	d107      	bne.n	800c39a <_strtol_l.constprop.0+0x56>
 800c38a:	782c      	ldrb	r4, [r5, #0]
 800c38c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c390:	2c58      	cmp	r4, #88	; 0x58
 800c392:	d14d      	bne.n	800c430 <_strtol_l.constprop.0+0xec>
 800c394:	786c      	ldrb	r4, [r5, #1]
 800c396:	2310      	movs	r3, #16
 800c398:	3502      	adds	r5, #2
 800c39a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c39e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c3a2:	f04f 0e00 	mov.w	lr, #0
 800c3a6:	fbb8 f9f3 	udiv	r9, r8, r3
 800c3aa:	4676      	mov	r6, lr
 800c3ac:	fb03 8a19 	mls	sl, r3, r9, r8
 800c3b0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c3b4:	f1bc 0f09 	cmp.w	ip, #9
 800c3b8:	d816      	bhi.n	800c3e8 <_strtol_l.constprop.0+0xa4>
 800c3ba:	4664      	mov	r4, ip
 800c3bc:	42a3      	cmp	r3, r4
 800c3be:	dd24      	ble.n	800c40a <_strtol_l.constprop.0+0xc6>
 800c3c0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800c3c4:	d008      	beq.n	800c3d8 <_strtol_l.constprop.0+0x94>
 800c3c6:	45b1      	cmp	r9, r6
 800c3c8:	d31c      	bcc.n	800c404 <_strtol_l.constprop.0+0xc0>
 800c3ca:	d101      	bne.n	800c3d0 <_strtol_l.constprop.0+0x8c>
 800c3cc:	45a2      	cmp	sl, r4
 800c3ce:	db19      	blt.n	800c404 <_strtol_l.constprop.0+0xc0>
 800c3d0:	fb06 4603 	mla	r6, r6, r3, r4
 800c3d4:	f04f 0e01 	mov.w	lr, #1
 800c3d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3dc:	e7e8      	b.n	800c3b0 <_strtol_l.constprop.0+0x6c>
 800c3de:	2c2b      	cmp	r4, #43	; 0x2b
 800c3e0:	bf04      	itt	eq
 800c3e2:	782c      	ldrbeq	r4, [r5, #0]
 800c3e4:	1cb5      	addeq	r5, r6, #2
 800c3e6:	e7ca      	b.n	800c37e <_strtol_l.constprop.0+0x3a>
 800c3e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c3ec:	f1bc 0f19 	cmp.w	ip, #25
 800c3f0:	d801      	bhi.n	800c3f6 <_strtol_l.constprop.0+0xb2>
 800c3f2:	3c37      	subs	r4, #55	; 0x37
 800c3f4:	e7e2      	b.n	800c3bc <_strtol_l.constprop.0+0x78>
 800c3f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c3fa:	f1bc 0f19 	cmp.w	ip, #25
 800c3fe:	d804      	bhi.n	800c40a <_strtol_l.constprop.0+0xc6>
 800c400:	3c57      	subs	r4, #87	; 0x57
 800c402:	e7db      	b.n	800c3bc <_strtol_l.constprop.0+0x78>
 800c404:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800c408:	e7e6      	b.n	800c3d8 <_strtol_l.constprop.0+0x94>
 800c40a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800c40e:	d105      	bne.n	800c41c <_strtol_l.constprop.0+0xd8>
 800c410:	2322      	movs	r3, #34	; 0x22
 800c412:	6003      	str	r3, [r0, #0]
 800c414:	4646      	mov	r6, r8
 800c416:	b942      	cbnz	r2, 800c42a <_strtol_l.constprop.0+0xe6>
 800c418:	4630      	mov	r0, r6
 800c41a:	e79e      	b.n	800c35a <_strtol_l.constprop.0+0x16>
 800c41c:	b107      	cbz	r7, 800c420 <_strtol_l.constprop.0+0xdc>
 800c41e:	4276      	negs	r6, r6
 800c420:	2a00      	cmp	r2, #0
 800c422:	d0f9      	beq.n	800c418 <_strtol_l.constprop.0+0xd4>
 800c424:	f1be 0f00 	cmp.w	lr, #0
 800c428:	d000      	beq.n	800c42c <_strtol_l.constprop.0+0xe8>
 800c42a:	1e69      	subs	r1, r5, #1
 800c42c:	6011      	str	r1, [r2, #0]
 800c42e:	e7f3      	b.n	800c418 <_strtol_l.constprop.0+0xd4>
 800c430:	2430      	movs	r4, #48	; 0x30
 800c432:	2b00      	cmp	r3, #0
 800c434:	d1b1      	bne.n	800c39a <_strtol_l.constprop.0+0x56>
 800c436:	2308      	movs	r3, #8
 800c438:	e7af      	b.n	800c39a <_strtol_l.constprop.0+0x56>
 800c43a:	2c30      	cmp	r4, #48	; 0x30
 800c43c:	d0a5      	beq.n	800c38a <_strtol_l.constprop.0+0x46>
 800c43e:	230a      	movs	r3, #10
 800c440:	e7ab      	b.n	800c39a <_strtol_l.constprop.0+0x56>
 800c442:	bf00      	nop
 800c444:	0800d9d9 	.word	0x0800d9d9

0800c448 <_strtol_r>:
 800c448:	f7ff bf7c 	b.w	800c344 <_strtol_l.constprop.0>

0800c44c <__ssputs_r>:
 800c44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c450:	688e      	ldr	r6, [r1, #8]
 800c452:	461f      	mov	r7, r3
 800c454:	42be      	cmp	r6, r7
 800c456:	680b      	ldr	r3, [r1, #0]
 800c458:	4682      	mov	sl, r0
 800c45a:	460c      	mov	r4, r1
 800c45c:	4690      	mov	r8, r2
 800c45e:	d82c      	bhi.n	800c4ba <__ssputs_r+0x6e>
 800c460:	898a      	ldrh	r2, [r1, #12]
 800c462:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c466:	d026      	beq.n	800c4b6 <__ssputs_r+0x6a>
 800c468:	6965      	ldr	r5, [r4, #20]
 800c46a:	6909      	ldr	r1, [r1, #16]
 800c46c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c470:	eba3 0901 	sub.w	r9, r3, r1
 800c474:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c478:	1c7b      	adds	r3, r7, #1
 800c47a:	444b      	add	r3, r9
 800c47c:	106d      	asrs	r5, r5, #1
 800c47e:	429d      	cmp	r5, r3
 800c480:	bf38      	it	cc
 800c482:	461d      	movcc	r5, r3
 800c484:	0553      	lsls	r3, r2, #21
 800c486:	d527      	bpl.n	800c4d8 <__ssputs_r+0x8c>
 800c488:	4629      	mov	r1, r5
 800c48a:	f7fc fbaf 	bl	8008bec <_malloc_r>
 800c48e:	4606      	mov	r6, r0
 800c490:	b360      	cbz	r0, 800c4ec <__ssputs_r+0xa0>
 800c492:	6921      	ldr	r1, [r4, #16]
 800c494:	464a      	mov	r2, r9
 800c496:	f7fd fdb8 	bl	800a00a <memcpy>
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4a4:	81a3      	strh	r3, [r4, #12]
 800c4a6:	6126      	str	r6, [r4, #16]
 800c4a8:	6165      	str	r5, [r4, #20]
 800c4aa:	444e      	add	r6, r9
 800c4ac:	eba5 0509 	sub.w	r5, r5, r9
 800c4b0:	6026      	str	r6, [r4, #0]
 800c4b2:	60a5      	str	r5, [r4, #8]
 800c4b4:	463e      	mov	r6, r7
 800c4b6:	42be      	cmp	r6, r7
 800c4b8:	d900      	bls.n	800c4bc <__ssputs_r+0x70>
 800c4ba:	463e      	mov	r6, r7
 800c4bc:	6820      	ldr	r0, [r4, #0]
 800c4be:	4632      	mov	r2, r6
 800c4c0:	4641      	mov	r1, r8
 800c4c2:	f000 fb6f 	bl	800cba4 <memmove>
 800c4c6:	68a3      	ldr	r3, [r4, #8]
 800c4c8:	1b9b      	subs	r3, r3, r6
 800c4ca:	60a3      	str	r3, [r4, #8]
 800c4cc:	6823      	ldr	r3, [r4, #0]
 800c4ce:	4433      	add	r3, r6
 800c4d0:	6023      	str	r3, [r4, #0]
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4d8:	462a      	mov	r2, r5
 800c4da:	f000 ff56 	bl	800d38a <_realloc_r>
 800c4de:	4606      	mov	r6, r0
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	d1e0      	bne.n	800c4a6 <__ssputs_r+0x5a>
 800c4e4:	6921      	ldr	r1, [r4, #16]
 800c4e6:	4650      	mov	r0, sl
 800c4e8:	f7fe fc20 	bl	800ad2c <_free_r>
 800c4ec:	230c      	movs	r3, #12
 800c4ee:	f8ca 3000 	str.w	r3, [sl]
 800c4f2:	89a3      	ldrh	r3, [r4, #12]
 800c4f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4f8:	81a3      	strh	r3, [r4, #12]
 800c4fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4fe:	e7e9      	b.n	800c4d4 <__ssputs_r+0x88>

0800c500 <_svfiprintf_r>:
 800c500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c504:	4698      	mov	r8, r3
 800c506:	898b      	ldrh	r3, [r1, #12]
 800c508:	061b      	lsls	r3, r3, #24
 800c50a:	b09d      	sub	sp, #116	; 0x74
 800c50c:	4607      	mov	r7, r0
 800c50e:	460d      	mov	r5, r1
 800c510:	4614      	mov	r4, r2
 800c512:	d50e      	bpl.n	800c532 <_svfiprintf_r+0x32>
 800c514:	690b      	ldr	r3, [r1, #16]
 800c516:	b963      	cbnz	r3, 800c532 <_svfiprintf_r+0x32>
 800c518:	2140      	movs	r1, #64	; 0x40
 800c51a:	f7fc fb67 	bl	8008bec <_malloc_r>
 800c51e:	6028      	str	r0, [r5, #0]
 800c520:	6128      	str	r0, [r5, #16]
 800c522:	b920      	cbnz	r0, 800c52e <_svfiprintf_r+0x2e>
 800c524:	230c      	movs	r3, #12
 800c526:	603b      	str	r3, [r7, #0]
 800c528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c52c:	e0d0      	b.n	800c6d0 <_svfiprintf_r+0x1d0>
 800c52e:	2340      	movs	r3, #64	; 0x40
 800c530:	616b      	str	r3, [r5, #20]
 800c532:	2300      	movs	r3, #0
 800c534:	9309      	str	r3, [sp, #36]	; 0x24
 800c536:	2320      	movs	r3, #32
 800c538:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c53c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c540:	2330      	movs	r3, #48	; 0x30
 800c542:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c6e8 <_svfiprintf_r+0x1e8>
 800c546:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c54a:	f04f 0901 	mov.w	r9, #1
 800c54e:	4623      	mov	r3, r4
 800c550:	469a      	mov	sl, r3
 800c552:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c556:	b10a      	cbz	r2, 800c55c <_svfiprintf_r+0x5c>
 800c558:	2a25      	cmp	r2, #37	; 0x25
 800c55a:	d1f9      	bne.n	800c550 <_svfiprintf_r+0x50>
 800c55c:	ebba 0b04 	subs.w	fp, sl, r4
 800c560:	d00b      	beq.n	800c57a <_svfiprintf_r+0x7a>
 800c562:	465b      	mov	r3, fp
 800c564:	4622      	mov	r2, r4
 800c566:	4629      	mov	r1, r5
 800c568:	4638      	mov	r0, r7
 800c56a:	f7ff ff6f 	bl	800c44c <__ssputs_r>
 800c56e:	3001      	adds	r0, #1
 800c570:	f000 80a9 	beq.w	800c6c6 <_svfiprintf_r+0x1c6>
 800c574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c576:	445a      	add	r2, fp
 800c578:	9209      	str	r2, [sp, #36]	; 0x24
 800c57a:	f89a 3000 	ldrb.w	r3, [sl]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	f000 80a1 	beq.w	800c6c6 <_svfiprintf_r+0x1c6>
 800c584:	2300      	movs	r3, #0
 800c586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c58a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c58e:	f10a 0a01 	add.w	sl, sl, #1
 800c592:	9304      	str	r3, [sp, #16]
 800c594:	9307      	str	r3, [sp, #28]
 800c596:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c59a:	931a      	str	r3, [sp, #104]	; 0x68
 800c59c:	4654      	mov	r4, sl
 800c59e:	2205      	movs	r2, #5
 800c5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a4:	4850      	ldr	r0, [pc, #320]	; (800c6e8 <_svfiprintf_r+0x1e8>)
 800c5a6:	f7f3 fe13 	bl	80001d0 <memchr>
 800c5aa:	9a04      	ldr	r2, [sp, #16]
 800c5ac:	b9d8      	cbnz	r0, 800c5e6 <_svfiprintf_r+0xe6>
 800c5ae:	06d0      	lsls	r0, r2, #27
 800c5b0:	bf44      	itt	mi
 800c5b2:	2320      	movmi	r3, #32
 800c5b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5b8:	0711      	lsls	r1, r2, #28
 800c5ba:	bf44      	itt	mi
 800c5bc:	232b      	movmi	r3, #43	; 0x2b
 800c5be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c5c8:	d015      	beq.n	800c5f6 <_svfiprintf_r+0xf6>
 800c5ca:	9a07      	ldr	r2, [sp, #28]
 800c5cc:	4654      	mov	r4, sl
 800c5ce:	2000      	movs	r0, #0
 800c5d0:	f04f 0c0a 	mov.w	ip, #10
 800c5d4:	4621      	mov	r1, r4
 800c5d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5da:	3b30      	subs	r3, #48	; 0x30
 800c5dc:	2b09      	cmp	r3, #9
 800c5de:	d94d      	bls.n	800c67c <_svfiprintf_r+0x17c>
 800c5e0:	b1b0      	cbz	r0, 800c610 <_svfiprintf_r+0x110>
 800c5e2:	9207      	str	r2, [sp, #28]
 800c5e4:	e014      	b.n	800c610 <_svfiprintf_r+0x110>
 800c5e6:	eba0 0308 	sub.w	r3, r0, r8
 800c5ea:	fa09 f303 	lsl.w	r3, r9, r3
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	9304      	str	r3, [sp, #16]
 800c5f2:	46a2      	mov	sl, r4
 800c5f4:	e7d2      	b.n	800c59c <_svfiprintf_r+0x9c>
 800c5f6:	9b03      	ldr	r3, [sp, #12]
 800c5f8:	1d19      	adds	r1, r3, #4
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	9103      	str	r1, [sp, #12]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	bfbb      	ittet	lt
 800c602:	425b      	neglt	r3, r3
 800c604:	f042 0202 	orrlt.w	r2, r2, #2
 800c608:	9307      	strge	r3, [sp, #28]
 800c60a:	9307      	strlt	r3, [sp, #28]
 800c60c:	bfb8      	it	lt
 800c60e:	9204      	strlt	r2, [sp, #16]
 800c610:	7823      	ldrb	r3, [r4, #0]
 800c612:	2b2e      	cmp	r3, #46	; 0x2e
 800c614:	d10c      	bne.n	800c630 <_svfiprintf_r+0x130>
 800c616:	7863      	ldrb	r3, [r4, #1]
 800c618:	2b2a      	cmp	r3, #42	; 0x2a
 800c61a:	d134      	bne.n	800c686 <_svfiprintf_r+0x186>
 800c61c:	9b03      	ldr	r3, [sp, #12]
 800c61e:	1d1a      	adds	r2, r3, #4
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	9203      	str	r2, [sp, #12]
 800c624:	2b00      	cmp	r3, #0
 800c626:	bfb8      	it	lt
 800c628:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c62c:	3402      	adds	r4, #2
 800c62e:	9305      	str	r3, [sp, #20]
 800c630:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c6f8 <_svfiprintf_r+0x1f8>
 800c634:	7821      	ldrb	r1, [r4, #0]
 800c636:	2203      	movs	r2, #3
 800c638:	4650      	mov	r0, sl
 800c63a:	f7f3 fdc9 	bl	80001d0 <memchr>
 800c63e:	b138      	cbz	r0, 800c650 <_svfiprintf_r+0x150>
 800c640:	9b04      	ldr	r3, [sp, #16]
 800c642:	eba0 000a 	sub.w	r0, r0, sl
 800c646:	2240      	movs	r2, #64	; 0x40
 800c648:	4082      	lsls	r2, r0
 800c64a:	4313      	orrs	r3, r2
 800c64c:	3401      	adds	r4, #1
 800c64e:	9304      	str	r3, [sp, #16]
 800c650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c654:	4825      	ldr	r0, [pc, #148]	; (800c6ec <_svfiprintf_r+0x1ec>)
 800c656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c65a:	2206      	movs	r2, #6
 800c65c:	f7f3 fdb8 	bl	80001d0 <memchr>
 800c660:	2800      	cmp	r0, #0
 800c662:	d038      	beq.n	800c6d6 <_svfiprintf_r+0x1d6>
 800c664:	4b22      	ldr	r3, [pc, #136]	; (800c6f0 <_svfiprintf_r+0x1f0>)
 800c666:	bb1b      	cbnz	r3, 800c6b0 <_svfiprintf_r+0x1b0>
 800c668:	9b03      	ldr	r3, [sp, #12]
 800c66a:	3307      	adds	r3, #7
 800c66c:	f023 0307 	bic.w	r3, r3, #7
 800c670:	3308      	adds	r3, #8
 800c672:	9303      	str	r3, [sp, #12]
 800c674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c676:	4433      	add	r3, r6
 800c678:	9309      	str	r3, [sp, #36]	; 0x24
 800c67a:	e768      	b.n	800c54e <_svfiprintf_r+0x4e>
 800c67c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c680:	460c      	mov	r4, r1
 800c682:	2001      	movs	r0, #1
 800c684:	e7a6      	b.n	800c5d4 <_svfiprintf_r+0xd4>
 800c686:	2300      	movs	r3, #0
 800c688:	3401      	adds	r4, #1
 800c68a:	9305      	str	r3, [sp, #20]
 800c68c:	4619      	mov	r1, r3
 800c68e:	f04f 0c0a 	mov.w	ip, #10
 800c692:	4620      	mov	r0, r4
 800c694:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c698:	3a30      	subs	r2, #48	; 0x30
 800c69a:	2a09      	cmp	r2, #9
 800c69c:	d903      	bls.n	800c6a6 <_svfiprintf_r+0x1a6>
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d0c6      	beq.n	800c630 <_svfiprintf_r+0x130>
 800c6a2:	9105      	str	r1, [sp, #20]
 800c6a4:	e7c4      	b.n	800c630 <_svfiprintf_r+0x130>
 800c6a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	e7f0      	b.n	800c692 <_svfiprintf_r+0x192>
 800c6b0:	ab03      	add	r3, sp, #12
 800c6b2:	9300      	str	r3, [sp, #0]
 800c6b4:	462a      	mov	r2, r5
 800c6b6:	4b0f      	ldr	r3, [pc, #60]	; (800c6f4 <_svfiprintf_r+0x1f4>)
 800c6b8:	a904      	add	r1, sp, #16
 800c6ba:	4638      	mov	r0, r7
 800c6bc:	f7fc fbc2 	bl	8008e44 <_printf_float>
 800c6c0:	1c42      	adds	r2, r0, #1
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	d1d6      	bne.n	800c674 <_svfiprintf_r+0x174>
 800c6c6:	89ab      	ldrh	r3, [r5, #12]
 800c6c8:	065b      	lsls	r3, r3, #25
 800c6ca:	f53f af2d 	bmi.w	800c528 <_svfiprintf_r+0x28>
 800c6ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6d0:	b01d      	add	sp, #116	; 0x74
 800c6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d6:	ab03      	add	r3, sp, #12
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	462a      	mov	r2, r5
 800c6dc:	4b05      	ldr	r3, [pc, #20]	; (800c6f4 <_svfiprintf_r+0x1f4>)
 800c6de:	a904      	add	r1, sp, #16
 800c6e0:	4638      	mov	r0, r7
 800c6e2:	f7fc fe53 	bl	800938c <_printf_i>
 800c6e6:	e7eb      	b.n	800c6c0 <_svfiprintf_r+0x1c0>
 800c6e8:	0800dad9 	.word	0x0800dad9
 800c6ec:	0800dae3 	.word	0x0800dae3
 800c6f0:	08008e45 	.word	0x08008e45
 800c6f4:	0800c44d 	.word	0x0800c44d
 800c6f8:	0800dadf 	.word	0x0800dadf

0800c6fc <__sfputc_r>:
 800c6fc:	6893      	ldr	r3, [r2, #8]
 800c6fe:	3b01      	subs	r3, #1
 800c700:	2b00      	cmp	r3, #0
 800c702:	b410      	push	{r4}
 800c704:	6093      	str	r3, [r2, #8]
 800c706:	da08      	bge.n	800c71a <__sfputc_r+0x1e>
 800c708:	6994      	ldr	r4, [r2, #24]
 800c70a:	42a3      	cmp	r3, r4
 800c70c:	db01      	blt.n	800c712 <__sfputc_r+0x16>
 800c70e:	290a      	cmp	r1, #10
 800c710:	d103      	bne.n	800c71a <__sfputc_r+0x1e>
 800c712:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c716:	f7fd bafe 	b.w	8009d16 <__swbuf_r>
 800c71a:	6813      	ldr	r3, [r2, #0]
 800c71c:	1c58      	adds	r0, r3, #1
 800c71e:	6010      	str	r0, [r2, #0]
 800c720:	7019      	strb	r1, [r3, #0]
 800c722:	4608      	mov	r0, r1
 800c724:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c728:	4770      	bx	lr

0800c72a <__sfputs_r>:
 800c72a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c72c:	4606      	mov	r6, r0
 800c72e:	460f      	mov	r7, r1
 800c730:	4614      	mov	r4, r2
 800c732:	18d5      	adds	r5, r2, r3
 800c734:	42ac      	cmp	r4, r5
 800c736:	d101      	bne.n	800c73c <__sfputs_r+0x12>
 800c738:	2000      	movs	r0, #0
 800c73a:	e007      	b.n	800c74c <__sfputs_r+0x22>
 800c73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c740:	463a      	mov	r2, r7
 800c742:	4630      	mov	r0, r6
 800c744:	f7ff ffda 	bl	800c6fc <__sfputc_r>
 800c748:	1c43      	adds	r3, r0, #1
 800c74a:	d1f3      	bne.n	800c734 <__sfputs_r+0xa>
 800c74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c750 <_vfiprintf_r>:
 800c750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c754:	460d      	mov	r5, r1
 800c756:	b09d      	sub	sp, #116	; 0x74
 800c758:	4614      	mov	r4, r2
 800c75a:	4698      	mov	r8, r3
 800c75c:	4606      	mov	r6, r0
 800c75e:	b118      	cbz	r0, 800c768 <_vfiprintf_r+0x18>
 800c760:	6a03      	ldr	r3, [r0, #32]
 800c762:	b90b      	cbnz	r3, 800c768 <_vfiprintf_r+0x18>
 800c764:	f7fd f9d0 	bl	8009b08 <__sinit>
 800c768:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c76a:	07d9      	lsls	r1, r3, #31
 800c76c:	d405      	bmi.n	800c77a <_vfiprintf_r+0x2a>
 800c76e:	89ab      	ldrh	r3, [r5, #12]
 800c770:	059a      	lsls	r2, r3, #22
 800c772:	d402      	bmi.n	800c77a <_vfiprintf_r+0x2a>
 800c774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c776:	f7fd fc46 	bl	800a006 <__retarget_lock_acquire_recursive>
 800c77a:	89ab      	ldrh	r3, [r5, #12]
 800c77c:	071b      	lsls	r3, r3, #28
 800c77e:	d501      	bpl.n	800c784 <_vfiprintf_r+0x34>
 800c780:	692b      	ldr	r3, [r5, #16]
 800c782:	b99b      	cbnz	r3, 800c7ac <_vfiprintf_r+0x5c>
 800c784:	4629      	mov	r1, r5
 800c786:	4630      	mov	r0, r6
 800c788:	f7fd fb02 	bl	8009d90 <__swsetup_r>
 800c78c:	b170      	cbz	r0, 800c7ac <_vfiprintf_r+0x5c>
 800c78e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c790:	07dc      	lsls	r4, r3, #31
 800c792:	d504      	bpl.n	800c79e <_vfiprintf_r+0x4e>
 800c794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c798:	b01d      	add	sp, #116	; 0x74
 800c79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c79e:	89ab      	ldrh	r3, [r5, #12]
 800c7a0:	0598      	lsls	r0, r3, #22
 800c7a2:	d4f7      	bmi.n	800c794 <_vfiprintf_r+0x44>
 800c7a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7a6:	f7fd fc2f 	bl	800a008 <__retarget_lock_release_recursive>
 800c7aa:	e7f3      	b.n	800c794 <_vfiprintf_r+0x44>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b0:	2320      	movs	r3, #32
 800c7b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7ba:	2330      	movs	r3, #48	; 0x30
 800c7bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c970 <_vfiprintf_r+0x220>
 800c7c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7c4:	f04f 0901 	mov.w	r9, #1
 800c7c8:	4623      	mov	r3, r4
 800c7ca:	469a      	mov	sl, r3
 800c7cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7d0:	b10a      	cbz	r2, 800c7d6 <_vfiprintf_r+0x86>
 800c7d2:	2a25      	cmp	r2, #37	; 0x25
 800c7d4:	d1f9      	bne.n	800c7ca <_vfiprintf_r+0x7a>
 800c7d6:	ebba 0b04 	subs.w	fp, sl, r4
 800c7da:	d00b      	beq.n	800c7f4 <_vfiprintf_r+0xa4>
 800c7dc:	465b      	mov	r3, fp
 800c7de:	4622      	mov	r2, r4
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f7ff ffa1 	bl	800c72a <__sfputs_r>
 800c7e8:	3001      	adds	r0, #1
 800c7ea:	f000 80a9 	beq.w	800c940 <_vfiprintf_r+0x1f0>
 800c7ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7f0:	445a      	add	r2, fp
 800c7f2:	9209      	str	r2, [sp, #36]	; 0x24
 800c7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	f000 80a1 	beq.w	800c940 <_vfiprintf_r+0x1f0>
 800c7fe:	2300      	movs	r3, #0
 800c800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c808:	f10a 0a01 	add.w	sl, sl, #1
 800c80c:	9304      	str	r3, [sp, #16]
 800c80e:	9307      	str	r3, [sp, #28]
 800c810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c814:	931a      	str	r3, [sp, #104]	; 0x68
 800c816:	4654      	mov	r4, sl
 800c818:	2205      	movs	r2, #5
 800c81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c81e:	4854      	ldr	r0, [pc, #336]	; (800c970 <_vfiprintf_r+0x220>)
 800c820:	f7f3 fcd6 	bl	80001d0 <memchr>
 800c824:	9a04      	ldr	r2, [sp, #16]
 800c826:	b9d8      	cbnz	r0, 800c860 <_vfiprintf_r+0x110>
 800c828:	06d1      	lsls	r1, r2, #27
 800c82a:	bf44      	itt	mi
 800c82c:	2320      	movmi	r3, #32
 800c82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c832:	0713      	lsls	r3, r2, #28
 800c834:	bf44      	itt	mi
 800c836:	232b      	movmi	r3, #43	; 0x2b
 800c838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c83c:	f89a 3000 	ldrb.w	r3, [sl]
 800c840:	2b2a      	cmp	r3, #42	; 0x2a
 800c842:	d015      	beq.n	800c870 <_vfiprintf_r+0x120>
 800c844:	9a07      	ldr	r2, [sp, #28]
 800c846:	4654      	mov	r4, sl
 800c848:	2000      	movs	r0, #0
 800c84a:	f04f 0c0a 	mov.w	ip, #10
 800c84e:	4621      	mov	r1, r4
 800c850:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c854:	3b30      	subs	r3, #48	; 0x30
 800c856:	2b09      	cmp	r3, #9
 800c858:	d94d      	bls.n	800c8f6 <_vfiprintf_r+0x1a6>
 800c85a:	b1b0      	cbz	r0, 800c88a <_vfiprintf_r+0x13a>
 800c85c:	9207      	str	r2, [sp, #28]
 800c85e:	e014      	b.n	800c88a <_vfiprintf_r+0x13a>
 800c860:	eba0 0308 	sub.w	r3, r0, r8
 800c864:	fa09 f303 	lsl.w	r3, r9, r3
 800c868:	4313      	orrs	r3, r2
 800c86a:	9304      	str	r3, [sp, #16]
 800c86c:	46a2      	mov	sl, r4
 800c86e:	e7d2      	b.n	800c816 <_vfiprintf_r+0xc6>
 800c870:	9b03      	ldr	r3, [sp, #12]
 800c872:	1d19      	adds	r1, r3, #4
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	9103      	str	r1, [sp, #12]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	bfbb      	ittet	lt
 800c87c:	425b      	neglt	r3, r3
 800c87e:	f042 0202 	orrlt.w	r2, r2, #2
 800c882:	9307      	strge	r3, [sp, #28]
 800c884:	9307      	strlt	r3, [sp, #28]
 800c886:	bfb8      	it	lt
 800c888:	9204      	strlt	r2, [sp, #16]
 800c88a:	7823      	ldrb	r3, [r4, #0]
 800c88c:	2b2e      	cmp	r3, #46	; 0x2e
 800c88e:	d10c      	bne.n	800c8aa <_vfiprintf_r+0x15a>
 800c890:	7863      	ldrb	r3, [r4, #1]
 800c892:	2b2a      	cmp	r3, #42	; 0x2a
 800c894:	d134      	bne.n	800c900 <_vfiprintf_r+0x1b0>
 800c896:	9b03      	ldr	r3, [sp, #12]
 800c898:	1d1a      	adds	r2, r3, #4
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	9203      	str	r2, [sp, #12]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	bfb8      	it	lt
 800c8a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c8a6:	3402      	adds	r4, #2
 800c8a8:	9305      	str	r3, [sp, #20]
 800c8aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c980 <_vfiprintf_r+0x230>
 800c8ae:	7821      	ldrb	r1, [r4, #0]
 800c8b0:	2203      	movs	r2, #3
 800c8b2:	4650      	mov	r0, sl
 800c8b4:	f7f3 fc8c 	bl	80001d0 <memchr>
 800c8b8:	b138      	cbz	r0, 800c8ca <_vfiprintf_r+0x17a>
 800c8ba:	9b04      	ldr	r3, [sp, #16]
 800c8bc:	eba0 000a 	sub.w	r0, r0, sl
 800c8c0:	2240      	movs	r2, #64	; 0x40
 800c8c2:	4082      	lsls	r2, r0
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	3401      	adds	r4, #1
 800c8c8:	9304      	str	r3, [sp, #16]
 800c8ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8ce:	4829      	ldr	r0, [pc, #164]	; (800c974 <_vfiprintf_r+0x224>)
 800c8d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8d4:	2206      	movs	r2, #6
 800c8d6:	f7f3 fc7b 	bl	80001d0 <memchr>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d03f      	beq.n	800c95e <_vfiprintf_r+0x20e>
 800c8de:	4b26      	ldr	r3, [pc, #152]	; (800c978 <_vfiprintf_r+0x228>)
 800c8e0:	bb1b      	cbnz	r3, 800c92a <_vfiprintf_r+0x1da>
 800c8e2:	9b03      	ldr	r3, [sp, #12]
 800c8e4:	3307      	adds	r3, #7
 800c8e6:	f023 0307 	bic.w	r3, r3, #7
 800c8ea:	3308      	adds	r3, #8
 800c8ec:	9303      	str	r3, [sp, #12]
 800c8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f0:	443b      	add	r3, r7
 800c8f2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8f4:	e768      	b.n	800c7c8 <_vfiprintf_r+0x78>
 800c8f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8fa:	460c      	mov	r4, r1
 800c8fc:	2001      	movs	r0, #1
 800c8fe:	e7a6      	b.n	800c84e <_vfiprintf_r+0xfe>
 800c900:	2300      	movs	r3, #0
 800c902:	3401      	adds	r4, #1
 800c904:	9305      	str	r3, [sp, #20]
 800c906:	4619      	mov	r1, r3
 800c908:	f04f 0c0a 	mov.w	ip, #10
 800c90c:	4620      	mov	r0, r4
 800c90e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c912:	3a30      	subs	r2, #48	; 0x30
 800c914:	2a09      	cmp	r2, #9
 800c916:	d903      	bls.n	800c920 <_vfiprintf_r+0x1d0>
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d0c6      	beq.n	800c8aa <_vfiprintf_r+0x15a>
 800c91c:	9105      	str	r1, [sp, #20]
 800c91e:	e7c4      	b.n	800c8aa <_vfiprintf_r+0x15a>
 800c920:	fb0c 2101 	mla	r1, ip, r1, r2
 800c924:	4604      	mov	r4, r0
 800c926:	2301      	movs	r3, #1
 800c928:	e7f0      	b.n	800c90c <_vfiprintf_r+0x1bc>
 800c92a:	ab03      	add	r3, sp, #12
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	462a      	mov	r2, r5
 800c930:	4b12      	ldr	r3, [pc, #72]	; (800c97c <_vfiprintf_r+0x22c>)
 800c932:	a904      	add	r1, sp, #16
 800c934:	4630      	mov	r0, r6
 800c936:	f7fc fa85 	bl	8008e44 <_printf_float>
 800c93a:	4607      	mov	r7, r0
 800c93c:	1c78      	adds	r0, r7, #1
 800c93e:	d1d6      	bne.n	800c8ee <_vfiprintf_r+0x19e>
 800c940:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c942:	07d9      	lsls	r1, r3, #31
 800c944:	d405      	bmi.n	800c952 <_vfiprintf_r+0x202>
 800c946:	89ab      	ldrh	r3, [r5, #12]
 800c948:	059a      	lsls	r2, r3, #22
 800c94a:	d402      	bmi.n	800c952 <_vfiprintf_r+0x202>
 800c94c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c94e:	f7fd fb5b 	bl	800a008 <__retarget_lock_release_recursive>
 800c952:	89ab      	ldrh	r3, [r5, #12]
 800c954:	065b      	lsls	r3, r3, #25
 800c956:	f53f af1d 	bmi.w	800c794 <_vfiprintf_r+0x44>
 800c95a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c95c:	e71c      	b.n	800c798 <_vfiprintf_r+0x48>
 800c95e:	ab03      	add	r3, sp, #12
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	462a      	mov	r2, r5
 800c964:	4b05      	ldr	r3, [pc, #20]	; (800c97c <_vfiprintf_r+0x22c>)
 800c966:	a904      	add	r1, sp, #16
 800c968:	4630      	mov	r0, r6
 800c96a:	f7fc fd0f 	bl	800938c <_printf_i>
 800c96e:	e7e4      	b.n	800c93a <_vfiprintf_r+0x1ea>
 800c970:	0800dad9 	.word	0x0800dad9
 800c974:	0800dae3 	.word	0x0800dae3
 800c978:	08008e45 	.word	0x08008e45
 800c97c:	0800c72b 	.word	0x0800c72b
 800c980:	0800dadf 	.word	0x0800dadf

0800c984 <__sflush_r>:
 800c984:	898a      	ldrh	r2, [r1, #12]
 800c986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c98a:	4605      	mov	r5, r0
 800c98c:	0710      	lsls	r0, r2, #28
 800c98e:	460c      	mov	r4, r1
 800c990:	d458      	bmi.n	800ca44 <__sflush_r+0xc0>
 800c992:	684b      	ldr	r3, [r1, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	dc05      	bgt.n	800c9a4 <__sflush_r+0x20>
 800c998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	dc02      	bgt.n	800c9a4 <__sflush_r+0x20>
 800c99e:	2000      	movs	r0, #0
 800c9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9a6:	2e00      	cmp	r6, #0
 800c9a8:	d0f9      	beq.n	800c99e <__sflush_r+0x1a>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9b0:	682f      	ldr	r7, [r5, #0]
 800c9b2:	6a21      	ldr	r1, [r4, #32]
 800c9b4:	602b      	str	r3, [r5, #0]
 800c9b6:	d032      	beq.n	800ca1e <__sflush_r+0x9a>
 800c9b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9ba:	89a3      	ldrh	r3, [r4, #12]
 800c9bc:	075a      	lsls	r2, r3, #29
 800c9be:	d505      	bpl.n	800c9cc <__sflush_r+0x48>
 800c9c0:	6863      	ldr	r3, [r4, #4]
 800c9c2:	1ac0      	subs	r0, r0, r3
 800c9c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9c6:	b10b      	cbz	r3, 800c9cc <__sflush_r+0x48>
 800c9c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9ca:	1ac0      	subs	r0, r0, r3
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9d2:	6a21      	ldr	r1, [r4, #32]
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	47b0      	blx	r6
 800c9d8:	1c43      	adds	r3, r0, #1
 800c9da:	89a3      	ldrh	r3, [r4, #12]
 800c9dc:	d106      	bne.n	800c9ec <__sflush_r+0x68>
 800c9de:	6829      	ldr	r1, [r5, #0]
 800c9e0:	291d      	cmp	r1, #29
 800c9e2:	d82b      	bhi.n	800ca3c <__sflush_r+0xb8>
 800c9e4:	4a29      	ldr	r2, [pc, #164]	; (800ca8c <__sflush_r+0x108>)
 800c9e6:	410a      	asrs	r2, r1
 800c9e8:	07d6      	lsls	r6, r2, #31
 800c9ea:	d427      	bmi.n	800ca3c <__sflush_r+0xb8>
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	6062      	str	r2, [r4, #4]
 800c9f0:	04d9      	lsls	r1, r3, #19
 800c9f2:	6922      	ldr	r2, [r4, #16]
 800c9f4:	6022      	str	r2, [r4, #0]
 800c9f6:	d504      	bpl.n	800ca02 <__sflush_r+0x7e>
 800c9f8:	1c42      	adds	r2, r0, #1
 800c9fa:	d101      	bne.n	800ca00 <__sflush_r+0x7c>
 800c9fc:	682b      	ldr	r3, [r5, #0]
 800c9fe:	b903      	cbnz	r3, 800ca02 <__sflush_r+0x7e>
 800ca00:	6560      	str	r0, [r4, #84]	; 0x54
 800ca02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca04:	602f      	str	r7, [r5, #0]
 800ca06:	2900      	cmp	r1, #0
 800ca08:	d0c9      	beq.n	800c99e <__sflush_r+0x1a>
 800ca0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca0e:	4299      	cmp	r1, r3
 800ca10:	d002      	beq.n	800ca18 <__sflush_r+0x94>
 800ca12:	4628      	mov	r0, r5
 800ca14:	f7fe f98a 	bl	800ad2c <_free_r>
 800ca18:	2000      	movs	r0, #0
 800ca1a:	6360      	str	r0, [r4, #52]	; 0x34
 800ca1c:	e7c0      	b.n	800c9a0 <__sflush_r+0x1c>
 800ca1e:	2301      	movs	r3, #1
 800ca20:	4628      	mov	r0, r5
 800ca22:	47b0      	blx	r6
 800ca24:	1c41      	adds	r1, r0, #1
 800ca26:	d1c8      	bne.n	800c9ba <__sflush_r+0x36>
 800ca28:	682b      	ldr	r3, [r5, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d0c5      	beq.n	800c9ba <__sflush_r+0x36>
 800ca2e:	2b1d      	cmp	r3, #29
 800ca30:	d001      	beq.n	800ca36 <__sflush_r+0xb2>
 800ca32:	2b16      	cmp	r3, #22
 800ca34:	d101      	bne.n	800ca3a <__sflush_r+0xb6>
 800ca36:	602f      	str	r7, [r5, #0]
 800ca38:	e7b1      	b.n	800c99e <__sflush_r+0x1a>
 800ca3a:	89a3      	ldrh	r3, [r4, #12]
 800ca3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca40:	81a3      	strh	r3, [r4, #12]
 800ca42:	e7ad      	b.n	800c9a0 <__sflush_r+0x1c>
 800ca44:	690f      	ldr	r7, [r1, #16]
 800ca46:	2f00      	cmp	r7, #0
 800ca48:	d0a9      	beq.n	800c99e <__sflush_r+0x1a>
 800ca4a:	0793      	lsls	r3, r2, #30
 800ca4c:	680e      	ldr	r6, [r1, #0]
 800ca4e:	bf08      	it	eq
 800ca50:	694b      	ldreq	r3, [r1, #20]
 800ca52:	600f      	str	r7, [r1, #0]
 800ca54:	bf18      	it	ne
 800ca56:	2300      	movne	r3, #0
 800ca58:	eba6 0807 	sub.w	r8, r6, r7
 800ca5c:	608b      	str	r3, [r1, #8]
 800ca5e:	f1b8 0f00 	cmp.w	r8, #0
 800ca62:	dd9c      	ble.n	800c99e <__sflush_r+0x1a>
 800ca64:	6a21      	ldr	r1, [r4, #32]
 800ca66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca68:	4643      	mov	r3, r8
 800ca6a:	463a      	mov	r2, r7
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	47b0      	blx	r6
 800ca70:	2800      	cmp	r0, #0
 800ca72:	dc06      	bgt.n	800ca82 <__sflush_r+0xfe>
 800ca74:	89a3      	ldrh	r3, [r4, #12]
 800ca76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca7a:	81a3      	strh	r3, [r4, #12]
 800ca7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca80:	e78e      	b.n	800c9a0 <__sflush_r+0x1c>
 800ca82:	4407      	add	r7, r0
 800ca84:	eba8 0800 	sub.w	r8, r8, r0
 800ca88:	e7e9      	b.n	800ca5e <__sflush_r+0xda>
 800ca8a:	bf00      	nop
 800ca8c:	dfbffffe 	.word	0xdfbffffe

0800ca90 <_fflush_r>:
 800ca90:	b538      	push	{r3, r4, r5, lr}
 800ca92:	690b      	ldr	r3, [r1, #16]
 800ca94:	4605      	mov	r5, r0
 800ca96:	460c      	mov	r4, r1
 800ca98:	b913      	cbnz	r3, 800caa0 <_fflush_r+0x10>
 800ca9a:	2500      	movs	r5, #0
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	bd38      	pop	{r3, r4, r5, pc}
 800caa0:	b118      	cbz	r0, 800caaa <_fflush_r+0x1a>
 800caa2:	6a03      	ldr	r3, [r0, #32]
 800caa4:	b90b      	cbnz	r3, 800caaa <_fflush_r+0x1a>
 800caa6:	f7fd f82f 	bl	8009b08 <__sinit>
 800caaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d0f3      	beq.n	800ca9a <_fflush_r+0xa>
 800cab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cab4:	07d0      	lsls	r0, r2, #31
 800cab6:	d404      	bmi.n	800cac2 <_fflush_r+0x32>
 800cab8:	0599      	lsls	r1, r3, #22
 800caba:	d402      	bmi.n	800cac2 <_fflush_r+0x32>
 800cabc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cabe:	f7fd faa2 	bl	800a006 <__retarget_lock_acquire_recursive>
 800cac2:	4628      	mov	r0, r5
 800cac4:	4621      	mov	r1, r4
 800cac6:	f7ff ff5d 	bl	800c984 <__sflush_r>
 800caca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cacc:	07da      	lsls	r2, r3, #31
 800cace:	4605      	mov	r5, r0
 800cad0:	d4e4      	bmi.n	800ca9c <_fflush_r+0xc>
 800cad2:	89a3      	ldrh	r3, [r4, #12]
 800cad4:	059b      	lsls	r3, r3, #22
 800cad6:	d4e1      	bmi.n	800ca9c <_fflush_r+0xc>
 800cad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cada:	f7fd fa95 	bl	800a008 <__retarget_lock_release_recursive>
 800cade:	e7dd      	b.n	800ca9c <_fflush_r+0xc>

0800cae0 <__swhatbuf_r>:
 800cae0:	b570      	push	{r4, r5, r6, lr}
 800cae2:	460c      	mov	r4, r1
 800cae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cae8:	2900      	cmp	r1, #0
 800caea:	b096      	sub	sp, #88	; 0x58
 800caec:	4615      	mov	r5, r2
 800caee:	461e      	mov	r6, r3
 800caf0:	da0d      	bge.n	800cb0e <__swhatbuf_r+0x2e>
 800caf2:	89a3      	ldrh	r3, [r4, #12]
 800caf4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800caf8:	f04f 0100 	mov.w	r1, #0
 800cafc:	bf0c      	ite	eq
 800cafe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cb02:	2340      	movne	r3, #64	; 0x40
 800cb04:	2000      	movs	r0, #0
 800cb06:	6031      	str	r1, [r6, #0]
 800cb08:	602b      	str	r3, [r5, #0]
 800cb0a:	b016      	add	sp, #88	; 0x58
 800cb0c:	bd70      	pop	{r4, r5, r6, pc}
 800cb0e:	466a      	mov	r2, sp
 800cb10:	f000 f874 	bl	800cbfc <_fstat_r>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	dbec      	blt.n	800caf2 <__swhatbuf_r+0x12>
 800cb18:	9901      	ldr	r1, [sp, #4]
 800cb1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cb1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cb22:	4259      	negs	r1, r3
 800cb24:	4159      	adcs	r1, r3
 800cb26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb2a:	e7eb      	b.n	800cb04 <__swhatbuf_r+0x24>

0800cb2c <__smakebuf_r>:
 800cb2c:	898b      	ldrh	r3, [r1, #12]
 800cb2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb30:	079d      	lsls	r5, r3, #30
 800cb32:	4606      	mov	r6, r0
 800cb34:	460c      	mov	r4, r1
 800cb36:	d507      	bpl.n	800cb48 <__smakebuf_r+0x1c>
 800cb38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb3c:	6023      	str	r3, [r4, #0]
 800cb3e:	6123      	str	r3, [r4, #16]
 800cb40:	2301      	movs	r3, #1
 800cb42:	6163      	str	r3, [r4, #20]
 800cb44:	b002      	add	sp, #8
 800cb46:	bd70      	pop	{r4, r5, r6, pc}
 800cb48:	ab01      	add	r3, sp, #4
 800cb4a:	466a      	mov	r2, sp
 800cb4c:	f7ff ffc8 	bl	800cae0 <__swhatbuf_r>
 800cb50:	9900      	ldr	r1, [sp, #0]
 800cb52:	4605      	mov	r5, r0
 800cb54:	4630      	mov	r0, r6
 800cb56:	f7fc f849 	bl	8008bec <_malloc_r>
 800cb5a:	b948      	cbnz	r0, 800cb70 <__smakebuf_r+0x44>
 800cb5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb60:	059a      	lsls	r2, r3, #22
 800cb62:	d4ef      	bmi.n	800cb44 <__smakebuf_r+0x18>
 800cb64:	f023 0303 	bic.w	r3, r3, #3
 800cb68:	f043 0302 	orr.w	r3, r3, #2
 800cb6c:	81a3      	strh	r3, [r4, #12]
 800cb6e:	e7e3      	b.n	800cb38 <__smakebuf_r+0xc>
 800cb70:	89a3      	ldrh	r3, [r4, #12]
 800cb72:	6020      	str	r0, [r4, #0]
 800cb74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb78:	81a3      	strh	r3, [r4, #12]
 800cb7a:	9b00      	ldr	r3, [sp, #0]
 800cb7c:	6163      	str	r3, [r4, #20]
 800cb7e:	9b01      	ldr	r3, [sp, #4]
 800cb80:	6120      	str	r0, [r4, #16]
 800cb82:	b15b      	cbz	r3, 800cb9c <__smakebuf_r+0x70>
 800cb84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb88:	4630      	mov	r0, r6
 800cb8a:	f000 f849 	bl	800cc20 <_isatty_r>
 800cb8e:	b128      	cbz	r0, 800cb9c <__smakebuf_r+0x70>
 800cb90:	89a3      	ldrh	r3, [r4, #12]
 800cb92:	f023 0303 	bic.w	r3, r3, #3
 800cb96:	f043 0301 	orr.w	r3, r3, #1
 800cb9a:	81a3      	strh	r3, [r4, #12]
 800cb9c:	89a3      	ldrh	r3, [r4, #12]
 800cb9e:	431d      	orrs	r5, r3
 800cba0:	81a5      	strh	r5, [r4, #12]
 800cba2:	e7cf      	b.n	800cb44 <__smakebuf_r+0x18>

0800cba4 <memmove>:
 800cba4:	4288      	cmp	r0, r1
 800cba6:	b510      	push	{r4, lr}
 800cba8:	eb01 0402 	add.w	r4, r1, r2
 800cbac:	d902      	bls.n	800cbb4 <memmove+0x10>
 800cbae:	4284      	cmp	r4, r0
 800cbb0:	4623      	mov	r3, r4
 800cbb2:	d807      	bhi.n	800cbc4 <memmove+0x20>
 800cbb4:	1e43      	subs	r3, r0, #1
 800cbb6:	42a1      	cmp	r1, r4
 800cbb8:	d008      	beq.n	800cbcc <memmove+0x28>
 800cbba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbc2:	e7f8      	b.n	800cbb6 <memmove+0x12>
 800cbc4:	4402      	add	r2, r0
 800cbc6:	4601      	mov	r1, r0
 800cbc8:	428a      	cmp	r2, r1
 800cbca:	d100      	bne.n	800cbce <memmove+0x2a>
 800cbcc:	bd10      	pop	{r4, pc}
 800cbce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbd6:	e7f7      	b.n	800cbc8 <memmove+0x24>

0800cbd8 <strncmp>:
 800cbd8:	b510      	push	{r4, lr}
 800cbda:	b16a      	cbz	r2, 800cbf8 <strncmp+0x20>
 800cbdc:	3901      	subs	r1, #1
 800cbde:	1884      	adds	r4, r0, r2
 800cbe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbe4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d103      	bne.n	800cbf4 <strncmp+0x1c>
 800cbec:	42a0      	cmp	r0, r4
 800cbee:	d001      	beq.n	800cbf4 <strncmp+0x1c>
 800cbf0:	2a00      	cmp	r2, #0
 800cbf2:	d1f5      	bne.n	800cbe0 <strncmp+0x8>
 800cbf4:	1ad0      	subs	r0, r2, r3
 800cbf6:	bd10      	pop	{r4, pc}
 800cbf8:	4610      	mov	r0, r2
 800cbfa:	e7fc      	b.n	800cbf6 <strncmp+0x1e>

0800cbfc <_fstat_r>:
 800cbfc:	b538      	push	{r3, r4, r5, lr}
 800cbfe:	4d07      	ldr	r5, [pc, #28]	; (800cc1c <_fstat_r+0x20>)
 800cc00:	2300      	movs	r3, #0
 800cc02:	4604      	mov	r4, r0
 800cc04:	4608      	mov	r0, r1
 800cc06:	4611      	mov	r1, r2
 800cc08:	602b      	str	r3, [r5, #0]
 800cc0a:	f7f5 fac8 	bl	800219e <_fstat>
 800cc0e:	1c43      	adds	r3, r0, #1
 800cc10:	d102      	bne.n	800cc18 <_fstat_r+0x1c>
 800cc12:	682b      	ldr	r3, [r5, #0]
 800cc14:	b103      	cbz	r3, 800cc18 <_fstat_r+0x1c>
 800cc16:	6023      	str	r3, [r4, #0]
 800cc18:	bd38      	pop	{r3, r4, r5, pc}
 800cc1a:	bf00      	nop
 800cc1c:	20001fe8 	.word	0x20001fe8

0800cc20 <_isatty_r>:
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	4d06      	ldr	r5, [pc, #24]	; (800cc3c <_isatty_r+0x1c>)
 800cc24:	2300      	movs	r3, #0
 800cc26:	4604      	mov	r4, r0
 800cc28:	4608      	mov	r0, r1
 800cc2a:	602b      	str	r3, [r5, #0]
 800cc2c:	f7f5 fac7 	bl	80021be <_isatty>
 800cc30:	1c43      	adds	r3, r0, #1
 800cc32:	d102      	bne.n	800cc3a <_isatty_r+0x1a>
 800cc34:	682b      	ldr	r3, [r5, #0]
 800cc36:	b103      	cbz	r3, 800cc3a <_isatty_r+0x1a>
 800cc38:	6023      	str	r3, [r4, #0]
 800cc3a:	bd38      	pop	{r3, r4, r5, pc}
 800cc3c:	20001fe8 	.word	0x20001fe8

0800cc40 <nan>:
 800cc40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cc48 <nan+0x8>
 800cc44:	4770      	bx	lr
 800cc46:	bf00      	nop
 800cc48:	00000000 	.word	0x00000000
 800cc4c:	7ff80000 	.word	0x7ff80000

0800cc50 <__assert_func>:
 800cc50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc52:	4614      	mov	r4, r2
 800cc54:	461a      	mov	r2, r3
 800cc56:	4b09      	ldr	r3, [pc, #36]	; (800cc7c <__assert_func+0x2c>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4605      	mov	r5, r0
 800cc5c:	68d8      	ldr	r0, [r3, #12]
 800cc5e:	b14c      	cbz	r4, 800cc74 <__assert_func+0x24>
 800cc60:	4b07      	ldr	r3, [pc, #28]	; (800cc80 <__assert_func+0x30>)
 800cc62:	9100      	str	r1, [sp, #0]
 800cc64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc68:	4906      	ldr	r1, [pc, #24]	; (800cc84 <__assert_func+0x34>)
 800cc6a:	462b      	mov	r3, r5
 800cc6c:	f000 fbca 	bl	800d404 <fiprintf>
 800cc70:	f000 fbda 	bl	800d428 <abort>
 800cc74:	4b04      	ldr	r3, [pc, #16]	; (800cc88 <__assert_func+0x38>)
 800cc76:	461c      	mov	r4, r3
 800cc78:	e7f3      	b.n	800cc62 <__assert_func+0x12>
 800cc7a:	bf00      	nop
 800cc7c:	2000006c 	.word	0x2000006c
 800cc80:	0800daf2 	.word	0x0800daf2
 800cc84:	0800daff 	.word	0x0800daff
 800cc88:	0800db2d 	.word	0x0800db2d

0800cc8c <_calloc_r>:
 800cc8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc8e:	fba1 2402 	umull	r2, r4, r1, r2
 800cc92:	b94c      	cbnz	r4, 800cca8 <_calloc_r+0x1c>
 800cc94:	4611      	mov	r1, r2
 800cc96:	9201      	str	r2, [sp, #4]
 800cc98:	f7fb ffa8 	bl	8008bec <_malloc_r>
 800cc9c:	9a01      	ldr	r2, [sp, #4]
 800cc9e:	4605      	mov	r5, r0
 800cca0:	b930      	cbnz	r0, 800ccb0 <_calloc_r+0x24>
 800cca2:	4628      	mov	r0, r5
 800cca4:	b003      	add	sp, #12
 800cca6:	bd30      	pop	{r4, r5, pc}
 800cca8:	220c      	movs	r2, #12
 800ccaa:	6002      	str	r2, [r0, #0]
 800ccac:	2500      	movs	r5, #0
 800ccae:	e7f8      	b.n	800cca2 <_calloc_r+0x16>
 800ccb0:	4621      	mov	r1, r4
 800ccb2:	f7fd f8c5 	bl	8009e40 <memset>
 800ccb6:	e7f4      	b.n	800cca2 <_calloc_r+0x16>

0800ccb8 <rshift>:
 800ccb8:	6903      	ldr	r3, [r0, #16]
 800ccba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ccbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccc2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ccc6:	f100 0414 	add.w	r4, r0, #20
 800ccca:	dd45      	ble.n	800cd58 <rshift+0xa0>
 800cccc:	f011 011f 	ands.w	r1, r1, #31
 800ccd0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ccd4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ccd8:	d10c      	bne.n	800ccf4 <rshift+0x3c>
 800ccda:	f100 0710 	add.w	r7, r0, #16
 800ccde:	4629      	mov	r1, r5
 800cce0:	42b1      	cmp	r1, r6
 800cce2:	d334      	bcc.n	800cd4e <rshift+0x96>
 800cce4:	1a9b      	subs	r3, r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	1eea      	subs	r2, r5, #3
 800ccea:	4296      	cmp	r6, r2
 800ccec:	bf38      	it	cc
 800ccee:	2300      	movcc	r3, #0
 800ccf0:	4423      	add	r3, r4
 800ccf2:	e015      	b.n	800cd20 <rshift+0x68>
 800ccf4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ccf8:	f1c1 0820 	rsb	r8, r1, #32
 800ccfc:	40cf      	lsrs	r7, r1
 800ccfe:	f105 0e04 	add.w	lr, r5, #4
 800cd02:	46a1      	mov	r9, r4
 800cd04:	4576      	cmp	r6, lr
 800cd06:	46f4      	mov	ip, lr
 800cd08:	d815      	bhi.n	800cd36 <rshift+0x7e>
 800cd0a:	1a9a      	subs	r2, r3, r2
 800cd0c:	0092      	lsls	r2, r2, #2
 800cd0e:	3a04      	subs	r2, #4
 800cd10:	3501      	adds	r5, #1
 800cd12:	42ae      	cmp	r6, r5
 800cd14:	bf38      	it	cc
 800cd16:	2200      	movcc	r2, #0
 800cd18:	18a3      	adds	r3, r4, r2
 800cd1a:	50a7      	str	r7, [r4, r2]
 800cd1c:	b107      	cbz	r7, 800cd20 <rshift+0x68>
 800cd1e:	3304      	adds	r3, #4
 800cd20:	1b1a      	subs	r2, r3, r4
 800cd22:	42a3      	cmp	r3, r4
 800cd24:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cd28:	bf08      	it	eq
 800cd2a:	2300      	moveq	r3, #0
 800cd2c:	6102      	str	r2, [r0, #16]
 800cd2e:	bf08      	it	eq
 800cd30:	6143      	streq	r3, [r0, #20]
 800cd32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd36:	f8dc c000 	ldr.w	ip, [ip]
 800cd3a:	fa0c fc08 	lsl.w	ip, ip, r8
 800cd3e:	ea4c 0707 	orr.w	r7, ip, r7
 800cd42:	f849 7b04 	str.w	r7, [r9], #4
 800cd46:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cd4a:	40cf      	lsrs	r7, r1
 800cd4c:	e7da      	b.n	800cd04 <rshift+0x4c>
 800cd4e:	f851 cb04 	ldr.w	ip, [r1], #4
 800cd52:	f847 cf04 	str.w	ip, [r7, #4]!
 800cd56:	e7c3      	b.n	800cce0 <rshift+0x28>
 800cd58:	4623      	mov	r3, r4
 800cd5a:	e7e1      	b.n	800cd20 <rshift+0x68>

0800cd5c <__hexdig_fun>:
 800cd5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cd60:	2b09      	cmp	r3, #9
 800cd62:	d802      	bhi.n	800cd6a <__hexdig_fun+0xe>
 800cd64:	3820      	subs	r0, #32
 800cd66:	b2c0      	uxtb	r0, r0
 800cd68:	4770      	bx	lr
 800cd6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cd6e:	2b05      	cmp	r3, #5
 800cd70:	d801      	bhi.n	800cd76 <__hexdig_fun+0x1a>
 800cd72:	3847      	subs	r0, #71	; 0x47
 800cd74:	e7f7      	b.n	800cd66 <__hexdig_fun+0xa>
 800cd76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cd7a:	2b05      	cmp	r3, #5
 800cd7c:	d801      	bhi.n	800cd82 <__hexdig_fun+0x26>
 800cd7e:	3827      	subs	r0, #39	; 0x27
 800cd80:	e7f1      	b.n	800cd66 <__hexdig_fun+0xa>
 800cd82:	2000      	movs	r0, #0
 800cd84:	4770      	bx	lr
	...

0800cd88 <__gethex>:
 800cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8c:	4617      	mov	r7, r2
 800cd8e:	680a      	ldr	r2, [r1, #0]
 800cd90:	b085      	sub	sp, #20
 800cd92:	f102 0b02 	add.w	fp, r2, #2
 800cd96:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cd9a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cd9e:	4681      	mov	r9, r0
 800cda0:	468a      	mov	sl, r1
 800cda2:	9302      	str	r3, [sp, #8]
 800cda4:	32fe      	adds	r2, #254	; 0xfe
 800cda6:	eb02 030b 	add.w	r3, r2, fp
 800cdaa:	46d8      	mov	r8, fp
 800cdac:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800cdb0:	9301      	str	r3, [sp, #4]
 800cdb2:	2830      	cmp	r0, #48	; 0x30
 800cdb4:	d0f7      	beq.n	800cda6 <__gethex+0x1e>
 800cdb6:	f7ff ffd1 	bl	800cd5c <__hexdig_fun>
 800cdba:	4604      	mov	r4, r0
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d138      	bne.n	800ce32 <__gethex+0xaa>
 800cdc0:	49a7      	ldr	r1, [pc, #668]	; (800d060 <__gethex+0x2d8>)
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	4640      	mov	r0, r8
 800cdc6:	f7ff ff07 	bl	800cbd8 <strncmp>
 800cdca:	4606      	mov	r6, r0
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d169      	bne.n	800cea4 <__gethex+0x11c>
 800cdd0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800cdd4:	465d      	mov	r5, fp
 800cdd6:	f7ff ffc1 	bl	800cd5c <__hexdig_fun>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d064      	beq.n	800cea8 <__gethex+0x120>
 800cdde:	465a      	mov	r2, fp
 800cde0:	7810      	ldrb	r0, [r2, #0]
 800cde2:	2830      	cmp	r0, #48	; 0x30
 800cde4:	4690      	mov	r8, r2
 800cde6:	f102 0201 	add.w	r2, r2, #1
 800cdea:	d0f9      	beq.n	800cde0 <__gethex+0x58>
 800cdec:	f7ff ffb6 	bl	800cd5c <__hexdig_fun>
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	fab0 f480 	clz	r4, r0
 800cdf6:	0964      	lsrs	r4, r4, #5
 800cdf8:	465e      	mov	r6, fp
 800cdfa:	9301      	str	r3, [sp, #4]
 800cdfc:	4642      	mov	r2, r8
 800cdfe:	4615      	mov	r5, r2
 800ce00:	3201      	adds	r2, #1
 800ce02:	7828      	ldrb	r0, [r5, #0]
 800ce04:	f7ff ffaa 	bl	800cd5c <__hexdig_fun>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d1f8      	bne.n	800cdfe <__gethex+0x76>
 800ce0c:	4994      	ldr	r1, [pc, #592]	; (800d060 <__gethex+0x2d8>)
 800ce0e:	2201      	movs	r2, #1
 800ce10:	4628      	mov	r0, r5
 800ce12:	f7ff fee1 	bl	800cbd8 <strncmp>
 800ce16:	b978      	cbnz	r0, 800ce38 <__gethex+0xb0>
 800ce18:	b946      	cbnz	r6, 800ce2c <__gethex+0xa4>
 800ce1a:	1c6e      	adds	r6, r5, #1
 800ce1c:	4632      	mov	r2, r6
 800ce1e:	4615      	mov	r5, r2
 800ce20:	3201      	adds	r2, #1
 800ce22:	7828      	ldrb	r0, [r5, #0]
 800ce24:	f7ff ff9a 	bl	800cd5c <__hexdig_fun>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d1f8      	bne.n	800ce1e <__gethex+0x96>
 800ce2c:	1b73      	subs	r3, r6, r5
 800ce2e:	009e      	lsls	r6, r3, #2
 800ce30:	e004      	b.n	800ce3c <__gethex+0xb4>
 800ce32:	2400      	movs	r4, #0
 800ce34:	4626      	mov	r6, r4
 800ce36:	e7e1      	b.n	800cdfc <__gethex+0x74>
 800ce38:	2e00      	cmp	r6, #0
 800ce3a:	d1f7      	bne.n	800ce2c <__gethex+0xa4>
 800ce3c:	782b      	ldrb	r3, [r5, #0]
 800ce3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ce42:	2b50      	cmp	r3, #80	; 0x50
 800ce44:	d13d      	bne.n	800cec2 <__gethex+0x13a>
 800ce46:	786b      	ldrb	r3, [r5, #1]
 800ce48:	2b2b      	cmp	r3, #43	; 0x2b
 800ce4a:	d02f      	beq.n	800ceac <__gethex+0x124>
 800ce4c:	2b2d      	cmp	r3, #45	; 0x2d
 800ce4e:	d031      	beq.n	800ceb4 <__gethex+0x12c>
 800ce50:	1c69      	adds	r1, r5, #1
 800ce52:	f04f 0b00 	mov.w	fp, #0
 800ce56:	7808      	ldrb	r0, [r1, #0]
 800ce58:	f7ff ff80 	bl	800cd5c <__hexdig_fun>
 800ce5c:	1e42      	subs	r2, r0, #1
 800ce5e:	b2d2      	uxtb	r2, r2
 800ce60:	2a18      	cmp	r2, #24
 800ce62:	d82e      	bhi.n	800cec2 <__gethex+0x13a>
 800ce64:	f1a0 0210 	sub.w	r2, r0, #16
 800ce68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ce6c:	f7ff ff76 	bl	800cd5c <__hexdig_fun>
 800ce70:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800ce74:	fa5f fc8c 	uxtb.w	ip, ip
 800ce78:	f1bc 0f18 	cmp.w	ip, #24
 800ce7c:	d91d      	bls.n	800ceba <__gethex+0x132>
 800ce7e:	f1bb 0f00 	cmp.w	fp, #0
 800ce82:	d000      	beq.n	800ce86 <__gethex+0xfe>
 800ce84:	4252      	negs	r2, r2
 800ce86:	4416      	add	r6, r2
 800ce88:	f8ca 1000 	str.w	r1, [sl]
 800ce8c:	b1dc      	cbz	r4, 800cec6 <__gethex+0x13e>
 800ce8e:	9b01      	ldr	r3, [sp, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	bf14      	ite	ne
 800ce94:	f04f 0800 	movne.w	r8, #0
 800ce98:	f04f 0806 	moveq.w	r8, #6
 800ce9c:	4640      	mov	r0, r8
 800ce9e:	b005      	add	sp, #20
 800cea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea4:	4645      	mov	r5, r8
 800cea6:	4626      	mov	r6, r4
 800cea8:	2401      	movs	r4, #1
 800ceaa:	e7c7      	b.n	800ce3c <__gethex+0xb4>
 800ceac:	f04f 0b00 	mov.w	fp, #0
 800ceb0:	1ca9      	adds	r1, r5, #2
 800ceb2:	e7d0      	b.n	800ce56 <__gethex+0xce>
 800ceb4:	f04f 0b01 	mov.w	fp, #1
 800ceb8:	e7fa      	b.n	800ceb0 <__gethex+0x128>
 800ceba:	230a      	movs	r3, #10
 800cebc:	fb03 0002 	mla	r0, r3, r2, r0
 800cec0:	e7d0      	b.n	800ce64 <__gethex+0xdc>
 800cec2:	4629      	mov	r1, r5
 800cec4:	e7e0      	b.n	800ce88 <__gethex+0x100>
 800cec6:	eba5 0308 	sub.w	r3, r5, r8
 800ceca:	3b01      	subs	r3, #1
 800cecc:	4621      	mov	r1, r4
 800cece:	2b07      	cmp	r3, #7
 800ced0:	dc0a      	bgt.n	800cee8 <__gethex+0x160>
 800ced2:	4648      	mov	r0, r9
 800ced4:	f7fd ff76 	bl	800adc4 <_Balloc>
 800ced8:	4604      	mov	r4, r0
 800ceda:	b940      	cbnz	r0, 800ceee <__gethex+0x166>
 800cedc:	4b61      	ldr	r3, [pc, #388]	; (800d064 <__gethex+0x2dc>)
 800cede:	4602      	mov	r2, r0
 800cee0:	21e4      	movs	r1, #228	; 0xe4
 800cee2:	4861      	ldr	r0, [pc, #388]	; (800d068 <__gethex+0x2e0>)
 800cee4:	f7ff feb4 	bl	800cc50 <__assert_func>
 800cee8:	3101      	adds	r1, #1
 800ceea:	105b      	asrs	r3, r3, #1
 800ceec:	e7ef      	b.n	800cece <__gethex+0x146>
 800ceee:	f100 0a14 	add.w	sl, r0, #20
 800cef2:	2300      	movs	r3, #0
 800cef4:	495a      	ldr	r1, [pc, #360]	; (800d060 <__gethex+0x2d8>)
 800cef6:	f8cd a004 	str.w	sl, [sp, #4]
 800cefa:	469b      	mov	fp, r3
 800cefc:	45a8      	cmp	r8, r5
 800cefe:	d342      	bcc.n	800cf86 <__gethex+0x1fe>
 800cf00:	9801      	ldr	r0, [sp, #4]
 800cf02:	f840 bb04 	str.w	fp, [r0], #4
 800cf06:	eba0 000a 	sub.w	r0, r0, sl
 800cf0a:	1080      	asrs	r0, r0, #2
 800cf0c:	6120      	str	r0, [r4, #16]
 800cf0e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800cf12:	4658      	mov	r0, fp
 800cf14:	f7fe f848 	bl	800afa8 <__hi0bits>
 800cf18:	683d      	ldr	r5, [r7, #0]
 800cf1a:	eba8 0000 	sub.w	r0, r8, r0
 800cf1e:	42a8      	cmp	r0, r5
 800cf20:	dd59      	ble.n	800cfd6 <__gethex+0x24e>
 800cf22:	eba0 0805 	sub.w	r8, r0, r5
 800cf26:	4641      	mov	r1, r8
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f7fe fbd7 	bl	800b6dc <__any_on>
 800cf2e:	4683      	mov	fp, r0
 800cf30:	b1b8      	cbz	r0, 800cf62 <__gethex+0x1da>
 800cf32:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800cf36:	1159      	asrs	r1, r3, #5
 800cf38:	f003 021f 	and.w	r2, r3, #31
 800cf3c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cf40:	f04f 0b01 	mov.w	fp, #1
 800cf44:	fa0b f202 	lsl.w	r2, fp, r2
 800cf48:	420a      	tst	r2, r1
 800cf4a:	d00a      	beq.n	800cf62 <__gethex+0x1da>
 800cf4c:	455b      	cmp	r3, fp
 800cf4e:	dd06      	ble.n	800cf5e <__gethex+0x1d6>
 800cf50:	f1a8 0102 	sub.w	r1, r8, #2
 800cf54:	4620      	mov	r0, r4
 800cf56:	f7fe fbc1 	bl	800b6dc <__any_on>
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	d138      	bne.n	800cfd0 <__gethex+0x248>
 800cf5e:	f04f 0b02 	mov.w	fp, #2
 800cf62:	4641      	mov	r1, r8
 800cf64:	4620      	mov	r0, r4
 800cf66:	f7ff fea7 	bl	800ccb8 <rshift>
 800cf6a:	4446      	add	r6, r8
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	42b3      	cmp	r3, r6
 800cf70:	da41      	bge.n	800cff6 <__gethex+0x26e>
 800cf72:	4621      	mov	r1, r4
 800cf74:	4648      	mov	r0, r9
 800cf76:	f7fd ff65 	bl	800ae44 <_Bfree>
 800cf7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	6013      	str	r3, [r2, #0]
 800cf80:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cf84:	e78a      	b.n	800ce9c <__gethex+0x114>
 800cf86:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cf8a:	2a2e      	cmp	r2, #46	; 0x2e
 800cf8c:	d014      	beq.n	800cfb8 <__gethex+0x230>
 800cf8e:	2b20      	cmp	r3, #32
 800cf90:	d106      	bne.n	800cfa0 <__gethex+0x218>
 800cf92:	9b01      	ldr	r3, [sp, #4]
 800cf94:	f843 bb04 	str.w	fp, [r3], #4
 800cf98:	f04f 0b00 	mov.w	fp, #0
 800cf9c:	9301      	str	r3, [sp, #4]
 800cf9e:	465b      	mov	r3, fp
 800cfa0:	7828      	ldrb	r0, [r5, #0]
 800cfa2:	9303      	str	r3, [sp, #12]
 800cfa4:	f7ff feda 	bl	800cd5c <__hexdig_fun>
 800cfa8:	9b03      	ldr	r3, [sp, #12]
 800cfaa:	f000 000f 	and.w	r0, r0, #15
 800cfae:	4098      	lsls	r0, r3
 800cfb0:	ea4b 0b00 	orr.w	fp, fp, r0
 800cfb4:	3304      	adds	r3, #4
 800cfb6:	e7a1      	b.n	800cefc <__gethex+0x174>
 800cfb8:	45a8      	cmp	r8, r5
 800cfba:	d8e8      	bhi.n	800cf8e <__gethex+0x206>
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	9303      	str	r3, [sp, #12]
 800cfc2:	f7ff fe09 	bl	800cbd8 <strncmp>
 800cfc6:	4926      	ldr	r1, [pc, #152]	; (800d060 <__gethex+0x2d8>)
 800cfc8:	9b03      	ldr	r3, [sp, #12]
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	d1df      	bne.n	800cf8e <__gethex+0x206>
 800cfce:	e795      	b.n	800cefc <__gethex+0x174>
 800cfd0:	f04f 0b03 	mov.w	fp, #3
 800cfd4:	e7c5      	b.n	800cf62 <__gethex+0x1da>
 800cfd6:	da0b      	bge.n	800cff0 <__gethex+0x268>
 800cfd8:	eba5 0800 	sub.w	r8, r5, r0
 800cfdc:	4621      	mov	r1, r4
 800cfde:	4642      	mov	r2, r8
 800cfe0:	4648      	mov	r0, r9
 800cfe2:	f7fe f949 	bl	800b278 <__lshift>
 800cfe6:	eba6 0608 	sub.w	r6, r6, r8
 800cfea:	4604      	mov	r4, r0
 800cfec:	f100 0a14 	add.w	sl, r0, #20
 800cff0:	f04f 0b00 	mov.w	fp, #0
 800cff4:	e7ba      	b.n	800cf6c <__gethex+0x1e4>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	42b3      	cmp	r3, r6
 800cffa:	dd73      	ble.n	800d0e4 <__gethex+0x35c>
 800cffc:	1b9e      	subs	r6, r3, r6
 800cffe:	42b5      	cmp	r5, r6
 800d000:	dc34      	bgt.n	800d06c <__gethex+0x2e4>
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2b02      	cmp	r3, #2
 800d006:	d023      	beq.n	800d050 <__gethex+0x2c8>
 800d008:	2b03      	cmp	r3, #3
 800d00a:	d025      	beq.n	800d058 <__gethex+0x2d0>
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d115      	bne.n	800d03c <__gethex+0x2b4>
 800d010:	42b5      	cmp	r5, r6
 800d012:	d113      	bne.n	800d03c <__gethex+0x2b4>
 800d014:	2d01      	cmp	r5, #1
 800d016:	d10b      	bne.n	800d030 <__gethex+0x2a8>
 800d018:	9a02      	ldr	r2, [sp, #8]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6013      	str	r3, [r2, #0]
 800d01e:	2301      	movs	r3, #1
 800d020:	6123      	str	r3, [r4, #16]
 800d022:	f8ca 3000 	str.w	r3, [sl]
 800d026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d028:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d02c:	601c      	str	r4, [r3, #0]
 800d02e:	e735      	b.n	800ce9c <__gethex+0x114>
 800d030:	1e69      	subs	r1, r5, #1
 800d032:	4620      	mov	r0, r4
 800d034:	f7fe fb52 	bl	800b6dc <__any_on>
 800d038:	2800      	cmp	r0, #0
 800d03a:	d1ed      	bne.n	800d018 <__gethex+0x290>
 800d03c:	4621      	mov	r1, r4
 800d03e:	4648      	mov	r0, r9
 800d040:	f7fd ff00 	bl	800ae44 <_Bfree>
 800d044:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d046:	2300      	movs	r3, #0
 800d048:	6013      	str	r3, [r2, #0]
 800d04a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d04e:	e725      	b.n	800ce9c <__gethex+0x114>
 800d050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d052:	2b00      	cmp	r3, #0
 800d054:	d1f2      	bne.n	800d03c <__gethex+0x2b4>
 800d056:	e7df      	b.n	800d018 <__gethex+0x290>
 800d058:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d1dc      	bne.n	800d018 <__gethex+0x290>
 800d05e:	e7ed      	b.n	800d03c <__gethex+0x2b4>
 800d060:	0800d984 	.word	0x0800d984
 800d064:	0800d819 	.word	0x0800d819
 800d068:	0800db2e 	.word	0x0800db2e
 800d06c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800d070:	f1bb 0f00 	cmp.w	fp, #0
 800d074:	d133      	bne.n	800d0de <__gethex+0x356>
 800d076:	f1b8 0f00 	cmp.w	r8, #0
 800d07a:	d004      	beq.n	800d086 <__gethex+0x2fe>
 800d07c:	4641      	mov	r1, r8
 800d07e:	4620      	mov	r0, r4
 800d080:	f7fe fb2c 	bl	800b6dc <__any_on>
 800d084:	4683      	mov	fp, r0
 800d086:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d08a:	2301      	movs	r3, #1
 800d08c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d090:	f008 081f 	and.w	r8, r8, #31
 800d094:	fa03 f308 	lsl.w	r3, r3, r8
 800d098:	4213      	tst	r3, r2
 800d09a:	4631      	mov	r1, r6
 800d09c:	4620      	mov	r0, r4
 800d09e:	bf18      	it	ne
 800d0a0:	f04b 0b02 	orrne.w	fp, fp, #2
 800d0a4:	1bad      	subs	r5, r5, r6
 800d0a6:	f7ff fe07 	bl	800ccb8 <rshift>
 800d0aa:	687e      	ldr	r6, [r7, #4]
 800d0ac:	f04f 0802 	mov.w	r8, #2
 800d0b0:	f1bb 0f00 	cmp.w	fp, #0
 800d0b4:	d04a      	beq.n	800d14c <__gethex+0x3c4>
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2b02      	cmp	r3, #2
 800d0ba:	d016      	beq.n	800d0ea <__gethex+0x362>
 800d0bc:	2b03      	cmp	r3, #3
 800d0be:	d018      	beq.n	800d0f2 <__gethex+0x36a>
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d109      	bne.n	800d0d8 <__gethex+0x350>
 800d0c4:	f01b 0f02 	tst.w	fp, #2
 800d0c8:	d006      	beq.n	800d0d8 <__gethex+0x350>
 800d0ca:	f8da 3000 	ldr.w	r3, [sl]
 800d0ce:	ea4b 0b03 	orr.w	fp, fp, r3
 800d0d2:	f01b 0f01 	tst.w	fp, #1
 800d0d6:	d10f      	bne.n	800d0f8 <__gethex+0x370>
 800d0d8:	f048 0810 	orr.w	r8, r8, #16
 800d0dc:	e036      	b.n	800d14c <__gethex+0x3c4>
 800d0de:	f04f 0b01 	mov.w	fp, #1
 800d0e2:	e7d0      	b.n	800d086 <__gethex+0x2fe>
 800d0e4:	f04f 0801 	mov.w	r8, #1
 800d0e8:	e7e2      	b.n	800d0b0 <__gethex+0x328>
 800d0ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0ec:	f1c3 0301 	rsb	r3, r3, #1
 800d0f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d0ef      	beq.n	800d0d8 <__gethex+0x350>
 800d0f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d0fc:	f104 0214 	add.w	r2, r4, #20
 800d100:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d104:	9301      	str	r3, [sp, #4]
 800d106:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d10a:	2300      	movs	r3, #0
 800d10c:	4694      	mov	ip, r2
 800d10e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d112:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800d116:	d01e      	beq.n	800d156 <__gethex+0x3ce>
 800d118:	3101      	adds	r1, #1
 800d11a:	f8cc 1000 	str.w	r1, [ip]
 800d11e:	f1b8 0f02 	cmp.w	r8, #2
 800d122:	f104 0214 	add.w	r2, r4, #20
 800d126:	d13d      	bne.n	800d1a4 <__gethex+0x41c>
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	3b01      	subs	r3, #1
 800d12c:	42ab      	cmp	r3, r5
 800d12e:	d10b      	bne.n	800d148 <__gethex+0x3c0>
 800d130:	1169      	asrs	r1, r5, #5
 800d132:	2301      	movs	r3, #1
 800d134:	f005 051f 	and.w	r5, r5, #31
 800d138:	fa03 f505 	lsl.w	r5, r3, r5
 800d13c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d140:	421d      	tst	r5, r3
 800d142:	bf18      	it	ne
 800d144:	f04f 0801 	movne.w	r8, #1
 800d148:	f048 0820 	orr.w	r8, r8, #32
 800d14c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d14e:	601c      	str	r4, [r3, #0]
 800d150:	9b02      	ldr	r3, [sp, #8]
 800d152:	601e      	str	r6, [r3, #0]
 800d154:	e6a2      	b.n	800ce9c <__gethex+0x114>
 800d156:	4290      	cmp	r0, r2
 800d158:	f842 3c04 	str.w	r3, [r2, #-4]
 800d15c:	d8d6      	bhi.n	800d10c <__gethex+0x384>
 800d15e:	68a2      	ldr	r2, [r4, #8]
 800d160:	4593      	cmp	fp, r2
 800d162:	db17      	blt.n	800d194 <__gethex+0x40c>
 800d164:	6861      	ldr	r1, [r4, #4]
 800d166:	4648      	mov	r0, r9
 800d168:	3101      	adds	r1, #1
 800d16a:	f7fd fe2b 	bl	800adc4 <_Balloc>
 800d16e:	4682      	mov	sl, r0
 800d170:	b918      	cbnz	r0, 800d17a <__gethex+0x3f2>
 800d172:	4b1b      	ldr	r3, [pc, #108]	; (800d1e0 <__gethex+0x458>)
 800d174:	4602      	mov	r2, r0
 800d176:	2184      	movs	r1, #132	; 0x84
 800d178:	e6b3      	b.n	800cee2 <__gethex+0x15a>
 800d17a:	6922      	ldr	r2, [r4, #16]
 800d17c:	3202      	adds	r2, #2
 800d17e:	f104 010c 	add.w	r1, r4, #12
 800d182:	0092      	lsls	r2, r2, #2
 800d184:	300c      	adds	r0, #12
 800d186:	f7fc ff40 	bl	800a00a <memcpy>
 800d18a:	4621      	mov	r1, r4
 800d18c:	4648      	mov	r0, r9
 800d18e:	f7fd fe59 	bl	800ae44 <_Bfree>
 800d192:	4654      	mov	r4, sl
 800d194:	6922      	ldr	r2, [r4, #16]
 800d196:	1c51      	adds	r1, r2, #1
 800d198:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d19c:	6121      	str	r1, [r4, #16]
 800d19e:	2101      	movs	r1, #1
 800d1a0:	6151      	str	r1, [r2, #20]
 800d1a2:	e7bc      	b.n	800d11e <__gethex+0x396>
 800d1a4:	6921      	ldr	r1, [r4, #16]
 800d1a6:	4559      	cmp	r1, fp
 800d1a8:	dd0b      	ble.n	800d1c2 <__gethex+0x43a>
 800d1aa:	2101      	movs	r1, #1
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	f7ff fd83 	bl	800ccb8 <rshift>
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	3601      	adds	r6, #1
 800d1b6:	42b3      	cmp	r3, r6
 800d1b8:	f6ff aedb 	blt.w	800cf72 <__gethex+0x1ea>
 800d1bc:	f04f 0801 	mov.w	r8, #1
 800d1c0:	e7c2      	b.n	800d148 <__gethex+0x3c0>
 800d1c2:	f015 051f 	ands.w	r5, r5, #31
 800d1c6:	d0f9      	beq.n	800d1bc <__gethex+0x434>
 800d1c8:	9b01      	ldr	r3, [sp, #4]
 800d1ca:	441a      	add	r2, r3
 800d1cc:	f1c5 0520 	rsb	r5, r5, #32
 800d1d0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d1d4:	f7fd fee8 	bl	800afa8 <__hi0bits>
 800d1d8:	42a8      	cmp	r0, r5
 800d1da:	dbe6      	blt.n	800d1aa <__gethex+0x422>
 800d1dc:	e7ee      	b.n	800d1bc <__gethex+0x434>
 800d1de:	bf00      	nop
 800d1e0:	0800d819 	.word	0x0800d819

0800d1e4 <L_shift>:
 800d1e4:	f1c2 0208 	rsb	r2, r2, #8
 800d1e8:	0092      	lsls	r2, r2, #2
 800d1ea:	b570      	push	{r4, r5, r6, lr}
 800d1ec:	f1c2 0620 	rsb	r6, r2, #32
 800d1f0:	6843      	ldr	r3, [r0, #4]
 800d1f2:	6804      	ldr	r4, [r0, #0]
 800d1f4:	fa03 f506 	lsl.w	r5, r3, r6
 800d1f8:	432c      	orrs	r4, r5
 800d1fa:	40d3      	lsrs	r3, r2
 800d1fc:	6004      	str	r4, [r0, #0]
 800d1fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800d202:	4288      	cmp	r0, r1
 800d204:	d3f4      	bcc.n	800d1f0 <L_shift+0xc>
 800d206:	bd70      	pop	{r4, r5, r6, pc}

0800d208 <__match>:
 800d208:	b530      	push	{r4, r5, lr}
 800d20a:	6803      	ldr	r3, [r0, #0]
 800d20c:	3301      	adds	r3, #1
 800d20e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d212:	b914      	cbnz	r4, 800d21a <__match+0x12>
 800d214:	6003      	str	r3, [r0, #0]
 800d216:	2001      	movs	r0, #1
 800d218:	bd30      	pop	{r4, r5, pc}
 800d21a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d21e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d222:	2d19      	cmp	r5, #25
 800d224:	bf98      	it	ls
 800d226:	3220      	addls	r2, #32
 800d228:	42a2      	cmp	r2, r4
 800d22a:	d0f0      	beq.n	800d20e <__match+0x6>
 800d22c:	2000      	movs	r0, #0
 800d22e:	e7f3      	b.n	800d218 <__match+0x10>

0800d230 <__hexnan>:
 800d230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d234:	680b      	ldr	r3, [r1, #0]
 800d236:	6801      	ldr	r1, [r0, #0]
 800d238:	115e      	asrs	r6, r3, #5
 800d23a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d23e:	f013 031f 	ands.w	r3, r3, #31
 800d242:	b087      	sub	sp, #28
 800d244:	bf18      	it	ne
 800d246:	3604      	addne	r6, #4
 800d248:	2500      	movs	r5, #0
 800d24a:	1f37      	subs	r7, r6, #4
 800d24c:	4682      	mov	sl, r0
 800d24e:	4690      	mov	r8, r2
 800d250:	9301      	str	r3, [sp, #4]
 800d252:	f846 5c04 	str.w	r5, [r6, #-4]
 800d256:	46b9      	mov	r9, r7
 800d258:	463c      	mov	r4, r7
 800d25a:	9502      	str	r5, [sp, #8]
 800d25c:	46ab      	mov	fp, r5
 800d25e:	784a      	ldrb	r2, [r1, #1]
 800d260:	1c4b      	adds	r3, r1, #1
 800d262:	9303      	str	r3, [sp, #12]
 800d264:	b342      	cbz	r2, 800d2b8 <__hexnan+0x88>
 800d266:	4610      	mov	r0, r2
 800d268:	9105      	str	r1, [sp, #20]
 800d26a:	9204      	str	r2, [sp, #16]
 800d26c:	f7ff fd76 	bl	800cd5c <__hexdig_fun>
 800d270:	2800      	cmp	r0, #0
 800d272:	d14f      	bne.n	800d314 <__hexnan+0xe4>
 800d274:	9a04      	ldr	r2, [sp, #16]
 800d276:	9905      	ldr	r1, [sp, #20]
 800d278:	2a20      	cmp	r2, #32
 800d27a:	d818      	bhi.n	800d2ae <__hexnan+0x7e>
 800d27c:	9b02      	ldr	r3, [sp, #8]
 800d27e:	459b      	cmp	fp, r3
 800d280:	dd13      	ble.n	800d2aa <__hexnan+0x7a>
 800d282:	454c      	cmp	r4, r9
 800d284:	d206      	bcs.n	800d294 <__hexnan+0x64>
 800d286:	2d07      	cmp	r5, #7
 800d288:	dc04      	bgt.n	800d294 <__hexnan+0x64>
 800d28a:	462a      	mov	r2, r5
 800d28c:	4649      	mov	r1, r9
 800d28e:	4620      	mov	r0, r4
 800d290:	f7ff ffa8 	bl	800d1e4 <L_shift>
 800d294:	4544      	cmp	r4, r8
 800d296:	d950      	bls.n	800d33a <__hexnan+0x10a>
 800d298:	2300      	movs	r3, #0
 800d29a:	f1a4 0904 	sub.w	r9, r4, #4
 800d29e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d2a2:	f8cd b008 	str.w	fp, [sp, #8]
 800d2a6:	464c      	mov	r4, r9
 800d2a8:	461d      	mov	r5, r3
 800d2aa:	9903      	ldr	r1, [sp, #12]
 800d2ac:	e7d7      	b.n	800d25e <__hexnan+0x2e>
 800d2ae:	2a29      	cmp	r2, #41	; 0x29
 800d2b0:	d155      	bne.n	800d35e <__hexnan+0x12e>
 800d2b2:	3102      	adds	r1, #2
 800d2b4:	f8ca 1000 	str.w	r1, [sl]
 800d2b8:	f1bb 0f00 	cmp.w	fp, #0
 800d2bc:	d04f      	beq.n	800d35e <__hexnan+0x12e>
 800d2be:	454c      	cmp	r4, r9
 800d2c0:	d206      	bcs.n	800d2d0 <__hexnan+0xa0>
 800d2c2:	2d07      	cmp	r5, #7
 800d2c4:	dc04      	bgt.n	800d2d0 <__hexnan+0xa0>
 800d2c6:	462a      	mov	r2, r5
 800d2c8:	4649      	mov	r1, r9
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	f7ff ff8a 	bl	800d1e4 <L_shift>
 800d2d0:	4544      	cmp	r4, r8
 800d2d2:	d934      	bls.n	800d33e <__hexnan+0x10e>
 800d2d4:	f1a8 0204 	sub.w	r2, r8, #4
 800d2d8:	4623      	mov	r3, r4
 800d2da:	f853 1b04 	ldr.w	r1, [r3], #4
 800d2de:	f842 1f04 	str.w	r1, [r2, #4]!
 800d2e2:	429f      	cmp	r7, r3
 800d2e4:	d2f9      	bcs.n	800d2da <__hexnan+0xaa>
 800d2e6:	1b3b      	subs	r3, r7, r4
 800d2e8:	f023 0303 	bic.w	r3, r3, #3
 800d2ec:	3304      	adds	r3, #4
 800d2ee:	3e03      	subs	r6, #3
 800d2f0:	3401      	adds	r4, #1
 800d2f2:	42a6      	cmp	r6, r4
 800d2f4:	bf38      	it	cc
 800d2f6:	2304      	movcc	r3, #4
 800d2f8:	4443      	add	r3, r8
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f843 2b04 	str.w	r2, [r3], #4
 800d300:	429f      	cmp	r7, r3
 800d302:	d2fb      	bcs.n	800d2fc <__hexnan+0xcc>
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	b91b      	cbnz	r3, 800d310 <__hexnan+0xe0>
 800d308:	4547      	cmp	r7, r8
 800d30a:	d126      	bne.n	800d35a <__hexnan+0x12a>
 800d30c:	2301      	movs	r3, #1
 800d30e:	603b      	str	r3, [r7, #0]
 800d310:	2005      	movs	r0, #5
 800d312:	e025      	b.n	800d360 <__hexnan+0x130>
 800d314:	3501      	adds	r5, #1
 800d316:	2d08      	cmp	r5, #8
 800d318:	f10b 0b01 	add.w	fp, fp, #1
 800d31c:	dd06      	ble.n	800d32c <__hexnan+0xfc>
 800d31e:	4544      	cmp	r4, r8
 800d320:	d9c3      	bls.n	800d2aa <__hexnan+0x7a>
 800d322:	2300      	movs	r3, #0
 800d324:	f844 3c04 	str.w	r3, [r4, #-4]
 800d328:	2501      	movs	r5, #1
 800d32a:	3c04      	subs	r4, #4
 800d32c:	6822      	ldr	r2, [r4, #0]
 800d32e:	f000 000f 	and.w	r0, r0, #15
 800d332:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d336:	6020      	str	r0, [r4, #0]
 800d338:	e7b7      	b.n	800d2aa <__hexnan+0x7a>
 800d33a:	2508      	movs	r5, #8
 800d33c:	e7b5      	b.n	800d2aa <__hexnan+0x7a>
 800d33e:	9b01      	ldr	r3, [sp, #4]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d0df      	beq.n	800d304 <__hexnan+0xd4>
 800d344:	f1c3 0320 	rsb	r3, r3, #32
 800d348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d34c:	40da      	lsrs	r2, r3
 800d34e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d352:	4013      	ands	r3, r2
 800d354:	f846 3c04 	str.w	r3, [r6, #-4]
 800d358:	e7d4      	b.n	800d304 <__hexnan+0xd4>
 800d35a:	3f04      	subs	r7, #4
 800d35c:	e7d2      	b.n	800d304 <__hexnan+0xd4>
 800d35e:	2004      	movs	r0, #4
 800d360:	b007      	add	sp, #28
 800d362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d366 <__ascii_mbtowc>:
 800d366:	b082      	sub	sp, #8
 800d368:	b901      	cbnz	r1, 800d36c <__ascii_mbtowc+0x6>
 800d36a:	a901      	add	r1, sp, #4
 800d36c:	b142      	cbz	r2, 800d380 <__ascii_mbtowc+0x1a>
 800d36e:	b14b      	cbz	r3, 800d384 <__ascii_mbtowc+0x1e>
 800d370:	7813      	ldrb	r3, [r2, #0]
 800d372:	600b      	str	r3, [r1, #0]
 800d374:	7812      	ldrb	r2, [r2, #0]
 800d376:	1e10      	subs	r0, r2, #0
 800d378:	bf18      	it	ne
 800d37a:	2001      	movne	r0, #1
 800d37c:	b002      	add	sp, #8
 800d37e:	4770      	bx	lr
 800d380:	4610      	mov	r0, r2
 800d382:	e7fb      	b.n	800d37c <__ascii_mbtowc+0x16>
 800d384:	f06f 0001 	mvn.w	r0, #1
 800d388:	e7f8      	b.n	800d37c <__ascii_mbtowc+0x16>

0800d38a <_realloc_r>:
 800d38a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d38e:	4680      	mov	r8, r0
 800d390:	4614      	mov	r4, r2
 800d392:	460e      	mov	r6, r1
 800d394:	b921      	cbnz	r1, 800d3a0 <_realloc_r+0x16>
 800d396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d39a:	4611      	mov	r1, r2
 800d39c:	f7fb bc26 	b.w	8008bec <_malloc_r>
 800d3a0:	b92a      	cbnz	r2, 800d3ae <_realloc_r+0x24>
 800d3a2:	f7fd fcc3 	bl	800ad2c <_free_r>
 800d3a6:	4625      	mov	r5, r4
 800d3a8:	4628      	mov	r0, r5
 800d3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ae:	f000 f842 	bl	800d436 <_malloc_usable_size_r>
 800d3b2:	4284      	cmp	r4, r0
 800d3b4:	4607      	mov	r7, r0
 800d3b6:	d802      	bhi.n	800d3be <_realloc_r+0x34>
 800d3b8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3bc:	d812      	bhi.n	800d3e4 <_realloc_r+0x5a>
 800d3be:	4621      	mov	r1, r4
 800d3c0:	4640      	mov	r0, r8
 800d3c2:	f7fb fc13 	bl	8008bec <_malloc_r>
 800d3c6:	4605      	mov	r5, r0
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d0ed      	beq.n	800d3a8 <_realloc_r+0x1e>
 800d3cc:	42bc      	cmp	r4, r7
 800d3ce:	4622      	mov	r2, r4
 800d3d0:	4631      	mov	r1, r6
 800d3d2:	bf28      	it	cs
 800d3d4:	463a      	movcs	r2, r7
 800d3d6:	f7fc fe18 	bl	800a00a <memcpy>
 800d3da:	4631      	mov	r1, r6
 800d3dc:	4640      	mov	r0, r8
 800d3de:	f7fd fca5 	bl	800ad2c <_free_r>
 800d3e2:	e7e1      	b.n	800d3a8 <_realloc_r+0x1e>
 800d3e4:	4635      	mov	r5, r6
 800d3e6:	e7df      	b.n	800d3a8 <_realloc_r+0x1e>

0800d3e8 <__ascii_wctomb>:
 800d3e8:	b149      	cbz	r1, 800d3fe <__ascii_wctomb+0x16>
 800d3ea:	2aff      	cmp	r2, #255	; 0xff
 800d3ec:	bf85      	ittet	hi
 800d3ee:	238a      	movhi	r3, #138	; 0x8a
 800d3f0:	6003      	strhi	r3, [r0, #0]
 800d3f2:	700a      	strbls	r2, [r1, #0]
 800d3f4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d3f8:	bf98      	it	ls
 800d3fa:	2001      	movls	r0, #1
 800d3fc:	4770      	bx	lr
 800d3fe:	4608      	mov	r0, r1
 800d400:	4770      	bx	lr
	...

0800d404 <fiprintf>:
 800d404:	b40e      	push	{r1, r2, r3}
 800d406:	b503      	push	{r0, r1, lr}
 800d408:	4601      	mov	r1, r0
 800d40a:	ab03      	add	r3, sp, #12
 800d40c:	4805      	ldr	r0, [pc, #20]	; (800d424 <fiprintf+0x20>)
 800d40e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d412:	6800      	ldr	r0, [r0, #0]
 800d414:	9301      	str	r3, [sp, #4]
 800d416:	f7ff f99b 	bl	800c750 <_vfiprintf_r>
 800d41a:	b002      	add	sp, #8
 800d41c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d420:	b003      	add	sp, #12
 800d422:	4770      	bx	lr
 800d424:	2000006c 	.word	0x2000006c

0800d428 <abort>:
 800d428:	b508      	push	{r3, lr}
 800d42a:	2006      	movs	r0, #6
 800d42c:	f000 f834 	bl	800d498 <raise>
 800d430:	2001      	movs	r0, #1
 800d432:	f7f4 fe65 	bl	8002100 <_exit>

0800d436 <_malloc_usable_size_r>:
 800d436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d43a:	1f18      	subs	r0, r3, #4
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	bfbc      	itt	lt
 800d440:	580b      	ldrlt	r3, [r1, r0]
 800d442:	18c0      	addlt	r0, r0, r3
 800d444:	4770      	bx	lr

0800d446 <_raise_r>:
 800d446:	291f      	cmp	r1, #31
 800d448:	b538      	push	{r3, r4, r5, lr}
 800d44a:	4604      	mov	r4, r0
 800d44c:	460d      	mov	r5, r1
 800d44e:	d904      	bls.n	800d45a <_raise_r+0x14>
 800d450:	2316      	movs	r3, #22
 800d452:	6003      	str	r3, [r0, #0]
 800d454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d458:	bd38      	pop	{r3, r4, r5, pc}
 800d45a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d45c:	b112      	cbz	r2, 800d464 <_raise_r+0x1e>
 800d45e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d462:	b94b      	cbnz	r3, 800d478 <_raise_r+0x32>
 800d464:	4620      	mov	r0, r4
 800d466:	f000 f831 	bl	800d4cc <_getpid_r>
 800d46a:	462a      	mov	r2, r5
 800d46c:	4601      	mov	r1, r0
 800d46e:	4620      	mov	r0, r4
 800d470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d474:	f000 b818 	b.w	800d4a8 <_kill_r>
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d00a      	beq.n	800d492 <_raise_r+0x4c>
 800d47c:	1c59      	adds	r1, r3, #1
 800d47e:	d103      	bne.n	800d488 <_raise_r+0x42>
 800d480:	2316      	movs	r3, #22
 800d482:	6003      	str	r3, [r0, #0]
 800d484:	2001      	movs	r0, #1
 800d486:	e7e7      	b.n	800d458 <_raise_r+0x12>
 800d488:	2400      	movs	r4, #0
 800d48a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d48e:	4628      	mov	r0, r5
 800d490:	4798      	blx	r3
 800d492:	2000      	movs	r0, #0
 800d494:	e7e0      	b.n	800d458 <_raise_r+0x12>
	...

0800d498 <raise>:
 800d498:	4b02      	ldr	r3, [pc, #8]	; (800d4a4 <raise+0xc>)
 800d49a:	4601      	mov	r1, r0
 800d49c:	6818      	ldr	r0, [r3, #0]
 800d49e:	f7ff bfd2 	b.w	800d446 <_raise_r>
 800d4a2:	bf00      	nop
 800d4a4:	2000006c 	.word	0x2000006c

0800d4a8 <_kill_r>:
 800d4a8:	b538      	push	{r3, r4, r5, lr}
 800d4aa:	4d07      	ldr	r5, [pc, #28]	; (800d4c8 <_kill_r+0x20>)
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	4608      	mov	r0, r1
 800d4b2:	4611      	mov	r1, r2
 800d4b4:	602b      	str	r3, [r5, #0]
 800d4b6:	f7f4 fe13 	bl	80020e0 <_kill>
 800d4ba:	1c43      	adds	r3, r0, #1
 800d4bc:	d102      	bne.n	800d4c4 <_kill_r+0x1c>
 800d4be:	682b      	ldr	r3, [r5, #0]
 800d4c0:	b103      	cbz	r3, 800d4c4 <_kill_r+0x1c>
 800d4c2:	6023      	str	r3, [r4, #0]
 800d4c4:	bd38      	pop	{r3, r4, r5, pc}
 800d4c6:	bf00      	nop
 800d4c8:	20001fe8 	.word	0x20001fe8

0800d4cc <_getpid_r>:
 800d4cc:	f7f4 be00 	b.w	80020d0 <_getpid>

0800d4d0 <sqrtf>:
 800d4d0:	b508      	push	{r3, lr}
 800d4d2:	ed2d 8b02 	vpush	{d8}
 800d4d6:	eeb0 8a40 	vmov.f32	s16, s0
 800d4da:	f000 f817 	bl	800d50c <__ieee754_sqrtf>
 800d4de:	eeb4 8a48 	vcmp.f32	s16, s16
 800d4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e6:	d60c      	bvs.n	800d502 <sqrtf+0x32>
 800d4e8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800d508 <sqrtf+0x38>
 800d4ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f4:	d505      	bpl.n	800d502 <sqrtf+0x32>
 800d4f6:	f7fc fd5b 	bl	8009fb0 <__errno>
 800d4fa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d4fe:	2321      	movs	r3, #33	; 0x21
 800d500:	6003      	str	r3, [r0, #0]
 800d502:	ecbd 8b02 	vpop	{d8}
 800d506:	bd08      	pop	{r3, pc}
 800d508:	00000000 	.word	0x00000000

0800d50c <__ieee754_sqrtf>:
 800d50c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d510:	4770      	bx	lr
	...

0800d514 <_init>:
 800d514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d516:	bf00      	nop
 800d518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d51a:	bc08      	pop	{r3}
 800d51c:	469e      	mov	lr, r3
 800d51e:	4770      	bx	lr

0800d520 <_fini>:
 800d520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d522:	bf00      	nop
 800d524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d526:	bc08      	pop	{r3}
 800d528:	469e      	mov	lr, r3
 800d52a:	4770      	bx	lr
